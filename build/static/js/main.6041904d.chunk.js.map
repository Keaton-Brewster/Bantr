{"version":3,"sources":["utils/ViewportProvider.js","utils/UserProvider.js","utils/API.js","utils/useLocalStorage.js","utils/ConversationProvider.js","utils/ContactProvider.js","utils/useContactSorting.jsx","utils/UIProvider.js","utils/Theme/global.js","utils/Theme/ThemeProvider.js","Comps/Menu/LGItem/index.jsx","Comps/UserCards/UserCardSM.jsx","Comps/MainContent/Messaging/TopMenu/ConversationName.jsx","Comps/MainContent/Messaging/TopMenu/ConversationInfoButton.jsx","Comps/MainContent/Messaging/TopMenu/BackButton.jsx","Comps/MainContent/Messaging/TopMenu/MessagesTopMenu.jsx","Comps/MainContent/Messaging/ConversationInfoScreen.jsx","Comps/MainContent/NoContent.jsx","Comps/MainContent/Contacts/ContactTopMenu.jsx","Comps/Modals/ConfirmContactRemoval_Modal.jsx","Comps/Inputs/TextInputBox.jsx","Comps/Modals/NewMessage/NewMessageModal.jsx","Comps/MainContent/Contacts/index.jsx","Comps/Inputs/ChatInput.jsx","Comps/MainContent/Messaging/MessageContextMenu.jsx","Comps/MainContent/Messaging/SingleMessage.jsx","Comps/MainContent/Messaging/index.jsx","Comps/MainContent/index.jsx","Comps/Menu/MenuBar.jsx","Comps/Modals/NewConversation/Recipient.jsx","Comps/Inputs/SearchBox.jsx","Comps/Modals/NewConversation/NewConversationModal.jsx","Comps/Menu/Conversations/NewMessageBTN.jsx","Comps/Modals/DeleteConversationModal/index.jsx","Comps/Menu/Conversations/DeleteConvoBtn.jsx","Comps/Menu/Conversations/ConversationMap.jsx","Comps/Menu/Conversations/IndividualConversation.jsx","Comps/Menu/Conversations/SearchResultsMap.jsx","Comps/Menu/Conversations/index.jsx","Comps/Modals/NewContactModal.jsx","Comps/Menu/Contacts.jsx","firebase.js","Comps/Menu/Settings.jsx","Comps/Menu/index.jsx","Comps/Dashboard.jsx","Comps/Header/index.jsx","Comps/Login.jsx","Comps/Home.jsx","Comps/Signup.jsx","App.js","index.js"],"names":["viewportContext","createContext","useViewport","useContext","ViewportProvider","children","useState","window","innerWidth","width","setWidth","innerHeight","height","setHeight","bottomOfMessages","useRef","useEffect","handleWindowResize","addEventListener","removeEventListener","value","isMobile","scrollToBottomMessages","current","scrollIntoView","Provider","UserContext","useUserContext","UserProvider","user","setUser","JSON","parse","API","signup","userInfoObject","callback","error","axios","post","catch","err","res","data","login","loginObject","email","id","googleId","status","getContacts","id_array","put","getConversations","user_id","proceed","get","addContact","phoneNum","sendMessage","message_info","conversation","startOrGoTOConversation","created","alreadyExists","hideConversation","conversation_id","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","setValue","setItem","stringify","conversationContext","React","useConversations","ConversationProvider","conversations","setConversations","selectedConversation_id","setSelectedConversation_id","pendingText","setPendingText","convoStateReady","setConvoStateReady","updateConversation","useCallback","updatedConversation","updatedConversations","map","_id","string","sender_id","content","find","convo","console","loadConversations","sendPendingText","formattedConversations","sort","a","b","updated_at","formattedMessages","messages","message","fromMe","length","selectedConversation","setConversationFromContact","Promise","resolve","reject","convo_id","members","includes","findConversationByUserID","addNewConversation","newConversation","writeConversationName","recipients","names","forEach","index","push","givenName","familyName","join","toString","startOrGoToConversation","started","goTo","mem","name","existingConversation","contactContext","useContactContext","ContactProvider","searchValue","setSearchValue","contacts","setContacts","searchedContacts","setSearchedContacts","filter","contact","toLowerCase","useContactSorting","selectedContact","setSelectedContact","cb","getContactInformation","allContacts","sorted","sortContacts","UIContext","useUIContext","UIProvider","contentState","setContentState","menu","mainContent","display","setDisplay","storedActiveContent","activeContent","setActiveContent","storedActiveMenu","activeMenu","setActiveMenu","createGlobalStyle","theme","body","text","LGActive","themeContext","_ThemeProvider","lightTheme","topMenuBackground","gradient","span","border","danger","darkTheme","setTheme","themeName","setThemeName","styled","className","onClick","style","BGTransition","Row","Image","src","photoURL","roundedCircle","fluid","Nav","Item","paddingLeft","containerRef","menuBarWidth","setMenuBarWidth","handleBackButton","conversationInfo","setTimeout","offsetWidth","BackButton","ConversationName","ConversationInfoButton","convoInfo","setConvoInfo","editingConvoName","setEditingConvoName","loading","setLoading","editConvoNameInput","conversationInformation","event","preventDefault","newName","response","getConversationInformation","Spinner","animation","role","ListGroup","variant","ref","document","getElementById","focus","UserCardSM","NoContent","ContactsTopMenu","setContactRemovalModal","showNewMessageModal","DropdownButton","align","lg","title","Dropdown","log","ConfirmContactRemovalModal","show","hide","Modal","onHide","centered","backdrop","keyboard","Header","closeButton","Title","Body","Button","Footer","_TextInputBox","forwardRef","handleInputChange","contentEditable","onInput","onBlur","NewMessageModal","messageSubmit","currentInput","setCurrentInput","textRef","testForCMD","activeElement","metaKey","TextInputBox","e","innerText","Contacts","conversationAdded","setConversationAdded","newConversation_id","setNewConversation_id","contactRemovalModalVisible","setContactRemovalModalVisible","newMessageModalVisible","setNewMessageModalVisible","goToConversation","marginLeft","thumbnail","then","chatboxWidth","setChatboxWidth","emojiPickerShow","setEmojiPickerShow","textContent","blur","Col","xs","MessageContextMenu","handleRightClick","thisElement","senderName","Messages","isLoading","setIsLoading","contextMenuShow","setContextMenuShow","element","dismissContextMenu","scrollTop","i","sm","overflow","ConversationInfoScreen","MenuBar","menubarWidth","setMenubarWidth","handleMenuChange","menuSelection","Link","settings","Recipient","userInfo","removeRecipient","Badge","pill","bg","SearchBox","fixed","NewConversationModal","setNewConversationRecipients","setRecipients","searchRef","recipient","selectContact","styledComp","targetIndex","backgroundColor","withTheme","setDelConvoModalShow","DeleteConvoModalContext","handleDeleteClick","stopPropagation","offset","position","setPosition","slideCloseOnclick","target","dataset","right","slice","setOffset","setTargetIndex","delConvoModalShow","slideConvo","direction","handleTouchMove","wheelDeltaX","wheelDeltaY","results","result","convoId","convoName","newConvoModalVisible","setNewConvoModalVisible","newConversationRecipients","searchResults","setSearchResults","trim","NewContactModal","setPhoneNum","buttonDisabled","setButtonDisabled","undefined","replace","match","country","defaultCountry","placeholder","onChange","disabled","newContactModal","setNewContactModal","alert","updatedUser","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","getAnalytics","GoogleAuthProvider","auth","getAuth","Settings","signOut","location","href","isLightMode","checked","size","Sidebar","Dashboard","removeItem","Container","marginRight","paddingRight","Navbar","expand","Login","Form","clientId","buttonText","onSuccess","profileObj","storableUser","onFailure","cookiePolicy","Home","formWidth","setFormWidth","setphoneNUM","setGivenName","setFamilyName","givenNameRef","familyNameRef","type","uid","newUser","stringifiedUser","handleSignup","setPersistence","inMemoryPersistence","signInWithPopup","code","App","checkForESC","exact","path","ReactDOM","render"],"mappings":"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","file":"static/js/main.6041904d.chunk.js","sourcesContent":["import { useState, useEffect, createContext, useContext, useRef } from \"react\";\nimport { isMobile } from \"react-device-detect\";\n\nconst viewportContext = createContext();\n\nexport function useViewport() {\n  return useContext(viewportContext);\n}\n\nexport default function ViewportProvider({ children }) {\n  const [width, setWidth] = useState(window.innerWidth);\n  const [height, setHeight] = useState(window.innerHeight);\n\n  const bottomOfMessages = useRef();\n\n  // Setting up this function in the vieport provider\n  // So that we can call it from other events\n  function scrollToBottomMessages() {\n    bottomOfMessages.current?.scrollIntoView();\n  }\n\n  // This is just the hook that sets width on window resize\n  useEffect(() => {\n    const handleWindowResize = () => {\n      setWidth(window.innerWidth);\n      setHeight(window.innerHeight);\n    };\n    window.addEventListener(\"resize\", handleWindowResize);\n    return () => window.removeEventListener(\"resize\", handleWindowResize);\n  }, []);\n\n  const value = {\n    width,\n    height,\n    isMobile,\n    bottomOfMessages,\n    scrollToBottomMessages,\n  };\n\n  return (\n    <viewportContext.Provider value={value}>\n      {children}\n    </viewportContext.Provider>\n  );\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { createContext, useContext, useEffect } from \"react\";\n\nconst UserContext = createContext();\n\nexport function useUserContext() {\n  return useContext(UserContext);\n}\n\nexport default function UserProvider({ user, setUser, children }) {\n  const value = {\n    user,\n    setUser,\n  };\n\n  useEffect(() => {\n    // For some reason, the user useLocalStorage hook fails to return a parsed version. \n    // So i am running a double check here. Hopefully this doesn't cause future issues..\n    if (typeof user === \"string\") setUser(JSON.parse(user));\n  }, [user]);\n\n  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;\n}\n","import axios from \"axios\";\n\nconst API = {\n  async signup(userInfoObject, callback, error) {\n    const res = await axios\n      .post(\"http://localhost:3001/api/users/signup\", userInfoObject)\n      .catch((err) => error(err));\n    if (res.data.error) return error(res);\n    else return callback(res.data);\n  },\n\n  async login(loginObject, callback, error) {\n    const res = await axios\n      .post(\"http://localhost:3001/api/users/login\", {\n        email: loginObject.email,\n        id: loginObject.googleId,\n      })\n      .catch((err) => error(err));\n    if (res?.status === 200 && res.data) return callback(res.data);\n    else return error(res);\n  },\n\n  async getContacts(id_array, callback, error) {\n    const res = await axios\n      .put(`http://localhost:3001/api/users/getContacts`, {\n        id_array,\n      })\n      .catch((err) => error(err));\n    if (res?.status === 200) return callback(res.data);\n    else return error(res);\n  },\n\n  async getConversations(user_id, proceed, error) {\n    const res = await axios.get(\n      `http://localhost:3001/api/conversations/${user_id}`\n    );\n    if (res?.status === 200) return proceed(res.data);\n    else return error(res);\n  },\n\n  async addContact(user_id, phoneNum, callback, error) {\n    const res = await axios\n      .post(`http://localhost:3001/api/users/addContact`, {\n        phoneNum,\n        user_id,\n      })\n      .catch((err) => error(err));\n    if (res.status === 200) return callback(res.data);\n    else if (res.status === 304) return error(304);\n    else return error(res);\n  },\n\n  async sendMessage(message_info, conversation, proceed, error) {\n    const res = await axios\n      .put(\"/api/conversations/newMessage\", {\n        message_info,\n        conversation,\n      })\n      .catch((err) => error(err));\n    if (res.status === 200) return proceed(res.data);\n    else return error(res);\n  },\n\n  async startOrGoTOConversation(conversation, created, alreadyExists, error) {\n    const res = await axios\n      .post(\n        \"http://localhost:3001/api/conversations/newConversation\",\n        conversation\n      )\n      .catch((err) => error(err));\n    if (res.status === 200) return created(res.data);\n    else if (res.status === 202) return alreadyExists(res.data);\n    else return error(res);\n  },\n\n  async hideConversation(conversation_id, user_id, callback, error) {\n    //! For now I am going to have to pause on this.\n    //! I am probably going to have to totally rethink the way that I\n    //! am creating and storing messages and conversations.\n    //! I should have done all of this work as a part of planning, but here we are!\n    // const res = await axios\n    //   .put(\"http://localhost:3001/api/conversations/hideConversation\", {\n    //     user_id,\n    //     conversation_id,\n    //   })\n    //   .catch((e) => error(e));\n    // if (res.status === 200) return callback(res.data);\n    // else return error(res);\n  },\n  //* This method was not suitable for the purpose I originally meant it\n  //* I may come back later and repurpose it, so for now I am only\n  //* going to comment it out\n\n  // async getContact(_id, callback, error) {\n  //   const res = await axios\n  //     .get(`http://localhost:3001/api/users/${_id}`)\n  //     .catch((err) => error(err));\n  //   if (res.status === 200) return callback(res.data);\n  //   else return error(res);\n  // },\n};\nexport default API;\n","import { useEffect, useState } from \"react\";\n\nconst PREFIX = \"CHAT_v1.0.0__\";\n\nexport default function useLocalStorage(key, initialValue) {\n  const prefixedKey = PREFIX + key;\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey);\n\n    if (typeof jsonValue === \"string\") return JSON.parse(jsonValue);\n    if (typeof initialValue === \"function\") {\n      return initialValue();\n    } else {\n      return initialValue;\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\n  }, [prefixedKey, value]);\n\n  // For some reason JSON.parse is not working properly inside\n  // The useEffect. No idea what is going on or why\n  return [value, setValue];\n}\n","import React, { useContext, useEffect, useState, useCallback } from \"react\";\nimport { useUserContext } from \"../utils/UserProvider\";\nimport API from \"./API\";\nimport useLocalStorage from \"./useLocalStorage\";\n\nconst conversationContext = React.createContext();\n\nexport function useConversations() {\n  return useContext(conversationContext);\n}\n\n//================================================================================\n//* COMPONENT\n//================================================================================\nexport default function ConversationProvider({ children }) {\n  //================================================================================\n  //* STATE\n  //================================================================================\n  const { user } = useUserContext();\n  //! I need to find a new way to select conversations\n  //! Because I want them to be ordered by off of their 'updated_at'\n  //! Value, I need a way to maintain selected conversation when the\n  //! order of the conversation array changes\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation_id, setSelectedConversation_id] = useLocalStorage(\n    \"last_selected_convo\",\n    0\n  );\n  const [pendingText, setPendingText] = useState(null);\n  const [convoStateReady, setConvoStateReady] = useState(false);\n\n  //================================================================================\n  //* FUNCTIONS\n  //================================================================================\n  const updateConversation = useCallback(\n    (updatedConversation) => {\n      const updatedConversations = conversations.map((conversation) => {\n        if (conversation._id === updatedConversation._id)\n          return updatedConversation;\n        return conversation;\n      });\n      setConversations(updatedConversations);\n    },\n    [conversations]\n  );\n\n  const sendMessage = useCallback(\n    (string) => {\n      const message_info = {\n        sender_id: user._id,\n        content: string,\n      };\n\n      API.sendMessage(\n        message_info,\n        conversations.find((convo) => convo._id === selectedConversation_id),\n        (updatedConversation) => {\n          updateConversation(updatedConversation);\n          setSelectedConversation_id(updatedConversation._id);\n        },\n        (error) => {\n          console.error(error);\n        }\n      );\n    },\n    [\n      conversations,\n      selectedConversation_id,\n      setSelectedConversation_id,\n      updateConversation,\n      user._id,\n    ]\n  );\n\n  function findConversationByUserID(_id) {\n    return conversations.find(\n      (convo) => convo.members.includes(_id) && convo.members.length === 2\n    );\n  }\n\n  function setConversationFromContact(_id) {\n    return new Promise((resolve, reject) => {\n      try {\n        const convo_id = findConversationByUserID(_id);\n        setSelectedConversation_id(convo_id);\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  const loadConversations = useCallback(\n    (callback) => {\n      API.getConversations(\n        user._id,\n        (conversations) => callback(conversations),\n        (error) =>\n          console.error(\"conversationProvider.js:loadConversation():: \", error)\n      );\n    },\n    [user._id]\n  );\n\n  function addNewConversation(newConversation) {\n    return new Promise((resolve, reject) => {\n      try {\n        setConversations([...conversations, newConversation]);\n        resolve();\n      } catch (error) {\n        reject(\n          \"ConversationProvider::addNewConversation():: Promise Rejected\",\n          error\n        );\n      }\n    });\n  }\n\n  const sendPendingText = useCallback(() => {\n    sendMessage(pendingText);\n    setPendingText(null);\n  }, [pendingText, sendMessage]);\n\n  //================================================================================\n  //* VARIABLE(S) FOR VALUE\n  //================================================================================\n  const formattedConversations = conversations\n    .sort((a, b) => {\n      if (a.updated_at < b.updated_at) {\n        return 1;\n      }\n      if (a.updated_at > b.updated_at) {\n        return -1;\n      }\n      return 0;\n    })\n    .map((conversation) => {\n      const formattedMessages = conversation.messages.map((message) => {\n        message.fromMe = message.sender_id === user._id;\n        return message;\n      });\n      conversation.messages = formattedMessages;\n      return conversation;\n    });\n\n  //================================================================================\n  //* EFFECTS\n  //================================================================================\n  useEffect(() => {\n    if (!user) return;\n    loadConversations((conversations) => {\n      setConversations(conversations);\n      if (selectedConversation_id === 0 && conversations.length > 0)\n        setSelectedConversation_id(conversations[0]._id);\n    });\n  }, [\n    user,\n    loadConversations,\n    selectedConversation_id,\n    setSelectedConversation_id,\n  ]);\n\n  useEffect(() => {\n    // This effect handles the state delay that occurs when sending a message from the\n    // Contact screen and the transitioning to the conversation screen.\n    if (!pendingText || !convoStateReady) return;\n    sendPendingText();\n    setConvoStateReady(false);\n  }, [pendingText, convoStateReady, sendPendingText]);\n\n  // if user signs out or is lost from local storage for any reason\n  // reset the local storage state of selected conversation\n  useEffect(() => {\n    if (user === 0) return setSelectedConversation_id(0);\n    else return;\n  }, [setSelectedConversation_id, user]);\n\n  //================================================================================\n  //* PROVIDER VALUE\n  //================================================================================\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: conversations.find(\n      (convo) => convo._id === selectedConversation_id\n    ),\n    sendMessage,\n    setSelectedConversation_id,\n    updateConversation,\n    setConversationFromContact,\n    setPendingText,\n    addNewConversation,\n    setConvoStateReady,\n  };\n\n  //================================================================================\n  //* RENDER\n  //================================================================================\n  return (\n    <conversationContext.Provider value={value}>\n      {children}\n    </conversationContext.Provider>\n  );\n}\n//================================================================================\n//* OTHER FUNCTIONS\n//================================================================================\n// Helper function for stertOrGoToConversation()\nfunction writeConversationName(recipients) {\n  let names = [];\n  recipients.forEach((user, index) => {\n    if (recipients.length - 1 === index)\n      names.push(`${user.givenName} ${user.familyName}`);\n    else names.push(`${user.givenName} ${user.familyName},`);\n  });\n  return names.join(\" \").toString();\n}\n\n// For anywhere in the app that you can \"start a conversation\"\n// Which as of now, is from conversation menu and contacts\nexport function startOrGoToConversation(members, started, goTo) {\n  API.startOrGoTOConversation(\n    {\n      members: members.map((mem) => mem._id),\n      name: writeConversationName(members),\n    },\n    (newConversation) => started(newConversation),\n    (existingConversation) => goTo(existingConversation),\n    (error) =>\n      console.error(\"conversations.jsx:startOrGoToConversation():: \", error)\n  );\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState, createContext, useContext } from \"react\";\nimport API from \"./API\";\nimport { useUserContext } from \"../utils/UserProvider\";\nimport useContactSorting from \"./useContactSorting\";\n\nconst contactContext = createContext();\n\nexport function useContactContext() {\n  return useContext(contactContext);\n}\n\nexport default function ContactProvider({ children }) {\n  //STATE\n  //================================================================================\n  const { user, setUser } = useUserContext();\n  // const [contacts, setContacts] = useState();\n  const [searchValue, setSearchValue] = useState(null);\n  const [contacts, setContacts] = useContactSorting(searchValue);\n  const [selectedContact, setSelectedContact] = useState();\n\n  //FUNCTIONS\n  //================================================================================\n  function sortContacts(contacts) {\n    return contacts.sort((a, b) => {\n      if (a.familyName < b.familyName) {\n        return -1;\n      }\n      if (a.familyName > b.familyName) {\n        return 1;\n      }\n      return 0;\n    });\n  }\n\n  function getContactInformation(cb) {\n    const id_array = user.contacts;\n    API.getContacts(\n      id_array,\n      (contacts) => {\n        cb(contacts);\n      },\n      (err) => {\n        console.error(err);\n      }\n    );\n  }\n\n  //EFFECTS\n  //================================================================================\n  useEffect(() => {\n    getContactInformation((allContacts) => {\n      const sorted = sortContacts(allContacts);\n      setContacts(sorted);\n    });\n  }, [contacts]);\n\n  //PROVIDER VALUES\n  //================================================================================\n  const value = {\n    contacts: contacts,\n    setContacts: setContacts,\n    selectedContact,\n    setSelectedContact,\n    setUser,\n    setSearchValue,\n  };\n\n  //COMPONENT\n  //================================================================================\n  return (\n    <contactContext.Provider value={value}>{children}</contactContext.Provider>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nexport default function useContactSorting(searchValue) {\n  //STATE\n  //================================================================================\n  const [contacts, setContacts] = useState();\n  const [searchedContacts, setSearchedContacts] = useState(null);\n\n  //EFFECTS\n  //================================================================================\n  useEffect(() => {\n    if (!searchValue) return setSearchedContacts(null);\n    setSearchedContacts(() => {\n      return contacts.filter((contact) => {\n        const fullName =\n          contact.givenName.toLowerCase() + contact.familyName.toLowerCase();\n        return fullName.includes(searchValue.toLowerCase());\n      });\n    });\n  }, [contacts, searchValue]);\n\n  //RETURN\n  //================================================================================\n  if (!searchedContacts) return [contacts, setContacts];\n  else return [searchedContacts, setContacts];\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState, createContext, useContext } from \"react\";\nimport { isMobile } from \"react-device-detect\";\nimport { useViewport } from \"./ViewportProvider\";\nimport useLocalStorage from \"./useLocalStorage\";\nimport { useUserContext } from \"./UserProvider\";\n\nconst UIContext = createContext();\n\nexport function useUIContext() {\n  return useContext(UIContext);\n}\n\nexport default function UIProvider({ children }) {\n  //================================================================================\n  //* STATE\n  //================================================================================\n  const { user } = useUserContext();\n  const { width, height } = useViewport();\n  const [contentState, setContentState] = useLocalStorage(\n    \"content_state\",\n    \"default\"\n  );\n\n  // I just had what I think might be the best way to handle contect state management.\n  // USE LOCAL STORAGE YOU DUMMY. You need to be able to keep track of what is going on for the user, what converstaion theyre on,\n  // what page theyre on, etc, and what better way to get around this than by using local storage.\n\n  const [display, setDisplay] = useState(() => {\n    if (isMobile) return { menu: true, mainContent: false };\n    return { menu: true, mainContent: true };\n  });\n\n  const [activeContent, setActiveContent] = useState(\n    contentState === \"default\"\n      ? { conversations: true }\n      : contentState.storedActiveContent\n  );\n\n  const [activeMenu, setActiveMenu] = useState(\n    contentState === \"default\"\n      ? { conversations: true }\n      : contentState.storedActiveMenu\n  );\n\n  //================================================================================\n  //* EFFECTS\n  //================================================================================\n  // This handles the changes between mobile layout and desktop layout\n  useEffect(() => {\n    const { menu, mainContent } = display;\n\n    if (!isMobile && (!menu || !mainContent)) {\n      return setDisplay({\n        menu: true,\n        mainContent: true,\n      });\n    }\n    if (isMobile && menu && mainContent) {\n      return setDisplay({\n        menu: true,\n        mainContent: false,\n      });\n    }\n  }, [width, height]);\n\n  // update the local storage with the current menu state and such\n  useEffect(() => {\n    setContentState({\n      storedActiveContent: activeContent,\n      storedActiveMenu: activeMenu,\n    });\n  }, [activeContent, activeMenu]);\n\n  // if the user signs out, or is lost from local storage for any reason, reset\n  // local storage value\n  useEffect(() => {\n    if (user === 0) return setContentState(\"default\");\n    else return;\n  }, [user]);\n\n  //================================================================================\n  //* VALUE FOR PROVIDER\n  //================================================================================\n  const value = {\n    activeContent,\n    setActiveContent,\n    activeMenu,\n    setActiveMenu,\n    display,\n    setDisplay,\n  };\n\n  //================================================================================\n  //* RENDER\n  //================================================================================\n  return <UIContext.Provider value={value}>{children}</UIContext.Provider>;\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport default createGlobalStyle`\n  :root {\n    --main-background: ${({ theme }) => theme.body};\n    --main-text-color: ${({ theme }) => theme.text};;\n    --active: ${({ theme }) => theme.LGActive}\n  }`;\n","import { useEffect, createContext, useContext, useState } from \"react\";\nimport useLocalStorage from \"../useLocalStorage\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport GlobalStyles from \"./global\";\n\nconst themeContext = createContext();\n\nexport const useThemes = () => {\n  return useContext(themeContext);\n};\n\nexport default function _ThemeProvider({ children }) {\n  //VARIABLES\n  //================================================================================\n  const lightTheme = {\n    name: \"light\",\n    body: \"#fefffb\",\n    text: \"#232425\",\n    topMenuBackground: \"#6eaaff\",\n    gradient: \"linear-gradient(#39598A, #79D7ED)\",\n    span: \"#777 !important\",\n    LGActive: \"#6eaaff\",\n    border: \"#ddd\",\n    danger: \"#b00400\",\n  };\n\n  const darkTheme = {\n    name: \"dark\",\n    body: \"#232425\",\n    text: \"#fefffb\",\n    topMenuBackground: \"#173e62\",\n    gradient: \"linear-gradient(#091236, #1E215D)\",\n    span: \"#b3b3b3 !important\",\n    LGActive: \"#296eae\",\n    border: \"#333\",\n    danger: \"#b00400\",\n  };\n\n  const [theme, setTheme] = useLocalStorage(\"theme\", lightTheme);\n  const [themeName, setThemeName] = useState(theme);\n\n  //EFFECT\n  //================================================================================\n  useEffect(() => {\n    if (themeName === \"light\") setTheme(lightTheme);\n    if (themeName === \"dark\") setTheme(darkTheme);\n    else return;\n  }, [themeName, setTheme]);\n\n  //COMPONENT\n  //================================================================================\n  return (\n    <themeContext.Provider value={[theme, setThemeName]}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyles theme={theme} />\n        {children}\n      </ThemeProvider>\n    </themeContext.Provider>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nfunction LGItem({ className, children, onClick, style, index }) {\n  return (\n    <ul\n      className={className}\n      onClick={onClick}\n      style={style ? style : {}}\n      data-index={index}\n    >\n      {children}\n    </ul>\n  );\n}\n\nexport default styled(LGItem)`\n  transition: ${({ BGTransition }) =>\n    BGTransition ? \"background 0.5s ease\" : \"background 0s linear !important\"};\n  padding: 1rem;\n  background-color: ${({ theme }) => theme.body};\n  margin-bottom: 0px;\n  :hover,\n  :hover > #addButton {\n    cursor: pointer;\n  }\n  > * {\n    color: inherit;\n    background: none;\n  }\n  > span {\n    color: ${({ theme }) => theme.span};\n  }\n`;\n","import { ListGroupItem as Item, Image, Row } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nimport \"./index.sass\";\n\nfunction _UserCardSM({ user, className }) {\n  return (\n    <Item className={className}>\n      <Row className=\"align-content-center\">\n        <Image\n          src={user.photoURL}\n          roundedCircle\n          fluid\n          className=\"profilePicture\"\n        />\n        <p>{`${user.givenName} ${user.familyName}`}</p>\n      </Row>\n    </Item>\n  );\n}\n\nexport default styled(_UserCardSM)`\n  background-color: ${({ theme }) => theme.body};\n`;\n","import React from \"react\";\n\nimport styled from \"styled-components\";\n\nimport { Nav } from \"react-bootstrap\";\nimport { useConversations } from \"../../../../utils/ConversationProvider\";\n\nfunction _ConversationName({ className, isMobile, activeContent }) {\n  //STATE\n  //================================================================================\n  const { selectedConversation } = useConversations();\n\n  //COMPONENT\n  //================================================================================\n  return (\n    <Nav.Item\n      className={className}\n      id=\"conversationName\"\n      style={{\n        paddingLeft: `${\n          !isMobile && activeContent.conversations ? \"30px\" : \"\"\n        }`,\n      }}\n    >\n      {selectedConversation.name || \"Untitled Conversation\"}\n    </Nav.Item>\n  );\n}\n\nexport default styled(_ConversationName)`\n  background-color: ${({ theme }) => theme.topMenuBackground};\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { BsThreeDotsVertical } from \"react-icons/bs\";\nimport { Nav } from \"react-bootstrap\";\nimport \"./conversationInfoButton.sass\";\n\nfunction _ConversationInfoButton({ className, onClick }) {\n  return (\n    <Nav.Item className={className} onClick={onClick}>\n      <BsThreeDotsVertical id=\"conversationInfoButton\" />\n    </Nav.Item>\n  );\n}\n\nexport default styled(_ConversationInfoButton)`\n  background-color: ${({ theme }) => theme.topMenuBackground};\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Nav } from \"react-bootstrap\";\nimport { FaArrowLeft } from \"react-icons/fa\";\nimport \"./backButton.sass\";\n\nfunction _BackButton({ className, onClick }) {\n  return (\n    <Nav.Item className={className} onClick={onClick}>\n      <FaArrowLeft className=\"backButton\" />\n    </Nav.Item>\n  );\n}\n\nexport default styled(_BackButton)`\n  background-color: ${({ theme }) => theme.topMenuBackground};\n`;\n","import { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Nav } from \"react-bootstrap\";\nimport { useUIContext } from \"../../../../utils/UIProvider\";\nimport { useViewport } from \"../../../../utils/ViewportProvider\";\nimport ConversationName from \"./ConversationName\";\nimport ConversationInfoButton from \"./ConversationInfoButton\";\nimport BackButton from \"./BackButton\";\n\nfunction MessagesTopMenu({ className, containerRef }) {\n  //STATE\n  //================================================================================\n  const [menuBarWidth, setMenuBarWidth] = useState(\"100%\");\n  const { width, isMobile } = useViewport();\n  const { activeContent, setActiveContent, setDisplay } = useUIContext();\n\n  //FUNCTIONS\n  //================================================================================\n  function openConversationInfo() {\n    if (activeContent.conversationInfo) return handleBackButton();\n    setActiveContent({\n      conversationInfo: true,\n    });\n  }\n\n  // To make the back button multipurpose, simply switch case the state of the current display\n  // And then act accordingly\n  function handleBackButton() {\n    if (isMobile && !activeContent.conversationInfo)\n      return setDisplay({\n        menu: true,\n        mainContent: false,\n      });\n\n    setActiveContent({ conversations: true });\n    // Set timeout to allow convo info animtaion to take it offscreen before messages come back\n    setActiveContent({ conversationInfo: false });\n    setTimeout(() => {\n      setActiveContent({ conversations: true });\n    }, 590);\n  }\n\n  //EFFECTS\n  //================================================================================\n  useEffect(() => {\n    return setMenuBarWidth(`${containerRef.current.offsetWidth}px`);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [width]);\n\n  //COMPONENT\n  //================================================================================\n  return (\n    <Nav\n      className={`${className} 'flex-row justify-content-center'`}\n      style={{ width: menuBarWidth }}\n    >\n      <>\n        {isMobile || !activeContent.conversations ? (\n          <BackButton\n            isMobile={isMobile}\n            onClick={handleBackButton}\n            activeContent={activeContent}\n          />\n        ) : null}{\" \"}\n      </>\n      <ConversationName isMobile={isMobile} activeContent={activeContent} />\n      <ConversationInfoButton onClick={openConversationInfo} />\n    </Nav>\n  );\n}\n\nexport default styled(MessagesTopMenu)`\n  background-color: ${({ theme }) => theme.topMenuBackground};\n  position: fixed;\n  top: 0px;\n  padding: 10px;\n  z-index: 20;\n`;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Spinner, ListGroup } from \"react-bootstrap\";\nimport { FiEdit } from \"react-icons/fi\";\nimport { BiSave } from \"react-icons/bi\";\nimport { useConversations } from \"../../../utils/ConversationProvider\";\n\nimport LGItem from \"../../Menu/LGItem\";\nimport UserCardSM from \"../../UserCards/UserCardSM\";\nimport axios from \"axios\";\nimport MessagesTopMenu from \"./TopMenu/MessagesTopMenu\";\n\nfunction _ConversationInfoScreen({ containerRef }) {\n  //STATE\n  //================================================================================\n  const { selectedConversation, updateConversation } = useConversations();\n  const [convoInfo, setConvoInfo] = useState();\n  const [editingConvoName, setEditingConvoName] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const editConvoNameInput = useRef();\n\n  //FUNCTIONS\n  //================================================================================\n  async function getConversationInformation() {\n    const conversationInformation = await axios.get(\n      `http://localhost:3001/api/conversations/getInfo/${selectedConversation._id}`\n    );\n    setConvoInfo(conversationInformation.data);\n    setLoading(false);\n  }\n\n  function editConvoName(event) {\n    event.preventDefault();\n    setEditingConvoName(true);\n    // Have to just make sure that the input has time to render\n    // Sincei it is rendered conditionally, and we need to reference it.\n    setTimeout(() => {\n      editConvoNameInput.current.value = `${\n        selectedConversation.name || \"Untitled Conversation\"\n      }`;\n      document.getElementById(\"editConvoNameInput\").focus();\n    }, 5);\n  }\n\n  async function saveEditedConvoName(event) {\n    event.preventDefault();\n    const updatedConversation = {\n      _id: selectedConversation._id,\n      newName: editConvoNameInput.current.value,\n    };\n    const response = await axios.put(\n      \"http://localhost:3001/api/conversations/updateConvoName/\",\n      updatedConversation\n    );\n    updateConversation(response.data);\n    setEditingConvoName(false);\n  }\n\n  //EFFECTS\n  //================================================================================\n  useEffect(() => {\n    getConversationInformation();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  //COMPONENT\n  //================================================================================\n  if (loading)\n    return (\n      <Spinner animation=\"border\" className=\"absoluteCenter\" role=\"status\" />\n    );\n\n  return (\n    <>\n      <MessagesTopMenu containerRef={containerRef} />\n\n      <div className=\"conversationInfoScreen\">\n        <ListGroup variant=\"flush\">\n          <LGItem>\n            <div className=\"mb-3\">\n              <h4>Group Name</h4>\n              {editingConvoName ? (\n                <input id=\"editConvoNameInput\" ref={editConvoNameInput} />\n              ) : (\n                <span>\n                  {selectedConversation.name || \"Untitled Conversation\"}\n                </span>\n              )}\n              {editingConvoName ? (\n                <BiSave\n                  onClick={saveEditedConvoName}\n                  className=\"float-right ml-auto\"\n                />\n              ) : (\n                <FiEdit\n                  onClick={editConvoName}\n                  className=\"float-right ml-auto\"\n                />\n              )}\n            </div>\n          </LGItem>\n\n          <LGItem>\n            <h4>Members</h4>\n            {convoInfo.map((user, index) => {\n              return <UserCardSM user={user} key={index} />;\n            })}\n          </LGItem>\n        </ListGroup>\n      </div>\n    </>\n  );\n}\n\nexport default styled(_ConversationInfoScreen)`\n  transition: background 0.5s ease;\n`;\n","import React from \"react\";\n\nexport default function NoContent() {\n  return (\n    <div className=\"m-5 p-5 text-center\">\n      Start a new message to get started!\n    </div>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { Nav, Dropdown, DropdownButton } from \"react-bootstrap\";\n\nimport { useUIContext } from \"../../../utils/UIProvider\";\nimport { useContactContext } from \"../../../utils/ContactProvider\";\nimport { useViewport } from \"../../../utils/ViewportProvider\";\n\nexport default function ContactsTopMenu({\n  //PROPS\n  //================================================================================\n  containerRef,\n  setContactRemovalModal,\n  _id,\n  showNewMessageModal,\n}) {\n  //STATE\n  //================================================================================\n  const [menuBarWidth, setMenuBarWidth] = useState(\"100%\");\n  const { width, isMobile } = useViewport();\n  const { selectedContact } = useContactContext();\n  const { activeContent } = useUIContext();\n\n  //FUNCTIONS\n  //================================================================================\n  function removeContact() {\n    console.log(\"ContactTopMenu :: executed removeContact()\");\n    setContactRemovalModal(true);\n    /* \n    Tasks this function needs to perform:\n      Actiave a modal that asks you to confirm the removal of the selected contact\n    */\n  }\n\n  //   function openConversationInfo() {\n  //     if (activeContent.conversationInfo) return handleBackButton();\n  //     setActiveContent({\n  //       conversationInfo: true,\n  //     });\n  //   }\n\n  //! this portion of code is because this Component was copied from another\n  //! Going to leave for now, but it ismostly irrelevant\n  //!======================================================================\n  // To make the back button multipurpose, simply switch case the state of the current display\n  // And then act accordingly\n  //   function handleBackButton() {\n  //     if (isMobile && !activeContent.conversationInfo)\n  //       return setDisplay({\n  //         menu: true,\n  //         mainContent: false,\n  //       });\n\n  //     setActiveContent({ conversations: true });\n  //     // Set timeout to allow convo info animtaion to take it offscreen before messages come back\n  //     setActiveContent({ conversationInfo: false });\n  //     setTimeout(() => {\n  //       setActiveContent({ conversations: true });\n  //     }, 590);\n  //   }\n  //!======================================================================\n\n  //EFFECTS\n  //================================================================================\n  useEffect(() => {\n    return setMenuBarWidth(`${containerRef.current.offsetWidth}px`);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [width]);\n\n  //COMPONENT\n  //================================================================================\n  return selectedContact ? (\n    <Nav\n      id=\"contactTopMenu\"\n      className=\"flex-row justify-content-center\"\n      style={{ width: menuBarWidth }}\n    >\n      {/* {isMobile || !activeContent.conversations ? (\n        <Nav.Item onClick={}>\n          <FaArrowLeft className=\"backButton\" />\n        </Nav.Item>\n      ) : null} */}\n      <Nav.Item\n        id=\"conversationName\"\n        style={{\n          paddingLeft: `${\n            !isMobile && activeContent.conversations ? \"30px\" : \"\"\n          }`,\n        }}\n      >\n        {`${selectedContact.givenName} ${selectedContact.familyName}`}\n      </Nav.Item>\n      <Nav.Item>\n        {/* <BsThreeDotsVertical id=\"conversationInfoButton\" /> */}\n        <DropdownButton align={{ lg: \"start\" }} title=\"\" key=\"secondary\">\n          <Dropdown.Item onClick={showNewMessageModal}>\n            Send Message\n          </Dropdown.Item>\n          <Dropdown.Item onClick={removeContact}>Remove Contact</Dropdown.Item>\n        </DropdownButton>\n      </Nav.Item>\n    </Nav>\n  ) : null;\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport PhoneInput from \"react-phone-number-input\";\n\nexport default function ConfirmContactRemovalModal({ show, hide }) {\n  const removeContact = () => {\n    console.log(\"confirm removal of contact\");\n    /*\n    This will probably not actually be where this function lives,\n    but for now as a proof, I will just make it here\n    */\n  };\n\n  return (\n    <Modal\n      show={show}\n      onHide={hide}\n      centered\n      backdrop=\"static\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      keyboard={false}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          <h4>Are you sure you want to remove this contact?</h4>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Button onClick={removeContact}>Yes</Button>\n        <Button onClick={hide}>No</Button>\n      </Modal.Body>\n      <Modal.Footer></Modal.Footer>\n    </Modal>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst _TextInputBox = React.forwardRef(\n  ({ className, handleInputChange }, ref) => (\n    <span\n      className={`${className} textarea`}\n      role=\"textbox\"\n      contentEditable\n      onInput={handleInputChange}\n      onBlur={handleInputChange}\n      ref={ref}\n    />\n  )\n);\n\nexport default styled(_TextInputBox)`\n    padding: 5px;\n    padding-left: 20px;\n    margin-bottom: 10px;\n    width: 100%;\n    border-radius: 25px;\n    border: 1px solid ${({ theme }) => theme.border};\n    resize: none;\n    &:focus {\n        outline: none\n        box-shadow: 0 0 4px 0px var(--light)\n    };\n    &:empty::before {\n    content: \"New Message\";\n    color: grey;\n    };\n    display: block;\n    overflow: scroll;\n    min-height: 40px;\n    line-height: 20px;\n    max-height: 40vh;\n    `;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { useContactContext } from \"../../../utils/ContactProvider\";\nimport ModalTextInput from \"../../Inputs/ModalTextInput\";\nimport TextInputBox from \"../../Inputs/TextInputBox\";\n\nexport default function NewMessageModal({\n  //PROPS\n  //================================================================================\n  show,\n  hide,\n  messageSubmit,\n}) {\n  //STATE\n  //====================================================================\n  const [currentInput, setCurrentInput] = useState(null);\n  const [emojiPickerShow, setEmojiPickerShow] = useState(false);\n  const textRef = useRef();\n\n  //FUNCTIONS\n  //====================================================================\n\n  function testForCMD(event) {\n    if (document.activeElement !== textRef.current) return;\n    if (!currentInput) return;\n    if (event.key === \"Enter\" && event.metaKey) {\n      messageSubmit(currentInput);\n    }\n  }\n\n  function handleSendButton(event) {\n    event.preventDefault();\n    if (!currentInput) return;\n    messageSubmit(currentInput);\n  }\n\n  function handleInputChange(e) {\n    e.preventDefault();\n    setCurrentInput(textRef.current.innerText);\n  }\n\n  //EFFECTS\n  //====================================================================\n  useEffect(() => {\n    document.addEventListener(\"keydown\", testForCMD, false);\n\n    return () => {\n      document.removeEventListener(\"keydown\", testForCMD, false);\n    };\n  });\n\n  //COMPONENT\n  //====================================================================\n  return (\n    <Modal\n      show={show}\n      onHide={hide}\n      centered\n      backdrop=\"static\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      keyboard={false}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          <h4>New Message</h4>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <TextInputBox ref={textRef} handleInputChange={handleInputChange} />\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"success\" onClick={handleSendButton}>\n          Send\n        </Button>\n        <Button variant=\"danger\" onClick={hide}>\n          Cancel\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n","import { useState, useEffect, useCallback } from \"react\";\nimport { Spinner, ListGroup, Image } from \"react-bootstrap\";\nimport { useContactContext } from \"../../../utils/ContactProvider\";\nimport { useUIContext } from \"../../../utils/UIProvider\";\nimport { useConversations } from \"../../../utils/ConversationProvider\";\nimport { startOrGoToConversation } from \"../../../utils/ConversationProvider\";\nimport { useUserContext } from \"../../../utils/UserProvider\";\nimport API from \"../../../utils/API\";\nimport ContactTopMenu from \"./ContactTopMenu\";\nimport ConfrimContactRemovalModal from \"../../Modals/ConfirmContactRemoval_Modal\";\nimport NewMessageModal from \"../../Modals/NewMessage/NewMessageModal\";\nimport LGItem from \"../../Menu/LGItem\";\nimport \"./contacts.sass\";\n\nexport default function Contacts({ containerRef }) {\n  // STATE\n  //================================================================================\n  const { selectedContact } = useContactContext();\n  const { user } = useUserContext();\n  const {\n    conversations,\n    setPendingText,\n    setSelectedConversation_id,\n    addNewConversation,\n    setConvoStateReady,\n  } = useConversations();\n  const { setActiveContent, setActiveMenu } = useUIContext();\n  const [conversationAdded, setConversationAdded] = useState(false);\n  const [newConversation_id, setNewConversation_id] = useState(null);\n  const [contactRemovalModalVisible, setContactRemovalModalVisible] =\n    useState(false);\n  const [newMessageModalVisible, setNewMessageModalVisible] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // FUNCTIONS\n  //================================================================================\n  const goToConversation = useCallback(() => {\n    setConvoStateReady(true);\n    setNewMessageModalVisible(false);\n    setActiveContent({ conversations: true });\n    setActiveMenu({ conversations: true });\n  }, [setActiveContent, setActiveMenu, setConvoStateReady]);\n\n  // function startOrGoToConversation(started, goTo) {\n  //   API.startOrGoTOConversation(\n  //     {\n  //       members: [user._id, selectedContact._id],\n  //       //! This needs to change. The name should include all group memebrs\n  //       //! and then when the conversation loads for users, their name should\n  //       //! filtered out of the name\n  //       name: `${selectedContact.givenName} ${selectedContact.familyName}`,\n  //     },\n  //     (newConversation) => started(newConversation),\n  //     (existingConversation) => goTo(existingConversation),\n  //     (error) =>\n  //       console.error(\"conversations.jsx:startOrGoToConversation():: \", error)\n  //   );\n  // }\n\n  function messageSubmit(text) {\n    setPendingText(text);\n    const members = [user, selectedContact];\n    startOrGoToConversation(\n      members,\n      (newConversation) => {\n        addNewConversation(newConversation).then(() => {\n          setNewConversation_id(newConversation._id);\n          setConversationAdded(true);\n        });\n      },\n      (existingConversation) => {\n        setSelectedConversation_id(existingConversation._id);\n        goToConversation();\n      }\n    );\n  }\n\n  // EFFECTS\n  //================================================================================\n  useEffect(() => {\n    if (!conversationAdded) return;\n    setSelectedConversation_id(newConversation_id);\n    goToConversation();\n    setNewConversation_id(null);\n    setConversationAdded(false);\n  }, [\n    conversationAdded,\n    conversations,\n    goToConversation,\n    newConversation_id,\n    setSelectedConversation_id,\n  ]);\n\n  // COMPONENT\n  //================================================================================\n  return (\n    <>\n      {selectedContact ? (\n        <>\n          <ContactTopMenu\n            containerRef={containerRef}\n            setContactRemovalModal={setContactRemovalModalVisible}\n            _id={selectedContact._id}\n            showNewMessageModal={() => {\n              setNewMessageModalVisible(true);\n            }}\n          />\n\n          <div className=\"conversationInfoScreen\">\n            <ListGroup variant=\"flush\">\n              <LGItem>\n                <div className=\"mb-3\">\n                  <Image\n                    style={{ width: \"40%\", marginLeft: \"25%\" }}\n                    src={selectedContact.photoURL}\n                    fluid\n                    thumbnail\n                  />\n                </div>\n              </LGItem>\n\n              <LGItem>\n                <h4>Email:</h4>\n                <p\n                  style={{ paddingLeft: \"20px\" }}\n                >{`${selectedContact.email}`}</p>\n              </LGItem>\n            </ListGroup>\n          </div>\n\n          <NewMessageModal\n            show={newMessageModalVisible}\n            hide={() => setNewMessageModalVisible(false)}\n            messageSubmit={messageSubmit}\n          />\n\n          <ConfrimContactRemovalModal\n            show={contactRemovalModalVisible}\n            hide={() => setContactRemovalModalVisible(false)}\n          />\n        </>\n      ) : (\n        // otherwise it will just tell you to select a contact\n        <div className=\"absoluteCenter\">Select A Contact</div>\n      )}\n    </>\n  );\n}\n","import { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { FaArrowUp } from \"react-icons/fa\";\nimport { FaRegSmile } from \"react-icons/fa\";\nimport { useConversations } from \"../../utils/ConversationProvider\";\nimport { useViewport } from \"../../utils/ViewportProvider\";\nimport TextInputBox from \"./TextInputBox\";\n// import ImageUploading from \"react-images-uploading\";\n// import Picker from \"emoji-picker-react\";\n\nfunction ChatInput({ className, containerRef }) {\n  //STATE\n  //================================================================================\n  const [currentInput, setCurrentInput] = useState(null);\n  const { sendMessage } = useConversations();\n  const { width, scrollToBottomMessages } = useViewport();\n  const [chatboxWidth, setChatboxWidth] = useState(\"100%\");\n  const [emojiPickerShow, setEmojiPickerShow] = useState(false);\n  // const [images, setImages] = useState([]);\n  const textRef = useRef();\n\n  //FUNCTIONS\n  //================================================================================\n  function messageSubmit(event) {\n    event.preventDefault();\n    if (!currentInput) return;\n    setEmojiPickerShow(false);\n    scrollToBottomMessages();\n    sendMessage(currentInput);\n    setCurrentInput(null);\n    textRef.current.textContent = \"\";\n\n    // On desktop this is effective, but I may want to adjust this when it comes to mobile interaction\n    document.activeElement.blur();\n  }\n\n  function handleInputChange(event) {\n    event.preventDefault();\n    setCurrentInput(textRef.current.innerText);\n  }\n\n  function toggleEmojiMenu(event) {\n    event.preventDefault();\n    setEmojiPickerShow(!emojiPickerShow);\n  }\n\n  // function addEmoji(event, emojiData) {\n  //   event.preventDefault();\n  //   const messagePlusEmoji = `${textRef.current.value} ${emojiData.emoji}`;\n  //   setCurrentInput(messagePlusEmoji);\n  //   textRef.current.value = messagePlusEmoji;\n  // }\n\n  function testForCMD(event) {\n    if (document.activeElement !== textRef.current) return;\n    if (!currentInput) return;\n    if (event.key === \"Enter\" && event.metaKey) {\n      messageSubmit(event);\n    }\n  }\n\n  // function handleImageLoaderChange(imageList, addUpdateIndex) {\n  //   console.log(imageList, addUpdateIndex);\n  //   setImages(imageList);\n  // }\n\n  //EFFECTS\n  //================================================================================\n  useEffect(() => {\n    if (width >= 680) setChatboxWidth(`${containerRef.current.offsetWidth}px`);\n    else setChatboxWidth(\"100%\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [width]);\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", testForCMD, false);\n\n    return () => {\n      document.removeEventListener(\"keydown\", testForCMD, false);\n    };\n  });\n\n  //COMPONENT\n  //================================================================================\n  return (\n    /*  At some point in time it would be good to re visit this so that you can do CMD+Enter and have the message send. \n        Obviously this would only work for computers, but it would be a good basic function to have */\n    <div id=\"chatBox\" style={{ width: chatboxWidth }} className={className}>\n      <Row>\n        <div className={`${emojiPickerShow ? \"show\" : \"hide\"}`}>\n          {/* <Picker\n            disableSkinTonePicker={true}\n            onEmojiClick={addEmoji}\n            pickerStyle={{ width: \"100%\" }}\n          /> */}\n        </div>\n      </Row>\n      <Row>\n        {\n          //* THIS WILL WORK FOR NOW, IN TERMS OF PROOF OF CONTECPT,\n          //* BUT I WILL NEED TO MAKE THIS WORK WITH FIREBASE IF I WANT\n          //* A PRODUCTION QUALITY APP\n          //*\n          //* Until I can do that ^^^ I am disabling this image uploader. It's\n          //* Not needed for MVP      KB 2.8.22\n        }\n        {/* <ImageUploading\n          multiple\n          value={images}\n          onChange={handleImageLoaderChange}\n          maxNumber={10}\n          dataURLKey=\"data_url\"\n        >\n          {({\n            imageList,\n            onImageUpload,\n            onImageRemoveAll,\n            onImageUpdate,\n            onImageRemove,\n            isDragging,\n            dragProps,\n          }) => (\n            // write your building UI\n            <div className=\"upload__image-wrapper\">\n              <button\n                style={isDragging ? { color: \"red\" } : undefined}\n                onClick={onImageUpload}\n                {...dragProps}\n              >\n                Click or Drop here\n              </button>\n              &nbsp;\n              <button onClick={onImageRemoveAll}>Remove all images</button>\n              {imageList.map((image, index) => (\n                <div key={index} className=\"image-item\">\n                  <img src={image[\"data_url\"]} alt=\"\" width=\"100\" />\n                  <div className=\"image-item__btn-wrapper\">\n                    <button onClick={() => onImageUpdate(index)}>Update</button>\n                    <button onClick={() => onImageRemove(index)}>Remove</button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </ImageUploading> */}\n      </Row>\n      <Row>\n        <Col xs={9}>\n          <TextInputBox ref={textRef} handleInputChange={handleInputChange} />\n        </Col>\n        <Col xs={2} className=\"text-center chatInputButton\">\n          <FaRegSmile id=\"openEmojisButton\" onClick={toggleEmojiMenu} />\n        </Col>\n        <Col xs={1} className=\"text-center chatInputButton\">\n          <button id=\"sendButton\" onClick={messageSubmit}>\n            <FaArrowUp className=\"sendButton\" />\n          </button>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default styled(ChatInput)`\n  transition: background 0.5s ease;\n  margin-right: auto;\n  margin-left: auto;\n  position: fixed;\n  bottom: 0;\n  padding: 15px;\n  padding-right: 30px;\n`;\n","import React from \"react\";\nimport { FaTrash } from \"react-icons/fa\";\n\nexport default function MessageContextMenu({ show }) {\n  return (\n    <nav id=\"contextMenu\" className={show ? \"show\" : \"hide\"}>\n      <button className=\"deleteMessageButton\">\n        <FaTrash className=\"deleteMessageButton\" />\n      </button>\n    </nav>\n  );\n}\n","import { useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nfunction SingleMessage({\n  //PROPS\n  //================================================================================\n  data,\n  handleRightClick,\n  index,\n  className,\n}) {\n  //STATE\n  //================================================================================\n  const [message, messages] = data;\n\n  //EFFECTS\n  //================================================================================\n  useEffect(() => {\n    if (!message.fromMe) return;\n    const thisElement = document.getElementById(`message_${index}`);\n    thisElement.addEventListener(\"contextmenu\", (e) => {\n      handleRightClick(e, thisElement);\n    });\n\n    return () =>\n      thisElement.removeEventListener(\"contextmenu\", handleRightClick);\n  });\n\n  //COMPONENT\n  //================================================================================\n  return (\n    <div\n      id={`message_${index}`}\n      className={`my-1 d-flex flex-column ${className} ${\n        message.fromMe ? \"align-self-end align-items-end\" : \"align-items-start\"\n      }`}\n    >\n      <div\n        className={`message round-border px-2 py-1 ${\n          message.fromMe ? \"messageFromMe\" : \"messageToMe\"\n        }`}\n      >\n        {message.content}\n      </div>\n\n      {\n        <div\n          className={`text-muted small ${message.fromMe ? \"text-right\" : \"\"}`}\n        >\n          {message.fromMe && !messages[index + 1]?.fromMe\n            ? \"You\"\n            : message.fromMe\n            ? \"\"\n            : message.senderName}\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default styled(SingleMessage)`\n  > div.message {\n    overflow-wrap: break-word;\n    white-space: break-spaces;\n    transition: background 0s linear;\n    background-color: ${({ data }) => (data[0].fromMe ? \"#6ab71c\" : \"#e9e9e9\")};\n    color: ${({ data }) => (data[0].fromMe ? \"#fefffb\" : \"#232425\")};\n  }\n`;\n","/* eslint-disable react/jsx-pascal-case */\nimport React, { useState, useEffect, useCallback } from \"react\";\n\nimport { Spinner } from \"react-bootstrap\";\nimport { useConversations } from \"../../../utils/ConversationProvider\";\nimport { useViewport } from \"../../../utils/ViewportProvider\";\nimport { useUIContext } from \"../../../utils/UIProvider\";\n\nimport ChatInput from \"../../Inputs/ChatInput\";\nimport MessageContextMenu from \"./MessageContextMenu\";\nimport SingleMessage from \"./SingleMessage\";\nimport MessagesTopMenu from \"./TopMenu/MessagesTopMenu\";\n\nimport \"./messaging.sass\";\n\nexport default function Messages({ containerRef }) {\n  //STATE\n  //================================================================================\n  const [isLoading, setIsLoading] = useState(true);\n  const { display, activeContent } = useUIContext();\n  const { selectedConversation } = useConversations();\n  const [contextMenuShow, setContextMenuShow] = useState(false);\n  const { bottomOfMessages } = useViewport();\n\n  //FUNCTIONS\n  //================================================================================\n  function handleRightClick(event, element) {\n    if (contextMenuShow) return;\n    event.preventDefault();\n    //? const messageIndex = element.getAttribute(\"data-key\");\n    setContextMenuShow(true);\n  }\n\n  const dismissContextMenu = useCallback(() => {\n    if (!contextMenuShow) return;\n    setContextMenuShow(false);\n  }, [contextMenuShow]);\n\n  //EFFECTS\n  //================================================================================\n  useEffect(() => {\n    if (isLoading) return;\n    document.getElementById(\"messageWrapper\").scrollTop = 1000000;\n  }, [selectedConversation, display, isLoading]);\n\n  // Hook to add the dismiss handler function\n  useEffect(() => {\n    document.addEventListener(\"click\", dismissContextMenu);\n    return () => {\n      document.removeEventListener(\"click\", dismissContextMenu);\n    };\n  }, [dismissContextMenu]);\n\n  // Loader effect\n  useEffect(() => {\n    if (!selectedConversation) return;\n    setIsLoading(false);\n  }, [selectedConversation]);\n\n  //COMPONENT\n  //================================================================================\n  return isLoading ? (\n    <Spinner className=\"absoluteCenter\" animation=\"border\" />\n  ) : (\n    /*\n?   Need to add a loading state for the message portion of this.\n?   OR I need to figure out a way to reverse load messages. \n?   Reverse loading would be a better way in terms of UI/UX\n?   Having a loader would certainly interupt the expected flow \n?   of a messaging app.\n    */\n    <>\n      <MessagesTopMenu containerRef={containerRef} />\n      <MessageContextMenu show={contextMenuShow} />\n\n      <div id=\"messageWrapper\">\n        <div className=\"d-flex flex-column flex-grow-1\" id=\"messages\">\n          <div className=\"flex-grow-1 overflow-auto\">\n            <div className=\"d-flex flex-column align-items-start justify-content-end px-3\">\n              {selectedConversation.messages.map((message, i) => {\n                return (\n                  <SingleMessage\n                    key={i}\n                    index={i}\n                    data={[message, selectedConversation.messages]}\n                    handleRightClick={handleRightClick}\n                  />\n                );\n              })}\n              <div id=\"bottomOfMessages\" ref={bottomOfMessages}></div>\n            </div>\n          </div>\n        </div>\n\n        {activeContent.conversations && (\n          <ChatInput containerRef={containerRef} />\n        )}\n      </div>\n    </>\n  );\n}\n","import { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { useUIContext } from \"../../utils/UIProvider\";\nimport { useConversations } from \"../../utils/ConversationProvider\";\n\nimport { Col } from \"react-bootstrap\";\nimport ConversationInfoScreen from \"./Messaging/ConversationInfoScreen\";\nimport NoContent from \"./NoContent\";\nimport Contacts from \"./Contacts\";\nimport Messaging from \"./Messaging\";\n\nfunction MainContent({ className }) {\n  // STATE\n  //================================================================================\n  const { selectedConversation } = useConversations();\n  // Container ref is used to give refernce of width to the\n  // Chat input so that is always is 100% width of its parent\n  const containerRef = useRef();\n  const { display, activeContent } = useUIContext();\n\n  // FUNCTIONS\n  //================================================================================\n\n  // RENDER\n  //================================================================================\n  return (\n    <Col\n      sm={8}\n      className={`${display.mainContent ? \"show\" : \"hide\"} ${className}`}\n      ref={containerRef}\n      style={{ overflow: \"hidden !important\" }}\n    >\n      {!selectedConversation ? (\n        <NoContent />\n      ) : activeContent.conversations ? (\n        <Messaging containerRef={containerRef} />\n      ) : activeContent.conversationInfo ? (\n        <ConversationInfoScreen containerRef={containerRef} />\n      ) : activeContent.contacts ? (\n        <Contacts containerRef={containerRef} />\n      ) : (\n        <NoContent />\n      )}\n    </Col>\n  );\n}\n\nexport default styled(MainContent)`\n  border-left: 1px solid ${({ theme }) => theme.border};\n  height: 100vh;\n  padding: 0;\n`;\n","import { useState, useEffect } from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport { BiConversation, BiGroup } from \"react-icons/bi\";\nimport { IoSettingsSharp } from \"react-icons/io5\";\nimport { useUIContext } from \"../../utils/UIProvider\";\nimport { useViewport } from \"../../utils/ViewportProvider\";\nimport \"./menubar.sass\";\n\nexport default function MenuBar({ containerRef }) {\n  const [menubarWidth, setMenubarWidth] = useState(\"100%\");\n  const { activeMenu, setActiveMenu, setActiveContent } = useUIContext();\n  const { width } = useViewport();\n\n  function handleMenuChange(event, menuSelection) {\n    event.preventDefault();\n    setActiveMenu(menuSelection);\n    setActiveContent(menuSelection);\n  }\n\n  useEffect(() => {\n    if (width >= 680) setMenubarWidth(`${containerRef.current.offsetWidth}px`);\n    else setMenubarWidth(\"100%\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [width]);\n\n  return (\n    <div id=\"menuBar\" style={{ width: menubarWidth }}>\n      <Nav className=\"justify-content-center\">\n        <Nav.Item>\n          <Nav.Link\n            id=\"conversations\"\n            onClick={(e) => handleMenuChange(e, { conversations: true })}\n          >\n            <BiConversation\n              className={`menuIcons ${\n                activeMenu.conversations ? \"activeMenuIcon\" : \"\"\n              }`}\n            />\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link\n            id=\"contacts\"\n            onClick={(e) => handleMenuChange(e, { contacts: true })}\n          >\n            <BiGroup\n              className={`menuIcons ${\n                activeMenu.contacts ? \"activeMenuIcon\" : \"\"\n              }`}\n            />\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link\n            id=\"settings\"\n            onClick={(e) => handleMenuChange(e, { settings: true })}\n          >\n            <IoSettingsSharp\n              className={`menuIcons ${\n                activeMenu.settings ? \"activeMenuIcon\" : \"\"\n              }`}\n            />\n          </Nav.Link>\n        </Nav.Item>\n      </Nav>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Badge } from \"react-bootstrap\";\nimport { GrClose } from \"react-icons/gr\";\nimport \"./recipient.sass\";\n\nexport default function Recipient({ userInfo, removeRecipient }) {\n  return (\n    <Badge pill bg=\"primary\">\n      {`${userInfo.givenName} ${userInfo.familyName}`}\n      <button onClick={removeRecipient}>\n        <GrClose className=\"removeRecipientButton\" />\n      </button>\n    </Badge>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Nav } from \"react-bootstrap\";\n\nconst SearchBox = React.forwardRef(({ className, handleInputChange }, ref) => {\n  return (\n    <Nav>\n      <div\n        contentEditable\n        role=\"textbox\"\n        onInput={handleInputChange}\n        ref={ref}\n        className={`${className} textarea`}\n      />\n    </Nav>\n  );\n});\n\n// This isn't really styled properly right now. I want the searchbox to hover\n// Over the rest of the elements when you are searching, but its not right at all\nexport default styled(SearchBox)`   \n  padding: 5px;\n  padding-left: 20px;\n  margin: 10px 0px;\n  width: ${({ fixed }) => (fixed ? \"32.3333%\" : \"100%\")};\n  border-radius: 25px;\n  border: 1px solid ${({ theme }) => theme.border};\n  overflow-wrap: break-word;\n  resize: none;\n  z-index: 20;\n  position: ${({ fixed }) => (fixed ? \"fixed\" : \"\")};\n  top: ${({ fixed }) => (fixed ? \"top 0px\" : \"\")}; \n  \n  :focus {\n      outline: none\n      box-shadow: 0 0 4px 0px var(--light)\n  };\n  :empty::before {\n  content: \"Search\";\n  color: grey;\n};\n  :hover {\n    cursor: auto\n  }\n`;\n","import { useEffect, useState, useRef } from \"react\";\nimport { Modal, Button, ListGroup } from \"react-bootstrap\";\nimport { useContactContext } from \"../../../utils/ContactProvider\";\nimport Recipient from \"./Recipient\";\nimport LGItem from \"../../Menu/LGItem\";\nimport SearchBox from \"../../Inputs/SearchBox\";\n\nexport default function NewConversationModal({\n  //PROPS\n  //================================================================================\n  show,\n  hide,\n  setNewConversationRecipients,\n}) {\n  //STATES\n  //================================================================================\n  const { contacts, setSearchValue } = useContactContext();\n  // Added a contact for development\n  const [recipients, setRecipients] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  //REFS\n  //================================================================================\n  const searchRef = useRef();\n\n  //FUNCTIONS\n  //================================================================================\n  function selectContact(contact) {\n    setRecipients((recipients) => {\n      return recipients.includes(contact)\n        ? recipients\n        : [...recipients, contact];\n    });\n  }\n\n  function handleInputChange(event) {\n    event.preventDefault();\n    setSearchValue(searchRef.current.textContent);\n  }\n\n  function removeRecipient(userInfo) {\n    setRecipients((recipients) => {\n      return recipients.filter((recipient) => recipient._id !== userInfo._id);\n    });\n  }\n\n  function passUpConversationMembers(event) {\n    event.preventDefault();\n    setNewConversationRecipients(recipients);\n    setRecipients([]);\n    hide();\n  }\n  //EFFECTS\n  //================================================================================\n  useEffect(() => {\n    if (!contacts) return;\n    setLoading(false);\n  }, [contacts]);\n\n  //COMPONENT\n  //================================================================================\n  return (\n    <Modal\n      show={show}\n      onHide={() => {\n        setRecipients([]);\n        hide();\n      }}\n      centered\n      backdrop=\"static\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      keyboard={false}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          <h4>Start a new conversation</h4>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Header>\n        <p>Recipients:</p>\n        {recipients ? (\n          <>\n            {recipients.map((userInfo, i) => {\n              return (\n                <Recipient\n                  userInfo={userInfo}\n                  key={i}\n                  removeRecipient={() => removeRecipient(userInfo)}\n                />\n              );\n            })}\n          </>\n        ) : null}\n      </Modal.Header>\n      <Modal.Body>\n        {/* I need to make a specific component for this */}\n        <SearchBox\n          ref={searchRef}\n          handleInputChange={handleInputChange}\n        />\n        <ListGroup>\n          {contacts ? (\n            contacts.map((contact, index) => {\n              return (\n                <LGItem\n                  className=\"LGItem\"\n                  onClick={() => selectContact(contact)}\n                  key={index}\n                >\n                  {contact.givenName + \" \" + contact.familyName}\n                </LGItem>\n              );\n            })\n          ) : (\n            <div>\n              <p>No Contacts here!</p>\n            </div>\n          )}\n        </ListGroup>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"success\" onClick={passUpConversationMembers}>\n          Start Conversation\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { AiFillPlusCircle } from \"react-icons/ai\";\nimport LGItem from \"../LGItem\";\n\nfunction NewMessageBTN({ className, onClick }) {\n  return (\n    <LGItem className={`${className}`} onClick={onClick}>\n      <AiFillPlusCircle id=\"addButton\" />\n      New Message\n    </LGItem>\n  );\n}\n\nexport default styled(NewMessageBTN)`\n  border-bottom: solid 1px ${({ theme }) => theme.border};\n`;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport styled, { withTheme } from \"styled-components\";\n\nimport { useUserContext } from \"../../../utils/UserProvider\";\nimport API from \"../../../utils/API\";\n\nimport { Modal, Button } from \"react-bootstrap\";\nimport { useConversations } from \"../../../utils/ConversationProvider\";\n\nfunction DeleteConversationModal({\n  show,\n  hide,\n  className,\n  targetIndex,\n  theme,\n}) {\n  // STATES\n  //================================================================================\n  const { user } = useUserContext();\n  const { conversations } = useConversations();\n  // FUNCTIONS\n  //================================================================================\n  function deleteConversation(e) {\n    e.preventDefault();\n    console.log(targetIndex);\n    // This function will need to send the conversation._id and the user._id to the server\n    // And then the server will need to add that conversation._id to a list on the user model\n    // And use that list to filter out the conversation when returning all conversations to the client\n    //! Above method is not the way to go, I am going to need to overhaul the \n    //! way conversations are stored in order to get this to work the way \n    //! I want it to.\n    // API.hideConversation(conversations[targetIndex]._id, user._id);\n  }\n  // EFFECTS\n  //================================================================================\n  // RENDER\n  //================================================================================\n  return (\n    <Modal\n      show={show}\n      onHide={hide}\n      centered\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      keyboard={false}\n      className={className}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          <h4>Are you sure you want to delete this conversation?</h4>\n        </Modal.Title>\n        <br />\n        <Button\n          style={{ backgroundColor: `${theme.danger}` }}\n          onClick={deleteConversation}\n        >\n          Yes\n        </Button>\n        <Button onClick={hide}>No</Button>\n      </Modal.Header>\n    </Modal>\n  );\n}\n\nconst styledComp = styled(DeleteConversationModal)``;\n\nexport default withTheme(styledComp);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { useDeleteConvoModal } from \"./ConversationMap\";\n\nimport { FaTrash } from \"react-icons/fa\";\n\nfunction DeleteConvoBtn({ className }) {\n  //STATES\n  //================================================================================\n  const { setDelConvoModalShow } = useDeleteConvoModal();\n  //FUNCTIONS\n  //================================================================================\n  function handleDeleteClick(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    setDelConvoModalShow(true);\n  }\n  //EFFECTS\n  //================================================================================\n  //RENDER\n  //================================================================================\n  return (\n    <div className={className} onClick={handleDeleteClick}>\n      <FaTrash id=\"deleteIcon\" className=\"center\" onClick={handleDeleteClick} />\n    </div>\n  );\n}\n\nexport default styled(DeleteConvoBtn)`\n  width: 80px;\n  background-color: ${({ theme }) => theme.danger};\n  position: absolute;\n  right: -80px;\n  top: 0px;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  > #deleteIcon {\n    fill: #fefffb;\n    background-color: ${({ theme }) => theme.danger};\n    height: 100%;\n    width: 20px;\n    left: auto;\n  }\n`;\n","import React, { useState, useEffect, createContext, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport DeleteConversationModal from \"../../Modals/DeleteConversationModal\";\nimport IndividualConversation from \"./IndividualConversation\";\n\nconst DeleteConvoModalContext = createContext();\n\nexport function useDeleteConvoModal() {\n  return useContext(DeleteConvoModalContext);\n}\n\nfunction ConversationMap({ className, conversations }) {\n  //STATE\n  //================================================================================\n  const [offset, setOffset] = useState(0);\n  const [targetIndex, setTargetIndex] = useState(null);\n  //modal\n  const [delConvoModalShow, setDelConvoModalShow] = useState(false);\n\n  //FUNCTIONS\n  //================================================================================\n  function slideConvo(target, direction) {\n    if (!targetIndex || !target) return setOffset(0);\n\n    if (direction === \"open\" && offset < 80) {\n      setOffset(80);\n    } else if (direction === \"close\" && offset > 0) {\n      setOffset(0);\n    }\n  }\n\n  function handleTouchMove(e) {\n    const target = e.target.dataset.index;\n    setTargetIndex(target);\n    if (e.wheelDeltaX < 0 && e.wheelDeltaY === 0) slideConvo(target, \"open\");\n    if (e.wheelDeltaX > 0 && e.wheelDeltaY === 0) slideConvo(target, \"close\");\n  }\n\n  //EFFECTS\n  //================================================================================\n  useEffect(() => {\n    document.addEventListener(\"mousewheel\", handleTouchMove, false);\n    document.addEventListener(\"DOMMouseScroll\", handleTouchMove, false);\n\n    return () => {\n      document.removeEventListener(\"mousewheel\", handleTouchMove, false);\n      document.removeEventListener(\"DOMMouseScroll\", handleTouchMove, false);\n    };\n  });\n\n  //COMPONENT\n  //================================================================================\n  return (\n    <div className={className}>\n      <DeleteConvoModalContext.Provider\n        value={{ delConvoModalShow, setDelConvoModalShow }}\n      >\n        <>\n          {conversations.map((convo, index) => {\n            return (\n              <IndividualConversation\n                key={index}\n                convo={convo}\n                index={index.toString()}\n                targetIndex={targetIndex}\n                offset={offset}\n              />\n            );\n          })}\n\n          <DeleteConversationModal\n            show={delConvoModalShow}\n            hide={() => setDelConvoModalShow(false)}\n            targetIndex={targetIndex}\n          />\n        </>\n      </DeleteConvoModalContext.Provider>\n    </div>\n  );\n}\n\nexport default styled(ConversationMap)`\n  overflow-x: hidden;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { useUIContext } from \"../../../utils/UIProvider\";\nimport { useConversations } from \"../../../utils/ConversationProvider\";\n\nimport LGItem from \"../LGItem\";\nimport { useViewport } from \"../../../utils/ViewportProvider\";\nimport DeleteConvoBtn from \"./DeleteConvoBtn\";\n\nfunction IndividualConversation({\n  className,\n  convo,\n  index,\n  targetIndex,\n  offset,\n}) {\n  //STATE\n  //================================================================================\n  // providers\n  const { setActiveContent, setDisplay } = useUIContext();\n  const { isMobile } = useViewport();\n  const { selectedConversation, setSelectedConversation_id } =\n    useConversations();\n\n  const [position, setPosition] = useState(\"0px\");\n\n  //FUNCTIONS\n  //================================================================================\n  function handleConversationSelection(event) {\n    event.preventDefault();\n    setSelectedConversation_id(convo._id);\n    if (isMobile) {\n      setDisplay({\n        menu: false,\n        mainContent: true,\n      });\n    } else {\n      setActiveContent({\n        conversations: true,\n      });\n    }\n  }\n\n  function slideCloseOnclick(e) {\n    const eTargetIndex = e.target.dataset.index;\n    if (eTargetIndex !== index) setPosition(\"0px\");\n  }\n\n  //EFFECTS\n  //================================================================================\n  useEffect(() => {\n    if (targetIndex === index) setPosition(`${offset}px`);\n    if (targetIndex !== index) setPosition(\"0px\");\n  }, [offset, targetIndex, index]);\n\n  // So that if you click elsewhere on the screen, the slide menu is closed\n  useEffect(() => {\n    document.body.addEventListener(\"click\", slideCloseOnclick, false);\n\n    return () => {\n      document.body.removeEventListener(\"click\", slideCloseOnclick, false);\n    };\n  });\n\n  //RENDER\n  //================================================================================\n  // Need to make sure there IS a selected conversation before trying to load.\n  // Will throw errors if you don't wait for the conversation provider state\n  // to Be fully set\n  return selectedConversation ? (\n    <>\n      <LGItem\n        index={index}\n        key={index}\n        className={`${\n          convo._id === selectedConversation._id && !isMobile ? \"LGActive\" : \"\"\n        } ${className}`}\n        onClick={handleConversationSelection}\n        style={{ right: position }}\n      >\n        {convo.name || \"Untitled Conversation\"}\n        <br />\n        {/* For some reason, I have to check for lenght here\n        Because when sending a new message, it takes a second for\n        the content to load, and if there is no content, the app\n        errors out and causes the message to not get sent */}\n        <span data-index={index}>\n          {convo.messages.length > 0\n            ? convo.messages[convo.messages.length - 1].content.length > 28\n              ? convo.messages[convo.messages.length - 1].content.slice(0, 30) +\n                \"...\"\n              : convo.messages[convo.messages.length - 1].content.slice(0, 30)\n            : \"\"}\n        </span>\n\n        <DeleteConvoBtn />\n      </LGItem>\n    </>\n  ) : (\n    <></>\n  );\n}\n\nexport default styled(IndividualConversation)`\n  position: relative;\n  transition: all 0.5s ease, color 0s linear, background 0s linear !important;\n  border-bottom: 1px solid ${({ theme }) => theme.border};\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useConversations } from \"../../../utils/ConversationProvider\";\nimport { useViewport } from \"../../../utils/ViewportProvider\";\n\nimport LGItem from \"../LGItem\";\n\nfunction SearchResultsMap({ className, results, onClick }) {\n  const { selectedConversation } = useConversations();\n  const { isMobile } = useViewport();\n\n  return (\n    <div className={className}>\n      {results.length > 0 ? (\n        results.map((result, index) => {\n          return (\n            <LGItem\n              key={index}\n              className={`${\n                result.message._id === selectedConversation._id && !isMobile\n                  ? \"LGActive\"\n                  : \"\"\n              }`}\n              onClick={(event) => onClick(event, result.convoId)}\n            >\n              <>{result.message.content.slice(0, 30) + \"...\" || \"\"}</>\n              <br />\n              <span>{result.convoName || \"Untitled Conversation\"}</span>\n            </LGItem>\n          );\n        })\n      ) : (\n        <LGItem>No Results</LGItem>\n      )}\n    </div>\n  );\n}\n\nexport default styled(SearchResultsMap)`\n  margin-top: 4rem;\n`;\n","import { useState, useRef, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { ListGroup } from \"react-bootstrap\";\n\nimport { useConversations } from \"../../../utils/ConversationProvider\";\nimport { startOrGoToConversation } from \"../../../utils/ConversationProvider\";\nimport { useUIContext } from \"../../../utils/UIProvider\";\nimport { useViewport } from \"../../../utils/ViewportProvider\";\nimport { useUserContext } from \"../../../utils/UserProvider\";\n\nimport NewConversationModal from \"../../Modals/NewConversation/NewConversationModal\";\nimport NewMessageModal from \"../../Modals/NewMessage/NewMessageModal\";\nimport API from \"../../../utils/API\";\nimport NewMessageBTN from \"./NewMessageBTN\";\nimport SearchBox from \"../../Inputs/SearchBox\";\nimport ConversationMap from \"./ConversationMap\";\nimport SearchResultsMap from \"./SearchResultsMap\";\n\nfunction Conversations({ className }) {\n  //STATE\n  //================================================================================\n  //Contexts\n  const { user } = useUserContext();\n  const {\n    conversations,\n    setPendingText,\n    selectedConversation,\n    setSelectedConversation_id,\n    addNewConversation,\n    setConvoStateReady,\n  } = useConversations();\n  //Modals\n  const [newConvoModalVisible, setNewConvoModalVisible] = useState(false);\n  const [newMessageModalVisible, setNewMessageModalVisible] = useState(false);\n  //New Conversations Variables\n  const [newConversationRecipients, setNewConversationRecipients] =\n    useState(null);\n  const [conversationAdded, setConversationAdded] = useState(false);\n  const [newConversation_id, setNewConversation_id] = useState(null);\n  //Handling Search Input\n  const searchRef = useRef();\n  const [searchValue, setSearchValue] = useState(null);\n\n  //FUNCTIONS\n  //================================================================================\n  // function writeConversationName(recipients) {\n  //   let names = [];\n  //   recipients.forEach((user, index) => {\n  //     if (recipients.length - 1 === index)\n  //       names.push(`${user.givenName} ${user.familyName}`);\n  //     else names.push(`${user.givenName} ${user.familyName},`);\n  //   });\n  //   return names.join(\" \").toString();\n  // }\n\n  // function mapConversationMembers(recipients) {\n  //   let members = [user];\n  //   recipients.forEach((recipient) => members.push(recipient._id));\n  //   return members;\n  // }\n\n  // function startOrGoToConversation(started, goTo) {\n  //   API.startOrGoTOConversation(\n  //     {\n  //       members: mapConversationMembers(newConversationRecipients),\n  //       name: writeConversationName(newConversationRecipients),\n  //     },\n  //     (newConversation) => started(newConversation),\n  //     (existingConversation) => goTo(existingConversation),\n  //     (error) =>\n  //       console.error(\"conversations.jsx:startOrGoToConversation():: \", error)\n  //   );\n  // }\n\n  const goToConversation = useCallback(() => {\n    setConvoStateReady(true);\n    setNewMessageModalVisible(false);\n  }, [setConvoStateReady]);\n\n  function messageSubmit(text) {\n    setPendingText(text);\n\n    startOrGoToConversation(\n      [...newConversationRecipients, user],\n      (newConversation) => {\n        addNewConversation(newConversation).then(() => {\n          setNewConversation_id(newConversation._id);\n          setConversationAdded(true);\n        });\n      },\n\n      (existingConversation) => {\n        setSelectedConversation_id(existingConversation._id);\n        goToConversation();\n      }\n    );\n  }\n\n  function handleSearch(event) {\n    event.preventDefault();\n    if (searchRef.current.innerText.trim() === \"\") {\n      setSearchValue(null);\n      setSearchResults(null);\n      return;\n    }\n    setSearchValue(searchRef.current.innerText);\n  }\n\n  function handleSelectSearched(event, convoId) {\n    event.preventDefault();\n    setSelectedConversation_id(convoId);\n    setSearchValue(null);\n    searchRef.current.innerText = \"\";\n    setSearchResults(null);\n  }\n\n  function handleNewConvoBTN(e) {\n    e.preventDefault();\n    setNewConvoModalVisible(true);\n  }\n\n  //EFFECTS\n  //================================================================================\n  useEffect(() => {\n    if (!newConversationRecipients) return;\n    setNewMessageModalVisible(true);\n  }, [newConversationRecipients]);\n\n  // This effect handles the loading of a newly created conversation\n  // Took some manipulation but I think it's good to go.\n  useEffect(() => {\n    if (!conversationAdded) return;\n    setSelectedConversation_id(newConversation_id);\n    goToConversation();\n    setNewConversation_id(null);\n    setConversationAdded(false);\n  }, [\n    conversationAdded,\n    conversations,\n    goToConversation,\n    newConversation_id,\n    setSelectedConversation_id,\n  ]);\n\n  //* FOR SEARCH FUNCTIONALITY\n  //================================================================================\n  const [searchResults, setSearchResults] = useState(null);\n  useEffect(() => {\n    if (!searchValue) return;\n    let results = [];\n\n    conversations.forEach((convo) => {\n      results = [\n        ...results,\n        ...convo.messages\n          .filter((message) => {\n            if (\n              message.content\n                .toLowerCase()\n                .trim()\n                .includes(searchValue.toLowerCase().trim())\n            )\n              return true;\n            else return false;\n          })\n          .map((message) => {\n            return {\n              convoId: convo._id,\n              convoName: convo.name,\n              message,\n            };\n          }),\n      ];\n    });\n    setSearchResults(results);\n  }, [conversations, searchValue]);\n\n  //COMPONENT\n  //================================================================================\n  return (\n    <div className={className}>\n      <ListGroup variant=\"flush\">\n        <SearchBox\n          ref={searchRef}\n          handleInputChange={handleSearch}\n          fixed={searchValue ? true : false}\n        />\n\n        {searchResults ? (\n          <SearchResultsMap\n            results={searchResults}\n            onClick={handleSelectSearched}\n          />\n        ) : (\n          <>\n            <NewMessageBTN onClick={handleNewConvoBTN} />\n            <ConversationMap\n              conversations={conversations}\n              selectedConversation={selectedConversation}\n            />\n          </>\n        )}\n      </ListGroup>\n      <NewConversationModal\n        show={newConvoModalVisible}\n        hide={() => setNewConvoModalVisible(false)}\n        setNewConversationRecipients={setNewConversationRecipients}\n      />\n      <NewMessageModal\n        show={newMessageModalVisible}\n        hide={() => setNewMessageModalVisible(false)}\n        messageSubmit={messageSubmit}\n      />\n    </div>\n  );\n}\n\nexport default styled(Conversations)`\n  height: 100vh;\n  overflow-y: scroll;\n  padding-bottom: 4rem;\n`;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport PhoneInput from \"react-phone-number-input\";\n\nexport default function NewContactModal({ show, hide, addContact }) {\n  const [phoneNum, setPhoneNum] = useState();\n  const [buttonDisabled, setButtonDisabled] = useState(true);\n\n  useEffect(() => {\n    if (phoneNum === undefined || phoneNum === null) return;\n    let mutablePN = phoneNum.replace(/[+]/g, \"\");\n\n    if (mutablePN.match(/\\d/g).length === 11) setButtonDisabled(false);\n    else setButtonDisabled(true);\n  }, [phoneNum]);\n\n  return (\n    <Modal\n      show={show}\n      onHide={hide}\n      centered\n      backdrop=\"static\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      keyboard={false}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          <h4>Add a new contact by phone number</h4>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <PhoneInput\n          id=\"phoneInput\"\n          country=\"US\"\n          defaultCountry=\"US\"\n          placeholder=\"(___) ___-____ \"\n          value={phoneNum}\n          onChange={setPhoneNum}\n        />\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n          disabled={buttonDisabled}\n          variant=\"success\"\n          onClick={() => addContact(phoneNum)}\n        >\n          Add\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { ListGroup, Spinner } from \"react-bootstrap\";\nimport { AiFillPlusCircle } from \"react-icons/ai\";\nimport NewContactModal from \"../Modals/NewContactModal\";\nimport API from \"../../utils/API\";\nimport { useContactContext } from \"../../utils/ContactProvider\";\nimport { useUserContext } from \"../../utils/UserProvider\";\nimport { useUIContext } from \"../../utils/UIProvider\";\nimport LGItem from \"./LGItem\";\n\nexport default function Contacts() {\n  //STATE\n  //================================================================================\n  const { contacts, selectedContact, setSelectedContact } = useContactContext();\n  const { user, setUser } = useUserContext();\n  const { isMobile } = useUIContext();\n  const [newContactModal, setNewContactModal] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  //FUNCTIONS\n  //================================================================================\n  function showNewContactModal(event) {\n    event.preventDefault();\n    setNewContactModal(true);\n  }\n\n  function selectContact(contact) {\n    setSelectedContact(contact);\n  }\n\n  function addContact(phoneNum) {\n    if (phoneNum === user.phoneNum) {\n      setNewContactModal(false);\n      return alert(\"you cannot add yourself as a contact\");\n    }\n    API.addContact(\n      user._id,\n      phoneNum,\n      (updatedUser) => {\n        // need to call to update the user in the local storage\n        if (!updatedUser) return alert(\"You already have that contact!\");\n        setUser(updatedUser);\n        setNewContactModal(false);\n      },\n      (err) => {\n        console.log(\"contacts.jsx\", err);\n      }\n    );\n  }\n\n  //EFFECTS\n  //================================================================================\n  useEffect(() => {\n    if (!contacts) return;\n    setLoading(false);\n  }, [contacts]);\n\n  useEffect(() => {\n    return () => {\n      setSelectedContact(null);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  //COMPONENT\n  //================================================================================\n  return loading ? (\n    <Spinner className=\"absoluteCenter\" animation=\"border\" />\n  ) : (\n    <>\n      <NewContactModal\n        show={newContactModal}\n        hide={() => setNewContactModal(false)}\n        addContact={addContact}\n      />\n\n      <ListGroup>\n        <LGItem className=\"LGItem\" onClick={showNewContactModal}>\n          <AiFillPlusCircle id=\"addButton\" />\n          Add Contact\n        </LGItem>\n        {contacts ? (\n          contacts.map((contact, index) => {\n            return (\n              <LGItem\n                className={`LGItem ${\n                  selectedContact\n                    ? contact._id === selectedContact._id && !isMobile\n                      ? \"LGActive\"\n                      : \"\"\n                    : \"\"\n                }`}\n                onClick={(e) => {\n                  e.preventDefault();\n                  selectContact(contact);\n                }}\n                key={index}\n              >\n                {contact.givenName + \" \" + contact.familyName}\n              </LGItem>\n            );\n          })\n        ) : (\n          <div>\n            <p>No Contacts here!</p>\n          </div>\n        )}\n      </ListGroup>\n    </>\n  );\n}\n","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport {\n  getAuth,\n  signInWithPopup,\n  inMemoryPersistence,\n  setPersistence,\n  GoogleAuthProvider,\n} from \"firebase/auth\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAtHds16Ff78hO9pibKKiF4DxY_oNpadxY\",\n  authDomain: \"bantr-19982022.firebaseapp.com\",\n  projectId: \"bantr-19982022\",\n  storageBucket: \"bantr-19982022.appspot.com\",\n  messagingSenderId: \"94998621983\",\n  appId: \"1:94998621983:web:3453913cda12e4db76ca2a\",\n  measurementId: \"G-K2HDCY4TWL\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\n\nexport const provider = new GoogleAuthProvider();\nexport default app;\n\n// Set up for SignUp/LogIn\nconst auth = getAuth();\nexport function firebaseSignIn(user, err) {\n  return setPersistence(auth, inMemoryPersistence).then(() => {\n    signInWithPopup(auth, provider)\n      .then((result) => user(result.user))\n      .catch((e) => err(e.code, e.message));\n  });\n}\n\nexport function firebaseLogout() {\n  return auth.signOut();\n}\n","import React from \"react\";\nimport useLocalStorage from \"../../utils/useLocalStorage\";\nimport { useThemes } from \"../../utils/Theme/ThemeProvider\";\nimport { firebaseLogout } from \"../../firebase\";\n\nimport { Button, ListGroup } from \"react-bootstrap\";\nimport LGItem from \"./LGItem\";\nimport DarkModeToggle from \"react-dark-mode-toggle\";\n\nexport default function Settings() {\n  //STATE\n  //================================================================================\n  const [user, setUser] = useLocalStorage(\"user\", 0);\n  const [theme, setTheme] = useThemes();\n\n  //FUNCTIONS\n  //================================================================================\n  function logout(event) {\n    event.preventDefault();\n    setUser(0);\n    firebaseLogout();\n    window.location.href = \"/\";\n  }\n\n  function handleThemeToggle(isLightMode) {\n    if (isLightMode) setTheme(\"dark\");\n    else if (!isLightMode) setTheme(\"light\");\n  }\n\n  //COMPONENT\n  //================================================================================\n  return (\n    <>\n      <ListGroup>\n        <LGItem className=\"LGItem text-center\" BGTransition>\n          <Button onClick={logout}>Logout</Button>\n        </LGItem>\n        <LGItem className=\"LGItem\" BGTransition>\n          <span>App Theme </span>\n          <DarkModeToggle\n            onChange={handleThemeToggle}\n            checked={theme.name === \"dark\" ? true : false}\n            size={80}\n          />\n        </LGItem>\n      </ListGroup>\n    </>\n  );\n}\n","import { useRef } from \"react\";\nimport { useUIContext } from \"../../utils/UIProvider\";\n\nimport MenuBar from \"./MenuBar\";\nimport Conversations from \"./Conversations\";\nimport Contacts from \"./Contacts\";\nimport Settings from \"./Settings\";\n\nexport default function Sidebar() {\n  const { activeMenu, display } = useUIContext();\n  const containerRef = useRef();\n\n  function renderSwitch() {\n    if (activeMenu.conversations) return <Conversations />;\n    if (activeMenu.contacts) return <Contacts />;\n    if (activeMenu.settings) return <Settings />;\n  }\n\n  return (\n    <div ref={containerRef}>\n      {/* <div>hello</div> */}\n      <div className={display.menu ? \"show\" : \"hide\"}>\n        {renderSwitch()}\n        <MenuBar containerRef={containerRef} />\n      </div>\n    </div>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { BrowserView, MobileView } from \"react-device-detect\";\nimport { useUIContext } from \"../utils/UIProvider\";\nimport { useConversations } from \"../utils/ConversationProvider\";\n\nimport { Container, Row, Col, Spinner } from \"react-bootstrap\";\nimport MainContent from \"./MainContent\";\nimport Menu from \"./Menu\";\n\nimport \"./animations.sass\";\n\nexport default function Dashboard() {\n  //STATE\n  //================================================================================\n  const { display } = useUIContext();\n  const [loading, setLoading] = useState(true);\n  const { conversations } = useConversations();\n\n  //FUNCTIONS\n  //================================================================================\n  function renderMobile() {\n    if (display.menu) return <Menu />;\n    if (display.mainContent) return <MainContent />;\n  }\n\n  function cleanLocalStorage() {\n    localStorage.removeItem(\"epr_ru\");\n  }\n\n  //EFFECTS\n  //================================================================================\n  // useEffect(() => {\n\n  // }, [store.profile]);\n\n  useEffect(() => {\n    if (!conversations) return;\n    setLoading(false);\n  }, [conversations]);\n\n  // apparently the emoji keyboard thing is storing things in local storage\n  // So to stop that from piling up, we will regularly clean it out\n  useEffect(() => {\n    return () => {\n      cleanLocalStorage();\n    };\n  });\n\n  //COMPONENT\n  //================================================================================\n  return (\n    <>\n      {\n        //!   THERE HAS TO BE A BETTER WAY TO RENDER THE HOME SCREEN BEFORE ANY CONVERSATIONS HAVE STARTED.\n        //!   THIS WILL BE INTEGRAL FOR USER EXPERIENCE\n      }\n      {loading ? (\n        <Spinner className=\"absoluteCenter\" animation=\"border\" />\n      ) : (\n        <>\n          <BrowserView>\n            <Container fluid>\n              <Row style={{ marginRight: \"0px !important\" }}>\n                <Col sm={4} style={{ paddingRight: \"0px\" }}>\n                  <Menu />\n                </Col>\n                <MainContent />\n              </Row>\n            </Container>\n          </BrowserView>\n\n          <MobileView>\n            <Container fluid>{renderMobile()}</Container>\n          </MobileView>\n        </>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { Navbar } from \"react-bootstrap\";\nimport { useViewport } from \"../../utils/ViewportProvider\";\nimport \"./header.sass\";\n\nexport default function Header() {\n  const { width } = useViewport();\n\n  const style = {\n    marginLeft: width / 16 + \"px \",\n  };\n\n  return (\n    <Navbar id=\"header\" expand=\"lg\" className=\"p-3\">\n      <h1 style={style}>Bantr</h1>\n    </Navbar>\n  );\n}\n","import React from \"react\";\nimport GoogleLogin from \"react-google-login\";\nimport { Container, Row, Form } from \"react-bootstrap\";\nimport API from \"../utils/API.js\";\nimport Header from \"./Header\";\nimport { useUserContext } from \"../utils/UserProvider.js\";\n\nexport default function Login() {\n  const { setUser } = useUserContext();\n\n  function handleLogin(response) {\n    // Working on a better was to handle authentication\n    const { profileObj } = response;\n    API.login(\n      profileObj,\n      (user) => {\n        const storableUser = JSON.stringify(user);\n        setUser(storableUser);\n      },\n      (error) => {\n        alert(\"No user could be found. Please sign up!\");\n        console.error(error);\n      }\n    );\n  }\n\n  function handleFailure() {\n    alert(\"whoops, something went wrong!\");\n  }\n\n  return (\n    <>\n      <Header />\n      <Container id=\"login\">\n        <Row className=\"justify-content-center\">\n          <Form id=\"form\" className=\"text-center\">\n            <h2>Login</h2>\n            <h5>\n              {/* Need to make this font not bold */}\n              Use your Google account to sign in\n            </h5>\n            <GoogleLogin\n              clientId=\"957666672016-3850ch4mr24gvr89bmt514bn7u359mb4.apps.googleusercontent.com\"\n              buttonText=\"Login\"\n              onSuccess={handleLogin}\n              onFailure={handleFailure}\n              cookiePolicy={\"single_host_origin\"}\n            />\n          </Form>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <span id=\"signupLink\" className=\"text-center\">\n            Don't have an account?\n            <br /> Sign up <a href=\"/signup\">here</a>!\n          </span>\n        </Row>\n      </Container>\n    </>\n  );\n}\n","import React from \"react\";\nimport Dashboard from \"../Comps/Dashboard\";\nimport Login from \"../Comps/Login\";\nimport { useUserContext } from \"../utils/UserProvider\";\nimport \"../Comps/Inputs/input.sass\";\n\nexport default function Home() {\n  const { user, setUser } = useUserContext();\n  return <> {user ? <Dashboard user={user} /> : <Login setUser={setUser} />}</>;\n}\n","import { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Container, Row, Form } from \"react-bootstrap\";\nimport Header from \"./Header\";\nimport { useViewport } from \"../utils/ViewportProvider\";\nimport PhoneInput from \"react-phone-number-input\";\nimport \"react-phone-number-input/style.css\";\n\nimport API from \"../utils/API\";\nimport { firebaseSignIn } from \"../firebase\";\n\nfunction Signup({ setUser, className }) {\n  // STATE\n  //================================================================================\n  const { width } = useViewport();\n  const [formWidth, setFormWidth] = useState(\"100%\");\n  const [phoneNum, setphoneNUM] = useState();\n  const [givenName, setGivenName] = useState(\"\");\n  const [familyName, setFamilyName] = useState(\"\");\n  const [buttonDisabled, setButtonDisabled] = useState(true);\n\n  // REFS\n  //================================================================================\n  const givenNameRef = useRef();\n  const familyNameRef = useRef();\n\n  // FUNCTIONS\n  //================================================================================\n  function handleSignup(newUser) {\n    API.signup(\n      newUser,\n      (user) => {\n        const stringifiedUser = JSON.stringify(user);\n        setUser(stringifiedUser);\n        window.location.href = \"/\";\n      },\n      (error) => {\n        alert(\"That user already exists. Please sign in.\");\n        console.log(error);\n      }\n    );\n  }\n\n  function googleSignup(event) {\n    event.preventDefault();\n    if (!givenName || !familyName || !phoneNum) return;\n\n    firebaseSignIn(\n      (user) => {\n        console.log(user);\n        const { email, photoURL, uid } = user;\n        const newUser = {\n          email,\n          givenName,\n          familyName,\n          photoURL,\n          phoneNum,\n          uid,\n        };\n        handleSignup(newUser);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  function handleGivenNameChange(e) {\n    e.preventDefault();\n    if (!givenNameRef.current.value) return;\n    setGivenName(givenNameRef.current.value);\n  }\n\n  function handleFamilyNameChange(e) {\n    e.preventDefault();\n    if (!familyNameRef.current.value) return;\n    setFamilyName(familyNameRef.current.value);\n  }\n\n  // EFFECTS\n  //================================================================================\n  useEffect(() => {\n    if (width < 680) setFormWidth(\"100%\");\n    setFormWidth(`${width / 1.5}px`);\n    return () => {\n      return;\n    };\n  }, [width]);\n\n  useEffect(() => {\n    if (\n      phoneNum === undefined ||\n      phoneNum === null ||\n      !familyName ||\n      !givenName\n    )\n      return;\n\n    let mutablePN = phoneNum.replace(/[+]/g, \"\");\n    if (mutablePN.match(/\\d/g).length === 11 && givenName && familyName)\n      setButtonDisabled(false);\n    else setButtonDisabled(true);\n  }, [phoneNum, familyName, givenName]);\n\n  // RENDER\n  //================================================================================\n  return (\n    <div className={className}>\n      <Header />\n\n      <Container style={{ width: formWidth }}>\n        <Row className=\"justify-content-center\">\n          <Form id=\"form\" className={`text-center`}>\n            <h2>Sign up here to get started</h2>\n            <h5 className=\"mb-3 font-light\">\n              {/* Need to make this font not bold */}\n              Because we want to keep your information as safe as possible, just\n              fill in your phone number, and then please use your Google account\n              to sign up.\n            </h5>\n            <PhoneInput\n              id=\"phoneInput\"\n              country=\"US\"\n              defaultCountry=\"US\"\n              placeholder=\"+0 000 000 0000\"\n              value={phoneNum}\n              onChange={setphoneNUM}\n            />\n            <div className=\"m-5\">\n              <input\n                onChange={handleGivenNameChange}\n                placeholder=\"First Name\"\n                type=\"text\"\n                ref={givenNameRef}\n              ></input>\n              <input\n                onChange={handleFamilyNameChange}\n                placeholder=\"Last Name\"\n                type=\"text\"\n                ref={familyNameRef}\n              ></input>\n              <button\n                className=\"button\"\n                onClick={googleSignup}\n                disabled={buttonDisabled}\n              >\n                Sign up using your google account\n              </button>\n              {/* <GoogleLogin\n                clientId=\"957666672016-3850ch4mr24gvr89bmt514bn7u359mb4.apps.googleusercontent.com\"\n                buttonText=\"Sign up\"\n                onSuccess={googleSignup}\n                onFailure={googleSignup}\n                cookiePolicy={\"single_host_origin\"}\n                disabled={buttonDisabled}\n              /> */}\n            </div>\n          </Form>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <span id=\"loginLink\" className=\"text-center\">\n            Already have an account?\n            <br /> Login <a href=\"/\">here</a>!\n          </span>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default styled(Signup)`\n  & .button:disabled {\n    background-color: black;\n    color: grey;\n  }\n`;\n","import React, { useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport ViewportProvider from \"./utils/ViewportProvider\";\nimport UserProvider from \"./utils/UserProvider\";\nimport ConversationProvider from \"./utils/ConversationProvider\";\nimport ContactProvider from \"./utils/ContactProvider\";\nimport UIProvider from \"./utils/UIProvider\";\n\nimport useLocalStorage from \"./utils/useLocalStorage\";\nimport ThemeProvider from \"./utils/Theme/ThemeProvider\";\n\nimport Home from \"./Comps/Home\";\nimport Signup from \"./Comps/Signup\";\n\nfunction App() {\n  // I need a better way to handle the updating of user information\n  // if a conversation, contact, or message is added/deleted\n  // I need an effect that will listen for that and call the db to update the user\n  //  witihin the app accordingly. Right now, after reseting the database,\n  // all the contacts are still stored on the user in local storage which is fine,\n  // but like i said, just need an update effect so that if things change on the db\n  // side, it is reflected in the browser siede\n\n  //STATE\n  //================================================================================\n  const [user, setUser] = useLocalStorage(\"user\", 0);\n\n  //FUNCTIONS\n  //================================================================================\n  const checkForESC = (event) => {\n    if (event.key !== \"Escape\") return;\n    event.preventDefault();\n    document.activeElement.blur();\n  };\n\n  //EFFECTS\n  //================================================================================\n  // Basic functionality of \"hit esc - kill focus\"\n  useEffect(() => {\n    document.addEventListener(\"keydown\", checkForESC, false);\n\n    return () => {\n      document.removeEventListener(\"keydown\", checkForESC, false);\n    };\n  }, []);\n\n  //COMPONENT\n  //================================================================================\n  return (\n    <UserProvider user={user} setUser={setUser}>\n      <ThemeProvider>\n        <ViewportProvider>\n          <UIProvider>\n            <ConversationProvider>\n              <ContactProvider>\n                <Router>\n                  <Switch>\n                    <Route exact path=\"/signup\">\n                      <Signup setUser={setUser} />\n                    </Route>\n                    <Route exact path=\"/\">\n                      <Home />\n                    </Route>\n                  </Switch>\n                </Router>\n              </ContactProvider>\n            </ConversationProvider>\n          </UIProvider>\n        </ViewportProvider>\n      </ThemeProvider>\n    </UserProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.sass\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}