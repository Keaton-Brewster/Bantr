{"ast":null,"code":"import _extends from \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Chats/CometChatConversationList/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { ConversationListManager } from \"./controller\";\nimport { CometChatConfirmDialog, CometChatToastNotification } from \"../../Shared\";\nimport { CometChatConversationListItem } from \"../\";\nimport { CometChatContextProvider, CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { UIKitSettings } from \"../../../util/UIKitSettings\";\nimport { SoundManager } from \"../../../util/SoundManager\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\nimport { chatsWrapperStyle, chatsHeaderStyle, chatsHeaderCloseStyle, chatsHeaderTitleStyle, chatsMsgStyle, chatsMsgTxtStyle, chatsListStyle } from \"./style\";\nimport navigateIcon from \"./resources/back.svg\";\n\nclass CometChatConversationList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loggedInUser = null;\n    this.selectedConversation = null;\n\n    this.setSelectedConversation = () => {\n      const conversationList = [...this.state.conversationlist];\n      conversationList.forEach(conversation => {\n        if ((conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === this.getContext().type) {\n          var _conversation$convers, _this$getContext$item, _conversation$convers2, _this$getContext$item2;\n\n          if ((conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === CometChat.ACTION_TYPE.TYPE_USER && (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers = conversation.conversationWith) === null || _conversation$convers === void 0 ? void 0 : _conversation$convers.uid) === ((_this$getContext$item = this.getContext().item) === null || _this$getContext$item === void 0 ? void 0 : _this$getContext$item.uid) || (conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === CometChat.ACTION_TYPE.TYPE_GROUP && (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers2 = conversation.conversationWith) === null || _conversation$convers2 === void 0 ? void 0 : _conversation$convers2.guid) === ((_this$getContext$item2 = this.getContext().item) === null || _this$getContext$item2 === void 0 ? void 0 : _this$getContext$item2.guid)) {\n            this.selectedConversation = { ...conversation\n            };\n          }\n        }\n      });\n    };\n\n    this.conversationCallback = (key, item, message, options) => {\n      switch (key) {\n        case enums.USER_ONLINE:\n        case enums.USER_OFFLINE:\n          this.updateUser(item);\n          break;\n\n        case enums.TEXT_MESSAGE_RECEIVED:\n        case enums.MEDIA_MESSAGE_RECEIVED:\n        case enums.CUSTOM_MESSAGE_RECEIVED:\n        case enums.INCOMING_CALL_RECEIVED:\n        case enums.INCOMING_CALL_CANCELLED:\n        case enums.MESSAGE_EDITED:\n        case enums.MESSAGE_DELETED:\n        case enums.MESSAGE_READ:\n        case enums.GROUP_MEMBER_ADDED:\n        case enums.GROUP_MEMBER_KICKED:\n        case enums.GROUP_MEMBER_BANNED:\n        case enums.GROUP_MEMBER_LEFT:\n        case enums.GROUP_MEMBER_SCOPE_CHANGED:\n        case enums.GROUP_MEMBER_JOINED:\n        case enums.GROUP_MEMBER_UNBANNED:\n          this.conversationUpdated(key, message, options);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.conversationUpdated = (key, message, options) => {\n      const chatListMode = this.getContext().UIKitSettings.chatListMode;\n      const chatListFilterOptions = UIKitSettings.chatListFilterOptions;\n\n      if (chatListMode !== chatListFilterOptions[\"USERS_AND_GROUPS\"]) {\n        if (chatListMode === chatListFilterOptions[\"USERS\"] && message.receiverType === CometChat.RECEIVER_TYPE.GROUP || chatListMode === chatListFilterOptions[\"GROUPS\"] && message.receiverType === CometChat.RECEIVER_TYPE.USER) {\n          return false;\n        }\n      }\n\n      switch (key) {\n        case enums.TEXT_MESSAGE_RECEIVED:\n        case enums.MEDIA_MESSAGE_RECEIVED:\n        case enums.CUSTOM_MESSAGE_RECEIVED:\n        case enums.INCOMING_CALL_RECEIVED:\n        case enums.INCOMING_CALL_CANCELLED:\n          this.updateConversation(key, message);\n          break;\n\n        case enums.MESSAGE_EDITED:\n        case enums.MESSAGE_DELETED:\n          this.conversationEditedDeleted(message);\n          break;\n\n        case enums.GROUP_MEMBER_ADDED:\n          this.updateGroupMemberAdded(message, options);\n          break;\n\n        case enums.GROUP_MEMBER_KICKED:\n        case enums.GROUP_MEMBER_BANNED:\n        case enums.GROUP_MEMBER_LEFT:\n          this.updateGroupMemberRemoved(message, options);\n          break;\n\n        case enums.GROUP_MEMBER_SCOPE_CHANGED:\n          this.updateGroupMemberScopeChanged(message, options);\n          break;\n\n        case enums.GROUP_MEMBER_JOINED:\n        case enums.GROUP_MEMBER_UNBANNED:\n          this.updateGroupMemberChanged(message, options);\n          break;\n\n        case enums.MESSAGE_READ:\n          this.onMessagesRead(message);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.updateUser = user => {\n      const conversationlist = [...this.state.conversationlist];\n      const conversationKey = conversationlist.findIndex(conversationObj => conversationObj.conversationType === \"user\" && conversationObj.conversationWith.uid === user.uid);\n\n      if (conversationKey > -1) {\n        let conversationObj = { ...conversationlist[conversationKey]\n        };\n        let conversationWithObj = { ...conversationObj.conversationWith,\n          status: user.getStatus()\n        };\n        let newConversationObj = { ...conversationObj,\n          conversationWith: conversationWithObj\n        };\n        conversationlist.splice(conversationKey, 1, newConversationObj);\n        this.setState({\n          conversationlist: conversationlist\n        });\n      }\n    };\n\n    this.hideGroupActionMessages = () => {\n      this.getContext().FeatureRestriction.isGroupActionMessagesEnabled().then(response => {\n        if (response !== this.state.hideGroupActionMessages) {\n          this.setState({\n            hideGroupActionMessages: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.hideGroupActionMessages !== false) {\n          this.setState({\n            hideGroupActionMessages: false\n          });\n        }\n      });\n    };\n\n    this.playAudio = message => {\n      if (message.category === CometChat.CATEGORY_ACTION && message.type === CometChat.ACTION_TYPE.TYPE_GROUP_MEMBER && this.state.hideGroupActionMessages === true) {\n        return false;\n      }\n      /**\n       * Sound alert for incoming messages\n       */\n\n\n      const receiverType = message.getReceiverType();\n      const receiverId = receiverType === CometChat.RECEIVER_TYPE.USER ? message.getSender().uid : message.getReceiverId();\n\n      if (receiverType === this.getContext().type) {\n        if (receiverType === CometChat.RECEIVER_TYPE.USER && receiverId === this.getContext().item.uid || receiverType === CometChat.RECEIVER_TYPE.GROUP && receiverId === this.getContext().item.guid) {\n          SoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_MESSAGE\"], this.getContext());\n        } else {\n          SoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_OTHER_MESSAGE\"], this.getContext());\n        }\n      } else {\n        SoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_OTHER_MESSAGE\"], this.getContext());\n      }\n    };\n\n    this.onMessagesRead = messageReceipt => {\n      const conversationList = [...this.state.conversationlist];\n      conversationList.forEach((conversation, conversationKey) => {\n        if ((conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === messageReceipt.receiverType) {\n          var _conversation$convers3, _conversation$convers4;\n\n          if ((conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === CometChat.RECEIVER_TYPE.USER && messageReceipt.receiver === (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers3 = conversation.conversationWith) === null || _conversation$convers3 === void 0 ? void 0 : _conversation$convers3.uid) || (conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === CometChat.RECEIVER_TYPE.GROUP && messageReceipt.receiver === (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers4 = conversation.conversationWith) === null || _conversation$convers4 === void 0 ? void 0 : _conversation$convers4.guid)) {\n            var _conversation$lastMes;\n\n            let unreadMessageCount = conversation.unreadMessageCount;\n            /**\n             * If the message id of the read reciept if greater than or equal to the lastmessage id, set unreadmessagecount to 0\n             */\n\n            if ((messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.messageId) >= (conversation === null || conversation === void 0 ? void 0 : (_conversation$lastMes = conversation.lastMessage) === null || _conversation$lastMes === void 0 ? void 0 : _conversation$lastMes.id)) {\n              unreadMessageCount = 0;\n            }\n\n            let newConversationObj = { ...conversation,\n              unreadMessageCount: unreadMessageCount\n            };\n            conversationList.splice(conversationKey, 1, newConversationObj);\n            this.setState({\n              conversationlist: conversationList\n            });\n          }\n        }\n      });\n    };\n\n    this.makeConversation = message => {\n      const promise = new Promise(resolve => {\n        CometChat.CometChatHelper.getConversationFromMessage(message).then(conversation => {\n          let conversationList = [...this.state.conversationlist];\n          let conversationKey = conversationList.findIndex(c => c.conversationId === conversation.conversationId);\n          let conversationObj = { ...conversation\n          };\n\n          if (conversationKey > -1) {\n            conversationObj = { ...conversationList[conversationKey]\n            };\n          }\n\n          resolve({\n            conversationKey: conversationKey,\n            conversationObj: conversationObj,\n            conversationList: conversationList\n          });\n        });\n      });\n      return promise;\n    };\n\n    this.makeUnreadMessageCount = (message, conversation = {}) => {\n      /**\n       * If the received message is sent by the logged in user, don't increment the unread count\n       */\n      if (Object.keys(conversation).length === 0) {\n        var _this$loggedInUser;\n\n        if (message.sender.uid === ((_this$loggedInUser = this.loggedInUser) === null || _this$loggedInUser === void 0 ? void 0 : _this$loggedInUser.uid)) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n\n      let unreadMessageCount = parseInt(conversation.unreadMessageCount);\n\n      if (this.selectedConversation && this.selectedConversation.conversationId === conversation.conversationId) {\n        if (this.getContext().unreadMessages.length) {\n          const unreadMessage = this.getContext().unreadMessages[0];\n          const selectedConversation = this.selectedConversation;\n\n          if (unreadMessage.hasOwnProperty(\"conversationId\") && unreadMessage.conversationId === selectedConversation.conversationId) {\n            unreadMessageCount = 0;\n            this.getContext().unreadMessages.forEach(message => {\n              unreadMessageCount = this.shouldIncrementCount(message) ? ++unreadMessageCount : unreadMessageCount;\n            });\n          }\n        } else {\n          unreadMessageCount = 0;\n        }\n      } else if (this.getContext().item.hasOwnProperty(\"guid\") && conversation.conversationWith.hasOwnProperty(\"guid\") && this.getContext().item.guid === conversation.conversationWith.guid || this.getContext().item.hasOwnProperty(\"uid\") && conversation.conversationWith.hasOwnProperty(\"uid\") && this.getContext().item.uid === conversation.conversationWith.uid) {\n        unreadMessageCount = 0;\n      } else {\n        unreadMessageCount = this.shouldIncrementCount(message) ? ++unreadMessageCount : unreadMessageCount;\n      }\n\n      return unreadMessageCount;\n    };\n\n    this.shouldIncrementCount = incomingMessage => {\n      var _this$loggedInUser2, _this$loggedInUser3;\n\n      let output = false;\n\n      if (incomingMessage.category === CometChat.CATEGORY_MESSAGE && incomingMessage.sender.uid !== ((_this$loggedInUser2 = this.loggedInUser) === null || _this$loggedInUser2 === void 0 ? void 0 : _this$loggedInUser2.uid) || this.getContext().hasKeyValue(incomingMessage, enums.KEYS[\"METADATA\"]) && this.getContext().hasKeyValue(incomingMessage[enums.KEYS[\"METADATA\"]], enums.KEYS[\"INCREMENT_UNREAD_COUNT\"]) && incomingMessage[enums.KEYS[\"METADATA\"]][enums.KEYS[\"INCREMENT_UNREAD_COUNT\"]] === true && incomingMessage.sender.uid !== ((_this$loggedInUser3 = this.loggedInUser) === null || _this$loggedInUser3 === void 0 ? void 0 : _this$loggedInUser3.uid)) {\n        output = true;\n      }\n\n      return output;\n    };\n\n    this.makeLastMessage = (message, conversation = {}) => {\n      const newMessage = Object.assign({}, message);\n      return newMessage;\n    };\n\n    this.updateConversation = (key, message) => {\n      this.makeConversation(message).then(response => {\n        const {\n          conversationKey,\n          conversationObj,\n          conversationList\n        } = response;\n\n        if (conversationKey > -1) {\n          let unreadMessageCount = this.makeUnreadMessageCount(message, conversationObj);\n          let lastMessageObj = this.makeLastMessage(message, conversationObj);\n          let newConversationObj = { ...conversationObj,\n            lastMessage: lastMessageObj,\n            unreadMessageCount: unreadMessageCount\n          };\n          conversationList.splice(conversationKey, 1);\n          conversationList.unshift(newConversationObj);\n          this.setState({\n            conversationlist: conversationList\n          });\n\n          if (key !== enums.INCOMING_CALL_RECEIVED && key !== enums.INCOMING_CALL_CANCELLED) {\n            this.playAudio(message);\n          }\n        } else {\n          let unreadMessageCount = this.makeUnreadMessageCount(message, {});\n          let lastMessageObj = this.makeLastMessage(message);\n          let newConversationObj = { ...conversationObj,\n            lastMessage: lastMessageObj,\n            unreadMessageCount: unreadMessageCount\n          };\n          conversationList.unshift(newConversationObj);\n          this.setState({\n            conversationlist: conversationList\n          });\n\n          if (key !== enums.INCOMING_CALL_RECEIVED && key !== enums.INCOMING_CALL_CANCELLED) {\n            this.playAudio(message);\n          }\n        }\n      });\n    };\n\n    this.conversationEditedDeleted = message => {\n      this.makeConversation(message).then(response => {\n        const {\n          conversationKey,\n          conversationObj,\n          conversationList\n        } = response;\n\n        if (conversationKey > -1) {\n          let lastMessageObj = conversationObj.lastMessage;\n\n          if (lastMessageObj.id === message.id) {\n            const newLastMessageObj = Object.assign({}, lastMessageObj, message);\n            let newConversationObj = Object.assign({}, conversationObj, {\n              lastMessage: newLastMessageObj\n            });\n            conversationList.splice(conversationKey, 1, newConversationObj);\n            this.setState({\n              conversationlist: conversationList\n            });\n          }\n        }\n      });\n    };\n\n    this.updateGroupMemberAdded = (message, options) => {\n      this.makeConversation(message).then(response => {\n        const {\n          conversationKey,\n          conversationObj,\n          conversationList\n        } = response;\n\n        if (conversationKey > -1) {\n          let lastMessageObj = this.makeLastMessage(message, conversationObj);\n          let conversationWithObj = { ...conversationObj.conversationWith\n          };\n          let membersCount = parseInt(conversationWithObj.membersCount);\n\n          if (message.hasOwnProperty(\"actionFor\") && message.actionFor.hasOwnProperty(\"membersCount\")) {\n            membersCount = message.actionFor.membersCount;\n          }\n\n          let newConversationWithObj = { ...conversationWithObj,\n            membersCount: membersCount\n          };\n          let newConversationObj = { ...conversationObj,\n            conversationWith: newConversationWithObj,\n            lastMessage: lastMessageObj\n          };\n          conversationList.splice(conversationKey, 1);\n          conversationList.unshift(newConversationObj);\n          this.setState({\n            conversationlist: conversationList\n          });\n          this.playAudio(message);\n        } else {\n          if (options && this.loggedInUser.uid === options.user.uid) {\n            let lastMessageObj = this.makeLastMessage(message);\n            let conversationWithObj = { ...conversationObj.conversationWith\n            };\n            let membersCount = parseInt(conversationWithObj.membersCount);\n\n            if (message.hasOwnProperty(\"actionFor\") && message.actionFor.hasOwnProperty(\"membersCount\")) {\n              membersCount = message.actionFor.membersCount;\n            }\n\n            let scope = CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT;\n            let hasJoined = options.hasJoined;\n            let newConversationWithObj = { ...conversationWithObj,\n              membersCount: membersCount,\n              scope: scope,\n              hasJoined: hasJoined\n            };\n            let newConversationObj = { ...conversationObj,\n              conversationWith: newConversationWithObj,\n              lastMessage: lastMessageObj\n            };\n            conversationList.unshift(newConversationObj);\n            this.setState({\n              conversationlist: conversationList\n            });\n            this.playAudio(message);\n          }\n        }\n      });\n    };\n\n    this.updateGroupMemberRemoved = (message, options) => {\n      this.makeConversation(message).then(response => {\n        const {\n          conversationKey,\n          conversationObj,\n          conversationList\n        } = response;\n\n        if (conversationKey > -1) {\n          if (options && this.loggedInUser.uid === options.user.uid) {\n            conversationList.splice(conversationKey, 1);\n            this.setState({\n              conversationlist: conversationList\n            });\n          } else {\n            let lastMessageObj = this.makeLastMessage(message, conversationObj);\n            let conversationWithObj = { ...conversationObj.conversationWith\n            };\n            let membersCount = parseInt(conversationWithObj.membersCount);\n\n            if (message.hasOwnProperty(\"actionFor\") && message.actionFor.hasOwnProperty(\"membersCount\")) {\n              membersCount = message.actionFor.membersCount;\n            }\n\n            let newConversationWithObj = { ...conversationWithObj,\n              membersCount: membersCount\n            };\n            let newConversationObj = { ...conversationObj,\n              conversationWith: newConversationWithObj,\n              lastMessage: lastMessageObj\n            };\n            conversationList.splice(conversationKey, 1);\n            conversationList.unshift(newConversationObj);\n            this.setState({\n              conversationlist: conversationList\n            });\n            this.playAudio(message);\n          }\n        }\n      });\n    };\n\n    this.updateGroupMemberScopeChanged = (message, options) => {\n      this.makeConversation(message).then(response => {\n        const {\n          conversationKey,\n          conversationObj,\n          conversationList\n        } = response;\n\n        if (conversationKey > -1) {\n          let lastMessageObj = this.makeLastMessage(message, conversationObj);\n          let conversationWithObj = { ...conversationObj.conversationWith\n          };\n          let membersCount = parseInt(conversationWithObj.membersCount);\n          let scope = conversationWithObj.scope;\n\n          if (options && this.loggedInUser.uid === options.user.uid) {\n            scope = options.scope;\n          }\n\n          let newConversationWithObj = { ...conversationWithObj,\n            membersCount: membersCount,\n            scope: scope\n          };\n          let newConversationObj = { ...conversationObj,\n            conversationWith: newConversationWithObj,\n            lastMessage: lastMessageObj\n          };\n          conversationList.splice(conversationKey, 1);\n          conversationList.unshift(newConversationObj);\n          this.setState({\n            conversationlist: conversationList\n          });\n          this.playAudio(message);\n        }\n      });\n    };\n\n    this.updateGroupMemberChanged = (message, options) => {\n      this.makeConversation(message).then(response => {\n        const {\n          conversationKey,\n          conversationObj,\n          conversationList\n        } = response;\n\n        if (conversationKey > -1) {\n          if (options && this.loggedInUser.uid !== options.user.uid) {\n            let lastMessageObj = this.makeLastMessage(message, conversationObj);\n            let conversationWithObj = { ...conversationObj.conversationWith\n            };\n            let membersCount = parseInt(conversationWithObj.membersCount);\n\n            if (message.hasOwnProperty(\"actionFor\") && message.actionFor.hasOwnProperty(\"membersCount\")) {\n              membersCount = message.actionFor.membersCount;\n            }\n\n            let newConversationWithObj = { ...conversationWithObj,\n              membersCount: membersCount\n            };\n            let newConversationObj = { ...conversationObj,\n              conversationWith: newConversationWithObj,\n              lastMessage: lastMessageObj\n            };\n            conversationList.splice(conversationKey, 1);\n            conversationList.unshift(newConversationObj);\n            this.setState({\n              conversationlist: conversationList\n            });\n            this.playAudio(message);\n          }\n        }\n      });\n    };\n\n    this.handleScroll = e => {\n      const bottom = Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) === Math.round(e.currentTarget.clientHeight);\n      if (bottom) this.getConversations();\n    };\n\n    this.handleClick = conversation => {\n      if (!this.props.onItemClick) return;\n      this.props.onItemClick(conversation.conversationWith, conversation.conversationType);\n      this.selectedConversation = conversation;\n    };\n\n    this.handleMenuClose = () => {\n      if (!this.props.actionGenerated) {\n        return false;\n      }\n\n      this.props.actionGenerated(enums.ACTIONS[\"TOGGLE_SIDEBAR\"]);\n    };\n\n    this.getConversations = () => {\n      this.ConversationListManager.fetchNextConversation().then(conversationList => {\n        if (conversationList.length === 0) {\n          if (this.state.conversationlist.length === 0) {\n            this.setState({\n              decoratorMessage: Translator.translate(\"NO_CHATS_FOUND\", this.state.lang)\n            });\n          }\n        } else {\n          this.setState({\n            decoratorMessage: \"\"\n          });\n        }\n\n        conversationList.forEach(conversation => {\n          if (this.getContext().hasOwnProperty(\"type\") && this.props.hasOwnProperty(\"item\") && this.getContext().type === conversation.conversationType) {\n            if (conversation.conversationType === CometChat.RECEIVER_TYPE.USER && this.getContext().item.uid === conversation.conversationWith.uid || conversation.conversationType === CometChat.RECEIVER_TYPE.GROUP && this.getContext().item.guid === conversation.conversationWith.guid) {\n              conversation.unreadMessageCount = 0;\n            }\n          }\n        });\n        this.setState({\n          conversationlist: [...this.state.conversationlist, ...conversationList]\n        });\n      }).catch(error => this.setState({\n        decoratorMessage: Translator.translate(\"SOMETHING_WRONG\", this.state.lang)\n      }));\n    };\n\n    this.getContext = () => {\n      if (this.props._parent.length) {\n        return this.context;\n      } else {\n        return this.contextProviderRef.state;\n      }\n    };\n\n    this.actionHandler = (action, conversation) => {\n      switch (action) {\n        case enums.ACTIONS[\"CONVERSATION_DELETED\"]:\n          this.conversationDeleted(conversation);\n          break;\n\n        case enums.ACTIONS[\"DELETE_CONVERSATION\"]:\n          this.deleteConversation(conversation);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.deleteConversation = conversation => {\n      if (!this.state.showConfirmDialog) {\n        this.setState({\n          showConfirmDialog: true\n        });\n      }\n    };\n\n    this.onDeleteConfirm = e => {\n      const optionSelected = e.target.value;\n      this.setState({\n        showConfirmDialog: false\n      });\n\n      if (optionSelected === \"yes\") {\n        var _conversation$convers5, _conversation$convers6;\n\n        const conversation = this.context.conversationToBeDeleted;\n        const conversationWith = conversation.conversationType === CometChat.RECEIVER_TYPE.GROUP ? conversation === null || conversation === void 0 ? void 0 : (_conversation$convers5 = conversation.conversationWith) === null || _conversation$convers5 === void 0 ? void 0 : _conversation$convers5.guid : conversation === null || conversation === void 0 ? void 0 : (_conversation$convers6 = conversation.conversationWith) === null || _conversation$convers6 === void 0 ? void 0 : _conversation$convers6.uid;\n        CometChat.deleteConversation(conversationWith, conversation.conversationType).then(deletedConversation => {\n          this.context.setConversationToBeDeleted(null);\n          this.conversationDeleted(conversation);\n        }).catch(error => this.toastRef.setError(\"SOMETHING_WRONG\"));\n      } else {\n        this.context.setConversationToBeDeleted(null);\n        this.setState({\n          showConfirmDialog: false\n        });\n      }\n    };\n\n    this.conversationDeleted = conversation => {\n      const conversationList = [...this.state.conversationlist];\n      const conversationKey = conversationList.findIndex(c => c.conversationId === conversation.conversationId);\n\n      if (conversationKey > -1) {\n        if (this.selectedConversation && this.selectedConversation.conversationId === conversation.conversationId) {\n          this.selectedConversation = null;\n          this.getContext().setTypeAndItem(\"\", {});\n        }\n\n        conversationList.splice(conversationKey, 1);\n        this.setState({\n          conversationlist: conversationList\n        });\n      }\n    };\n\n    this.state = {\n      conversationlist: [],\n      onItemClick: null,\n      lang: props.lang,\n      hideGroupActionMessages: false,\n      showConfirmDialog: false,\n      decoratorMessage: Translator.translate(\"LOADING\", props.lang)\n    };\n    this.contextProviderRef = /*#__PURE__*/React.createRef();\n    this.chatListRef = /*#__PURE__*/React.createRef();\n    this.toastRef = /*#__PURE__*/React.createRef();\n    CometChat.getLoggedinUser().then(user => this.loggedInUser = user).catch(error => this.setState({\n      decoratorMessage: Translator.translate(\"SOMETHING_WRONG\", this.state.lang)\n    }));\n  }\n\n  componentDidMount() {\n    this.item = this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER || CometChat.ACTION_TYPE.TYPE_GROUP ? this.getContext().item : null;\n    this.hideGroupActionMessages();\n    this.setState({\n      conversationlist: []\n    }, () => {\n      this.ConversationListManager = new ConversationListManager(this.getContext());\n      this.getConversations();\n      this.ConversationListManager.attachListeners(this.conversationCallback);\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    //when a particular chat is selected from the chats list\n    if (this.getContext().item !== this.item) {\n      const conversationlist = [...this.state.conversationlist];\n      const conversationObj = conversationlist.find(c => {\n        if (c.conversationType === this.getContext().type && this.getContext().type === CometChat.RECEIVER_TYPE.USER && c.conversationWith.uid === this.getContext().item.uid || c.conversationType === this.getContext().type && this.getContext().type === CometChat.RECEIVER_TYPE.GROUP && c.conversationWith.guid === this.getContext().item.guid) {\n          return c;\n        }\n\n        return false;\n      });\n\n      if (conversationObj) {\n        let conversationKey = conversationlist.indexOf(conversationObj);\n        let newConversationObj = { ...conversationObj,\n          unreadMessageCount: 0\n        };\n        conversationlist.splice(conversationKey, 1, newConversationObj);\n        this.setState({\n          conversationlist: conversationlist\n        });\n      }\n\n      if (Object.keys(this.getContext().item).length === 0) {\n        this.selectedConversation = null;\n      }\n    } //if user is blocked/unblocked, update conversationlist in state\n\n\n    if (this.item && Object.keys(this.item).length && this.item.hasOwnProperty(\"uid\") && this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER && this.item.uid === this.getContext().item.uid && this.item.blockedByMe !== this.getContext().item.blockedByMe) {\n      let conversationlist = [...this.state.conversationlist]; //search for user\n\n      let convKey = conversationlist.findIndex(c => c.conversationType === CometChat.ACTION_TYPE.TYPE_USER && c.conversationWith.uid === this.getContext().item.uid);\n\n      if (convKey > -1) {\n        const convObj = conversationlist[convKey];\n        let convWithObj = { ...convObj.conversationWith\n        };\n        let newConvWithObj = Object.assign({}, convWithObj, {\n          blockedByMe: this.getContext().item.blockedByMe\n        });\n        let newConvObj = Object.assign({}, convObj, {\n          conversationWith: newConvWithObj\n        });\n        conversationlist.splice(convKey, 1, newConvObj);\n        this.setState({\n          conversationlist: conversationlist\n        });\n      }\n    } //if group detail(membersCount) is updated, update grouplist\n\n\n    if (this.item && Object.keys(this.item).length && this.item.hasOwnProperty(\"guid\") && this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP && this.item.guid === this.getContext().item.guid && this.item.membersCount !== this.getContext().item.membersCount) {\n      const conversationlist = [...this.state.conversationlist];\n      let convKey = conversationlist.findIndex(c => c.conversationType === CometChat.ACTION_TYPE.TYPE_GROUP && c.conversationWith.guid === this.getContext().item.guid);\n\n      if (convKey > -1) {\n        const convObj = conversationlist[convKey];\n        let convWithObj = { ...convObj.conversationWith\n        };\n        let newConvWithObj = Object.assign({}, convWithObj, {\n          membersCount: this.getContext().item.membersCount\n        });\n        let newConvObj = Object.assign({}, convObj, {\n          conversationWith: newConvWithObj\n        });\n        conversationlist.splice(convKey, 1, newConvObj);\n        this.setState({\n          conversationlist: conversationlist\n        });\n      }\n    } //upon user deleting a group, remove group from conversation list\n\n\n    if (this.getContext().deletedGroupId.trim().length) {\n      const guid = this.getContext().deletedGroupId.trim();\n      const conversationlist = [...this.state.conversationlist];\n      let conversationKey = conversationlist.findIndex(c => c.conversationType === CometChat.ACTION_TYPE.TYPE_GROUP && c.conversationWith.guid === guid);\n\n      if (conversationKey > -1) {\n        conversationlist.splice(conversationKey, 1);\n        this.setState({\n          conversationlist: conversationlist\n        });\n      }\n    } //upon user leaving a group, remove group from conversation list\n\n\n    if (this.getContext().leftGroupId.trim().length) {\n      const guid = this.getContext().leftGroupId.trim();\n      const conversationlist = [...this.state.conversationlist];\n      let conversationKey = conversationlist.findIndex(c => c.conversationType === CometChat.ACTION_TYPE.TYPE_GROUP && c.conversationWith.guid === guid);\n\n      if (conversationKey > -1) {\n        conversationlist.splice(conversationKey, 1);\n        this.setState({\n          conversationlist: conversationlist\n        });\n      }\n    } //updating last message whenever a message is composed,\n\n\n    if (Object.keys(this.getContext().lastMessage).length) {\n      const lastMessage = this.getContext().lastMessage;\n      const conversationList = [...this.state.conversationlist];\n      const conversationKey = conversationList.findIndex(c => c.conversationId === lastMessage.conversationId);\n\n      if (conversationKey > -1) {\n        const conversationObj = conversationList[conversationKey];\n        let newConversationObj = { ...conversationObj,\n          lastMessage: { ...lastMessage\n          }\n        };\n\n        if (conversationKey === 0) {\n          conversationList.splice(conversationKey, 1, newConversationObj);\n        } else {\n          conversationList.splice(conversationKey, 1);\n          conversationList.unshift(newConversationObj);\n        }\n\n        this.setState({\n          conversationlist: conversationList\n        });\n        this.getContext().setLastMessage({});\n      } else {\n        const chatListMode = this.getContext().UIKitSettings.chatListMode;\n        const chatListFilterOptions = UIKitSettings.chatListFilterOptions;\n\n        if (chatListMode !== chatListFilterOptions[\"USERS_AND_GROUPS\"]) {\n          if (chatListMode === chatListFilterOptions[\"USERS\"] && lastMessage.receiverType === CometChat.RECEIVER_TYPE.GROUP || chatListMode === chatListFilterOptions[\"GROUPS\"] && lastMessage.receiverType === CometChat.RECEIVER_TYPE.USER) {\n            return false;\n          }\n        }\n\n        const getConversationId = () => {\n          let conversationId = null;\n\n          if (this.getContext().type === CometChat.RECEIVER_TYPE.USER) {\n            const users = [this.loggedInUser.uid, this.getContext().item.uid];\n            conversationId = users.sort().join(\"_user_\");\n          } else if (this.getContext().type === CometChat.RECEIVER_TYPE.GROUP) {\n            conversationId = `group_${this.getContext().item.guid}`;\n          }\n\n          return conversationId;\n        };\n\n        let newConversation = new CometChat.Conversation();\n        newConversation.setConversationId(getConversationId());\n        newConversation.setConversationType(this.getContext().type);\n        newConversation.setConversationWith(this.getContext().item);\n        newConversation.setLastMessage(lastMessage);\n        newConversation.setUnreadMessageCount(0);\n        conversationList.unshift(newConversation);\n        this.setState({\n          conversationlist: conversationList\n        });\n        this.getContext().setLastMessage({});\n      }\n    }\n\n    if (prevProps.lang !== this.props.lang) {\n      this.setState({\n        lang: this.props.lang\n      });\n    }\n\n    if (this.getContext().clearedUnreadMessages === true && this.selectedConversation) {\n      let conversationList = [...this.state.conversationlist];\n      let conversationKey = conversationList.findIndex(c => c.conversationId === this.selectedConversation.conversationId);\n\n      if (conversationKey > -1) {\n        let conversationObj = { ...conversationList[conversationKey]\n        };\n        let unreadMessageCount = this.getContext().unreadMessages.length;\n        let newConversationObj = { ...conversationObj,\n          unreadMessageCount: unreadMessageCount\n        };\n        conversationList.splice(conversationKey, 1);\n        conversationList.unshift(newConversationObj);\n        this.setState({\n          conversationlist: conversationList\n        });\n        this.getContext().setClearedUnreadMessages(false);\n      }\n    }\n\n    this.item = this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER || CometChat.ACTION_TYPE.TYPE_GROUP ? this.getContext().item : null;\n    this.hideGroupActionMessages();\n  }\n\n  componentWillUnmount() {\n    this.ConversationListManager.removeListeners();\n    this.ConversationListManager = null;\n  }\n\n  render() {\n    const conversationList = this.state.conversationlist.map((conversation, key) => {\n      let selectedConversation = null;\n\n      if (this.getContext() && Object.keys(this.getContext().item).length && this.getContext().type.trim().length) {\n        if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER && this.getContext().item.uid === conversation.conversationWith.uid) {\n          selectedConversation = conversation;\n        } else if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP && this.getContext().item.guid === conversation.conversationWith.guid) {\n          selectedConversation = conversation;\n        }\n      }\n\n      return jsx(CometChatConversationListItem, {\n        key: key,\n        theme: this.props.theme,\n        config: this.props.config,\n        lang: this.state.lang,\n        conversationKey: key,\n        conversation: conversation,\n        selectedConversation: selectedConversation,\n        loggedInUser: this.loggedInUser,\n        handleClick: this.handleClick,\n        actionGenerated: this.actionHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1053,\n          columnNumber: 11\n        }\n      });\n    });\n    let messageContainer = null;\n\n    if (this.state.decoratorMessage.length !== 0) {\n      messageContainer = jsx(\"div\", {\n        css: chatsMsgStyle(),\n        className: \"chats__decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1072,\n          columnNumber: 9\n        }\n      }, jsx(\"p\", {\n        css: chatsMsgTxtStyle(this.props),\n        className: \"decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1073,\n          columnNumber: 11\n        }\n      }, this.state.decoratorMessage));\n    }\n\n    let closeBtn = jsx(\"div\", {\n      css: chatsHeaderCloseStyle(navigateIcon, this.getContext()),\n      className: \"header__close\",\n      onClick: this.handleMenuClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081,\n        columnNumber: 7\n      }\n    });\n\n    if (this.getContext() && Object.keys(this.getContext().item).length === 0) {\n      closeBtn = null;\n    }\n\n    let showConfirmDialog = null;\n\n    if (this.state.showConfirmDialog) {\n      showConfirmDialog = jsx(CometChatConfirmDialog, _extends({}, this.props, {\n        onClick: this.onDeleteConfirm,\n        message: Translator.translate(\"DELETE_CONFIRM\", this.getContext().language),\n        confirmButtonText: Translator.translate(\"DELETE\", this.getContext().language),\n        cancelButtonText: Translator.translate(\"CANCEL\", this.getContext().language),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1094,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    const chatList = jsx(\"div\", {\n      css: chatsWrapperStyle(this.props),\n      className: \"chats\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 7\n      }\n    }, jsx(\"div\", {\n      css: chatsHeaderStyle(this.props),\n      className: \"chats__header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1115,\n        columnNumber: 9\n      }\n    }, closeBtn, jsx(\"h4\", {\n      css: chatsHeaderTitleStyle(this.props),\n      className: \"header__title\",\n      dir: Translator.getDirection(this.state.lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1117,\n        columnNumber: 11\n      }\n    }, Translator.translate(\"CHATS\", this.state.lang))), messageContainer, jsx(\"div\", {\n      css: chatsListStyle(),\n      className: \"chats__list\",\n      onScroll: this.handleScroll,\n      ref: el => this.chatListRef = el,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1126,\n        columnNumber: 9\n      }\n    }, conversationList), showConfirmDialog, jsx(CometChatToastNotification, {\n      ref: el => this.toastRef = el,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1135,\n        columnNumber: 9\n      }\n    }));\n    let chatListWrapper = chatList; //if used as a standalone component, add errorboundary and context provider\n\n    if (this.props._parent === \"\") {\n      chatListWrapper = jsx(CometChatContextProvider, {\n        ref: el => this.contextProviderRef = el,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1143,\n          columnNumber: 9\n        }\n      }, chatList);\n    }\n\n    return chatListWrapper;\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatConversationList.contextType = CometChatContext;\nCometChatConversationList.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n  onItemClick: () => {},\n  _parent: \"\"\n};\nCometChatConversationList.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n  onItemClick: PropTypes.func,\n  _parent: PropTypes.string\n};\nexport { CometChatConversationList };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Chats/CometChatConversationList/index.js"],"names":["React","jsx","PropTypes","CometChat","ConversationListManager","CometChatConfirmDialog","CometChatToastNotification","CometChatConversationListItem","CometChatContextProvider","CometChatContext","enums","UIKitSettings","SoundManager","Translator","theme","chatsWrapperStyle","chatsHeaderStyle","chatsHeaderCloseStyle","chatsHeaderTitleStyle","chatsMsgStyle","chatsMsgTxtStyle","chatsListStyle","CometChatConversationList","Component","constructor","props","loggedInUser","selectedConversation","setSelectedConversation","conversationList","state","conversationlist","forEach","conversation","conversationType","getContext","type","ACTION_TYPE","TYPE_USER","conversationWith","uid","item","TYPE_GROUP","guid","conversationCallback","key","message","options","USER_ONLINE","USER_OFFLINE","updateUser","TEXT_MESSAGE_RECEIVED","MEDIA_MESSAGE_RECEIVED","CUSTOM_MESSAGE_RECEIVED","INCOMING_CALL_RECEIVED","INCOMING_CALL_CANCELLED","MESSAGE_EDITED","MESSAGE_DELETED","MESSAGE_READ","GROUP_MEMBER_ADDED","GROUP_MEMBER_KICKED","GROUP_MEMBER_BANNED","GROUP_MEMBER_LEFT","GROUP_MEMBER_SCOPE_CHANGED","GROUP_MEMBER_JOINED","GROUP_MEMBER_UNBANNED","conversationUpdated","chatListMode","chatListFilterOptions","receiverType","RECEIVER_TYPE","GROUP","USER","updateConversation","conversationEditedDeleted","updateGroupMemberAdded","updateGroupMemberRemoved","updateGroupMemberScopeChanged","updateGroupMemberChanged","onMessagesRead","user","conversationKey","findIndex","conversationObj","conversationWithObj","status","getStatus","newConversationObj","splice","setState","hideGroupActionMessages","FeatureRestriction","isGroupActionMessagesEnabled","then","response","catch","error","playAudio","category","CATEGORY_ACTION","TYPE_GROUP_MEMBER","getReceiverType","receiverId","getSender","getReceiverId","play","CONSTANTS","AUDIO","messageReceipt","receiver","unreadMessageCount","messageId","lastMessage","id","makeConversation","promise","Promise","resolve","CometChatHelper","getConversationFromMessage","c","conversationId","makeUnreadMessageCount","Object","keys","length","sender","parseInt","unreadMessages","unreadMessage","hasOwnProperty","shouldIncrementCount","incomingMessage","output","CATEGORY_MESSAGE","hasKeyValue","KEYS","makeLastMessage","newMessage","assign","lastMessageObj","unshift","newLastMessageObj","membersCount","actionFor","newConversationWithObj","scope","GROUP_MEMBER_SCOPE","PARTICIPANT","hasJoined","handleScroll","e","bottom","Math","round","currentTarget","scrollHeight","scrollTop","clientHeight","getConversations","handleClick","onItemClick","handleMenuClose","actionGenerated","ACTIONS","fetchNextConversation","decoratorMessage","translate","lang","_parent","context","contextProviderRef","actionHandler","action","conversationDeleted","deleteConversation","showConfirmDialog","onDeleteConfirm","optionSelected","target","value","conversationToBeDeleted","deletedConversation","setConversationToBeDeleted","toastRef","setError","setTypeAndItem","createRef","chatListRef","getLoggedinUser","componentDidMount","attachListeners","componentDidUpdate","prevProps","find","indexOf","blockedByMe","convKey","convObj","convWithObj","newConvWithObj","newConvObj","deletedGroupId","trim","leftGroupId","setLastMessage","getConversationId","users","sort","join","newConversation","Conversation","setConversationId","setConversationType","setConversationWith","setUnreadMessageCount","clearedUnreadMessages","setClearedUnreadMessages","componentWillUnmount","removeListeners","render","map","config","messageContainer","closeBtn","navigateIcon","language","chatList","getDirection","el","chatListWrapper","contextType","defaultProps","getDefaultLanguage","propTypes","string","object","func"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { ConversationListManager } from \"./controller\";\n\nimport {\n  CometChatConfirmDialog,\n  CometChatToastNotification,\n} from \"../../Shared\";\nimport { CometChatConversationListItem } from \"../\";\n\nimport {\n  CometChatContextProvider,\n  CometChatContext,\n} from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { UIKitSettings } from \"../../../util/UIKitSettings\";\nimport { SoundManager } from \"../../../util/SoundManager\";\n\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\n\nimport {\n  chatsWrapperStyle,\n  chatsHeaderStyle,\n  chatsHeaderCloseStyle,\n  chatsHeaderTitleStyle,\n  chatsMsgStyle,\n  chatsMsgTxtStyle,\n  chatsListStyle,\n} from \"./style\";\n\nimport navigateIcon from \"./resources/back.svg\";\n\nclass CometChatConversationList extends React.Component {\n  loggedInUser = null;\n  selectedConversation = null;\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      conversationlist: [],\n      onItemClick: null,\n      lang: props.lang,\n      hideGroupActionMessages: false,\n      showConfirmDialog: false,\n      decoratorMessage: Translator.translate(\"LOADING\", props.lang),\n    };\n\n    this.contextProviderRef = React.createRef();\n    this.chatListRef = React.createRef();\n    this.toastRef = React.createRef();\n\n    CometChat.getLoggedinUser()\n      .then((user) => (this.loggedInUser = user))\n      .catch((error) =>\n        this.setState({\n          decoratorMessage: Translator.translate(\n            \"SOMETHING_WRONG\",\n            this.state.lang\n          ),\n        })\n      );\n  }\n\n  componentDidMount() {\n    this.item =\n      this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER ||\n      CometChat.ACTION_TYPE.TYPE_GROUP\n        ? this.getContext().item\n        : null;\n    this.hideGroupActionMessages();\n\n    this.setState({ conversationlist: [] }, () => {\n      this.ConversationListManager = new ConversationListManager(\n        this.getContext()\n      );\n      this.getConversations();\n      this.ConversationListManager.attachListeners(this.conversationCallback);\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    //when a particular chat is selected from the chats list\n    if (this.getContext().item !== this.item) {\n      const conversationlist = [...this.state.conversationlist];\n      const conversationObj = conversationlist.find((c) => {\n        if (\n          (c.conversationType === this.getContext().type &&\n            this.getContext().type === CometChat.RECEIVER_TYPE.USER &&\n            c.conversationWith.uid === this.getContext().item.uid) ||\n          (c.conversationType === this.getContext().type &&\n            this.getContext().type === CometChat.RECEIVER_TYPE.GROUP &&\n            c.conversationWith.guid === this.getContext().item.guid)\n        ) {\n          return c;\n        }\n\n        return false;\n      });\n\n      if (conversationObj) {\n        let conversationKey = conversationlist.indexOf(conversationObj);\n        let newConversationObj = { ...conversationObj, unreadMessageCount: 0 };\n\n        conversationlist.splice(conversationKey, 1, newConversationObj);\n        this.setState({ conversationlist: conversationlist });\n      }\n\n      if (Object.keys(this.getContext().item).length === 0) {\n        this.selectedConversation = null;\n      }\n    }\n\n    //if user is blocked/unblocked, update conversationlist in state\n    if (\n      this.item &&\n      Object.keys(this.item).length &&\n      this.item.hasOwnProperty(\"uid\") &&\n      this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER &&\n      this.item.uid === this.getContext().item.uid &&\n      this.item.blockedByMe !== this.getContext().item.blockedByMe\n    ) {\n      let conversationlist = [...this.state.conversationlist];\n\n      //search for user\n      let convKey = conversationlist.findIndex(\n        (c) =>\n          c.conversationType === CometChat.ACTION_TYPE.TYPE_USER &&\n          c.conversationWith.uid === this.getContext().item.uid\n      );\n      if (convKey > -1) {\n        const convObj = conversationlist[convKey];\n\n        let convWithObj = { ...convObj.conversationWith };\n        let newConvWithObj = Object.assign({}, convWithObj, {\n          blockedByMe: this.getContext().item.blockedByMe,\n        });\n\n        let newConvObj = Object.assign({}, convObj, {\n          conversationWith: newConvWithObj,\n        });\n\n        conversationlist.splice(convKey, 1, newConvObj);\n        this.setState({ conversationlist: conversationlist });\n      }\n    }\n\n    //if group detail(membersCount) is updated, update grouplist\n    if (\n      this.item &&\n      Object.keys(this.item).length &&\n      this.item.hasOwnProperty(\"guid\") &&\n      this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP &&\n      this.item.guid === this.getContext().item.guid &&\n      this.item.membersCount !== this.getContext().item.membersCount\n    ) {\n      const conversationlist = [...this.state.conversationlist];\n\n      let convKey = conversationlist.findIndex(\n        (c) =>\n          c.conversationType === CometChat.ACTION_TYPE.TYPE_GROUP &&\n          c.conversationWith.guid === this.getContext().item.guid\n      );\n      if (convKey > -1) {\n        const convObj = conversationlist[convKey];\n\n        let convWithObj = { ...convObj.conversationWith };\n        let newConvWithObj = Object.assign({}, convWithObj, {\n          membersCount: this.getContext().item.membersCount,\n        });\n\n        let newConvObj = Object.assign({}, convObj, {\n          conversationWith: newConvWithObj,\n        });\n\n        conversationlist.splice(convKey, 1, newConvObj);\n        this.setState({ conversationlist: conversationlist });\n      }\n    }\n\n    //upon user deleting a group, remove group from conversation list\n    if (this.getContext().deletedGroupId.trim().length) {\n      const guid = this.getContext().deletedGroupId.trim();\n      const conversationlist = [...this.state.conversationlist];\n\n      let conversationKey = conversationlist.findIndex(\n        (c) =>\n          c.conversationType === CometChat.ACTION_TYPE.TYPE_GROUP &&\n          c.conversationWith.guid === guid\n      );\n\n      if (conversationKey > -1) {\n        conversationlist.splice(conversationKey, 1);\n        this.setState({ conversationlist: conversationlist });\n      }\n    }\n\n    //upon user leaving a group, remove group from conversation list\n    if (this.getContext().leftGroupId.trim().length) {\n      const guid = this.getContext().leftGroupId.trim();\n      const conversationlist = [...this.state.conversationlist];\n\n      let conversationKey = conversationlist.findIndex(\n        (c) =>\n          c.conversationType === CometChat.ACTION_TYPE.TYPE_GROUP &&\n          c.conversationWith.guid === guid\n      );\n\n      if (conversationKey > -1) {\n        conversationlist.splice(conversationKey, 1);\n        this.setState({ conversationlist: conversationlist });\n      }\n    }\n\n    //updating last message whenever a message is composed,\n    if (Object.keys(this.getContext().lastMessage).length) {\n      const lastMessage = this.getContext().lastMessage;\n      const conversationList = [...this.state.conversationlist];\n\n      const conversationKey = conversationList.findIndex(\n        (c) => c.conversationId === lastMessage.conversationId\n      );\n\n      if (conversationKey > -1) {\n        const conversationObj = conversationList[conversationKey];\n        let newConversationObj = {\n          ...conversationObj,\n          lastMessage: { ...lastMessage },\n        };\n\n        if (conversationKey === 0) {\n          conversationList.splice(conversationKey, 1, newConversationObj);\n        } else {\n          conversationList.splice(conversationKey, 1);\n          conversationList.unshift(newConversationObj);\n        }\n\n        this.setState({ conversationlist: conversationList });\n        this.getContext().setLastMessage({});\n      } else {\n        const chatListMode = this.getContext().UIKitSettings.chatListMode;\n        const chatListFilterOptions = UIKitSettings.chatListFilterOptions;\n        if (chatListMode !== chatListFilterOptions[\"USERS_AND_GROUPS\"]) {\n          if (\n            (chatListMode === chatListFilterOptions[\"USERS\"] &&\n              lastMessage.receiverType === CometChat.RECEIVER_TYPE.GROUP) ||\n            (chatListMode === chatListFilterOptions[\"GROUPS\"] &&\n              lastMessage.receiverType === CometChat.RECEIVER_TYPE.USER)\n          ) {\n            return false;\n          }\n        }\n\n        const getConversationId = () => {\n          let conversationId = null;\n          if (this.getContext().type === CometChat.RECEIVER_TYPE.USER) {\n            const users = [this.loggedInUser.uid, this.getContext().item.uid];\n            conversationId = users.sort().join(\"_user_\");\n          } else if (this.getContext().type === CometChat.RECEIVER_TYPE.GROUP) {\n            conversationId = `group_${this.getContext().item.guid}`;\n          }\n\n          return conversationId;\n        };\n\n        let newConversation = new CometChat.Conversation();\n        newConversation.setConversationId(getConversationId());\n        newConversation.setConversationType(this.getContext().type);\n        newConversation.setConversationWith(this.getContext().item);\n        newConversation.setLastMessage(lastMessage);\n        newConversation.setUnreadMessageCount(0);\n\n        conversationList.unshift(newConversation);\n        this.setState({ conversationlist: conversationList });\n        this.getContext().setLastMessage({});\n      }\n    }\n\n    if (prevProps.lang !== this.props.lang) {\n      this.setState({ lang: this.props.lang });\n    }\n\n    if (\n      this.getContext().clearedUnreadMessages === true &&\n      this.selectedConversation\n    ) {\n      let conversationList = [...this.state.conversationlist];\n\n      let conversationKey = conversationList.findIndex(\n        (c) => c.conversationId === this.selectedConversation.conversationId\n      );\n\n      if (conversationKey > -1) {\n        let conversationObj = { ...conversationList[conversationKey] };\n        let unreadMessageCount = this.getContext().unreadMessages.length;\n        let newConversationObj = {\n          ...conversationObj,\n          unreadMessageCount: unreadMessageCount,\n        };\n\n        conversationList.splice(conversationKey, 1);\n        conversationList.unshift(newConversationObj);\n        this.setState({ conversationlist: conversationList });\n        this.getContext().setClearedUnreadMessages(false);\n      }\n    }\n\n    this.item =\n      this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER ||\n      CometChat.ACTION_TYPE.TYPE_GROUP\n        ? this.getContext().item\n        : null;\n    this.hideGroupActionMessages();\n  }\n\n  componentWillUnmount() {\n    this.ConversationListManager.removeListeners();\n    this.ConversationListManager = null;\n  }\n\n  setSelectedConversation = () => {\n    const conversationList = [...this.state.conversationlist];\n    conversationList.forEach((conversation) => {\n      if (conversation?.conversationType === this.getContext().type) {\n        if (\n          (conversation?.conversationType === CometChat.ACTION_TYPE.TYPE_USER &&\n            conversation?.conversationWith?.uid ===\n              this.getContext().item?.uid) ||\n          (conversation?.conversationType ===\n            CometChat.ACTION_TYPE.TYPE_GROUP &&\n            conversation?.conversationWith?.guid ===\n              this.getContext().item?.guid)\n        ) {\n          this.selectedConversation = { ...conversation };\n        }\n      }\n    });\n  };\n\n  conversationCallback = (key, item, message, options) => {\n    switch (key) {\n      case enums.USER_ONLINE:\n      case enums.USER_OFFLINE:\n        this.updateUser(item);\n        break;\n      case enums.TEXT_MESSAGE_RECEIVED:\n      case enums.MEDIA_MESSAGE_RECEIVED:\n      case enums.CUSTOM_MESSAGE_RECEIVED:\n      case enums.INCOMING_CALL_RECEIVED:\n      case enums.INCOMING_CALL_CANCELLED:\n      case enums.MESSAGE_EDITED:\n      case enums.MESSAGE_DELETED:\n      case enums.MESSAGE_READ:\n      case enums.GROUP_MEMBER_ADDED:\n      case enums.GROUP_MEMBER_KICKED:\n      case enums.GROUP_MEMBER_BANNED:\n      case enums.GROUP_MEMBER_LEFT:\n      case enums.GROUP_MEMBER_SCOPE_CHANGED:\n      case enums.GROUP_MEMBER_JOINED:\n      case enums.GROUP_MEMBER_UNBANNED:\n        this.conversationUpdated(key, message, options);\n        break;\n      default:\n        break;\n    }\n  };\n\n  conversationUpdated = (key, message, options) => {\n    const chatListMode = this.getContext().UIKitSettings.chatListMode;\n    const chatListFilterOptions = UIKitSettings.chatListFilterOptions;\n\n    if (chatListMode !== chatListFilterOptions[\"USERS_AND_GROUPS\"]) {\n      if (\n        (chatListMode === chatListFilterOptions[\"USERS\"] &&\n          message.receiverType === CometChat.RECEIVER_TYPE.GROUP) ||\n        (chatListMode === chatListFilterOptions[\"GROUPS\"] &&\n          message.receiverType === CometChat.RECEIVER_TYPE.USER)\n      ) {\n        return false;\n      }\n    }\n\n    switch (key) {\n      case enums.TEXT_MESSAGE_RECEIVED:\n      case enums.MEDIA_MESSAGE_RECEIVED:\n      case enums.CUSTOM_MESSAGE_RECEIVED:\n      case enums.INCOMING_CALL_RECEIVED:\n      case enums.INCOMING_CALL_CANCELLED:\n        this.updateConversation(key, message);\n        break;\n      case enums.MESSAGE_EDITED:\n      case enums.MESSAGE_DELETED:\n        this.conversationEditedDeleted(message);\n        break;\n      case enums.GROUP_MEMBER_ADDED:\n        this.updateGroupMemberAdded(message, options);\n        break;\n      case enums.GROUP_MEMBER_KICKED:\n      case enums.GROUP_MEMBER_BANNED:\n      case enums.GROUP_MEMBER_LEFT:\n        this.updateGroupMemberRemoved(message, options);\n        break;\n      case enums.GROUP_MEMBER_SCOPE_CHANGED:\n        this.updateGroupMemberScopeChanged(message, options);\n        break;\n      case enums.GROUP_MEMBER_JOINED:\n      case enums.GROUP_MEMBER_UNBANNED:\n        this.updateGroupMemberChanged(message, options);\n        break;\n      case enums.MESSAGE_READ:\n        this.onMessagesRead(message);\n        break;\n      default:\n        break;\n    }\n  };\n\n  updateUser = (user) => {\n    const conversationlist = [...this.state.conversationlist];\n    const conversationKey = conversationlist.findIndex(\n      (conversationObj) =>\n        conversationObj.conversationType === \"user\" &&\n        conversationObj.conversationWith.uid === user.uid\n    );\n\n    if (conversationKey > -1) {\n      let conversationObj = { ...conversationlist[conversationKey] };\n      let conversationWithObj = {\n        ...conversationObj.conversationWith,\n        status: user.getStatus(),\n      };\n\n      let newConversationObj = {\n        ...conversationObj,\n        conversationWith: conversationWithObj,\n      };\n      conversationlist.splice(conversationKey, 1, newConversationObj);\n      this.setState({ conversationlist: conversationlist });\n    }\n  };\n\n  hideGroupActionMessages = () => {\n    this.getContext()\n      .FeatureRestriction.isGroupActionMessagesEnabled()\n      .then((response) => {\n        if (response !== this.state.hideGroupActionMessages) {\n          this.setState({ hideGroupActionMessages: response });\n        }\n      })\n      .catch((error) => {\n        if (this.state.hideGroupActionMessages !== false) {\n          this.setState({ hideGroupActionMessages: false });\n        }\n      });\n  };\n\n  playAudio = (message) => {\n    if (\n      message.category === CometChat.CATEGORY_ACTION &&\n      message.type === CometChat.ACTION_TYPE.TYPE_GROUP_MEMBER &&\n      this.state.hideGroupActionMessages === true\n    ) {\n      return false;\n    }\n\n    /**\n     * Sound alert for incoming messages\n     */\n    const receiverType = message.getReceiverType();\n    const receiverId =\n      receiverType === CometChat.RECEIVER_TYPE.USER\n        ? message.getSender().uid\n        : message.getReceiverId();\n\n    if (receiverType === this.getContext().type) {\n      if (\n        (receiverType === CometChat.RECEIVER_TYPE.USER &&\n          receiverId === this.getContext().item.uid) ||\n        (receiverType === CometChat.RECEIVER_TYPE.GROUP &&\n          receiverId === this.getContext().item.guid)\n      ) {\n        SoundManager.play(\n          enums.CONSTANTS.AUDIO[\"INCOMING_MESSAGE\"],\n          this.getContext()\n        );\n      } else {\n        SoundManager.play(\n          enums.CONSTANTS.AUDIO[\"INCOMING_OTHER_MESSAGE\"],\n          this.getContext()\n        );\n      }\n    } else {\n      SoundManager.play(\n        enums.CONSTANTS.AUDIO[\"INCOMING_OTHER_MESSAGE\"],\n        this.getContext()\n      );\n    }\n  };\n\n  onMessagesRead = (messageReceipt) => {\n    const conversationList = [...this.state.conversationlist];\n    conversationList.forEach((conversation, conversationKey) => {\n      if (conversation?.conversationType === messageReceipt.receiverType) {\n        if (\n          (conversation?.conversationType === CometChat.RECEIVER_TYPE.USER &&\n            messageReceipt.receiver === conversation?.conversationWith?.uid) ||\n          (conversation?.conversationType === CometChat.RECEIVER_TYPE.GROUP &&\n            messageReceipt.receiver === conversation?.conversationWith?.guid)\n        ) {\n          let unreadMessageCount = conversation.unreadMessageCount;\n          /**\n           * If the message id of the read reciept if greater than or equal to the lastmessage id, set unreadmessagecount to 0\n           */\n          if (messageReceipt?.messageId >= conversation?.lastMessage?.id) {\n            unreadMessageCount = 0;\n          }\n\n          let newConversationObj = {\n            ...conversation,\n            unreadMessageCount: unreadMessageCount,\n          };\n          conversationList.splice(conversationKey, 1, newConversationObj);\n          this.setState({ conversationlist: conversationList });\n        }\n      }\n    });\n  };\n\n  makeConversation = (message) => {\n    const promise = new Promise((resolve) => {\n      CometChat.CometChatHelper.getConversationFromMessage(message).then(\n        (conversation) => {\n          let conversationList = [...this.state.conversationlist];\n          let conversationKey = conversationList.findIndex(\n            (c) => c.conversationId === conversation.conversationId\n          );\n\n          let conversationObj = { ...conversation };\n          if (conversationKey > -1) {\n            conversationObj = { ...conversationList[conversationKey] };\n          }\n\n          resolve({\n            conversationKey: conversationKey,\n            conversationObj: conversationObj,\n            conversationList: conversationList,\n          });\n        }\n      );\n    });\n\n    return promise;\n  };\n\n  makeUnreadMessageCount = (message, conversation = {}) => {\n    /**\n     * If the received message is sent by the logged in user, don't increment the unread count\n     */\n    if (Object.keys(conversation).length === 0) {\n      if (message.sender.uid === this.loggedInUser?.uid) {\n        return 0;\n      } else {\n        return 1;\n      }\n    }\n\n    let unreadMessageCount = parseInt(conversation.unreadMessageCount);\n    if (\n      this.selectedConversation &&\n      this.selectedConversation.conversationId === conversation.conversationId\n    ) {\n      if (this.getContext().unreadMessages.length) {\n        const unreadMessage = this.getContext().unreadMessages[0];\n        const selectedConversation = this.selectedConversation;\n\n        if (\n          unreadMessage.hasOwnProperty(\"conversationId\") &&\n          unreadMessage.conversationId === selectedConversation.conversationId\n        ) {\n          unreadMessageCount = 0;\n          this.getContext().unreadMessages.forEach((message) => {\n            unreadMessageCount = this.shouldIncrementCount(message)\n              ? ++unreadMessageCount\n              : unreadMessageCount;\n          });\n        }\n      } else {\n        unreadMessageCount = 0;\n      }\n    } else if (\n      (this.getContext().item.hasOwnProperty(\"guid\") &&\n        conversation.conversationWith.hasOwnProperty(\"guid\") &&\n        this.getContext().item.guid === conversation.conversationWith.guid) ||\n      (this.getContext().item.hasOwnProperty(\"uid\") &&\n        conversation.conversationWith.hasOwnProperty(\"uid\") &&\n        this.getContext().item.uid === conversation.conversationWith.uid)\n    ) {\n      unreadMessageCount = 0;\n    } else {\n      unreadMessageCount = this.shouldIncrementCount(message)\n        ? ++unreadMessageCount\n        : unreadMessageCount;\n    }\n\n    return unreadMessageCount;\n  };\n\n  shouldIncrementCount = (incomingMessage) => {\n    let output = false;\n    if (\n      (incomingMessage.category === CometChat.CATEGORY_MESSAGE &&\n        incomingMessage.sender.uid !== this.loggedInUser?.uid) ||\n      (this.getContext().hasKeyValue(incomingMessage, enums.KEYS[\"METADATA\"]) &&\n        this.getContext().hasKeyValue(\n          incomingMessage[enums.KEYS[\"METADATA\"]],\n          enums.KEYS[\"INCREMENT_UNREAD_COUNT\"]\n        ) &&\n        incomingMessage[enums.KEYS[\"METADATA\"]][\n          enums.KEYS[\"INCREMENT_UNREAD_COUNT\"]\n        ] === true &&\n        incomingMessage.sender.uid !== this.loggedInUser?.uid)\n    ) {\n      output = true;\n    }\n\n    return output;\n  };\n\n  makeLastMessage = (message, conversation = {}) => {\n    const newMessage = Object.assign({}, message);\n    return newMessage;\n  };\n\n  updateConversation = (key, message) => {\n    this.makeConversation(message).then((response) => {\n      const { conversationKey, conversationObj, conversationList } = response;\n\n      if (conversationKey > -1) {\n        let unreadMessageCount = this.makeUnreadMessageCount(\n          message,\n          conversationObj\n        );\n        let lastMessageObj = this.makeLastMessage(message, conversationObj);\n\n        let newConversationObj = {\n          ...conversationObj,\n          lastMessage: lastMessageObj,\n          unreadMessageCount: unreadMessageCount,\n        };\n        conversationList.splice(conversationKey, 1);\n        conversationList.unshift(newConversationObj);\n        this.setState({ conversationlist: conversationList });\n\n        if (\n          key !== enums.INCOMING_CALL_RECEIVED &&\n          key !== enums.INCOMING_CALL_CANCELLED\n        ) {\n          this.playAudio(message);\n        }\n      } else {\n        let unreadMessageCount = this.makeUnreadMessageCount(message, {});\n        let lastMessageObj = this.makeLastMessage(message);\n\n        let newConversationObj = {\n          ...conversationObj,\n          lastMessage: lastMessageObj,\n          unreadMessageCount: unreadMessageCount,\n        };\n        conversationList.unshift(newConversationObj);\n        this.setState({ conversationlist: conversationList });\n\n        if (\n          key !== enums.INCOMING_CALL_RECEIVED &&\n          key !== enums.INCOMING_CALL_CANCELLED\n        ) {\n          this.playAudio(message);\n        }\n      }\n    });\n  };\n\n  conversationEditedDeleted = (message) => {\n    this.makeConversation(message).then((response) => {\n      const { conversationKey, conversationObj, conversationList } = response;\n\n      if (conversationKey > -1) {\n        let lastMessageObj = conversationObj.lastMessage;\n\n        if (lastMessageObj.id === message.id) {\n          const newLastMessageObj = Object.assign({}, lastMessageObj, message);\n          let newConversationObj = Object.assign({}, conversationObj, {\n            lastMessage: newLastMessageObj,\n          });\n          conversationList.splice(conversationKey, 1, newConversationObj);\n          this.setState({ conversationlist: conversationList });\n        }\n      }\n    });\n  };\n\n  updateGroupMemberAdded = (message, options) => {\n    this.makeConversation(message).then((response) => {\n      const { conversationKey, conversationObj, conversationList } = response;\n\n      if (conversationKey > -1) {\n        let lastMessageObj = this.makeLastMessage(message, conversationObj);\n        let conversationWithObj = { ...conversationObj.conversationWith };\n\n        let membersCount = parseInt(conversationWithObj.membersCount);\n        if (\n          message.hasOwnProperty(\"actionFor\") &&\n          message.actionFor.hasOwnProperty(\"membersCount\")\n        ) {\n          membersCount = message.actionFor.membersCount;\n        }\n\n        let newConversationWithObj = {\n          ...conversationWithObj,\n          membersCount: membersCount,\n        };\n\n        let newConversationObj = {\n          ...conversationObj,\n          conversationWith: newConversationWithObj,\n          lastMessage: lastMessageObj,\n        };\n        conversationList.splice(conversationKey, 1);\n        conversationList.unshift(newConversationObj);\n        this.setState({ conversationlist: conversationList });\n        this.playAudio(message);\n      } else {\n        if (options && this.loggedInUser.uid === options.user.uid) {\n          let lastMessageObj = this.makeLastMessage(message);\n          let conversationWithObj = { ...conversationObj.conversationWith };\n\n          let membersCount = parseInt(conversationWithObj.membersCount);\n          if (\n            message.hasOwnProperty(\"actionFor\") &&\n            message.actionFor.hasOwnProperty(\"membersCount\")\n          ) {\n            membersCount = message.actionFor.membersCount;\n          }\n          let scope = CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT;\n          let hasJoined = options.hasJoined;\n\n          let newConversationWithObj = {\n            ...conversationWithObj,\n            membersCount: membersCount,\n            scope: scope,\n            hasJoined: hasJoined,\n          };\n          let newConversationObj = {\n            ...conversationObj,\n            conversationWith: newConversationWithObj,\n            lastMessage: lastMessageObj,\n          };\n\n          conversationList.unshift(newConversationObj);\n          this.setState({ conversationlist: conversationList });\n          this.playAudio(message);\n        }\n      }\n    });\n  };\n\n  updateGroupMemberRemoved = (message, options) => {\n    this.makeConversation(message).then((response) => {\n      const { conversationKey, conversationObj, conversationList } = response;\n\n      if (conversationKey > -1) {\n        if (options && this.loggedInUser.uid === options.user.uid) {\n          conversationList.splice(conversationKey, 1);\n          this.setState({ conversationlist: conversationList });\n        } else {\n          let lastMessageObj = this.makeLastMessage(message, conversationObj);\n          let conversationWithObj = { ...conversationObj.conversationWith };\n\n          let membersCount = parseInt(conversationWithObj.membersCount);\n          if (\n            message.hasOwnProperty(\"actionFor\") &&\n            message.actionFor.hasOwnProperty(\"membersCount\")\n          ) {\n            membersCount = message.actionFor.membersCount;\n          }\n\n          let newConversationWithObj = {\n            ...conversationWithObj,\n            membersCount: membersCount,\n          };\n\n          let newConversationObj = {\n            ...conversationObj,\n            conversationWith: newConversationWithObj,\n            lastMessage: lastMessageObj,\n          };\n          conversationList.splice(conversationKey, 1);\n          conversationList.unshift(newConversationObj);\n          this.setState({ conversationlist: conversationList });\n          this.playAudio(message);\n        }\n      }\n    });\n  };\n\n  updateGroupMemberScopeChanged = (message, options) => {\n    this.makeConversation(message).then((response) => {\n      const { conversationKey, conversationObj, conversationList } = response;\n\n      if (conversationKey > -1) {\n        let lastMessageObj = this.makeLastMessage(message, conversationObj);\n\n        let conversationWithObj = { ...conversationObj.conversationWith };\n        let membersCount = parseInt(conversationWithObj.membersCount);\n\n        let scope = conversationWithObj.scope;\n        if (options && this.loggedInUser.uid === options.user.uid) {\n          scope = options.scope;\n        }\n\n        let newConversationWithObj = {\n          ...conversationWithObj,\n          membersCount: membersCount,\n          scope: scope,\n        };\n        let newConversationObj = {\n          ...conversationObj,\n          conversationWith: newConversationWithObj,\n          lastMessage: lastMessageObj,\n        };\n        conversationList.splice(conversationKey, 1);\n        conversationList.unshift(newConversationObj);\n        this.setState({ conversationlist: conversationList });\n        this.playAudio(message);\n      }\n    });\n  };\n\n  updateGroupMemberChanged = (message, options) => {\n    this.makeConversation(message).then((response) => {\n      const { conversationKey, conversationObj, conversationList } = response;\n      if (conversationKey > -1) {\n        if (options && this.loggedInUser.uid !== options.user.uid) {\n          let lastMessageObj = this.makeLastMessage(message, conversationObj);\n          let conversationWithObj = { ...conversationObj.conversationWith };\n\n          let membersCount = parseInt(conversationWithObj.membersCount);\n          if (\n            message.hasOwnProperty(\"actionFor\") &&\n            message.actionFor.hasOwnProperty(\"membersCount\")\n          ) {\n            membersCount = message.actionFor.membersCount;\n          }\n\n          let newConversationWithObj = {\n            ...conversationWithObj,\n            membersCount: membersCount,\n          };\n          let newConversationObj = {\n            ...conversationObj,\n            conversationWith: newConversationWithObj,\n            lastMessage: lastMessageObj,\n          };\n          conversationList.splice(conversationKey, 1);\n          conversationList.unshift(newConversationObj);\n          this.setState({ conversationlist: conversationList });\n          this.playAudio(message);\n        }\n      }\n    });\n  };\n\n  handleScroll = (e) => {\n    const bottom =\n      Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) ===\n      Math.round(e.currentTarget.clientHeight);\n    if (bottom) this.getConversations();\n  };\n\n  //click handler\n  handleClick = (conversation) => {\n    if (!this.props.onItemClick) return;\n\n    this.props.onItemClick(\n      conversation.conversationWith,\n      conversation.conversationType\n    );\n    this.selectedConversation = conversation;\n  };\n\n  handleMenuClose = () => {\n    if (!this.props.actionGenerated) {\n      return false;\n    }\n\n    this.props.actionGenerated(enums.ACTIONS[\"TOGGLE_SIDEBAR\"]);\n  };\n\n  getConversations = () => {\n    this.ConversationListManager.fetchNextConversation()\n      .then((conversationList) => {\n        if (conversationList.length === 0) {\n          if (this.state.conversationlist.length === 0) {\n            this.setState({\n              decoratorMessage: Translator.translate(\n                \"NO_CHATS_FOUND\",\n                this.state.lang\n              ),\n            });\n          }\n        } else {\n          this.setState({ decoratorMessage: \"\" });\n        }\n\n        conversationList.forEach((conversation) => {\n          if (\n            this.getContext().hasOwnProperty(\"type\") &&\n            this.props.hasOwnProperty(\"item\") &&\n            this.getContext().type === conversation.conversationType\n          ) {\n            if (\n              (conversation.conversationType === CometChat.RECEIVER_TYPE.USER &&\n                this.getContext().item.uid ===\n                  conversation.conversationWith.uid) ||\n              (conversation.conversationType ===\n                CometChat.RECEIVER_TYPE.GROUP &&\n                this.getContext().item.guid ===\n                  conversation.conversationWith.guid)\n            ) {\n              conversation.unreadMessageCount = 0;\n            }\n          }\n        });\n\n        this.setState({\n          conversationlist: [\n            ...this.state.conversationlist,\n            ...conversationList,\n          ],\n        });\n      })\n      .catch((error) =>\n        this.setState({\n          decoratorMessage: Translator.translate(\n            \"SOMETHING_WRONG\",\n            this.state.lang\n          ),\n        })\n      );\n  };\n\n  getContext = () => {\n    if (this.props._parent.length) {\n      return this.context;\n    } else {\n      return this.contextProviderRef.state;\n    }\n  };\n\n  actionHandler = (action, conversation) => {\n    switch (action) {\n      case enums.ACTIONS[\"CONVERSATION_DELETED\"]:\n        this.conversationDeleted(conversation);\n        break;\n      case enums.ACTIONS[\"DELETE_CONVERSATION\"]:\n        this.deleteConversation(conversation);\n        break;\n      default:\n        break;\n    }\n  };\n\n  deleteConversation = (conversation) => {\n    if (!this.state.showConfirmDialog) {\n      this.setState({ showConfirmDialog: true });\n    }\n  };\n\n  onDeleteConfirm = (e) => {\n    const optionSelected = e.target.value;\n\n    this.setState({ showConfirmDialog: false });\n    if (optionSelected === \"yes\") {\n      const conversation = this.context.conversationToBeDeleted;\n      const conversationWith =\n        conversation.conversationType === CometChat.RECEIVER_TYPE.GROUP\n          ? conversation?.conversationWith?.guid\n          : conversation?.conversationWith?.uid;\n      CometChat.deleteConversation(\n        conversationWith,\n        conversation.conversationType\n      )\n        .then((deletedConversation) => {\n          this.context.setConversationToBeDeleted(null);\n          this.conversationDeleted(conversation);\n        })\n        .catch((error) => this.toastRef.setError(\"SOMETHING_WRONG\"));\n    } else {\n      this.context.setConversationToBeDeleted(null);\n      this.setState({ showConfirmDialog: false });\n    }\n  };\n\n  conversationDeleted = (conversation) => {\n    const conversationList = [...this.state.conversationlist];\n    const conversationKey = conversationList.findIndex(\n      (c) => c.conversationId === conversation.conversationId\n    );\n\n    if (conversationKey > -1) {\n      if (\n        this.selectedConversation &&\n        this.selectedConversation.conversationId === conversation.conversationId\n      ) {\n        this.selectedConversation = null;\n        this.getContext().setTypeAndItem(\"\", {});\n      }\n\n      conversationList.splice(conversationKey, 1);\n      this.setState({ conversationlist: conversationList });\n    }\n  };\n\n  render() {\n    const conversationList = this.state.conversationlist.map(\n      (conversation, key) => {\n        let selectedConversation = null;\n        if (\n          this.getContext() &&\n          Object.keys(this.getContext().item).length &&\n          this.getContext().type.trim().length\n        ) {\n          if (\n            this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER &&\n            this.getContext().item.uid === conversation.conversationWith.uid\n          ) {\n            selectedConversation = conversation;\n          } else if (\n            this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP &&\n            this.getContext().item.guid === conversation.conversationWith.guid\n          ) {\n            selectedConversation = conversation;\n          }\n        }\n\n        return (\n          <CometChatConversationListItem\n            key={key}\n            theme={this.props.theme}\n            config={this.props.config}\n            lang={this.state.lang}\n            conversationKey={key}\n            conversation={conversation}\n            selectedConversation={selectedConversation}\n            loggedInUser={this.loggedInUser}\n            handleClick={this.handleClick}\n            actionGenerated={this.actionHandler}\n          />\n        );\n      }\n    );\n\n    let messageContainer = null;\n    if (this.state.decoratorMessage.length !== 0) {\n      messageContainer = (\n        <div css={chatsMsgStyle()} className=\"chats__decorator-message\">\n          <p css={chatsMsgTxtStyle(this.props)} className=\"decorator-message\">\n            {this.state.decoratorMessage}\n          </p>\n        </div>\n      );\n    }\n\n    let closeBtn = (\n      <div\n        css={chatsHeaderCloseStyle(navigateIcon, this.getContext())}\n        className=\"header__close\"\n        onClick={this.handleMenuClose}\n      ></div>\n    );\n    if (this.getContext() && Object.keys(this.getContext().item).length === 0) {\n      closeBtn = null;\n    }\n\n    let showConfirmDialog = null;\n    if (this.state.showConfirmDialog) {\n      showConfirmDialog = (\n        <CometChatConfirmDialog\n          {...this.props}\n          onClick={this.onDeleteConfirm}\n          message={Translator.translate(\n            \"DELETE_CONFIRM\",\n            this.getContext().language\n          )}\n          confirmButtonText={Translator.translate(\n            \"DELETE\",\n            this.getContext().language\n          )}\n          cancelButtonText={Translator.translate(\n            \"CANCEL\",\n            this.getContext().language\n          )}\n        />\n      );\n    }\n\n    const chatList = (\n      <div css={chatsWrapperStyle(this.props)} className=\"chats\">\n        <div css={chatsHeaderStyle(this.props)} className=\"chats__header\">\n          {closeBtn}\n          <h4\n            css={chatsHeaderTitleStyle(this.props)}\n            className=\"header__title\"\n            dir={Translator.getDirection(this.state.lang)}\n          >\n            {Translator.translate(\"CHATS\", this.state.lang)}\n          </h4>\n        </div>\n        {messageContainer}\n        <div\n          css={chatsListStyle()}\n          className=\"chats__list\"\n          onScroll={this.handleScroll}\n          ref={(el) => (this.chatListRef = el)}\n        >\n          {conversationList}\n        </div>\n        {showConfirmDialog}\n        <CometChatToastNotification ref={(el) => (this.toastRef = el)} />\n      </div>\n    );\n\n    let chatListWrapper = chatList;\n    //if used as a standalone component, add errorboundary and context provider\n    if (this.props._parent === \"\") {\n      chatListWrapper = (\n        <CometChatContextProvider ref={(el) => (this.contextProviderRef = el)}>\n          {chatList}\n        </CometChatContextProvider>\n      );\n    }\n\n    return chatListWrapper;\n  }\n}\n\n// Specifies the default values for props:\nCometChatConversationList.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n  onItemClick: () => {},\n  _parent: \"\",\n};\n\nCometChatConversationList.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n  onItemClick: PropTypes.func,\n  _parent: PropTypes.string,\n};\n\nexport { CometChatConversationList };\n"]},"metadata":{},"sourceType":"module"}