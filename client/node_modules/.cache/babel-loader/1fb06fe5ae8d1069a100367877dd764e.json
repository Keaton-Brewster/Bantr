{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Groups/CometChatTransferOwnershipMemberList/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatTransferOwnershipMemberListItem } from \"../\";\nimport { CometChatBackdrop } from \"../../Shared\";\nimport * as enums from \"../../../util/enums.js\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { modalWrapperStyle, modalCloseStyle, modalBodyStyle, modalCaptionStyle, modalListStyle, listHeaderStyle, listStyle, nameColumnStyle, scopeColumnStyle, modalFootStyle, modalErrorStyle } from \"./style\";\nimport clearIcon from \"./resources/close.svg\";\nimport transferIcon from \"./resources/transferring.svg\";\n\nclass CometChatTransferOwnershipMemberList extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleScroll = e => {\n      const bottom = Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) === Math.round(e.currentTarget.clientHeight);\n\n      if (bottom) {\n        this.props.actionGenerated(enums.ACTIONS[\"FETCH_GROUP_MEMBERS\"]);\n      }\n    };\n\n    this.updateMembers = (action, member, scope) => {\n      switch (action) {\n        case enums.ACTIONS[\"CHANGE_OWNERSHIP_GROUP_MEMBER\"]:\n          this.changeOwnership(member, scope);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.updateGroupOwner = member => {\n      this.setState({\n        newGroupOwner: member === null || member === void 0 ? void 0 : member.uid\n      });\n    };\n\n    this.transferOwnership = () => {\n      var _this$context, _this$context$item;\n\n      const guid = (_this$context = this.context) === null || _this$context === void 0 ? void 0 : (_this$context$item = _this$context.item) === null || _this$context$item === void 0 ? void 0 : _this$context$item.guid;\n      const uid = this.state.newGroupOwner;\n\n      if (!guid || !uid) {\n        return false;\n      }\n\n      this.setState({\n        transferringOwnership: true\n      });\n      CometChat.transferGroupOwnership(guid, uid).then(response => {\n        this.setState({\n          transferringOwnership: false\n        });\n        this.props.actionGenerated(enums.ACTIONS[\"OWNERSHIP_TRANSFERRED\"], uid);\n      }).catch(error => {\n        this.setState({\n          transferringOwnership: false,\n          errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n        });\n      });\n    };\n\n    this.changeOwnership = () => {};\n\n    this.setUserColumnTitle = editAccess => {\n      if (this._isMounted) {\n        if (editAccess !== null && this.mq.matches) {\n          this.setState({\n            userColumnTitle: Translator.translate(\"AVATAR\", this.context.language)\n          });\n        } else {\n          this.setState({\n            userColumnTitle: Translator.translate(\"NAME\", this.context.language)\n          });\n        }\n      }\n    };\n\n    this._isMounted = false;\n    const chatWindow = context.UIKitSettings.chatWindow;\n    this.mq = chatWindow.matchMedia(context.theme.breakPoints[1]);\n    let userColumnTitle = Translator.translate(\"NAME\", context.language);\n\n    if (this.mq.matches) {\n      userColumnTitle = Translator.translate(\"AVATAR\", context.language);\n    }\n\n    this.state = {\n      userColumnTitle: userColumnTitle,\n      newGroupOwner: null,\n      transferringOwnership: false,\n      errorMessage: \"\"\n    };\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const memberList = [...this.context.groupMembers];\n    const groupMembers = memberList.filter(member => {\n      var _this$props, _this$props$loggedinu;\n\n      return (member === null || member === void 0 ? void 0 : member.uid) !== ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$loggedinu = _this$props.loggedinuser) === null || _this$props$loggedinu === void 0 ? void 0 : _this$props$loggedinu.uid);\n    }).map(member => {\n      return jsx(CometChatTransferOwnershipMemberListItem, {\n        loggedinuser: this.props.loggedinuser,\n        key: member === null || member === void 0 ? void 0 : member.uid,\n        checked: this.updateGroupOwner,\n        member: member,\n        actionGenerated: this.updateMembers,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }\n      });\n    });\n    let transferBtn = null;\n\n    if (memberList.length) {\n      const transferText = this.state.transferringOwnership ? Translator.translate(\"TRANSFERRING\", this.props.lang) : Translator.translate(\"TRANSFER\", this.props.lang);\n      transferBtn = jsx(\"div\", {\n        css: modalFootStyle(this.state, this.context, transferIcon),\n        className: \"modal__transferownership\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        onClick: this.transferOwnership,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }\n      }, jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }\n      }, transferText)));\n    }\n\n    return jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 7\n      }\n    }, jsx(CometChatBackdrop, {\n      show: true,\n      clicked: this.props.close,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }), jsx(\"div\", {\n      css: modalWrapperStyle(this.props, this.context),\n      className: \"modal__groupmembers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, jsx(\"span\", {\n      css: modalCloseStyle(clearIcon, this.context),\n      className: \"modal__close\",\n      onClick: this.props.close,\n      title: Translator.translate(\"CLOSE\", this.context.language),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }\n    }), jsx(\"div\", {\n      css: modalBodyStyle(),\n      className: \"modal__body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }\n    }, jsx(\"div\", {\n      css: modalCaptionStyle(Translator.getDirection(this.context.language)),\n      className: \"modal__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, Translator.translate(\"GROUP_MEMBERS\", this.context.language)), jsx(\"div\", {\n      css: modalErrorStyle(this.context),\n      className: \"modal__error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, this.state.errorMessage), jsx(\"div\", {\n      css: modalListStyle(this.context),\n      className: \"modal__content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }, jsx(\"div\", {\n      css: listHeaderStyle(this.context),\n      className: \"content__header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 15\n      }\n    }, jsx(\"div\", {\n      css: nameColumnStyle(this.props, this.context),\n      className: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }\n    }, this.state.userColumnTitle), jsx(\"div\", {\n      css: scopeColumnStyle(this.context),\n      className: \"scope\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    }, Translator.translate(\"SCOPE\", this.context.language))), jsx(\"div\", {\n      css: listStyle(),\n      className: \"content__list\",\n      onScroll: this.handleScroll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 15\n      }\n    }, groupMembers)), transferBtn)));\n  }\n\n}\n\nCometChatTransferOwnershipMemberList.contextType = CometChatContext;\nexport { CometChatTransferOwnershipMemberList };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Groups/CometChatTransferOwnershipMemberList/index.js"],"names":["React","jsx","CometChat","CometChatTransferOwnershipMemberListItem","CometChatBackdrop","enums","CometChatContext","Translator","modalWrapperStyle","modalCloseStyle","modalBodyStyle","modalCaptionStyle","modalListStyle","listHeaderStyle","listStyle","nameColumnStyle","scopeColumnStyle","modalFootStyle","modalErrorStyle","CometChatTransferOwnershipMemberList","Component","constructor","props","context","handleScroll","e","bottom","Math","round","currentTarget","scrollHeight","scrollTop","clientHeight","actionGenerated","ACTIONS","updateMembers","action","member","scope","changeOwnership","updateGroupOwner","setState","newGroupOwner","uid","transferOwnership","guid","item","state","transferringOwnership","transferGroupOwnership","then","response","catch","error","errorMessage","translate","lang","setUserColumnTitle","editAccess","_isMounted","mq","matches","userColumnTitle","language","chatWindow","UIKitSettings","matchMedia","theme","breakPoints","componentWillUnmount","render","memberList","groupMembers","filter","loggedinuser","map","transferBtn","length","transferText","transferIcon","close","clearIcon","getDirection","contextType"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CometChatTransferOwnershipMemberListItem } from \"../\";\nimport { CometChatBackdrop } from \"../../Shared\";\n\nimport * as enums from \"../../../util/enums.js\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\n\nimport Translator from \"../../../resources/localization/translator\";\n\nimport {\n  modalWrapperStyle,\n  modalCloseStyle,\n  modalBodyStyle,\n  modalCaptionStyle,\n  modalListStyle,\n  listHeaderStyle,\n  listStyle,\n  nameColumnStyle,\n  scopeColumnStyle,\n  modalFootStyle,\n  modalErrorStyle,\n} from \"./style\";\n\nimport clearIcon from \"./resources/close.svg\";\nimport transferIcon from \"./resources/transferring.svg\";\n\nclass CometChatTransferOwnershipMemberList extends React.Component {\n  static contextType = CometChatContext;\n\n  constructor(props, context) {\n    super(props, context);\n\n    this._isMounted = false;\n    const chatWindow = context.UIKitSettings.chatWindow;\n    this.mq = chatWindow.matchMedia(context.theme.breakPoints[1]);\n\n    let userColumnTitle = Translator.translate(\"NAME\", context.language);\n    if (this.mq.matches) {\n      userColumnTitle = Translator.translate(\"AVATAR\", context.language);\n    }\n\n    this.state = {\n      userColumnTitle: userColumnTitle,\n      newGroupOwner: null,\n      transferringOwnership: false,\n      errorMessage: \"\",\n    };\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  handleScroll = (e) => {\n    const bottom =\n      Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) ===\n      Math.round(e.currentTarget.clientHeight);\n    if (bottom) {\n      this.props.actionGenerated(enums.ACTIONS[\"FETCH_GROUP_MEMBERS\"]);\n    }\n  };\n\n  updateMembers = (action, member, scope) => {\n    switch (action) {\n      case enums.ACTIONS[\"CHANGE_OWNERSHIP_GROUP_MEMBER\"]:\n        this.changeOwnership(member, scope);\n        break;\n      default:\n        break;\n    }\n  };\n\n  updateGroupOwner = (member) => {\n    this.setState({ newGroupOwner: member?.uid });\n  };\n\n  transferOwnership = () => {\n    const guid = this.context?.item?.guid;\n    const uid = this.state.newGroupOwner;\n\n    if (!guid || !uid) {\n      return false;\n    }\n\n    this.setState({ transferringOwnership: true });\n    CometChat.transferGroupOwnership(guid, uid)\n      .then((response) => {\n        this.setState({ transferringOwnership: false });\n        this.props.actionGenerated(enums.ACTIONS[\"OWNERSHIP_TRANSFERRED\"], uid);\n      })\n      .catch((error) => {\n        this.setState({\n          transferringOwnership: false,\n          errorMessage: Translator.translate(\n            \"SOMETHING_WRONG\",\n            this.props.lang\n          ),\n        });\n      });\n  };\n\n  changeOwnership = () => {};\n\n  setUserColumnTitle = (editAccess) => {\n    if (this._isMounted) {\n      if (editAccess !== null && this.mq.matches) {\n        this.setState({\n          userColumnTitle: Translator.translate(\n            \"AVATAR\",\n            this.context.language\n          ),\n        });\n      } else {\n        this.setState({\n          userColumnTitle: Translator.translate(\"NAME\", this.context.language),\n        });\n      }\n    }\n  };\n\n  render() {\n    const memberList = [...this.context.groupMembers];\n    const groupMembers = memberList\n      .filter((member) => member?.uid !== this.props?.loggedinuser?.uid)\n      .map((member) => {\n        return (\n          <CometChatTransferOwnershipMemberListItem\n            loggedinuser={this.props.loggedinuser}\n            key={member?.uid}\n            checked={this.updateGroupOwner}\n            member={member}\n            actionGenerated={this.updateMembers}\n          />\n        );\n      });\n\n    let transferBtn = null;\n    if (memberList.length) {\n      const transferText = this.state.transferringOwnership\n        ? Translator.translate(\"TRANSFERRING\", this.props.lang)\n        : Translator.translate(\"TRANSFER\", this.props.lang);\n      transferBtn = (\n        <div\n          css={modalFootStyle(this.state, this.context, transferIcon)}\n          className=\"modal__transferownership\"\n        >\n          <button type=\"button\" onClick={this.transferOwnership}>\n            <span>{transferText}</span>\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <CometChatBackdrop show={true} clicked={this.props.close} />\n        <div\n          css={modalWrapperStyle(this.props, this.context)}\n          className=\"modal__groupmembers\"\n        >\n          <span\n            css={modalCloseStyle(clearIcon, this.context)}\n            className=\"modal__close\"\n            onClick={this.props.close}\n            title={Translator.translate(\"CLOSE\", this.context.language)}\n          ></span>\n          <div css={modalBodyStyle()} className=\"modal__body\">\n            <div\n              css={modalCaptionStyle(\n                Translator.getDirection(this.context.language)\n              )}\n              className=\"modal__title\"\n            >\n              {Translator.translate(\"GROUP_MEMBERS\", this.context.language)}\n            </div>\n            <div css={modalErrorStyle(this.context)} className=\"modal__error\">\n              {this.state.errorMessage}\n            </div>\n            <div css={modalListStyle(this.context)} className=\"modal__content\">\n              <div\n                css={listHeaderStyle(this.context)}\n                className=\"content__header\"\n              >\n                <div\n                  css={nameColumnStyle(this.props, this.context)}\n                  className=\"name\"\n                >\n                  {this.state.userColumnTitle}\n                </div>\n                <div css={scopeColumnStyle(this.context)} className=\"scope\">\n                  {Translator.translate(\"SCOPE\", this.context.language)}\n                </div>\n              </div>\n              <div\n                css={listStyle()}\n                className=\"content__list\"\n                onScroll={this.handleScroll}\n              >\n                {groupMembers}\n              </div>\n            </div>\n            {transferBtn}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport { CometChatTransferOwnershipMemberList };\n"]},"metadata":{},"sourceType":"module"}