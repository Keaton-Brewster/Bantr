{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/Comps/Message.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useConversations } from \"../utils/ConvorsationProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Message() {\n  _s();\n\n  const {\n    messageState,\n    userState\n  } = useConversations();\n  const [messages, setMessages] = messageState;\n  const [user, setUser] = userState; //! Take this and turn it into an independant messages component.\n  //! now that you have the context set up you don't need to pass messages as props\n\n  console.log(messages);\n  return messages.map((message, i) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `my-1 d-flex flex-column ${message.sender_id === user._id ? \"align-self-end align-items-end\" : \"align-items-start\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `rounded px-2 py-1 ${message.sender_id === user._id ? \"bg-success text-white\" : \"border\"}`,\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `text-muted small ${message.sender_id === user._id ? \"text-right\" : \"\"}`,\n          children: message.sender_id === user._id && messages[i - 1].sender_id === user._id ? \"You\" : message.senderName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  });\n}\n\n_s(Message, \"i/rnkwubfy8N7f8kRp9uibLCyZ0=\", false, function () {\n  return [useConversations];\n});\n\n_c = Message;\n\nvar _c;\n\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/Comps/Message.jsx"],"names":["React","useConversations","Message","messageState","userState","messages","setMessages","user","setUser","console","log","map","message","i","sender_id","_id","content","senderName"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,+BAAjC;;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAChC,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA8BH,gBAAgB,EAApD;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BH,YAAhC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBJ,SAAxB,CAHgC,CAKhC;AACA;;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AAEA,SAAOA,QAAQ,CAACM,GAAT,CAAa,CAACC,OAAD,EAAUC,CAAV,KAAgB;AAClC,wBACE;AAAA,6BACE;AACE,QAAA,SAAS,EAAG,2BACVD,OAAO,CAACE,SAAR,KAAsBP,IAAI,CAACQ,GAA3B,GACI,gCADJ,GAEI,mBACL,EALH;AAAA,gCAOE;AACE,UAAA,SAAS,EAAG,qBACVH,OAAO,CAACE,SAAR,KAAsBP,IAAI,CAACQ,GAA3B,GACI,uBADJ,GAEI,QACL,EALH;AAAA,oBAOGH,OAAO,CAACI;AAPX;AAAA;AAAA;AAAA;AAAA,gBAPF,eAgBE;AACE,UAAA,SAAS,EAAG,oBACVJ,OAAO,CAACE,SAAR,KAAsBP,IAAI,CAACQ,GAA3B,GAAiC,YAAjC,GAAgD,EACjD,EAHH;AAAA,oBAKGH,OAAO,CAACE,SAAR,KAAsBP,IAAI,CAACQ,GAA3B,IACDV,QAAQ,CAACQ,CAAC,GAAG,CAAL,CAAR,CAAgBC,SAAhB,KAA8BP,IAAI,CAACQ,GADlC,GAEG,KAFH,GAGGH,OAAO,CAACK;AARd;AAAA;AAAA;AAAA;AAAA,gBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AA+BD,GAhCM,CAAP;AAiCD;;GA1CuBf,O;UACcD,gB;;;KADdC,O","sourcesContent":["import React from \"react\";\nimport { useConversations } from \"../utils/ConvorsationProvider\";\n\nexport default function Message() {\n  const { messageState, userState } = useConversations();\n  const [messages, setMessages] = messageState;\n  const [user, setUser] = userState;\n\n  //! Take this and turn it into an independant messages component.\n  //! now that you have the context set up you don't need to pass messages as props\n  console.log(messages);\n\n  return messages.map((message, i) => {\n    return (\n      <div>\n        <div\n          className={`my-1 d-flex flex-column ${\n            message.sender_id === user._id\n              ? \"align-self-end align-items-end\"\n              : \"align-items-start\"\n          }`}\n        >\n          <div\n            className={`rounded px-2 py-1 ${\n              message.sender_id === user._id\n                ? \"bg-success text-white\"\n                : \"border\"\n            }`}\n          >\n            {message.content}\n          </div>\n          <div\n            className={`text-muted small ${\n              message.sender_id === user._id ? \"text-right\" : \"\"\n            }`}\n          >\n            {message.sender_id === user._id &&\n            messages[i - 1].sender_id === user._id\n              ? \"You\"\n              : message.senderName}\n          </div>\n        </div>\n      </div>\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module"}