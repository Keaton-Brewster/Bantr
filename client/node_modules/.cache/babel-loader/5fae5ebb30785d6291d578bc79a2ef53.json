{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Groups/CometChatCreateGroup/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatBackdrop } from \"../../Shared\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { modalWrapperStyle, modalCloseStyle, modalBodyStyle, modalTableStyle, tableCaptionStyle, tableBodyStyle, inputStyle, tableFootStyle, modalErrorStyle } from \"./style\";\nimport creatingIcon from \"./resources/creating.svg\";\nimport closeIcon from \"./resources/close.svg\";\n\nclass CometChatCreateGroup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.enablePublicGroup = () => {\n      this.context.FeatureRestriction.isPublicGroupEnabled().then(response => {\n        /**\n         * Don't update state if the response has the same value\n         */\n        if (response !== this.state.enablePublicGroup) {\n          this.setState({\n            enablePublicGroup: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.enablePublicGroup !== false) {\n          this.setState({\n            enablePublicGroup: false\n          });\n        }\n      });\n    };\n\n    this.enablePasswordGroup = () => {\n      this.context.FeatureRestriction.isPasswordGroupEnabled().then(response => {\n        /**\n         * Don't update state if the response has the same value\n         */\n        if (response !== this.state.enablePasswordGroup) {\n          this.setState({\n            enablePasswordGroup: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.enablePasswordGroup !== false) {\n          this.setState({\n            enablePasswordGroup: false\n          });\n        }\n      });\n    };\n\n    this.enablePrivateGroup = () => {\n      this.context.FeatureRestriction.isPrivateGroupEnabled().then(response => {\n        /**\n         * Don't update state if the response has the same value\n         */\n        if (response !== this.state.enablePrivateGroup) {\n          this.setState({\n            enablePrivateGroup: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.enablePrivateGroup !== false) {\n          this.setState({\n            enablePrivateGroup: false\n          });\n        }\n      });\n    };\n\n    this.passwordChangeHandler = event => {\n      this.setState({\n        password: event.target.value\n      });\n    };\n\n    this.nameChangeHandler = event => {\n      this.setState({\n        name: event.target.value\n      });\n    };\n\n    this.typeChangeHandler = event => {\n      const type = event.target.value;\n      this.setState({\n        type\n      });\n\n      if (type === CometChat.GROUP_TYPE.PASSWORD) {\n        this.setState({\n          passwordInput: true\n        });\n      } else {\n        this.setState({\n          passwordInput: false\n        });\n      }\n    };\n\n    this.validate = () => {\n      const groupName = this.state.name.trim();\n      const groupType = this.state.type.trim();\n\n      if (!groupName) {\n        this.setState({\n          errorMessage: Translator.translate(\"INVALID_GROUP_NAME\", this.props.lang)\n        });\n        return false;\n      }\n\n      if (!groupType) {\n        this.setState({\n          errorMessage: Translator.translate(\"INVALID_GROUP_TYPE\", this.props.lang)\n        });\n        return false;\n      }\n\n      let password = \"\";\n\n      if (groupType === CometChat.GROUP_TYPE.PASSWORD) {\n        password = this.state.password;\n\n        if (!password.length) {\n          this.setState({\n            errorMessage: Translator.translate(\"INVALID_PASSWORD\", this.props.lang)\n          });\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    this.createGroup = () => {\n      if (!this.validate()) {\n        return false;\n      }\n\n      this.setState({\n        creatingGroup: true\n      });\n      const groupType = this.state.type.trim();\n      const password = this.state.password;\n      const guid = \"group_\" + new Date().getTime();\n      const name = this.state.name.trim();\n      let type = CometChat.GROUP_TYPE.PUBLIC;\n\n      switch (groupType) {\n        case \"public\":\n          type = CometChat.GROUP_TYPE.PUBLIC;\n          break;\n\n        case \"private\":\n          type = CometChat.GROUP_TYPE.PRIVATE;\n          break;\n\n        case \"password\":\n          type = CometChat.GROUP_TYPE.PASSWORD;\n          break;\n\n        default:\n          break;\n      }\n\n      const group = new CometChat.Group(guid, name, type, password);\n      CometChat.createGroup(group).then(newGroup => {\n        this.setState({\n          creatingGroup: false\n        });\n\n        if (typeof newGroup === \"object\" && Object.keys(newGroup).length) {\n          this.context.setToastMessage(\"success\", \"GROUP_CREATION_SUCCESS\");\n          this.setState({\n            name: \"\",\n            type: \"\",\n            password: \"\",\n            passwordInput: \"\"\n          });\n          this.props.actionGenerated(enums.ACTIONS[\"GROUP_CREATED\"], newGroup);\n        } else {\n          this.setState({\n            errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          creatingGroup: false,\n          errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n        });\n      });\n    };\n\n    this.populateGroupType = () => {};\n\n    this.state = {\n      errorMessage: \"\",\n      passwordInput: false,\n      name: \"\",\n      type: \"\",\n      password: \"\",\n      creatingGroup: false,\n      enablePublicGroup: false,\n      enablePasswordGroup: false,\n      enablePrivateGroup: false\n    };\n  }\n\n  componentDidMount() {\n    this.enablePublicGroup();\n    this.enablePasswordGroup();\n    this.enablePrivateGroup();\n  }\n\n  componentDidUpdate() {\n    this.enablePublicGroup();\n    this.enablePasswordGroup();\n    this.enablePrivateGroup();\n  }\n\n  render() {\n    const groupTypes = {};\n    let groupTypeSelect = null;\n\n    if (this.state.enablePublicGroup === true) {\n      groupTypes[CometChat.GROUP_TYPE.PUBLIC] = Translator.translate(\"PUBLIC\", this.props.lang);\n    }\n\n    if (this.state.enablePasswordGroup === true) {\n      groupTypes[CometChat.GROUP_TYPE.PASSWORD] = Translator.translate(\"PASSWORD_PROTECTED\", this.props.lang);\n    }\n\n    if (this.state.enablePrivateGroup === true) {\n      groupTypes[CometChat.GROUP_TYPE.PRIVATE] = Translator.translate(\"PRIVATE\", this.props.lang);\n    }\n\n    const groupTypeKeys = Object.keys(groupTypes);\n\n    if (groupTypeKeys.length) {\n      const groupTypeListOptions = groupTypeKeys.map(groupTypeKey => {\n        return jsx(\"option\", {\n          value: groupTypeKey,\n          key: groupTypeKey,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 21\n          }\n        }, groupTypes[groupTypeKey]);\n      });\n\n      if (groupTypeKeys.length > 1) {\n        groupTypeSelect = jsx(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 21\n          }\n        }, jsx(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 25\n          }\n        }, jsx(\"select\", {\n          css: inputStyle(this.props),\n          className: \"grouptype\",\n          onChange: this.typeChangeHandler,\n          value: this.state.type,\n          tabIndex: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 29\n          }\n        }, jsx(\"option\", {\n          value: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 33\n          }\n        }, Translator.translate(\"SELECT_GROUP_TYPE\", this.props.lang)), groupTypeListOptions)));\n      } else {\n        groupTypeSelect = jsx(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 21\n          }\n        }, jsx(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 25\n          }\n        }, jsx(\"select\", {\n          css: inputStyle(this.props),\n          className: \"grouptype\",\n          onChange: this.typeChangeHandler,\n          value: this.state.type,\n          tabIndex: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 29\n          }\n        }, groupTypeListOptions)));\n      }\n    }\n\n    let password = null;\n\n    if (this.state.passwordInput) {\n      password = jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 5\n        }\n      }, jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 6\n        }\n      }, jsx(\"input\", {\n        autoComplete: \"off\",\n        css: inputStyle(this.context),\n        placeholder: Translator.translate(\"ENTER_GROUP_PASSWORD\", this.props.lang),\n        type: \"password\",\n        tabIndex: \"3\",\n        onChange: this.passwordChangeHandler,\n        value: this.state.password,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 7\n        }\n      })));\n    }\n\n    const createText = this.state.creatingGroup ? Translator.translate(\"CREATING\", this.props.lang) : Translator.translate(\"CREATE\", this.props.lang);\n    return jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 4\n      }\n    }, jsx(CometChatBackdrop, {\n      show: true,\n      clicked: this.props.close,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 5\n      }\n    }), jsx(\"div\", {\n      css: modalWrapperStyle(this.context),\n      className: \"modal__creategroup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 5\n      }\n    }, jsx(\"span\", {\n      css: modalCloseStyle(closeIcon, this.context),\n      className: \"modal__close\",\n      onClick: this.props.close,\n      title: Translator.translate(\"CLOSE\", this.props.lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 6\n      }\n    }), jsx(\"div\", {\n      css: modalBodyStyle(),\n      className: \"modal__body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 6\n      }\n    }, jsx(\"table\", {\n      css: modalTableStyle(this.props),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 7\n      }\n    }, jsx(\"caption\", {\n      css: tableCaptionStyle(),\n      className: \"modal__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 8\n      }\n    }, \" \", Translator.translate(\"CREATE_GROUP\", this.props.lang), \" \"), jsx(\"tbody\", {\n      css: tableBodyStyle(),\n      className: \"modal__search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 8\n      }\n    }, jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }\n    }, jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 10\n      }\n    }, jsx(\"div\", {\n      css: modalErrorStyle(this.context),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 14\n      }\n    }, this.state.errorMessage))), jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }\n    }, jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 10\n      }\n    }, jsx(\"input\", {\n      autoComplete: \"off\",\n      css: inputStyle(this.props),\n      className: \"search__input\",\n      placeholder: Translator.translate(\"ENTER_GROUP_NAME\", this.props.lang),\n      type: \"text\",\n      tabIndex: \"1\",\n      onChange: this.nameChangeHandler,\n      value: this.state.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }\n    }))), groupTypeSelect, password), jsx(\"tfoot\", {\n      css: tableFootStyle(this.context, this.state, creatingIcon),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 8\n      }\n    }, jsx(\"tr\", {\n      className: \"creategroup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }\n    }, jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 10\n      }\n    }, jsx(\"button\", {\n      type: \"button\",\n      tabIndex: \"4\",\n      onClick: this.createGroup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 14\n      }\n    }, jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 76\n      }\n    }, createText)))))))));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatCreateGroup.contextType = CometChatContext;\nCometChatCreateGroup.defaultProps = {\n  lang: Translator.getDefaultLanguage()\n};\nCometChatCreateGroup.propTypes = {\n  lang: PropTypes.string\n};\nexport { CometChatCreateGroup };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Groups/CometChatCreateGroup/index.js"],"names":["React","jsx","PropTypes","CometChat","CometChatBackdrop","CometChatContext","enums","Translator","modalWrapperStyle","modalCloseStyle","modalBodyStyle","modalTableStyle","tableCaptionStyle","tableBodyStyle","inputStyle","tableFootStyle","modalErrorStyle","CometChatCreateGroup","Component","constructor","props","enablePublicGroup","context","FeatureRestriction","isPublicGroupEnabled","then","response","state","setState","catch","error","enablePasswordGroup","isPasswordGroupEnabled","enablePrivateGroup","isPrivateGroupEnabled","passwordChangeHandler","event","password","target","value","nameChangeHandler","name","typeChangeHandler","type","GROUP_TYPE","PASSWORD","passwordInput","validate","groupName","trim","groupType","errorMessage","translate","lang","length","createGroup","creatingGroup","guid","Date","getTime","PUBLIC","PRIVATE","group","Group","newGroup","Object","keys","setToastMessage","actionGenerated","ACTIONS","populateGroupType","componentDidMount","componentDidUpdate","render","groupTypes","groupTypeSelect","groupTypeKeys","groupTypeListOptions","map","groupTypeKey","createText","close","closeIcon","creatingIcon","contextType","defaultProps","getDefaultLanguage","propTypes","string"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CometChatBackdrop } from \"../../Shared\";\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport Translator from \"../../../resources/localization/translator\";\n\nimport {\n    modalWrapperStyle,\n    modalCloseStyle,\n    modalBodyStyle,\n    modalTableStyle,\n    tableCaptionStyle,\n    tableBodyStyle,\n    inputStyle,\n    tableFootStyle,\n\tmodalErrorStyle,\n} from \"./style\";\n\nimport creatingIcon from \"./resources/creating.svg\";\nimport closeIcon from \"./resources/close.svg\";\n\nclass CometChatCreateGroup extends React.Component {\n\tstatic contextType = CometChatContext;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\terrorMessage: \"\",\n\t\t\tpasswordInput: false,\n\t\t\tname: \"\",\n\t\t\ttype: \"\",\n\t\t\tpassword: \"\",\n\t\t\tcreatingGroup: false,\n\t\t\tenablePublicGroup: false,\n\t\t\tenablePasswordGroup: false,\n\t\t\tenablePrivateGroup: false,\n\t\t};\n\t}\n\n    componentDidMount() {\n\n        this.enablePublicGroup();\n        this.enablePasswordGroup();\n        this.enablePrivateGroup();\n    }\n\n    componentDidUpdate() {\n\n        this.enablePublicGroup();\n        this.enablePasswordGroup();\n        this.enablePrivateGroup();\n    }\n\n\tenablePublicGroup = () => {\n\t\tthis.context.FeatureRestriction.isPublicGroupEnabled()\n\t\t\t.then(response => {\n\t\t\t\t/**\n\t\t\t\t * Don't update state if the response has the same value\n\t\t\t\t */\n\t\t\t\tif (response !== this.state.enablePublicGroup) {\n\t\t\t\t\tthis.setState({enablePublicGroup: response});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tif (this.state.enablePublicGroup !== false) {\n\t\t\t\t\tthis.setState({enablePublicGroup: false});\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\tenablePasswordGroup = () => {\n\t\tthis.context.FeatureRestriction.isPasswordGroupEnabled()\n\t\t\t.then(response => {\n\t\t\t\t/**\n\t\t\t\t * Don't update state if the response has the same value\n\t\t\t\t */\n\t\t\t\tif (response !== this.state.enablePasswordGroup) {\n\t\t\t\t\tthis.setState({enablePasswordGroup: response});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tif (this.state.enablePasswordGroup !== false) {\n\t\t\t\t\tthis.setState({enablePasswordGroup: false});\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\tenablePrivateGroup = () => {\n\t\tthis.context.FeatureRestriction.isPrivateGroupEnabled()\n\t\t\t.then(response => {\n\t\t\t\t/**\n\t\t\t\t * Don't update state if the response has the same value\n\t\t\t\t */\n\t\t\t\tif (response !== this.state.enablePrivateGroup) {\n\t\t\t\t\tthis.setState({enablePrivateGroup: response});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tif (this.state.enablePrivateGroup !== false) {\n\t\t\t\t\tthis.setState({enablePrivateGroup: false});\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\tpasswordChangeHandler = event => {\n\t\tthis.setState({password: event.target.value});\n\t};\n\n\tnameChangeHandler = event => {\n\t\tthis.setState({name: event.target.value});\n\t};\n\n\ttypeChangeHandler = event => {\n\t\tconst type = event.target.value;\n\t\tthis.setState({type});\n\n\t\tif (type === CometChat.GROUP_TYPE.PASSWORD) {\n\t\t\tthis.setState({passwordInput: true});\n\t\t} else {\n\t\t\tthis.setState({passwordInput: false});\n\t\t}\n\t};\n\n\tvalidate = () => {\n\t\tconst groupName = this.state.name.trim();\n\t\tconst groupType = this.state.type.trim();\n\n\t\tif (!groupName) {\n\t\t\tthis.setState({ errorMessage: Translator.translate(\"INVALID_GROUP_NAME\", this.props.lang) });\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!groupType) {\n\t\t\tthis.setState({ errorMessage: Translator.translate(\"INVALID_GROUP_TYPE\", this.props.lang) });\n\t\t\treturn false;\n\t\t}\n\n\t\tlet password = \"\";\n\t\tif (groupType === CometChat.GROUP_TYPE.PASSWORD) {\n\t\t\tpassword = this.state.password;\n\n\t\t\tif (!password.length) {\n\t\t\t\tthis.setState({ errorMessage: Translator.translate(\"INVALID_PASSWORD\", this.props.lang) });\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\n\tcreateGroup = () => {\n\n\t\tif (!this.validate()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.setState({ creatingGroup: true });\n\n\t\tconst groupType = this.state.type.trim();\n\n\t\tconst password = this.state.password;\n\t\tconst guid = \"group_\" + new Date().getTime();\n\t\tconst name = this.state.name.trim();\n\t\tlet type = CometChat.GROUP_TYPE.PUBLIC;\n\n\t\tswitch (groupType) {\n\t\t\tcase \"public\":\n\t\t\t\ttype = CometChat.GROUP_TYPE.PUBLIC;\n\t\t\t\tbreak;\n\t\t\tcase \"private\":\n\t\t\t\ttype = CometChat.GROUP_TYPE.PRIVATE;\n\t\t\t\tbreak;\n\t\t\tcase \"password\":\n\t\t\t\ttype = CometChat.GROUP_TYPE.PASSWORD;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst group = new CometChat.Group(guid, name, type, password);\n\t\tCometChat.createGroup(group)\n\t\t\t.then(newGroup => {\n\t\t\t\tthis.setState({ creatingGroup: false });\n\n\t\t\t\tif (typeof newGroup === \"object\" && Object.keys(newGroup).length) {\n\t\t\t\t\tthis.context.setToastMessage(\"success\", \"GROUP_CREATION_SUCCESS\");\n\t\t\t\t\tthis.setState({ name: \"\", type: \"\", password: \"\", passwordInput: \"\" });\n\t\t\t\t\tthis.props.actionGenerated(enums.ACTIONS[\"GROUP_CREATED\"], newGroup);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({ errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang) });\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.setState({ creatingGroup: false, errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang) });\n\t\t\t});\n\t};\n\n\tpopulateGroupType = () => {};\n\n\trender() {\n\n        const groupTypes = {};\n        let groupTypeSelect = null;\n\n        if (this.state.enablePublicGroup === true) {\n            groupTypes[CometChat.GROUP_TYPE.PUBLIC] = Translator.translate(\"PUBLIC\", this.props.lang);\n        }\n\n        if (this.state.enablePasswordGroup === true) {\n            groupTypes[CometChat.GROUP_TYPE.PASSWORD] = Translator.translate(\"PASSWORD_PROTECTED\", this.props.lang);\n        }\n\n        if (this.state.enablePrivateGroup === true) {\n            groupTypes[CometChat.GROUP_TYPE.PRIVATE] = Translator.translate(\"PRIVATE\", this.props.lang);\n        }\n\n        const groupTypeKeys = Object.keys(groupTypes);\n        if (groupTypeKeys.length) {\n\n            const groupTypeListOptions = groupTypeKeys.map(groupTypeKey => {\n                return (\n                    <option value={groupTypeKey} key={groupTypeKey}>\n                        {groupTypes[groupTypeKey]}\n                    </option>\n                );\n            });\n\n            if (groupTypeKeys.length > 1) {\n                groupTypeSelect = (\n                    <tr>\n                        <td>\n                            <select css={inputStyle(this.props)} className=\"grouptype\" onChange={this.typeChangeHandler} value={this.state.type} tabIndex=\"2\">\n                                <option value=\"\">{Translator.translate(\"SELECT_GROUP_TYPE\", this.props.lang)}</option>\n                                {groupTypeListOptions}\n                            </select>\n                        </td>\n                    </tr>\n                );\n            } else {\n                groupTypeSelect = (\n                    <tr>\n                        <td>\n                            <select css={inputStyle(this.props)} className=\"grouptype\" onChange={this.typeChangeHandler} value={this.state.type} tabIndex=\"2\">\n                                {groupTypeListOptions}\n                            </select>\n                        </td>\n                    </tr>\n                );\n            }\n        }\n\n\t\tlet password = null;\n\t\tif (this.state.passwordInput) {\n\t\t\tpassword = (\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<input autoComplete=\"off\" css={inputStyle(this.context)} placeholder={Translator.translate(\"ENTER_GROUP_PASSWORD\", this.props.lang)} type=\"password\" tabIndex=\"3\" onChange={this.passwordChangeHandler} value={this.state.password} />\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t);\n\t\t}\n\n\t\tconst createText = this.state.creatingGroup ? Translator.translate(\"CREATING\", this.props.lang) : Translator.translate(\"CREATE\", this.props.lang);\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<CometChatBackdrop show={true} clicked={this.props.close} />\n\t\t\t\t<div css={modalWrapperStyle(this.context)} className=\"modal__creategroup\">\n\t\t\t\t\t<span css={modalCloseStyle(closeIcon, this.context)} className=\"modal__close\" onClick={this.props.close} title={Translator.translate(\"CLOSE\", this.props.lang)}></span>\n\t\t\t\t\t<div css={modalBodyStyle()} className=\"modal__body\">\n\t\t\t\t\t\t<table css={modalTableStyle(this.props)}>\n\t\t\t\t\t\t\t<caption css={tableCaptionStyle()} className=\"modal__title\"> {Translator.translate(\"CREATE_GROUP\", this.props.lang)} </caption>\n\t\t\t\t\t\t\t<tbody css={tableBodyStyle()} className=\"modal__search\">\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td><div css={modalErrorStyle(this.context)}>{this.state.errorMessage}</div></td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input autoComplete=\"off\" css={inputStyle(this.props)} className=\"search__input\" placeholder={Translator.translate(\"ENTER_GROUP_NAME\", this.props.lang)} type=\"text\" tabIndex=\"1\" onChange={this.nameChangeHandler} value={this.state.name} />\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t{groupTypeSelect}\n\t\t\t\t\t\t\t\t{password}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t<tfoot css={tableFootStyle(this.context, this.state, creatingIcon)}>\n\t\t\t\t\t\t\t\t<tr className=\"creategroup\">\n\t\t\t\t\t\t\t\t\t<td><button type=\"button\" tabIndex=\"4\" onClick={this.createGroup}><span>{createText}</span></button></td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</tfoot>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\n// Specifies the default values for props:\nCometChatCreateGroup.defaultProps = {\n    lang: Translator.getDefaultLanguage(),\n};\n\nCometChatCreateGroup.propTypes = {\n    lang: PropTypes.string,\n}\n\nexport { CometChatCreateGroup };"]},"metadata":{},"sourceType":"module"}