{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/FirebaseProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport firebase from \"firebase/messaging\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseContext = /*#__PURE__*/React.createContext();\nexport function useMessaging() {\n  _s();\n\n  return useContext(firebaseContext);\n}\n\n_s(useMessaging, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nconst FirebaseProvider = ({\n  children\n}) => {\n  // Your web app's Firebase configuration\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\n  var firebaseConfig = {\n    apiKey: \"AIzaSyAiqE2e5p0exqwqLOmCqcyuBmVP6xNecEQ\",\n    authDomain: \"groupchat-28f30.firebaseapp.com\",\n    projectId: \"groupchat-28f30\",\n    storageBucket: \"groupchat-28f30.appspot.com\",\n    messagingSenderId: \"868381863345\",\n    appId: \"1:868381863345:web:269f5e07356d85120d2190\",\n    measurementId: \"G-YD3ZL9Z27T\"\n  }; // Initialize Firebase\n\n  firebase.initializeApp(firebaseConfig);\n  const messaging = firebase.messaging(); // Get registration token. Initially this makes a network call, once retrieved\n  // subsequent calls to getToken will return from cache.\n\n  messaging.getToken({\n    vapidKey: process.env.VAPIDKEY\n  }).then(currentToken => {\n    if (currentToken) {\n      console.log(currentToken); // Send the token to your server and update the UI if necessary\n      // ...\n    } else {\n      // Show permission request UI\n      console.log(\"No registration token available. Request permission to generate one.\"); // ...\n    }\n  }).catch(err => {\n    console.log(\"An error occurred while retrieving token. \", err); // ...\n  });\n  const value = {\n    messaging\n  };\n  return /*#__PURE__*/_jsxDEV(firebaseContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_c = FirebaseProvider;\nexport default FirebaseProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseProvider\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/FirebaseProvider.js"],"names":["React","useContext","firebase","firebaseContext","createContext","useMessaging","FirebaseProvider","children","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","messaging","getToken","vapidKey","process","env","VAPIDKEY","then","currentToken","console","log","catch","err","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,QAAP,MAAqB,oBAArB;;AAEA,MAAMC,eAAe,gBAAGH,KAAK,CAACI,aAAN,EAAxB;AAEA,OAAO,SAASC,YAAT,GAAwB;AAAA;;AAC7B,SAAOJ,UAAU,CAACE,eAAD,CAAjB;AACD;;GAFeE,Y;;AAIhB,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACzC;AACA;AACA,MAAIC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,yCADW;AAEnBC,IAAAA,UAAU,EAAE,iCAFO;AAGnBC,IAAAA,SAAS,EAAE,iBAHQ;AAInBC,IAAAA,aAAa,EAAE,6BAJI;AAKnBC,IAAAA,iBAAiB,EAAE,cALA;AAMnBC,IAAAA,KAAK,EAAE,2CANY;AAOnBC,IAAAA,aAAa,EAAE;AAPI,GAArB,CAHyC,CAYzC;;AACAb,EAAAA,QAAQ,CAACc,aAAT,CAAuBR,cAAvB;AAEA,QAAMS,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB,CAfyC,CAgBzC;AACA;;AACAA,EAAAA,SAAS,CACNC,QADH,CACY;AACRC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADd,GADZ,EAIGC,IAJH,CAISC,YAAD,IAAkB;AACtB,QAAIA,YAAJ,EAAkB;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ,EADgB,CAEhB;AACA;AACD,KAJD,MAIO;AACL;AACAC,MAAAA,OAAO,CAACC,GAAR,CACE,sEADF,EAFK,CAKL;AACD;AACF,GAhBH,EAiBGC,KAjBH,CAiBUC,GAAD,IAAS;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DE,GAA1D,EADc,CAEd;AACD,GApBH;AAsBA,QAAMC,KAAK,GAAG;AACZZ,IAAAA;AADY,GAAd;AAIA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEY,KAAjC;AAAA,cACGtB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAjDD;;KAAMD,gB;AAmDN,eAAeA,gBAAf","sourcesContent":["import React, { useContext } from \"react\";\nimport firebase from \"firebase/messaging\";\n\nconst firebaseContext = React.createContext();\n\nexport function useMessaging() {\n  return useContext(firebaseContext);\n}\n\nconst FirebaseProvider = ({ children }) => {\n  // Your web app's Firebase configuration\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\n  var firebaseConfig = {\n    apiKey: \"AIzaSyAiqE2e5p0exqwqLOmCqcyuBmVP6xNecEQ\",\n    authDomain: \"groupchat-28f30.firebaseapp.com\",\n    projectId: \"groupchat-28f30\",\n    storageBucket: \"groupchat-28f30.appspot.com\",\n    messagingSenderId: \"868381863345\",\n    appId: \"1:868381863345:web:269f5e07356d85120d2190\",\n    measurementId: \"G-YD3ZL9Z27T\",\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  const messaging = firebase.messaging();\n  // Get registration token. Initially this makes a network call, once retrieved\n  // subsequent calls to getToken will return from cache.\n  messaging\n    .getToken({\n      vapidKey: process.env.VAPIDKEY,\n    })\n    .then((currentToken) => {\n      if (currentToken) {\n        console.log(currentToken);\n        // Send the token to your server and update the UI if necessary\n        // ...\n      } else {\n        // Show permission request UI\n        console.log(\n          \"No registration token available. Request permission to generate one.\"\n        );\n        // ...\n      }\n    })\n    .catch((err) => {\n      console.log(\"An error occurred while retrieving token. \", err);\n      // ...\n    });\n\n  const value = {\n    messaging,\n  };\n\n  return (\n    <firebaseContext.Provider value={value}>\n      {children}\n    </firebaseContext.Provider>\n  );\n};\n\nexport default FirebaseProvider;\n"]},"metadata":{},"sourceType":"module"}