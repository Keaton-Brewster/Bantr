{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Groups/CometChatAddGroupMemberList/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { AddMembersManager } from \"./controller\";\nimport { CometChatAddGroupMemberListItem } from \"../\";\nimport { CometChatBackdrop } from \"../../Shared\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\nimport { modalWrapperStyle, modalCloseStyle, modalBodyStyle, modalCaptionStyle, modalSearchStyle, searchButtonStyle, searchInputStyle, modalListStyle, modalFootStyle, contactMsgStyle, contactMsgTxtStyle, modalErrorStyle } from \"./style\";\nimport addingIcon from \"./resources/adding.svg\";\nimport searchIcon from \"./resources/search.svg\";\nimport clearIcon from \"./resources/close.svg\";\n\nclass CometChatAddGroupMemberList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.userUpdated = user => {\n      let userlist = [...this.state.userlist]; //search for user\n\n      let userKey = userlist.findIndex((u, k) => u.uid === user.uid); //if found in the list, update user object\n\n      if (userKey > -1) {\n        let userObj = userlist[userKey];\n        let newUserObj = Object.assign({}, userObj, user);\n        userlist.splice(userKey, 1, newUserObj);\n        this.setState({\n          userlist: userlist\n        });\n      }\n    };\n\n    this.handleScroll = e => {\n      const bottom = Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) === Math.round(e.currentTarget.clientHeight);\n      if (bottom) this.getUsers();\n    };\n\n    this.searchUsers = e => {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      let val = e.target.value;\n      this.AddMembersManager = new AddMembersManager(this.context, val);\n      this.AddMembersManager.initializeMembersRequest().then(() => {\n        this.timeout = setTimeout(() => {\n          this.setState({\n            userlist: [],\n            membersToAdd: [],\n            membersToRemove: [],\n            filteredlist: [],\n            decoratorMessage: Translator.translate(\"LOADING\", this.props.lang)\n          }, () => this.getUsers());\n        }, 500);\n      });\n    };\n\n    this.getUsers = () => {\n      this.AddMembersManager.fetchNextUsers().then(userList => {\n        const filteredUserList = userList.filter(user => {\n          const found = this.context.groupMembers.find(member => user.uid === member.uid);\n          const foundbanned = this.context.bannedGroupMembers.find(member => user.uid === member.uid);\n\n          if (found || foundbanned) {\n            return false;\n          }\n\n          return true;\n        });\n\n        if (filteredUserList.length === 0) {\n          this.setState({\n            decoratorMessage: Translator.translate(\"NO_USERS_FOUND\", this.props.lang)\n          });\n        }\n\n        this.setState({\n          userlist: [...this.state.userlist, ...userList],\n          filteredlist: [...this.state.filteredlist, ...filteredUserList]\n        });\n      }).catch(error => this.setState({\n        decoratorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n      }));\n    };\n\n    this.membersUpdated = (user, userState) => {\n      if (userState) {\n        const members = [...this.state.membersToAdd];\n        members.push(user);\n        this.setState({\n          membersToAdd: [...members]\n        });\n      } else {\n        const membersToAdd = [...this.state.membersToAdd];\n        const IndexFound = membersToAdd.findIndex(member => member.uid === user.uid);\n\n        if (IndexFound > -1) {\n          membersToAdd.splice(IndexFound, 1);\n          this.setState({\n            membersToAdd: [...membersToAdd]\n          });\n        }\n      }\n    };\n\n    this.updateMembers = () => {\n      const guid = this.context.item.guid;\n      const membersList = [];\n      this.state.membersToAdd.forEach(newmember => {\n        //if a selected member is already part of the member list, don't add\n        const IndexFound = this.context.groupMembers.findIndex(member => member.uid === newmember.uid);\n\n        if (IndexFound === -1) {\n          const newMember = new CometChat.GroupMember(newmember.uid, CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT);\n          membersList.push(newMember);\n          newmember[\"type\"] = \"add\";\n        }\n      });\n\n      if (membersList.length) {\n        this.setState({\n          addingMembers: true\n        });\n        const membersToAdd = [];\n        CometChat.addMembersToGroup(guid, membersList, []).then(response => {\n          if (Object.keys(response).length) {\n            for (const member in response) {\n              if (response[member] === \"success\") {\n                const found = this.state.userlist.find(user => user.uid === member);\n                found[\"scope\"] = CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT;\n                membersToAdd.push(found);\n              }\n            }\n\n            this.props.actionGenerated(enums.ACTIONS[\"ADD_GROUP_MEMBER_SUCCESS\"], membersToAdd);\n          }\n\n          this.setState({\n            addingMembers: false\n          });\n          this.props.close();\n        }).catch(error => {\n          this.setState({\n            addingMembers: false,\n            errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n          });\n        });\n      }\n    };\n\n    this.state = {\n      userlist: [],\n      membersToAdd: [],\n      filteredlist: [],\n      addingMembers: false,\n      decoratorMessage: Translator.translate(\"LOADING\", Translator.getDefaultLanguage()),\n      errorMessage: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.AddMembersManager = new AddMembersManager(this.context);\n    this.AddMembersManager.initializeMembersRequest().then(() => {\n      this.getUsers();\n      this.AddMembersManager.attachListeners(this.userUpdated);\n    });\n  }\n\n  componentWillUnmount() {\n    this.AddMembersManager.removeListeners();\n    this.AddMembersManager = null;\n  }\n\n  render() {\n    const createText = this.state.addingMembers ? Translator.translate(\"ADDING\", this.props.lang) : Translator.translate(\"ADD\", this.props.lang);\n    let addGroupMemberBtn = jsx(\"div\", {\n      css: modalFootStyle(this.props, this.state, addingIcon, this.context),\n      className: \"modal__addmembers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }\n    }, jsx(\"button\", {\n      type: \"button\",\n      onClick: this.updateMembers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }\n    }, jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 68\n      }\n    }, createText)));\n    let messageContainer = null;\n\n    if (this.state.filteredlist.length === 0) {\n      messageContainer = jsx(\"div\", {\n        css: contactMsgStyle(),\n        className: \"members__decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 17\n        }\n      }, jsx(\"p\", {\n        css: contactMsgTxtStyle(this.context),\n        className: \"decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }\n      }, this.state.decoratorMessage));\n      addGroupMemberBtn = null;\n    }\n\n    let currentLetter = \"\";\n    const filteredUserList = [...this.state.filteredlist];\n    const users = filteredUserList.map(user => {\n      const chr = user.name[0].toUpperCase();\n      let firstLetter = null;\n\n      if (chr !== currentLetter) {\n        currentLetter = chr;\n        firstLetter = currentLetter;\n      }\n\n      return jsx(React.Fragment, {\n        key: user.uid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 17\n        }\n      }, jsx(CometChatAddGroupMemberListItem, {\n        theme: this.props.theme,\n        lang: this.props.lang,\n        firstLetter: firstLetter,\n        user: user,\n        changed: this.membersUpdated,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }\n      }));\n    });\n    return jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }\n    }, jsx(CometChatBackdrop, {\n      show: true,\n      clicked: this.props.close,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }\n    }), jsx(\"div\", {\n      css: modalWrapperStyle(this.context),\n      className: \"modal__addmembers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }\n    }, jsx(\"span\", {\n      css: modalCloseStyle(clearIcon, this.context),\n      className: \"modal__close\",\n      onClick: this.props.close,\n      title: Translator.translate(\"CLOSE\", this.props.lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }\n    }), jsx(\"div\", {\n      css: modalBodyStyle(),\n      className: \"modal__body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 21\n      }\n    }, jsx(\"div\", {\n      css: modalCaptionStyle(Translator.getDirection(this.props.lang)),\n      className: \"modal__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 25\n      }\n    }, Translator.translate(\"USERS\", this.props.lang)), jsx(\"div\", {\n      css: modalErrorStyle(this.context),\n      className: \"modal__error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 25\n      }\n    }, this.state.errorMessage), jsx(\"div\", {\n      css: modalSearchStyle(),\n      className: \"modal__search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 25\n      }\n    }, jsx(\"button\", {\n      type: \"button\",\n      className: \"search__button\",\n      css: searchButtonStyle(searchIcon, this.context),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 29\n      }\n    }), jsx(\"input\", {\n      type: \"text\",\n      autoComplete: \"off\",\n      css: searchInputStyle(),\n      className: \"search__input\",\n      placeholder: Translator.translate(\"SEARCH\", this.props.lang),\n      onChange: this.searchUsers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 29\n      }\n    })), messageContainer, jsx(\"div\", {\n      css: modalListStyle(this.context),\n      onScroll: this.handleScroll,\n      className: \"modal__content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 25\n      }\n    }, users), addGroupMemberBtn)));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatAddGroupMemberList.contextType = CometChatContext;\nCometChatAddGroupMemberList.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatAddGroupMemberList.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatAddGroupMemberList };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Groups/CometChatAddGroupMemberList/index.js"],"names":["React","jsx","PropTypes","CometChat","AddMembersManager","CometChatAddGroupMemberListItem","CometChatBackdrop","CometChatContext","enums","Translator","theme","modalWrapperStyle","modalCloseStyle","modalBodyStyle","modalCaptionStyle","modalSearchStyle","searchButtonStyle","searchInputStyle","modalListStyle","modalFootStyle","contactMsgStyle","contactMsgTxtStyle","modalErrorStyle","CometChatAddGroupMemberList","Component","constructor","props","userUpdated","user","userlist","state","userKey","findIndex","u","k","uid","userObj","newUserObj","Object","assign","splice","setState","handleScroll","e","bottom","Math","round","currentTarget","scrollHeight","scrollTop","clientHeight","getUsers","searchUsers","timeout","clearTimeout","val","target","value","context","initializeMembersRequest","then","setTimeout","membersToAdd","membersToRemove","filteredlist","decoratorMessage","translate","lang","fetchNextUsers","userList","filteredUserList","filter","found","groupMembers","find","member","foundbanned","bannedGroupMembers","length","catch","error","membersUpdated","userState","members","push","IndexFound","updateMembers","guid","item","membersList","forEach","newmember","newMember","GroupMember","GROUP_MEMBER_SCOPE","PARTICIPANT","addingMembers","addMembersToGroup","response","keys","actionGenerated","ACTIONS","close","errorMessage","getDefaultLanguage","componentDidMount","attachListeners","componentWillUnmount","removeListeners","render","createText","addGroupMemberBtn","addingIcon","messageContainer","currentLetter","users","map","chr","name","toUpperCase","firstLetter","clearIcon","getDirection","searchIcon","contextType","defaultProps","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { AddMembersManager } from \"./controller\";\n\nimport { CometChatAddGroupMemberListItem } from \"../\";\nimport { CometChatBackdrop } from \"../../Shared\";\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\n\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\n\nimport {\n    modalWrapperStyle,\n    modalCloseStyle,\n    modalBodyStyle,\n    modalCaptionStyle,\n    modalSearchStyle,\n    searchButtonStyle,\n    searchInputStyle,\n    modalListStyle,\n    modalFootStyle,\n    contactMsgStyle,\n    contactMsgTxtStyle,\n    modalErrorStyle\n} from \"./style\";\n\nimport addingIcon from \"./resources/adding.svg\";\nimport searchIcon from \"./resources/search.svg\";\nimport clearIcon from \"./resources/close.svg\";\n\nclass CometChatAddGroupMemberList extends React.Component {\n\n    static contextType = CometChatContext;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            userlist: [],\n            membersToAdd: [],\n            filteredlist: [],\n            addingMembers: false,\n            decoratorMessage: Translator.translate(\"LOADING\", Translator.getDefaultLanguage()),\n            errorMessage: \"\"\n        }\n    }\n\n    componentDidMount() {\n\n        this.AddMembersManager = new AddMembersManager(this.context);\n        this.AddMembersManager.initializeMembersRequest().then(() => {\n\n            this.getUsers();\n            this.AddMembersManager.attachListeners(this.userUpdated);\n        });\n    }\n\n    componentWillUnmount() {\n\n        this.AddMembersManager.removeListeners();\n        this.AddMembersManager = null;\n    }\n\n    userUpdated = (user) => {\n        \n        let userlist = [...this.state.userlist];\n  \n        //search for user\n        let userKey = userlist.findIndex((u, k) => u.uid === user.uid);\n      \n        //if found in the list, update user object\n        if(userKey > -1) {\n\n            let userObj = userlist[userKey];\n            let newUserObj = Object.assign({}, userObj, user);\n            userlist.splice(userKey, 1, newUserObj);\n    \n            this.setState({ userlist: userlist });\n        }\n    }\n\n    handleScroll = (e) => {\n      const bottom =\n        Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) === Math.round(e.currentTarget.clientHeight);\n      if (bottom) this.getUsers();\n    }\n    \n    searchUsers = (e) => {\n  \n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        let val = e.target.value;\n        \n        this.AddMembersManager = new AddMembersManager(this.context, val);\n        this.AddMembersManager.initializeMembersRequest().then(() => {\n\n            this.timeout = setTimeout(() => {\n                this.setState({ userlist: [], membersToAdd: [], membersToRemove: [], filteredlist: [], decoratorMessage: Translator.translate(\"LOADING\", this.props.lang) }, () => this.getUsers());\n            }, 500);\n\t\t\t\t\t\t\t\n        });\n    }\n  \n    getUsers = () => {\n  \n        this.AddMembersManager.fetchNextUsers()\n            .then(userList => {\n                const filteredUserList = userList.filter(user => {\n                    const found = this.context.groupMembers.find(member => user.uid === member.uid);\n                    const foundbanned = this.context.bannedGroupMembers.find(member => user.uid === member.uid);\n                    if (found || foundbanned) {\n                        return false;\n                    }\n                    return true;\n                });\n\n                if (filteredUserList.length === 0) {\n                    this.setState({ decoratorMessage: Translator.translate(\"NO_USERS_FOUND\", this.props.lang) });\n                }\n\n                this.setState({ userlist: [...this.state.userlist, ...userList], filteredlist: [...this.state.filteredlist, ...filteredUserList] });\n            })\n            .catch(error => this.setState({ decoratorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang) }));\n    }\n\n    membersUpdated = (user, userState) => {\n\n        if(userState) {\n\n            const members = [...this.state.membersToAdd];\n            members.push(user);\n            this.setState({membersToAdd: [...members]});\n\n        } else {\n\n            const membersToAdd = [...this.state.membersToAdd];\n            const IndexFound = membersToAdd.findIndex(member => member.uid === user.uid);\n            if(IndexFound > -1) {\n                membersToAdd.splice(IndexFound, 1);\n                this.setState({membersToAdd: [...membersToAdd]})\n            }\n        }\n    }\n\n    updateMembers = () => {\n        \n        const guid = this.context.item.guid;\n        const membersList = [];\n\n        this.state.membersToAdd.forEach(newmember => {\n            //if a selected member is already part of the member list, don't add\n            const IndexFound = this.context.groupMembers.findIndex(member => member.uid === newmember.uid);\n            if(IndexFound === -1) {\n                \n                const newMember = new CometChat.GroupMember(newmember.uid, CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT);\n                membersList.push(newMember);\n\n                newmember[\"type\"] = \"add\";\n            }\n        });\n\n        if(membersList.length) {\n\n            this.setState({ addingMembers: true });\n\n            const membersToAdd = [];\n            CometChat.addMembersToGroup(guid, membersList, []).then(response => {\n\n                if (Object.keys(response).length) {\n                        \n                    for (const member in response) {\n\n                        if(response[member] === \"success\") {\n\n                            const found = this.state.userlist.find(user => user.uid === member);\n                            found[\"scope\"] = CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT;\n                            membersToAdd.push(found);\n                        }\n                    }\n\n                    this.props.actionGenerated(enums.ACTIONS[\"ADD_GROUP_MEMBER_SUCCESS\"], membersToAdd);\n                }\n                this.setState({ addingMembers: false });\n                this.props.close();\n\n            }).catch(error => {\n                \n                this.setState({ addingMembers: false, errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang) });\n                \n            });\n        }\n    }\n\n    render() {\n\n        const createText = this.state.addingMembers ? Translator.translate(\"ADDING\", this.props.lang) : Translator.translate(\"ADD\", this.props.lang);\n        let addGroupMemberBtn = (\n            <div css={modalFootStyle(this.props, this.state, addingIcon, this.context)} className=\"modal__addmembers\">\n                <button type=\"button\" onClick={this.updateMembers}><span>{createText}</span></button>\n            </div>\n        );\n\n        let messageContainer = null;\n        if (this.state.filteredlist.length === 0) {\n\n            messageContainer = (\n                <div css={contactMsgStyle()} className=\"members__decorator-message\">\n                    <p css={contactMsgTxtStyle(this.context)} className=\"decorator-message\">{this.state.decoratorMessage}</p>\n                </div>\n            );\n            addGroupMemberBtn = null;\n        }\n\n        let currentLetter = \"\";\n        const filteredUserList = [...this.state.filteredlist];\n        const users = filteredUserList.map(user => {\n\n            const chr = user.name[0].toUpperCase();\n            let firstLetter = null;\n            if(chr !== currentLetter) {\n                currentLetter = chr;\n                firstLetter = currentLetter;\n            }\n\n            return (\n                <React.Fragment key={user.uid}>\n                    <CometChatAddGroupMemberListItem \n                    theme={this.props.theme}\n                    lang={this.props.lang}\n                    firstLetter={firstLetter}\n                    user={user}\n                    changed={this.membersUpdated} />\n                </React.Fragment>\n            )\n        });\n\n        return (\n            <React.Fragment>\n                <CometChatBackdrop show={true} clicked={this.props.close} />\n                <div css={modalWrapperStyle(this.context)} className=\"modal__addmembers\">\n                    <span css={modalCloseStyle(clearIcon, this.context)} className=\"modal__close\" onClick={this.props.close} title={Translator.translate(\"CLOSE\", this.props.lang)}></span>\n                    <div css={modalBodyStyle()} className=\"modal__body\">\n                        <div css={modalCaptionStyle(Translator.getDirection(this.props.lang))} className=\"modal__title\">{Translator.translate(\"USERS\", this.props.lang)}</div>\n                        <div css={modalErrorStyle(this.context)} className=\"modal__error\">{this.state.errorMessage}</div>\n                        <div css={modalSearchStyle()} className=\"modal__search\">\n                            <button type=\"button\" className=\"search__button\" css={searchButtonStyle(searchIcon, this.context)} />\n                            <input\n                            type=\"text\"\n                            autoComplete=\"off\"\n                            css={searchInputStyle()}\n                            className=\"search__input\"\n                            placeholder={Translator.translate(\"SEARCH\", this.props.lang)}\n                            onChange={this.searchUsers} />\n                        </div>\n                        {messageContainer}\n                        <div css={modalListStyle(this.context)} onScroll={this.handleScroll} className=\"modal__content\">{users}</div>\n                        {addGroupMemberBtn}\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\n// Specifies the default values for props:\nCometChatAddGroupMemberList.defaultProps = {\n    lang: Translator.getDefaultLanguage(),\n    theme: theme\n};\n\nCometChatAddGroupMemberList.propTypes = {\n    lang: PropTypes.string,\n    theme: PropTypes.object\n}\n\nexport { CometChatAddGroupMemberList };"]},"metadata":{},"sourceType":"module"}