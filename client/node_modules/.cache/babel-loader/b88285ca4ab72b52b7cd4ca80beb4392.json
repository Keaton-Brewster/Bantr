{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ConversationProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport API from \"./API\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst conversationContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(conversationContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function Provider({\n  id,\n  children\n}) {\n  _s2();\n\n  const [loadingMessages, setLoadingMessages] = useState(false);\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n\n  function sendMessage(text) {\n    // Yet another place where I ran into id issues.. this is going to be a mess to fix later\n    const convo_id = conversations[selectedConversationIndex].id; // const convo_id = conversations[selectedConversationIndex]._id;\n\n    API.sendMessage(convo_id, id, text).then(data => {\n      console.log(data);\n    }).catch(e => console.error(e));\n  }\n\n  function loadConversations(cb) {\n    axios.get(`/api/conversations/${id}`).then(conversations => {\n      cb(conversations.data);\n    });\n  }\n\n  useEffect(() => {\n    console.log(\"id\", id);\n    if (!id) return;\n    loadConversations(conversations => {\n      console.log(conversations);\n    }); // API.init(([convos, topMessages]) => {\n    //   setConversations(convos);\n    //   setMessages(topMessages);\n    // }).catch((e) => console.error(e));\n  }, [id]);\n  const value = {\n    conversations,\n    setConversations,\n    selectedConversation: conversations[selectedConversationIndex],\n    loadingMessagesState: [loadingMessages, setLoadingMessages],\n    sendMessage,\n    userID: id,\n    selectConversationIndex: setSelectedConversationIndex\n  };\n  return /*#__PURE__*/_jsxDEV(conversationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Provider, \"GMN2/s5MUVolqegzrbtQgZyRccs=\");\n\n_c = Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ConversationProvider.js"],"names":["React","useContext","useEffect","useState","axios","API","conversationContext","createContext","useConversations","Provider","id","children","loadingMessages","setLoadingMessages","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","sendMessage","text","convo_id","then","data","console","log","catch","e","error","loadConversations","cb","get","value","selectedConversation","loadingMessagesState","userID","selectConversationIndex"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,MAAMC,mBAAmB,gBAAGN,KAAK,CAACO,aAAN,EAA5B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AACjC,SAAOP,UAAU,CAACK,mBAAD,CAAjB;AACD;;GAFeE,gB;;AAIhB,OAAO,SAASC,QAAT,CAAkB;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAlB,EAAoC;AAAA;;AACzC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACa,yBAAD,EAA4BC,4BAA5B,IAA4Dd,QAAQ,CAAC,CAAD,CAA1E;;AAEA,WAASe,WAAT,CAAqBC,IAArB,EAA2B;AACzB;AACA,UAAMC,QAAQ,GAAGN,aAAa,CAACE,yBAAD,CAAb,CAAyCN,EAA1D,CAFyB,CAGzB;;AACAL,IAAAA,GAAG,CAACa,WAAJ,CAAgBE,QAAhB,EAA0BV,EAA1B,EAA8BS,IAA9B,EACGE,IADH,CACSC,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,KAHH,EAIGG,KAJH,CAIUC,CAAD,IAAOH,OAAO,CAACI,KAAR,CAAcD,CAAd,CAJhB;AAKD;;AAED,WAASE,iBAAT,CAA2BC,EAA3B,EAA+B;AAC7BzB,IAAAA,KAAK,CAAC0B,GAAN,CAAW,sBAAqBpB,EAAG,EAAnC,EAAsCW,IAAtC,CAA4CP,aAAD,IAAmB;AAC5De,MAAAA,EAAE,CAACf,aAAa,CAACQ,IAAf,CAAF;AACD,KAFD;AAGD;;AAEDpB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBd,EAAlB;AACA,QAAI,CAACA,EAAL,EAAS;AACTkB,IAAAA,iBAAiB,CAAEd,aAAD,IAAmB;AACnCS,MAAAA,OAAO,CAACC,GAAR,CAAYV,aAAZ;AACD,KAFgB,CAAjB,CAHc,CAMd;AACA;AACA;AACA;AACD,GAVQ,EAUN,CAACJ,EAAD,CAVM,CAAT;AAYA,QAAMqB,KAAK,GAAG;AACZjB,IAAAA,aADY;AAEZC,IAAAA,gBAFY;AAGZiB,IAAAA,oBAAoB,EAAElB,aAAa,CAACE,yBAAD,CAHvB;AAIZiB,IAAAA,oBAAoB,EAAE,CAACrB,eAAD,EAAkBC,kBAAlB,CAJV;AAKZK,IAAAA,WALY;AAMZgB,IAAAA,MAAM,EAAExB,EANI;AAOZyB,IAAAA,uBAAuB,EAAElB;AAPb,GAAd;AASA,sBACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAEc,KAArC;AAAA,cACGpB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IAhDeF,Q;;KAAAA,Q","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport API from \"./API\";\n\nconst conversationContext = React.createContext();\n\nexport function useConversations() {\n  return useContext(conversationContext);\n}\n\nexport function Provider({ id, children }) {\n  const [loadingMessages, setLoadingMessages] = useState(false);\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n\n  function sendMessage(text) {\n    // Yet another place where I ran into id issues.. this is going to be a mess to fix later\n    const convo_id = conversations[selectedConversationIndex].id;\n    // const convo_id = conversations[selectedConversationIndex]._id;\n    API.sendMessage(convo_id, id, text)\n      .then((data) => {\n        console.log(data);\n      })\n      .catch((e) => console.error(e));\n  }\n\n  function loadConversations(cb) {\n    axios.get(`/api/conversations/${id}`).then((conversations) => {\n      cb(conversations.data);\n    });\n  }\n\n  useEffect(() => {\n    console.log(\"id\", id);\n    if (!id) return;\n    loadConversations((conversations) => {\n      console.log(conversations);\n    });\n    // API.init(([convos, topMessages]) => {\n    //   setConversations(convos);\n    //   setMessages(topMessages);\n    // }).catch((e) => console.error(e));\n  }, [id]);\n\n  const value = {\n    conversations,\n    setConversations,\n    selectedConversation: conversations[selectedConversationIndex],\n    loadingMessagesState: [loadingMessages, setLoadingMessages],\n    sendMessage,\n    userID: id,\n    selectConversationIndex: setSelectedConversationIndex,\n  };\n  return (\n    <conversationContext.Provider value={value}>\n      {children}\n    </conversationContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}