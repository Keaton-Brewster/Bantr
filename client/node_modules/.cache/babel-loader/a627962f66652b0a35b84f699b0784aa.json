{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/Comps/MainContent/Messaging/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect, useCallback } from \"react\";\nimport { Navbar } from \"react-bootstrap\";\nimport { FaArrowLeft } from \"react-icons/fa\";\nimport { useConversations } from \"../../../utils/ConversationProvider\";\nimport { useViewport } from \"../../../utils/ViewportProvider\";\nimport ChatInput from \"./ChatInput\";\nimport SingleMessage from \"./SingleMessage\";\nimport MessagesTopMenu from \"./MessagesTopMenu\";\nimport MessageContextMenu from \"./MessageContextMenu\";\nimport \"./messages.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Messages({\n  containerRef\n}) {\n  _s();\n\n  var _selectedConversation;\n\n  const {\n    sendMessage,\n    selectedConversation\n  } = useConversations();\n  const [contextMenuShow, setContextMenuShow] = useState(false);\n  const textRef = useRef(); // Container ref is used to give refernce of width to the\n  // Chat input so that is always is 100% width of its parent\n\n  const {\n    show,\n    bottomOfMessages,\n    scrollToBottomMessages\n  } = useViewport(); // Handler function for message context menu\n\n  function handleRightClick(event, element) {\n    if (contextMenuShow) return;\n    event.preventDefault(); //? const messageIndex = element.getAttribute(\"data-key\");\n\n    setContextMenuShow(true);\n  } // Handler function for clicking away from the message context menu\n\n\n  const dismissContextMenu = useCallback(() => {\n    if (!contextMenuShow) return;\n    setContextMenuShow(false);\n  }, [contextMenuShow]); // Hook to add the dismiss handler function\n\n  useEffect(() => {\n    document.addEventListener(\"click\", dismissContextMenu);\n    return () => {\n      document.removeEventListener(\"click\", dismissContextMenu);\n    };\n  }, [dismissContextMenu]); // When a new conversation is sleceted,\n  // Scroll to the bottom right away\n  // Alternatively, if show is changed during mobile view\n  // Also want to run scroll to bottom\n\n  useEffect(() => {\n    scrollToBottomMessages(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedConversation, show]);\n  return (\n    /*#__PURE__*/\n\n    /*\n    ?   Need to add a loading state for the message portion of this.\n    ?   OR I need to figure out a way to reverse load messages. \n    ?   Reverse loading would be a better way in terms of UI/UX\n    ?   Having a loader would certainly interupt the expected flow \n    ?   of a messaging app.\n    */\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MessagesTopMenu, {\n        conversationName: selectedConversation.name,\n        containerRef: containerRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(MessageContextMenu, {\n        show: contextMenuShow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"messageWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex flex-column flex-grow-1\",\n          id: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-grow-1 overflow-auto\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex flex-column align-items-start justify-content-end px-3\",\n              children: [selectedConversation === null || selectedConversation === void 0 ? void 0 : (_selectedConversation = selectedConversation.messages) === null || _selectedConversation === void 0 ? void 0 : _selectedConversation.map((message, i) => {\n                return /*#__PURE__*/_jsxDEV(SingleMessage, {\n                  index: i,\n                  data: [message, selectedConversation.messages],\n                  handleRightClick: handleRightClick\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 19\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: bottomOfMessages\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n          textRef: textRef,\n          sendMessage: sendMessage,\n          containerRef: containerRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  );\n}\n\n_s(Messages, \"83VE5mLsCdqeBSfelf7SxtHQXfY=\", false, function () {\n  return [useConversations, useViewport];\n});\n\n_c = Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/Comps/MainContent/Messaging/index.jsx"],"names":["React","useRef","useState","useEffect","useCallback","Navbar","FaArrowLeft","useConversations","useViewport","ChatInput","SingleMessage","MessagesTopMenu","MessageContextMenu","Messages","containerRef","sendMessage","selectedConversation","contextMenuShow","setContextMenuShow","textRef","show","bottomOfMessages","scrollToBottomMessages","handleRightClick","event","element","preventDefault","dismissContextMenu","document","addEventListener","removeEventListener","name","messages","map","message","i"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from \"react\";\nimport { Navbar } from \"react-bootstrap\";\nimport { FaArrowLeft } from \"react-icons/fa\";\nimport { useConversations } from \"../../../utils/ConversationProvider\";\nimport { useViewport } from \"../../../utils/ViewportProvider\";\nimport ChatInput from \"./ChatInput\";\nimport SingleMessage from \"./SingleMessage\";\nimport MessagesTopMenu from \"./MessagesTopMenu\";\nimport MessageContextMenu from \"./MessageContextMenu\";\nimport \"./messages.css\";\n\nexport default function Messages({ containerRef }) {\n  const { sendMessage, selectedConversation } = useConversations();\n  const [contextMenuShow, setContextMenuShow] = useState(false);\n  const textRef = useRef();\n  // Container ref is used to give refernce of width to the\n  // Chat input so that is always is 100% width of its parent\n\n  const { show, bottomOfMessages, scrollToBottomMessages } = useViewport();\n\n  // Handler function for message context menu\n  function handleRightClick(event, element) {\n    if (contextMenuShow) return;\n    event.preventDefault();\n    //? const messageIndex = element.getAttribute(\"data-key\");\n    setContextMenuShow(true);\n  }\n\n  // Handler function for clicking away from the message context menu\n  const dismissContextMenu = useCallback(() => {\n    if (!contextMenuShow) return;\n    setContextMenuShow(false);\n  }, [contextMenuShow]);\n  // Hook to add the dismiss handler function\n  useEffect(() => {\n    document.addEventListener(\"click\", dismissContextMenu);\n    return () => {\n      document.removeEventListener(\"click\", dismissContextMenu);\n    };\n  }, [dismissContextMenu]);\n\n  // When a new conversation is sleceted,\n  // Scroll to the bottom right away\n  // Alternatively, if show is changed during mobile view\n  // Also want to run scroll to bottom\n  useEffect(() => {\n    scrollToBottomMessages();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedConversation, show]);\n\n  return (\n    /*\n?   Need to add a loading state for the message portion of this.\n?   OR I need to figure out a way to reverse load messages. \n?   Reverse loading would be a better way in terms of UI/UX\n?   Having a loader would certainly interupt the expected flow \n?   of a messaging app.\n    */\n    <>\n      <MessagesTopMenu\n        conversationName={selectedConversation.name}\n        containerRef={containerRef}\n      />\n      <MessageContextMenu show={contextMenuShow} />\n\n      <div id=\"messageWrapper\">\n        <div className=\"d-flex flex-column flex-grow-1\" id=\"messages\">\n          <div className=\"flex-grow-1 overflow-auto\">\n            <div className=\"d-flex flex-column align-items-start justify-content-end px-3\">\n              {selectedConversation?.messages?.map((message, i) => {\n                return (\n                  <SingleMessage\n                    key={i}\n                    index={i}\n                    data={[message, selectedConversation.messages]}\n                    handleRightClick={handleRightClick}\n                  />\n                );\n              })}\n              <div ref={bottomOfMessages}></div>\n            </div>\n          </div>\n        </div>\n\n        <ChatInput\n          textRef={textRef}\n          sendMessage={sendMessage}\n          containerRef={containerRef}\n        />\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}