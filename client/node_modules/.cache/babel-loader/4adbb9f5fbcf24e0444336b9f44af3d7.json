{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/CometChatMessageActions/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport * as enums from \"../../../util/enums.js\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { messageActionStyle, actionGroupStyle, groupButtonStyle } from \"./style\";\nimport startThreadIcon from \"./resources/threaded-message.svg\";\nimport deleteIcon from \"./resources/delete.svg\";\nimport editIcon from \"./resources/edit.svg\";\nimport reactIcon from \"./resources/reactions.svg\";\nimport translateIcon from \"./resources/message-translate.svg\";\nimport sendMessageInPrivateIcon from \"./resources/send-message-in-private.svg\";\n\nclass CometChatMessageActions extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.toggleTooltip = (event, flag) => {\n      const elem = event.target;\n\n      if (flag) {\n        elem.setAttribute(\"title\", elem.dataset.title);\n      } else {\n        elem.removeAttribute(\"title\");\n      }\n    };\n\n    this.enableMessageReaction = () => {\n      /**\n       * If reacting to messages feature is disabled\n       */\n      this.context.FeatureRestriction.isReactionsEnabled().then(response => {\n        if (response === true) {\n          this.setState({\n            enableMessageReaction: true\n          });\n        } else {\n          this.setState({\n            enableMessageReaction: false\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          enableMessageReaction: false\n        });\n      });\n    };\n\n    this.enableThreadedChats = () => {\n      /**\n       * If threaded chats are open, return false\n       */\n      if (this.props.message.hasOwnProperty(\"parentMessageId\") === true) {\n        return false;\n      }\n      /**\n       * If threaded replies feature is disabled\n       */\n\n\n      this.context.FeatureRestriction.isThreadedMessagesEnabled().then(response => {\n        if (response === true) {\n          this.setState({\n            enableThreadedChats: true\n          });\n        } else {\n          this.setState({\n            enableThreadedChats: false\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          enableThreadedChats: false\n        });\n      });\n    };\n\n    this.enableDeleteMessage = () => {\n      this.context.FeatureRestriction.isDeleteMessageEnabled().then(response => {\n        if (response === true) {\n          this.setState({\n            enableDeleteMessage: true\n          });\n        } else {\n          this.setState({\n            enableDeleteMessage: false\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          enableDeleteMessage: false\n        });\n      });\n    };\n\n    this.enableDeleteMessageForModerator = () => {\n      this.context.FeatureRestriction.isDeleteMemberMessageEnabled().then(response => {\n        if (response === true) {\n          this.setState({\n            enableDeleteMessageForModerator: true\n          });\n        } else {\n          this.setState({\n            enableDeleteMessageForModerator: false\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          enableDeleteMessageForModerator: false\n        });\n      });\n    };\n\n    this.enableEditMessage = () => {\n      var _this$props$message$s, _this$props$loggedInU;\n\n      /**\n       * If the message is not sent by the logged in user or the message type is not text\n       */\n      if (((_this$props$message$s = this.props.message.sender) === null || _this$props$message$s === void 0 ? void 0 : _this$props$message$s.uid) !== ((_this$props$loggedInU = this.props.loggedInUser) === null || _this$props$loggedInU === void 0 ? void 0 : _this$props$loggedInU.uid) || this.props.message.type !== CometChat.MESSAGE_TYPE.TEXT) {\n        return false;\n      }\n\n      this.context.FeatureRestriction.isEditMessageEnabled().then(response => {\n        if (response === true) {\n          this.setState({\n            enableEditMessage: true\n          });\n        } else {\n          this.setState({\n            enableEditMessage: false\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          enableEditMessage: false\n        });\n      });\n    };\n\n    this.enableTranslateMessage = () => {\n      /**\n       * message type is not text\n       */\n      if (this.props.message.type !== CometChat.MESSAGE_TYPE.TEXT) {\n        return false;\n      }\n\n      this.context.FeatureRestriction.isMessageTranslationEnabled().then(response => {\n        if (response === true) {\n          this.setState({\n            enableTranslateMessage: true\n          });\n        } else {\n          this.setState({\n            enableTranslateMessage: false\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          enableTranslateMessage: false\n        });\n      });\n    };\n\n    this.enableMessageInPrivate = () => {\n      this.context.FeatureRestriction.isMessageInPrivateEnabled().then(response => {\n        if (response === true) {\n          this.setState({\n            enableMessageInPrivate: true\n          });\n        } else {\n          this.setState({\n            enableMessageInPrivate: false\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          enableMessageInPrivate: false\n        });\n      });\n    };\n\n    this.sendMessageInPrivate = () => {\n      var _this$props$message;\n\n      const item = (_this$props$message = this.props.message) === null || _this$props$message === void 0 ? void 0 : _this$props$message.sender;\n      const type = CometChat.ACTION_TYPE.TYPE_USER;\n      this.context.setTypeAndItem(type, item);\n    };\n\n    this.state = {\n      enableMessageReaction: false,\n      enableThreadedChats: false,\n      enableDeleteMessage: false,\n      enableEditMessage: false,\n      enableTranslateMessage: false,\n      enableMessageInPrivate: false,\n      enableDeleteMessageForModerator: false\n    };\n  }\n\n  componentDidMount() {\n    this.enableMessageReaction();\n    this.enableThreadedChats();\n    this.enableDeleteMessage();\n    this.enableDeleteMessageForModerator();\n    this.enableEditMessage();\n    this.enableTranslateMessage();\n    this.enableMessageInPrivate();\n  }\n\n  render() {\n    var _this$props$message$s2, _this$props$loggedInU2, _this$props$message$s3, _this$props$loggedInU3, _this$props$message2, _this$props$message2$, _this$props$loggedInU4;\n\n    //don't show the tooltip while the message is being sent\n    if (this.props.message.hasOwnProperty(\"sentAt\") === false) {\n      return false;\n    }\n\n    let reactToMessage = null;\n\n    if (this.state.enableMessageReaction) {\n      reactToMessage = jsx(\"li\", {\n        css: actionGroupStyle(),\n        className: \"action__group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 9\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        onMouseEnter: event => this.toggleTooltip(event, true),\n        onMouseLeave: event => this.toggleTooltip(event, false),\n        css: groupButtonStyle(reactIcon, this.context),\n        className: \"group__button button__reacttomessage\",\n        \"data-title\": Translator.translate(\"ADD_REACTION\", this.props.lang),\n        onClick: () => this.props.actionGenerated(enums.ACTIONS[\"REACT_TO_MESSAGE\"], this.props.message),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    let threadedChats = null;\n\n    if (this.state.enableThreadedChats) {\n      threadedChats = jsx(\"li\", {\n        css: actionGroupStyle(),\n        className: \"action__group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 9\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        onMouseEnter: event => this.toggleTooltip(event, true),\n        onMouseLeave: event => this.toggleTooltip(event, false),\n        css: groupButtonStyle(startThreadIcon, this.context),\n        className: \"group__button button__threadedchats\",\n        \"data-title\": this.props.message.replyCount ? Translator.translate(\"REPLY_TO_THREAD\", this.props.lang) : Translator.translate(\"REPLY_IN_THREAD\", this.props.lang),\n        onClick: () => this.props.actionGenerated(enums.ACTIONS[\"VIEW_THREADED_MESSAGE\"], this.props.message),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }\n      }));\n    }\n    /**\n     * in one-on-one chat, allow deleting self messages if delete feature is enabled\n     * in group chat, allow deleting other's messages for moderators and admins if moderator delete feature && delete feature is enabled\n     */\n\n\n    let deleteMessage = null;\n\n    if (((_this$props$message$s2 = this.props.message.sender) === null || _this$props$message$s2 === void 0 ? void 0 : _this$props$message$s2.uid) === ((_this$props$loggedInU2 = this.props.loggedInUser) === null || _this$props$loggedInU2 === void 0 ? void 0 : _this$props$loggedInU2.uid) && this.state.enableDeleteMessage || this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP && ((_this$props$message$s3 = this.props.message.sender) === null || _this$props$message$s3 === void 0 ? void 0 : _this$props$message$s3.uid) !== ((_this$props$loggedInU3 = this.props.loggedInUser) === null || _this$props$loggedInU3 === void 0 ? void 0 : _this$props$loggedInU3.uid) && this.context.item.hasOwnProperty(\"scope\") && this.context.item.scope !== CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT && this.state.enableDeleteMessageForModerator && this.state.enableDeleteMessage) {\n      deleteMessage = jsx(\"li\", {\n        css: actionGroupStyle(),\n        className: \"action__group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 9\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        onMouseEnter: event => this.toggleTooltip(event, true),\n        onMouseLeave: event => this.toggleTooltip(event, false),\n        css: groupButtonStyle(deleteIcon, this.context, 1),\n        className: \"group__button button__delete\",\n        \"data-title\": Translator.translate(\"DELETE_MESSAGE\", this.props.lang),\n        onClick: () => this.props.actionGenerated(enums.ACTIONS[\"DELETE_MESSAGE\"], this.props.message),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    let editMessage = null;\n\n    if (this.state.enableEditMessage) {\n      editMessage = jsx(\"li\", {\n        css: actionGroupStyle(),\n        className: \"action__group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 9\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        onMouseEnter: event => this.toggleTooltip(event, true),\n        onMouseLeave: event => this.toggleTooltip(event, false),\n        css: groupButtonStyle(editIcon, this.context),\n        className: \"group__button button__edit\",\n        \"data-title\": Translator.translate(\"EDIT_MESSAGE\", this.props.lang),\n        onClick: () => this.props.actionGenerated(enums.ACTIONS[\"EDIT_MESSAGE\"], this.props.message),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    let translateMessage = null;\n\n    if (this.state.enableTranslateMessage) {\n      translateMessage = jsx(\"li\", {\n        css: actionGroupStyle(),\n        className: \"action__group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 9\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        onMouseEnter: event => this.toggleTooltip(event, true),\n        onMouseLeave: event => this.toggleTooltip(event, false),\n        css: groupButtonStyle(translateIcon, this.context),\n        className: \"group__button button__translate\",\n        \"data-title\": Translator.translate(\"TRANSLATE_MESSAGE\", this.props.lang),\n        onClick: () => this.props.translateMessage(this.props.message),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }\n      }));\n    }\n    /**\n     * if send message in private feature is enabled, if group chat window is open, and messages are not sent by the loggedin user...\n     */\n\n\n    let messageInPrivate = null;\n\n    if (this.state.enableMessageInPrivate === true && this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP && ((_this$props$message2 = this.props.message) === null || _this$props$message2 === void 0 ? void 0 : (_this$props$message2$ = _this$props$message2.sender) === null || _this$props$message2$ === void 0 ? void 0 : _this$props$message2$.uid) !== ((_this$props$loggedInU4 = this.props.loggedInUser) === null || _this$props$loggedInU4 === void 0 ? void 0 : _this$props$loggedInU4.uid)) {\n      messageInPrivate = jsx(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 9\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        onMouseEnter: event => this.toggleTooltip(event, true),\n        onMouseLeave: event => this.toggleTooltip(event, false),\n        css: groupButtonStyle(sendMessageInPrivateIcon, this.context),\n        className: \"group__button button__translate\",\n        \"data-title\": Translator.translate(\"SEND_MESSAGE_IN_PRIVATE\", this.props.lang),\n        onClick: this.sendMessageInPrivate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    let tooltip = jsx(\"ul\", {\n      css: messageActionStyle(this.props, this.context),\n      className: \"message__actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 7\n      }\n    }, reactToMessage, threadedChats, editMessage, deleteMessage, messageInPrivate, translateMessage);\n\n    if (threadedChats === null && deleteMessage === null && editMessage === null && reactToMessage === null && translateMessage === null && messageInPrivate === null) {\n      tooltip = null;\n    }\n\n    return tooltip;\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatMessageActions.contextType = CometChatContext;\nCometChatMessageActions.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatMessageActions.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatMessageActions };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/CometChatMessageActions/index.js"],"names":["React","jsx","PropTypes","CometChat","enums","CometChatContext","theme","Translator","messageActionStyle","actionGroupStyle","groupButtonStyle","CometChatMessageActions","PureComponent","constructor","props","toggleTooltip","event","flag","elem","target","setAttribute","dataset","title","removeAttribute","enableMessageReaction","context","FeatureRestriction","isReactionsEnabled","then","response","setState","catch","error","enableThreadedChats","message","hasOwnProperty","isThreadedMessagesEnabled","enableDeleteMessage","isDeleteMessageEnabled","enableDeleteMessageForModerator","isDeleteMemberMessageEnabled","enableEditMessage","sender","uid","loggedInUser","type","MESSAGE_TYPE","TEXT","isEditMessageEnabled","enableTranslateMessage","isMessageTranslationEnabled","enableMessageInPrivate","isMessageInPrivateEnabled","sendMessageInPrivate","item","ACTION_TYPE","TYPE_USER","setTypeAndItem","state","componentDidMount","render","reactToMessage","reactIcon","translate","lang","actionGenerated","ACTIONS","threadedChats","startThreadIcon","replyCount","deleteMessage","TYPE_GROUP","scope","GROUP_MEMBER_SCOPE","PARTICIPANT","deleteIcon","editMessage","editIcon","translateMessage","translateIcon","messageInPrivate","sendMessageInPrivateIcon","tooltip","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport * as enums from \"../../../util/enums.js\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\n\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\n\nimport {\n  messageActionStyle,\n  actionGroupStyle,\n  groupButtonStyle,\n} from \"./style\";\n\nimport startThreadIcon from \"./resources/threaded-message.svg\";\nimport deleteIcon from \"./resources/delete.svg\";\nimport editIcon from \"./resources/edit.svg\";\nimport reactIcon from \"./resources/reactions.svg\";\nimport translateIcon from \"./resources/message-translate.svg\";\nimport sendMessageInPrivateIcon from \"./resources/send-message-in-private.svg\";\n\nclass CometChatMessageActions extends React.PureComponent {\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      enableMessageReaction: false,\n      enableThreadedChats: false,\n      enableDeleteMessage: false,\n      enableEditMessage: false,\n      enableTranslateMessage: false,\n      enableMessageInPrivate: false,\n      enableDeleteMessageForModerator: false,\n    };\n  }\n\n  componentDidMount() {\n    this.enableMessageReaction();\n    this.enableThreadedChats();\n    this.enableDeleteMessage();\n    this.enableDeleteMessageForModerator();\n    this.enableEditMessage();\n    this.enableTranslateMessage();\n    this.enableMessageInPrivate();\n  }\n\n  toggleTooltip = (event, flag) => {\n    const elem = event.target;\n\n    if (flag) {\n      elem.setAttribute(\"title\", elem.dataset.title);\n    } else {\n      elem.removeAttribute(\"title\");\n    }\n  };\n\n  enableMessageReaction = () => {\n    /**\n     * If reacting to messages feature is disabled\n     */\n    this.context.FeatureRestriction.isReactionsEnabled()\n      .then((response) => {\n        if (response === true) {\n          this.setState({ enableMessageReaction: true });\n        } else {\n          this.setState({ enableMessageReaction: false });\n        }\n      })\n      .catch((error) => {\n        this.setState({ enableMessageReaction: false });\n      });\n  };\n\n  enableThreadedChats = () => {\n    /**\n     * If threaded chats are open, return false\n     */\n    if (this.props.message.hasOwnProperty(\"parentMessageId\") === true) {\n      return false;\n    }\n\n    /**\n     * If threaded replies feature is disabled\n     */\n    this.context.FeatureRestriction.isThreadedMessagesEnabled()\n      .then((response) => {\n        if (response === true) {\n          this.setState({ enableThreadedChats: true });\n        } else {\n          this.setState({ enableThreadedChats: false });\n        }\n      })\n      .catch((error) => {\n        this.setState({ enableThreadedChats: false });\n      });\n  };\n\n  enableDeleteMessage = () => {\n    this.context.FeatureRestriction.isDeleteMessageEnabled()\n      .then((response) => {\n        if (response === true) {\n          this.setState({ enableDeleteMessage: true });\n        } else {\n          this.setState({ enableDeleteMessage: false });\n        }\n      })\n      .catch((error) => {\n        this.setState({ enableDeleteMessage: false });\n      });\n  };\n\n  enableDeleteMessageForModerator = () => {\n    this.context.FeatureRestriction.isDeleteMemberMessageEnabled()\n      .then((response) => {\n        if (response === true) {\n          this.setState({ enableDeleteMessageForModerator: true });\n        } else {\n          this.setState({ enableDeleteMessageForModerator: false });\n        }\n      })\n      .catch((error) => {\n        this.setState({ enableDeleteMessageForModerator: false });\n      });\n  };\n\n  enableEditMessage = () => {\n    /**\n     * If the message is not sent by the logged in user or the message type is not text\n     */\n    if (\n      this.props.message.sender?.uid !== this.props.loggedInUser?.uid ||\n      this.props.message.type !== CometChat.MESSAGE_TYPE.TEXT\n    ) {\n      return false;\n    }\n\n    this.context.FeatureRestriction.isEditMessageEnabled()\n      .then((response) => {\n        if (response === true) {\n          this.setState({ enableEditMessage: true });\n        } else {\n          this.setState({ enableEditMessage: false });\n        }\n      })\n      .catch((error) => {\n        this.setState({ enableEditMessage: false });\n      });\n  };\n\n  enableTranslateMessage = () => {\n    /**\n     * message type is not text\n     */\n    if (this.props.message.type !== CometChat.MESSAGE_TYPE.TEXT) {\n      return false;\n    }\n\n    this.context.FeatureRestriction.isMessageTranslationEnabled()\n      .then((response) => {\n        if (response === true) {\n          this.setState({ enableTranslateMessage: true });\n        } else {\n          this.setState({ enableTranslateMessage: false });\n        }\n      })\n      .catch((error) => {\n        this.setState({ enableTranslateMessage: false });\n      });\n  };\n\n  /**\n   * If message in private feature is enabled\n   */\n  enableMessageInPrivate = () => {\n    this.context.FeatureRestriction.isMessageInPrivateEnabled()\n      .then((response) => {\n        if (response === true) {\n          this.setState({ enableMessageInPrivate: true });\n        } else {\n          this.setState({ enableMessageInPrivate: false });\n        }\n      })\n      .catch((error) => {\n        this.setState({ enableMessageInPrivate: false });\n      });\n  };\n\n  sendMessageInPrivate = () => {\n    const item = this.props.message?.sender;\n    const type = CometChat.ACTION_TYPE.TYPE_USER;\n\n    this.context.setTypeAndItem(type, item);\n  };\n\n  render() {\n    //don't show the tooltip while the message is being sent\n    if (this.props.message.hasOwnProperty(\"sentAt\") === false) {\n      return false;\n    }\n\n    let reactToMessage = null;\n    if (this.state.enableMessageReaction) {\n      reactToMessage = (\n        <li css={actionGroupStyle()} className=\"action__group\">\n          <button\n            type=\"button\"\n            onMouseEnter={(event) => this.toggleTooltip(event, true)}\n            onMouseLeave={(event) => this.toggleTooltip(event, false)}\n            css={groupButtonStyle(reactIcon, this.context)}\n            className=\"group__button button__reacttomessage\"\n            data-title={Translator.translate(\"ADD_REACTION\", this.props.lang)}\n            onClick={() =>\n              this.props.actionGenerated(\n                enums.ACTIONS[\"REACT_TO_MESSAGE\"],\n                this.props.message\n              )\n            }\n          ></button>\n        </li>\n      );\n    }\n\n    let threadedChats = null;\n    if (this.state.enableThreadedChats) {\n      threadedChats = (\n        <li css={actionGroupStyle()} className=\"action__group\">\n          <button\n            type=\"button\"\n            onMouseEnter={(event) => this.toggleTooltip(event, true)}\n            onMouseLeave={(event) => this.toggleTooltip(event, false)}\n            css={groupButtonStyle(startThreadIcon, this.context)}\n            className=\"group__button button__threadedchats\"\n            data-title={\n              this.props.message.replyCount\n                ? Translator.translate(\"REPLY_TO_THREAD\", this.props.lang)\n                : Translator.translate(\"REPLY_IN_THREAD\", this.props.lang)\n            }\n            onClick={() =>\n              this.props.actionGenerated(\n                enums.ACTIONS[\"VIEW_THREADED_MESSAGE\"],\n                this.props.message\n              )\n            }\n          ></button>\n        </li>\n      );\n    }\n\n    /**\n     * in one-on-one chat, allow deleting self messages if delete feature is enabled\n     * in group chat, allow deleting other's messages for moderators and admins if moderator delete feature && delete feature is enabled\n     */\n    let deleteMessage = null;\n    if (\n      (this.props.message.sender?.uid === this.props.loggedInUser?.uid &&\n        this.state.enableDeleteMessage) ||\n      (this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP &&\n        this.props.message.sender?.uid !== this.props.loggedInUser?.uid &&\n        this.context.item.hasOwnProperty(\"scope\") &&\n        this.context.item.scope !== CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT &&\n        this.state.enableDeleteMessageForModerator &&\n        this.state.enableDeleteMessage)\n    ) {\n      deleteMessage = (\n        <li css={actionGroupStyle()} className=\"action__group\">\n          <button\n            type=\"button\"\n            onMouseEnter={(event) => this.toggleTooltip(event, true)}\n            onMouseLeave={(event) => this.toggleTooltip(event, false)}\n            css={groupButtonStyle(deleteIcon, this.context, 1)}\n            className=\"group__button button__delete\"\n            data-title={Translator.translate(\"DELETE_MESSAGE\", this.props.lang)}\n            onClick={() =>\n              this.props.actionGenerated(\n                enums.ACTIONS[\"DELETE_MESSAGE\"],\n                this.props.message\n              )\n            }\n          ></button>\n        </li>\n      );\n    }\n\n    let editMessage = null;\n    if (this.state.enableEditMessage) {\n      editMessage = (\n        <li css={actionGroupStyle()} className=\"action__group\">\n          <button\n            type=\"button\"\n            onMouseEnter={(event) => this.toggleTooltip(event, true)}\n            onMouseLeave={(event) => this.toggleTooltip(event, false)}\n            css={groupButtonStyle(editIcon, this.context)}\n            className=\"group__button button__edit\"\n            data-title={Translator.translate(\"EDIT_MESSAGE\", this.props.lang)}\n            onClick={() =>\n              this.props.actionGenerated(\n                enums.ACTIONS[\"EDIT_MESSAGE\"],\n                this.props.message\n              )\n            }\n          ></button>\n        </li>\n      );\n    }\n\n    let translateMessage = null;\n    if (this.state.enableTranslateMessage) {\n      translateMessage = (\n        <li css={actionGroupStyle()} className=\"action__group\">\n          <button\n            type=\"button\"\n            onMouseEnter={(event) => this.toggleTooltip(event, true)}\n            onMouseLeave={(event) => this.toggleTooltip(event, false)}\n            css={groupButtonStyle(translateIcon, this.context)}\n            className=\"group__button button__translate\"\n            data-title={Translator.translate(\n              \"TRANSLATE_MESSAGE\",\n              this.props.lang\n            )}\n            onClick={() => this.props.translateMessage(this.props.message)}\n          ></button>\n        </li>\n      );\n    }\n\n    /**\n     * if send message in private feature is enabled, if group chat window is open, and messages are not sent by the loggedin user...\n     */\n    let messageInPrivate = null;\n    if (\n      this.state.enableMessageInPrivate === true &&\n      this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP &&\n      this.props.message?.sender?.uid !== this.props.loggedInUser?.uid\n    ) {\n      messageInPrivate = (\n        <li>\n          <button\n            type=\"button\"\n            onMouseEnter={(event) => this.toggleTooltip(event, true)}\n            onMouseLeave={(event) => this.toggleTooltip(event, false)}\n            css={groupButtonStyle(sendMessageInPrivateIcon, this.context)}\n            className=\"group__button button__translate\"\n            data-title={Translator.translate(\n              \"SEND_MESSAGE_IN_PRIVATE\",\n              this.props.lang\n            )}\n            onClick={this.sendMessageInPrivate}\n          ></button>\n        </li>\n      );\n    }\n\n    let tooltip = (\n      <ul\n        css={messageActionStyle(this.props, this.context)}\n        className=\"message__actions\"\n      >\n        {reactToMessage}\n        {threadedChats}\n        {editMessage}\n        {deleteMessage}\n        {messageInPrivate}\n        {translateMessage}\n      </ul>\n    );\n\n    if (\n      threadedChats === null &&\n      deleteMessage === null &&\n      editMessage === null &&\n      reactToMessage === null &&\n      translateMessage === null &&\n      messageInPrivate === null\n    ) {\n      tooltip = null;\n    }\n\n    return tooltip;\n  }\n}\n\n// Specifies the default values for props:\nCometChatMessageActions.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n};\n\nCometChatMessageActions.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport { CometChatMessageActions };\n"]},"metadata":{},"sourceType":"module"}