{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/CometChatReadReceipt/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { getMessageSentTime } from \"../../../util/common\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\nimport { msgTimestampStyle, iconStyle } from \"./style\";\nimport blueDoubleTick from \"./resources/message-read.svg\";\nimport greyDoubleTick from \"./resources/message-delivered.svg\";\nimport greyTick from \"./resources/message-sent.svg\";\nimport sendingTick from \"./resources/wait.svg\";\nimport errorTick from \"./resources/warning-small.svg\";\n\nclass CometChatReadReceipt extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.toggleReadReceipts = () => {\n      /**\n       * if delivery receipts feature is disabled\n       */\n      this.context.FeatureRestriction.isDeliveryReceiptsEnabled().then(response => {\n        if (response !== this.state.receipts) {\n          this.setState({\n            receipts: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.receipts !== false) {\n          this.setState({\n            receipts: false\n          });\n        }\n      });\n    };\n\n    this.state = {\n      message: props.message,\n      receipts: false\n    };\n  }\n\n  componentDidMount() {\n    this.toggleReadReceipts();\n  }\n\n  componentDidUpdate(prevProps) {\n    const previousMessageStr = JSON.stringify(prevProps.message);\n    const currentMessageStr = JSON.stringify(this.props.message);\n\n    if (previousMessageStr !== currentMessageStr) {\n      this.setState({\n        message: this.props.message\n      });\n    }\n\n    this.toggleReadReceipts();\n  }\n\n  render() {\n    var _this$state$message, _this$state$message$s, _this$props, _this$props$loggedInU;\n\n    let ticks,\n        receiptText = null,\n        dateField = null,\n        color = null;\n\n    if (((_this$state$message = this.state.message) === null || _this$state$message === void 0 ? void 0 : (_this$state$message$s = _this$state$message.sender) === null || _this$state$message$s === void 0 ? void 0 : _this$state$message$s.uid) === ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$loggedInU = _this$props.loggedInUser) === null || _this$props$loggedInU === void 0 ? void 0 : _this$props$loggedInU.uid)) {\n      if (this.state.message.receiverType === CometChat.RECEIVER_TYPE.GROUP) {\n        if (this.state.message.hasOwnProperty(\"error\")) {\n          ticks = errorTick;\n          receiptText = \"ERROR\";\n          dateField = this.state.message._composedAt;\n          color = this.context.theme.color.red;\n        } else {\n          ticks = sendingTick;\n          receiptText = \"SENDING\";\n          dateField = this.state.message._composedAt;\n          color = this.context.theme.secondaryTextColor;\n\n          if (this.state.message.hasOwnProperty(\"sentAt\")) {\n            ticks = greyTick;\n            receiptText = \"SENT\";\n            dateField = this.state.message.sentAt;\n          }\n        }\n      } else {\n        if (this.state.message.hasOwnProperty(\"error\")) {\n          ticks = errorTick;\n          receiptText = \"ERROR\";\n          dateField = this.state.message._composedAt;\n          color = this.context.theme.color.red;\n        } else {\n          ticks = sendingTick;\n          receiptText = \"SENDING\";\n          dateField = this.state.message._composedAt;\n          color = this.context.theme.secondaryTextColor;\n\n          if (this.state.message.hasOwnProperty(\"sentAt\")) {\n            ticks = greyTick;\n            receiptText = \"SENT\";\n            dateField = this.state.message.sentAt;\n\n            if (this.state.message.hasOwnProperty(\"deliveredAt\")) {\n              ticks = greyDoubleTick;\n              receiptText = \"DELIVERED\";\n\n              if (this.state.message.hasOwnProperty(\"readAt\")) {\n                ticks = blueDoubleTick;\n                receiptText = \"SEEN\";\n                color = this.context.theme.primaryColor;\n              }\n            }\n          }\n        }\n      }\n    } else {\n      dateField = this.state.message.sentAt;\n    } //if delivery receipts are disabled\n\n\n    if (this.state.receipts === false) {\n      ticks = null;\n    }\n\n    const receipt = ticks ? jsx(\"i\", {\n      css: iconStyle(ticks, color),\n      title: Translator.translate(receiptText, this.props.lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }\n    }) : null;\n    const timestamp = getMessageSentTime(dateField, this.props.lang);\n    return jsx(React.Fragment, null, jsx(\"span\", {\n      css: msgTimestampStyle(this.context, this.state),\n      className: \"message__timestamp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, timestamp), receipt);\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatReadReceipt.contextType = CometChatContext;\nCometChatReadReceipt.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatReadReceipt.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatReadReceipt };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/CometChatReadReceipt/index.js"],"names":["React","jsx","PropTypes","CometChat","getMessageSentTime","CometChatContext","Translator","theme","msgTimestampStyle","iconStyle","CometChatReadReceipt","PureComponent","constructor","props","toggleReadReceipts","context","FeatureRestriction","isDeliveryReceiptsEnabled","then","response","state","receipts","setState","catch","error","message","componentDidMount","componentDidUpdate","prevProps","previousMessageStr","JSON","stringify","currentMessageStr","render","ticks","receiptText","dateField","color","sender","uid","loggedInUser","receiverType","RECEIVER_TYPE","GROUP","hasOwnProperty","errorTick","_composedAt","red","sendingTick","secondaryTextColor","greyTick","sentAt","greyDoubleTick","blueDoubleTick","primaryColor","receipt","translate","lang","timestamp","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { getMessageSentTime } from \"../../../util/common\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\n\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\n\nimport { msgTimestampStyle, iconStyle } from \"./style\";\n\nimport blueDoubleTick from \"./resources/message-read.svg\";\nimport greyDoubleTick from \"./resources/message-delivered.svg\";\nimport greyTick from \"./resources/message-sent.svg\";\nimport sendingTick from \"./resources/wait.svg\";\nimport errorTick from \"./resources/warning-small.svg\";\n\nclass CometChatReadReceipt extends React.PureComponent {\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: props.message,\n      receipts: false,\n    };\n  }\n\n  componentDidMount() {\n    this.toggleReadReceipts();\n  }\n\n  componentDidUpdate(prevProps) {\n    const previousMessageStr = JSON.stringify(prevProps.message);\n    const currentMessageStr = JSON.stringify(this.props.message);\n\n    if (previousMessageStr !== currentMessageStr) {\n      this.setState({ message: this.props.message });\n    }\n\n    this.toggleReadReceipts();\n  }\n\n  toggleReadReceipts = () => {\n    /**\n     * if delivery receipts feature is disabled\n     */\n    this.context.FeatureRestriction.isDeliveryReceiptsEnabled()\n      .then((response) => {\n        if (response !== this.state.receipts) {\n          this.setState({ receipts: response });\n        }\n      })\n      .catch((error) => {\n        if (this.state.receipts !== false) {\n          this.setState({ receipts: false });\n        }\n      });\n  };\n\n  render() {\n    let ticks,\n      receiptText = null,\n      dateField = null,\n      color = null;\n\n    if (this.state.message?.sender?.uid === this.props?.loggedInUser?.uid) {\n      if (this.state.message.receiverType === CometChat.RECEIVER_TYPE.GROUP) {\n        if (this.state.message.hasOwnProperty(\"error\")) {\n          ticks = errorTick;\n          receiptText = \"ERROR\";\n          dateField = this.state.message._composedAt;\n          color = this.context.theme.color.red;\n        } else {\n          ticks = sendingTick;\n          receiptText = \"SENDING\";\n          dateField = this.state.message._composedAt;\n          color = this.context.theme.secondaryTextColor;\n          if (this.state.message.hasOwnProperty(\"sentAt\")) {\n            ticks = greyTick;\n            receiptText = \"SENT\";\n            dateField = this.state.message.sentAt;\n          }\n        }\n      } else {\n        if (this.state.message.hasOwnProperty(\"error\")) {\n          ticks = errorTick;\n          receiptText = \"ERROR\";\n          dateField = this.state.message._composedAt;\n          color = this.context.theme.color.red;\n        } else {\n          ticks = sendingTick;\n          receiptText = \"SENDING\";\n          dateField = this.state.message._composedAt;\n          color = this.context.theme.secondaryTextColor;\n          if (this.state.message.hasOwnProperty(\"sentAt\")) {\n            ticks = greyTick;\n            receiptText = \"SENT\";\n            dateField = this.state.message.sentAt;\n            if (this.state.message.hasOwnProperty(\"deliveredAt\")) {\n              ticks = greyDoubleTick;\n              receiptText = \"DELIVERED\";\n              if (this.state.message.hasOwnProperty(\"readAt\")) {\n                ticks = blueDoubleTick;\n                receiptText = \"SEEN\";\n                color = this.context.theme.primaryColor;\n              }\n            }\n          }\n        }\n      }\n    } else {\n      dateField = this.state.message.sentAt;\n    }\n\n    //if delivery receipts are disabled\n    if (this.state.receipts === false) {\n      ticks = null;\n    }\n\n    const receipt = ticks ? (\n      <i\n        css={iconStyle(ticks, color)}\n        title={Translator.translate(receiptText, this.props.lang)}\n      ></i>\n    ) : null;\n\n    const timestamp = getMessageSentTime(dateField, this.props.lang);\n\n    return (\n      <>\n        <span\n          css={msgTimestampStyle(this.context, this.state)}\n          className=\"message__timestamp\"\n        >\n          {timestamp}\n        </span>\n        {receipt}\n      </>\n    );\n  }\n}\n\n// Specifies the default values for props:\nCometChatReadReceipt.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n};\n\nCometChatReadReceipt.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport { CometChatReadReceipt };\n"]},"metadata":{},"sourceType":"module"}