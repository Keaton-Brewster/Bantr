{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Messages/CometChatMessageActions/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport * as enums from \"../../../util/enums.js\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { messageActionStyle, actionGroupStyle, groupButtonStyle } from \"./style\";\nimport startThreadIcon from \"./resources/threaded-message.svg\";\nimport deleteIcon from \"./resources/delete.svg\";\nimport editIcon from \"./resources/edit.svg\";\nimport reactIcon from \"./resources/reactions.svg\";\nimport translateIcon from \"./resources/message-translate.svg\";\nimport sendMessageInPrivateIcon from \"./resources/send-message-in-private.svg\";\n\nclass CometChatMessageActions extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.toggleTooltip = (event, flag) => {\n      const elem = event.target;\n\n      if (flag) {\n        elem.setAttribute(\"title\", elem.dataset.title);\n      } else {\n        elem.removeAttribute(\"title\");\n      }\n    };\n\n    this.enableMessageReaction = () => {\n      /**\n       * If reacting to messages feature is disabled\n       */\n      this.context.FeatureRestriction.isReactionsEnabled().then(response => {\n        if (response === true) {\n          this.setState({\n            enableMessageReaction: true\n          });\n        } else {\n          this.setState({\n            enableMessageReaction: false\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          enableMessageReaction: false\n        });\n      });\n    };\n\n    this.enableThreadedChats = () => {\n      /**\n       * If threaded chats are open, return false\n       */\n      if (this.props.message.hasOwnProperty(\"parentMessageId\") === true) {\n        return false;\n      }\n      /**\n       * If threaded replies feature is disabled\n       */\n\n\n      this.context.FeatureRestriction.isThreadedMessagesEnabled().then(response => {\n        if (response === true) {\n          this.setState({\n            enableThreadedChats: true\n          });\n        } else {\n          this.setState({\n            enableThreadedChats: false\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          enableThreadedChats: false\n        });\n      });\n    };\n\n    this.enableDeleteMessage = () => {\n      this.context.FeatureRestriction.isDeleteMessageEnabled().then(response => {\n        if (response === true) {\n          this.setState({\n            enableDeleteMessage: true\n          });\n        } else {\n          this.setState({\n            enableDeleteMessage: false\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          enableDeleteMessage: false\n        });\n      });\n    };\n\n    this.enableDeleteMessageForModerator = () => {\n      this.context.FeatureRestriction.isDeleteMemberMessageEnabled().then(response => {\n        if (response === true) {\n          this.setState({\n            enableDeleteMessageForModerator: true\n          });\n        } else {\n          this.setState({\n            enableDeleteMessageForModerator: false\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          enableDeleteMessageForModerator: false\n        });\n      });\n    };\n\n    this.enableEditMessage = () => {\n      var _this$props$message$s, _this$props$loggedInU;\n\n      /**\n       * If the message is not sent by the logged in user or the message type is not text\n       */\n      if (((_this$props$message$s = this.props.message.sender) === null || _this$props$message$s === void 0 ? void 0 : _this$props$message$s.uid) !== ((_this$props$loggedInU = this.props.loggedInUser) === null || _this$props$loggedInU === void 0 ? void 0 : _this$props$loggedInU.uid) || this.props.message.type !== CometChat.MESSAGE_TYPE.TEXT) {\n        return false;\n      }\n\n      this.context.FeatureRestriction.isEditMessageEnabled().then(response => {\n        if (response === true) {\n          this.setState({\n            enableEditMessage: true\n          });\n        } else {\n          this.setState({\n            enableEditMessage: false\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          enableEditMessage: false\n        });\n      });\n    };\n\n    this.enableTranslateMessage = () => {\n      /**\n       * message type is not text\n       */\n      if (this.props.message.type !== CometChat.MESSAGE_TYPE.TEXT) {\n        return false;\n      }\n\n      this.context.FeatureRestriction.isMessageTranslationEnabled().then(response => {\n        if (response === true) {\n          this.setState({\n            enableTranslateMessage: true\n          });\n        } else {\n          this.setState({\n            enableTranslateMessage: false\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          enableTranslateMessage: false\n        });\n      });\n    };\n\n    this.enableMessageInPrivate = () => {\n      this.context.FeatureRestriction.isMessageInPrivateEnabled().then(response => {\n        if (response === true) {\n          this.setState({\n            enableMessageInPrivate: true\n          });\n        } else {\n          this.setState({\n            enableMessageInPrivate: false\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          enableMessageInPrivate: false\n        });\n      });\n    };\n\n    this.sendMessageInPrivate = () => {\n      var _this$props$message;\n\n      const item = (_this$props$message = this.props.message) === null || _this$props$message === void 0 ? void 0 : _this$props$message.sender;\n      const type = CometChat.ACTION_TYPE.TYPE_USER;\n      this.context.setTypeAndItem(type, item);\n    };\n\n    this.state = {\n      enableMessageReaction: false,\n      enableThreadedChats: false,\n      enableDeleteMessage: false,\n      enableEditMessage: false,\n      enableTranslateMessage: false,\n      enableMessageInPrivate: false,\n      enableDeleteMessageForModerator: false\n    };\n  }\n\n  componentDidMount() {\n    this.enableMessageReaction();\n    this.enableThreadedChats();\n    this.enableDeleteMessage();\n    this.enableDeleteMessageForModerator();\n    this.enableEditMessage();\n    this.enableTranslateMessage();\n    this.enableMessageInPrivate();\n  }\n\n  render() {\n    var _this$props$message$s2, _this$props$loggedInU2, _this$props$message$s3, _this$props$loggedInU3, _this$props$message2, _this$props$message2$, _this$props$loggedInU4;\n\n    //don't show the tooltip while the message is being sent\n    if (this.props.message.hasOwnProperty(\"sentAt\") === false) {\n      return false;\n    }\n\n    let reactToMessage = null;\n\n    if (this.state.enableMessageReaction) {\n      reactToMessage = jsx(\"li\", {\n        css: actionGroupStyle(),\n        className: \"action__group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 5\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        onMouseEnter: event => this.toggleTooltip(event, true),\n        onMouseLeave: event => this.toggleTooltip(event, false),\n        css: groupButtonStyle(reactIcon, this.context),\n        className: \"group__button button__reacttomessage\",\n        \"data-title\": Translator.translate(\"ADD_REACTION\", this.props.lang),\n        onClick: () => this.props.actionGenerated(enums.ACTIONS[\"REACT_TO_MESSAGE\"], this.props.message),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 6\n        }\n      }));\n    }\n\n    let threadedChats = null;\n\n    if (this.state.enableThreadedChats) {\n      threadedChats = jsx(\"li\", {\n        css: actionGroupStyle(),\n        className: \"action__group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 5\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        onMouseEnter: event => this.toggleTooltip(event, true),\n        onMouseLeave: event => this.toggleTooltip(event, false),\n        css: groupButtonStyle(startThreadIcon, this.context),\n        className: \"group__button button__threadedchats\",\n        \"data-title\": this.props.message.replyCount ? Translator.translate(\"REPLY_TO_THREAD\", this.props.lang) : Translator.translate(\"REPLY_IN_THREAD\", this.props.lang),\n        onClick: () => this.props.actionGenerated(enums.ACTIONS[\"VIEW_THREADED_MESSAGE\"], this.props.message),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 6\n        }\n      }));\n    }\n    /**\n     * in one-on-one chat, allow deleting self messages if delete feature is enabled\n     * in group chat, allow deleting other's messages for moderators and admins if moderator delete feature && delete feature is enabled\n     */\n\n\n    let deleteMessage = null;\n\n    if (((_this$props$message$s2 = this.props.message.sender) === null || _this$props$message$s2 === void 0 ? void 0 : _this$props$message$s2.uid) === ((_this$props$loggedInU2 = this.props.loggedInUser) === null || _this$props$loggedInU2 === void 0 ? void 0 : _this$props$loggedInU2.uid) && this.state.enableDeleteMessage || this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP && ((_this$props$message$s3 = this.props.message.sender) === null || _this$props$message$s3 === void 0 ? void 0 : _this$props$message$s3.uid) !== ((_this$props$loggedInU3 = this.props.loggedInUser) === null || _this$props$loggedInU3 === void 0 ? void 0 : _this$props$loggedInU3.uid) && this.context.item.hasOwnProperty(\"scope\") && this.context.item.scope !== CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT && this.state.enableDeleteMessageForModerator && this.state.enableDeleteMessage) {\n      deleteMessage = jsx(\"li\", {\n        css: actionGroupStyle(),\n        className: \"action__group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 5\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        onMouseEnter: event => this.toggleTooltip(event, true),\n        onMouseLeave: event => this.toggleTooltip(event, false),\n        css: groupButtonStyle(deleteIcon, this.context, 1),\n        className: \"group__button button__delete\",\n        \"data-title\": Translator.translate(\"DELETE_MESSAGE\", this.props.lang),\n        onClick: () => this.props.actionGenerated(enums.ACTIONS[\"DELETE_MESSAGE\"], this.props.message),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 6\n        }\n      }));\n    }\n\n    let editMessage = null;\n\n    if (this.state.enableEditMessage) {\n      editMessage = jsx(\"li\", {\n        css: actionGroupStyle(),\n        className: \"action__group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 5\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        onMouseEnter: event => this.toggleTooltip(event, true),\n        onMouseLeave: event => this.toggleTooltip(event, false),\n        css: groupButtonStyle(editIcon, this.context),\n        className: \"group__button button__edit\",\n        \"data-title\": Translator.translate(\"EDIT_MESSAGE\", this.props.lang),\n        onClick: () => this.props.actionGenerated(enums.ACTIONS[\"EDIT_MESSAGE\"], this.props.message),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 6\n        }\n      }));\n    }\n\n    let translateMessage = null;\n\n    if (this.state.enableTranslateMessage) {\n      translateMessage = jsx(\"li\", {\n        css: actionGroupStyle(),\n        className: \"action__group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 5\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        onMouseEnter: event => this.toggleTooltip(event, true),\n        onMouseLeave: event => this.toggleTooltip(event, false),\n        css: groupButtonStyle(translateIcon, this.context),\n        className: \"group__button button__translate\",\n        \"data-title\": Translator.translate(\"TRANSLATE_MESSAGE\", this.props.lang),\n        onClick: () => this.props.translateMessage(this.props.message),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 6\n        }\n      }));\n    }\n    /**\n     * if send message in private feature is enabled, if group chat window is open, and messages are not sent by the loggedin user...\n     */\n\n\n    let messageInPrivate = null;\n\n    if (this.state.enableMessageInPrivate === true && this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP && ((_this$props$message2 = this.props.message) === null || _this$props$message2 === void 0 ? void 0 : (_this$props$message2$ = _this$props$message2.sender) === null || _this$props$message2$ === void 0 ? void 0 : _this$props$message2$.uid) !== ((_this$props$loggedInU4 = this.props.loggedInUser) === null || _this$props$loggedInU4 === void 0 ? void 0 : _this$props$loggedInU4.uid)) {\n      messageInPrivate = jsx(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 5\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        onMouseEnter: event => this.toggleTooltip(event, true),\n        onMouseLeave: event => this.toggleTooltip(event, false),\n        css: groupButtonStyle(sendMessageInPrivateIcon, this.context),\n        className: \"group__button button__translate\",\n        \"data-title\": Translator.translate(\"SEND_MESSAGE_IN_PRIVATE\", this.props.lang),\n        onClick: this.sendMessageInPrivate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 6\n        }\n      }));\n    }\n\n    let tooltip = jsx(\"ul\", {\n      css: messageActionStyle(this.props, this.context),\n      className: \"message__actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 4\n      }\n    }, reactToMessage, threadedChats, editMessage, deleteMessage, messageInPrivate, translateMessage);\n\n    if (threadedChats === null && deleteMessage === null && editMessage === null && reactToMessage === null && translateMessage === null && messageInPrivate === null) {\n      tooltip = null;\n    }\n\n    return tooltip;\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatMessageActions.contextType = CometChatContext;\nCometChatMessageActions.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatMessageActions.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatMessageActions };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Messages/CometChatMessageActions/index.js"],"names":["React","jsx","PropTypes","CometChat","enums","CometChatContext","theme","Translator","messageActionStyle","actionGroupStyle","groupButtonStyle","CometChatMessageActions","PureComponent","constructor","props","toggleTooltip","event","flag","elem","target","setAttribute","dataset","title","removeAttribute","enableMessageReaction","context","FeatureRestriction","isReactionsEnabled","then","response","setState","catch","error","enableThreadedChats","message","hasOwnProperty","isThreadedMessagesEnabled","enableDeleteMessage","isDeleteMessageEnabled","enableDeleteMessageForModerator","isDeleteMemberMessageEnabled","enableEditMessage","sender","uid","loggedInUser","type","MESSAGE_TYPE","TEXT","isEditMessageEnabled","enableTranslateMessage","isMessageTranslationEnabled","enableMessageInPrivate","isMessageInPrivateEnabled","sendMessageInPrivate","item","ACTION_TYPE","TYPE_USER","setTypeAndItem","state","componentDidMount","render","reactToMessage","reactIcon","translate","lang","actionGenerated","ACTIONS","threadedChats","startThreadIcon","replyCount","deleteMessage","TYPE_GROUP","scope","GROUP_MEMBER_SCOPE","PARTICIPANT","deleteIcon","editMessage","editIcon","translateMessage","translateIcon","messageInPrivate","sendMessageInPrivateIcon","tooltip","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport * as enums from \"../../../util/enums.js\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\n\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\n\nimport {\n\tmessageActionStyle,\n\tactionGroupStyle,\n\tgroupButtonStyle\n} from \"./style\";\n\nimport startThreadIcon from \"./resources/threaded-message.svg\";\nimport deleteIcon from \"./resources/delete.svg\";\nimport editIcon from \"./resources/edit.svg\";\nimport reactIcon from \"./resources/reactions.svg\";\nimport translateIcon from \"./resources/message-translate.svg\";\nimport sendMessageInPrivateIcon from \"./resources/send-message-in-private.svg\";\n\n\nclass CometChatMessageActions extends React.PureComponent {\n\tstatic contextType = CometChatContext;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tenableMessageReaction: false,\n\t\t\tenableThreadedChats: false,\n\t\t\tenableDeleteMessage: false,\n\t\t\tenableEditMessage: false,\n\t\t\tenableTranslateMessage: false,\n\t\t\tenableMessageInPrivate: false,\n\t\t\tenableDeleteMessageForModerator: false,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.enableMessageReaction();\n\t\tthis.enableThreadedChats();\n\t\tthis.enableDeleteMessage();\n\t\tthis.enableDeleteMessageForModerator();\n\t\tthis.enableEditMessage();\n\t\tthis.enableTranslateMessage();\n\t\tthis.enableMessageInPrivate();\n\t}\n\n\ttoggleTooltip = (event, flag) => {\n\t\tconst elem = event.target;\n\n\t\tif (flag) {\n\t\t\telem.setAttribute(\"title\", elem.dataset.title);\n\t\t} else {\n\t\t\telem.removeAttribute(\"title\");\n\t\t}\n\t};\n\n\tenableMessageReaction = () => {\n\t\t/**\n\t\t * If reacting to messages feature is disabled\n\t\t */\n\t\tthis.context.FeatureRestriction.isReactionsEnabled()\n\t\t\t.then(response => {\n\t\t\t\tif (response === true) {\n\t\t\t\t\tthis.setState({enableMessageReaction: true});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({enableMessageReaction: false});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.setState({enableMessageReaction: false});\n\t\t\t});\n\t};\n\n\tenableThreadedChats = () => {\n\t\t/**\n\t\t * If threaded chats are open, return false\n\t\t */\n\t\tif (this.props.message.hasOwnProperty(\"parentMessageId\") === true) {\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * If threaded replies feature is disabled\n\t\t */\n\t\tthis.context.FeatureRestriction.isThreadedMessagesEnabled()\n\t\t\t.then(response => {\n\t\t\t\tif (response === true) {\n\t\t\t\t\tthis.setState({enableThreadedChats: true});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({enableThreadedChats: false});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.setState({enableThreadedChats: false});\n\t\t\t});\n\t};\n\n\tenableDeleteMessage = () => {\n\n\t\tthis.context.FeatureRestriction.isDeleteMessageEnabled()\n\t\t\t.then(response => {\n\t\t\t\tif (response === true) {\n\t\t\t\t\tthis.setState({enableDeleteMessage: true});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({enableDeleteMessage: false});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.setState({enableDeleteMessage: false});\n\t\t\t});\n\t};\n\n\tenableDeleteMessageForModerator = () => {\n\n\t\tthis.context.FeatureRestriction.isDeleteMemberMessageEnabled()\n\t\t\t.then(response => {\n\t\t\t\tif (response === true) {\n\t\t\t\t\tthis.setState({enableDeleteMessageForModerator: true});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({enableDeleteMessageForModerator: false});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.setState({enableDeleteMessageForModerator: false});\n\t\t\t});\n\t};\n\n\tenableEditMessage = () => {\n\t\t/**\n\t\t * If the message is not sent by the logged in user or the message type is not text\n\t\t */\n\t\tif (this.props.message.sender?.uid !== this.props.loggedInUser?.uid || this.props.message.type !== CometChat.MESSAGE_TYPE.TEXT) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.context.FeatureRestriction.isEditMessageEnabled()\n\t\t\t.then(response => {\n\t\t\t\tif (response === true) {\n\t\t\t\t\tthis.setState({enableEditMessage: true});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({enableEditMessage: false});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.setState({enableEditMessage: false});\n\t\t\t});\n\t};\n\n\tenableTranslateMessage = () => {\n\t\t/**\n\t\t * message type is not text\n\t\t */\n\t\tif (this.props.message.type !== CometChat.MESSAGE_TYPE.TEXT) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.context.FeatureRestriction.isMessageTranslationEnabled()\n\t\t\t.then(response => {\n\t\t\t\tif (response === true) {\n\t\t\t\t\tthis.setState({enableTranslateMessage: true});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({enableTranslateMessage: false});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.setState({enableTranslateMessage: false});\n\t\t\t});\n\t};\n\n\t/**\n\t * If message in private feature is enabled\n\t */\n\tenableMessageInPrivate = () => {\n\t\tthis.context.FeatureRestriction.isMessageInPrivateEnabled()\n\t\t\t.then(response => {\n\t\t\t\tif (response === true) {\n\t\t\t\t\tthis.setState({enableMessageInPrivate: true});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({enableMessageInPrivate: false});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.setState({enableMessageInPrivate: false});\n\t\t\t});\n\t};\n\n\tsendMessageInPrivate = () => {\n\t\tconst item = this.props.message?.sender;\n\t\tconst type = CometChat.ACTION_TYPE.TYPE_USER;\n\n\t\tthis.context.setTypeAndItem(type, item);\n\t};\n\n\trender() {\n\t\t//don't show the tooltip while the message is being sent\n\t\tif (this.props.message.hasOwnProperty(\"sentAt\") === false) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet reactToMessage = null;\n\t\tif (this.state.enableMessageReaction) {\n\t\t\treactToMessage = (\n\t\t\t\t<li css={actionGroupStyle()} className=\"action__group\">\n\t\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tonMouseEnter={event => this.toggleTooltip(event, true)}\n\t\t\t\t\tonMouseLeave={event => this.toggleTooltip(event, false)}\n\t\t\t\t\tcss={groupButtonStyle(reactIcon, this.context)}\n\t\t\t\t\tclassName=\"group__button button__reacttomessage\"\n\t\t\t\t\tdata-title={Translator.translate(\"ADD_REACTION\", this.props.lang)}\n\t\t\t\t\tonClick={() => this.props.actionGenerated(enums.ACTIONS[\"REACT_TO_MESSAGE\"], this.props.message)}></button>\n\t\t\t\t</li>\n\t\t\t);\n\t\t}\n\n\t\tlet threadedChats = null;\n\t\tif (this.state.enableThreadedChats) {\n\t\t\tthreadedChats = (\n\t\t\t\t<li css={actionGroupStyle()} className=\"action__group\">\n\t\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tonMouseEnter={event => this.toggleTooltip(event, true)}\n\t\t\t\t\tonMouseLeave={event => this.toggleTooltip(event, false)}\n\t\t\t\t\tcss={groupButtonStyle(startThreadIcon, this.context)}\n\t\t\t\t\tclassName=\"group__button button__threadedchats\"\n\t\t\t\t\tdata-title={this.props.message.replyCount ? Translator.translate(\"REPLY_TO_THREAD\", this.props.lang) : Translator.translate(\"REPLY_IN_THREAD\", this.props.lang)}\n\t\t\t\t\tonClick={() => this.props.actionGenerated(enums.ACTIONS[\"VIEW_THREADED_MESSAGE\"], this.props.message)}></button>\n\t\t\t\t</li>\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * in one-on-one chat, allow deleting self messages if delete feature is enabled\n\t\t * in group chat, allow deleting other's messages for moderators and admins if moderator delete feature && delete feature is enabled\n\t\t */\n\t\tlet deleteMessage = null;\n\t\tif (\n\t\t\t(this.props.message.sender?.uid === this.props.loggedInUser?.uid && this.state.enableDeleteMessage) ||\n\t\t\t(this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP &&\n\t\t\t\tthis.props.message.sender?.uid !== this.props.loggedInUser?.uid &&\n\t\t\t\tthis.context.item.hasOwnProperty(\"scope\") &&\n\t\t\t\tthis.context.item.scope !== CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT &&\n\t\t\t\tthis.state.enableDeleteMessageForModerator &&\n\t\t\t\tthis.state.enableDeleteMessage)\n\t\t) {\n\t\t\tdeleteMessage = (\n\t\t\t\t<li css={actionGroupStyle()} className=\"action__group\">\n\t\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tonMouseEnter={event => this.toggleTooltip(event, true)}\n\t\t\t\t\tonMouseLeave={event => this.toggleTooltip(event, false)}\n\t\t\t\t\tcss={groupButtonStyle(deleteIcon, this.context, 1)}\n\t\t\t\t\tclassName=\"group__button button__delete\"\n\t\t\t\t\tdata-title={Translator.translate(\"DELETE_MESSAGE\", this.props.lang)}\n\t\t\t\t\tonClick={() => this.props.actionGenerated(enums.ACTIONS[\"DELETE_MESSAGE\"], this.props.message)}></button>\n\t\t\t\t</li>\n\t\t\t);\n\t\t}\n\n\t\tlet editMessage = null;\n\t\tif (this.state.enableEditMessage) {\n\t\t\teditMessage = (\n\t\t\t\t<li css={actionGroupStyle()} className=\"action__group\">\n\t\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tonMouseEnter={event => this.toggleTooltip(event, true)}\n\t\t\t\t\tonMouseLeave={event => this.toggleTooltip(event, false)}\n\t\t\t\t\tcss={groupButtonStyle(editIcon, this.context)}\n\t\t\t\t\tclassName=\"group__button button__edit\"\n\t\t\t\t\tdata-title={Translator.translate(\"EDIT_MESSAGE\", this.props.lang)}\n\t\t\t\t\tonClick={() => this.props.actionGenerated(enums.ACTIONS[\"EDIT_MESSAGE\"], this.props.message)}></button>\n\t\t\t\t</li>\n\t\t\t);\n\t\t}\n\n\t\tlet translateMessage = null;\n\t\tif (this.state.enableTranslateMessage) {\n\t\t\ttranslateMessage = (\n\t\t\t\t<li css={actionGroupStyle()} className=\"action__group\">\n\t\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tonMouseEnter={event => this.toggleTooltip(event, true)}\n\t\t\t\t\tonMouseLeave={event => this.toggleTooltip(event, false)}\n\t\t\t\t\tcss={groupButtonStyle(translateIcon, this.context)}\n\t\t\t\t\tclassName=\"group__button button__translate\"\n\t\t\t\t\tdata-title={Translator.translate(\"TRANSLATE_MESSAGE\", this.props.lang)}\n\t\t\t\t\tonClick={() => this.props.translateMessage(this.props.message)}></button>\n\t\t\t\t</li>\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * if send message in private feature is enabled, if group chat window is open, and messages are not sent by the loggedin user...\n\t\t */\n\t\tlet messageInPrivate = null;\n\t\tif (this.state.enableMessageInPrivate === true && this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP && this.props.message?.sender?.uid !== this.props.loggedInUser?.uid) {\n\t\t\tmessageInPrivate = (\n\t\t\t\t<li>\n\t\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tonMouseEnter={event => this.toggleTooltip(event, true)}\n\t\t\t\t\tonMouseLeave={event => this.toggleTooltip(event, false)}\n\t\t\t\t\tcss={groupButtonStyle(sendMessageInPrivateIcon, this.context)}\n\t\t\t\t\tclassName=\"group__button button__translate\"\n\t\t\t\t\tdata-title={Translator.translate(\"SEND_MESSAGE_IN_PRIVATE\", this.props.lang)}\n\t\t\t\t\tonClick={this.sendMessageInPrivate}></button>\n\t\t\t\t</li>\n\t\t\t);\n\t\t}\n\n\t\tlet tooltip = (\n\t\t\t<ul css={messageActionStyle(this.props, this.context)} className=\"message__actions\">\n\t\t\t\t{reactToMessage}\n\t\t\t\t{threadedChats}\n\t\t\t\t{editMessage}\n\t\t\t\t{deleteMessage}\n\t\t\t\t{messageInPrivate}\n\t\t\t\t{translateMessage}\n\t\t\t</ul>\n\t\t);\n\n\t\tif (threadedChats === null && deleteMessage === null && editMessage === null && reactToMessage === null && translateMessage === null && messageInPrivate === null) {\n\t\t\ttooltip = null;\n\t\t}\n\n\t\treturn tooltip;\n\t}\n}\n\n// Specifies the default values for props:\nCometChatMessageActions.defaultProps = {\n\tlang: Translator.getDefaultLanguage(),\n\ttheme: theme\n};\n\nCometChatMessageActions.propTypes = {\n\tlang: PropTypes.string,\n\ttheme: PropTypes.object\n}\n\nexport { CometChatMessageActions };\n"]},"metadata":{},"sourceType":"module"}