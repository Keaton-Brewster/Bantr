{"ast":null,"code":"/* eslint-disable no-useless-concat */\n\n/* eslint-disable no-extend-native */\nimport dateFormat from \"dateformat\";\nimport Translator from \"../resources/localization/translator\";\nconst milliseconds = 1000;\nconst seconds = 1 * milliseconds;\nconst minute = 60 * seconds;\nconst hour = 60 * minute;\nconst day = 24 * hour;\nconst wordBoundary = {\n  start: `(?:^|:|;|'|\"|,|{|}|\\\\.|\\\\s|\\\\!|\\\\?|\\\\(|\\\\)|\\\\[|\\\\]|\\\\*)`,\n  end: `(?=$|:|;|'|\"|,|{|}|\\\\.|\\\\s|\\\\!|\\\\?|\\\\(|\\\\)|\\\\[|\\\\]|\\\\*)`\n};\nconst emailPattern = new RegExp(wordBoundary.start + `[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,6}` + wordBoundary.end, 'gi');\nconst urlPattern = new RegExp(wordBoundary.start + `((https?://|www\\\\.|pic\\\\.)[-\\\\w;/?:@&=+$\\\\|\\\\_.!~*\\\\|'()\\\\[\\\\]%#,â˜º]+[\\\\w/#](\\\\(\\\\))?)` + wordBoundary.end, 'gi');\nconst phoneNumPattern = new RegExp(wordBoundary.start + `(?:\\\\+?(\\\\d{1,3}))?([-. (]*(\\\\d{3})[-. )]*)?((\\\\d{3})[-. ]*(\\\\d{2,4})(?:[-.x ]*(\\\\d+))?)` + wordBoundary.end, 'gi');\nexport const linkify = message => {\n  let outputStr = message.replace(phoneNumPattern, \"<a target='blank' rel='noopener noreferrer' href='tel:$&'>$&</a>\");\n  outputStr = outputStr.replace(emailPattern, \"<a target='blank' rel='noopener noreferrer' href='mailto:$&'>$&</a>\");\n  const results = outputStr.match(urlPattern);\n  results && results.forEach(url => {\n    url = url.trim();\n    let normalizedURL = url;\n\n    if (!url.startsWith('http')) {\n      normalizedURL = `//${url}`;\n    }\n\n    outputStr = outputStr.replace(url, `<a target='blank' rel='noopener noreferrer' href=\"${normalizedURL}\">${url}</a>`);\n  });\n  return outputStr;\n};\nexport const checkMessageForExtensionsData = (message, extensionKey) => {\n  let output = null;\n\n  if (message.hasOwnProperty(\"metadata\")) {\n    const metadata = message.metadata;\n    const injectedObject = metadata[\"@injected\"];\n\n    if (injectedObject && injectedObject.hasOwnProperty(\"extensions\")) {\n      const extensionsObject = injectedObject[\"extensions\"];\n\n      if (extensionsObject && extensionsObject.hasOwnProperty(extensionKey)) {\n        output = extensionsObject[extensionKey];\n      }\n    }\n  }\n\n  return output;\n};\nexport const ID = () => {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n};\n_c = ID;\nexport const getUnixTimestamp = () => {\n  return Math.round(+new Date() / 1000);\n};\n\nconst dateDiffInDays = (a, b) => {\n  const milliSecondsPerDay = day; // Discard the time and time-zone information.\n\n  const utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n  const utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n  return Math.floor((utc2 - utc1) / milliSecondsPerDay);\n};\n\nexport const getTimeStampForLastMessage = (timestamp, lang) => {\n  const timeStampInMilliSeconds = timestamp * 1000;\n  const messageTimestamp = new Date(timeStampInMilliSeconds);\n  const currentTimestamp = new Date(Date.now());\n  const dateDifferenceInDays = dateDiffInDays(messageTimestamp, currentTimestamp);\n\n  if (dateDifferenceInDays < 1) {\n    timestamp = dateFormat(messageTimestamp, \"shortTime\");\n  } else if (dateDifferenceInDays < 2) {\n    timestamp = Translator.translate(\"YESTERDAY\", lang);\n  } else if (dateDifferenceInDays < 7) {\n    timestamp = dateFormat(messageTimestamp, \"dddd\");\n    timestamp = Translator.translate(timestamp, lang);\n  } else {\n    timestamp = dateFormat(messageTimestamp, \"dS mmm, yyyy\");\n  }\n\n  return timestamp;\n};\nexport const getMessageSentTime = (timestamp, lang) => {\n  let oTimestamp = null;\n  const messageTimestamp = new Date(timestamp) * 1000;\n  oTimestamp = dateFormat(messageTimestamp, \"shortTime\");\n  return oTimestamp;\n};\nexport const getMessageDate = (timestamp, lang) => {\n  const timeStampInMilliSeconds = timestamp * 1000;\n  const messageTimestamp = new Date(timeStampInMilliSeconds);\n  const currentTimestamp = new Date(Date.now());\n  const dateDifferenceInDays = dateDiffInDays(messageTimestamp, currentTimestamp);\n\n  if (dateDifferenceInDays < 1) {\n    timestamp = Translator.translate(\"TODAY\", lang);\n  } else if (dateDifferenceInDays < 2) {\n    timestamp = Translator.translate(\"YESTERDAY\", lang);\n  } else if (dateDifferenceInDays < 7) {\n    timestamp = dateFormat(messageTimestamp, \"dddd\");\n    timestamp = Translator.translate(timestamp, lang);\n  } else {\n    timestamp = dateFormat(timeStampInMilliSeconds, \"dS mmm, yyyy\");\n  }\n\n  return timestamp;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ID\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/util/common.js"],"names":["dateFormat","Translator","milliseconds","seconds","minute","hour","day","wordBoundary","start","end","emailPattern","RegExp","urlPattern","phoneNumPattern","linkify","message","outputStr","replace","results","match","forEach","url","trim","normalizedURL","startsWith","checkMessageForExtensionsData","extensionKey","output","hasOwnProperty","metadata","injectedObject","extensionsObject","ID","Math","random","toString","substr","getUnixTimestamp","round","Date","dateDiffInDays","a","b","milliSecondsPerDay","utc1","UTC","getFullYear","getMonth","getDate","utc2","floor","getTimeStampForLastMessage","timestamp","lang","timeStampInMilliSeconds","messageTimestamp","currentTimestamp","now","dateDifferenceInDays","translate","getMessageSentTime","oTimestamp","getMessageDate"],"mappings":"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","sourcesContent":["/* eslint-disable no-useless-concat */\n/* eslint-disable no-extend-native */\nimport dateFormat from \"dateformat\";\nimport Translator from \"../resources/localization/translator\";\nconst milliseconds = 1000;\nconst seconds = 1 * milliseconds;\nconst minute = 60 * seconds;\nconst hour = 60 * minute;\nconst day = 24 * hour;\n\nconst wordBoundary = {\n    start: `(?:^|:|;|'|\"|,|{|}|\\\\.|\\\\s|\\\\!|\\\\?|\\\\(|\\\\)|\\\\[|\\\\]|\\\\*)`,\n    end: `(?=$|:|;|'|\"|,|{|}|\\\\.|\\\\s|\\\\!|\\\\?|\\\\(|\\\\)|\\\\[|\\\\]|\\\\*)`,\n};\n\nconst emailPattern = new RegExp(\n    wordBoundary.start +\n    `[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,6}` +\n    wordBoundary.end,\n    'gi'\n); \nconst urlPattern = new RegExp(\n    wordBoundary.start +\n    `((https?://|www\\\\.|pic\\\\.)[-\\\\w;/?:@&=+$\\\\|\\\\_.!~*\\\\|'()\\\\[\\\\]%#,â˜º]+[\\\\w/#](\\\\(\\\\))?)` +\n    wordBoundary.end,\n    'gi'\n);\nconst phoneNumPattern = new RegExp(\n    wordBoundary.start +\n    `(?:\\\\+?(\\\\d{1,3}))?([-. (]*(\\\\d{3})[-. )]*)?((\\\\d{3})[-. ]*(\\\\d{2,4})(?:[-.x ]*(\\\\d+))?)` +\n    wordBoundary.end,\n    'gi'\n);\n\nexport const linkify = (message) => {\n\n    let outputStr = message.replace(phoneNumPattern, \"<a target='blank' rel='noopener noreferrer' href='tel:$&'>$&</a>\");\n    outputStr = outputStr.replace(emailPattern, \"<a target='blank' rel='noopener noreferrer' href='mailto:$&'>$&</a>\");\n\n    const results = outputStr.match(urlPattern);\n\n    results &&\n        results.forEach((url) => {\n\n            url = url.trim();\n            let normalizedURL = url;\n            if (!url.startsWith('http')) {\n                normalizedURL = `//${url}`;\n            }\n            outputStr = outputStr.replace(\n                url,\n                `<a target='blank' rel='noopener noreferrer' href=\"${normalizedURL}\">${url}</a>`\n            );\n        });\n\n    return outputStr;\n}\n\nexport const checkMessageForExtensionsData = (message, extensionKey) => {\n\n    let output = null;\n    \n    if (message.hasOwnProperty(\"metadata\")) {\n\n        const metadata = message.metadata;\n        const injectedObject = metadata[\"@injected\"];\n        if (injectedObject && injectedObject.hasOwnProperty(\"extensions\")) {\n\n            const extensionsObject = injectedObject[\"extensions\"];\n            if (extensionsObject && extensionsObject.hasOwnProperty(extensionKey)) {\n\n                output = extensionsObject[extensionKey];\n            }\n        }\n    }\n\n    return output;\n}\n\nexport const ID = () => {\n    // Math.random should be unique because of its seeding algorithm.\n    // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n    // after the decimal.\n    return '_' + Math.random().toString(36).substr(2, 9);\n};\n\nexport const getUnixTimestamp = () => {\n\n    return Math.round(+new Date() / 1000);\n}\n\nconst dateDiffInDays = (a, b) => {\n\n    const milliSecondsPerDay = day;\n\n    // Discard the time and time-zone information.\n    const utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n    const utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n\n    return Math.floor((utc2 - utc1) / milliSecondsPerDay);\n}\n\n\nexport const getTimeStampForLastMessage = (timestamp, lang) => {\n\n    const timeStampInMilliSeconds = timestamp * 1000;\n\n    const messageTimestamp = new Date(timeStampInMilliSeconds);\n    const currentTimestamp = new Date(Date.now());\n\n    const dateDifferenceInDays = dateDiffInDays(messageTimestamp, currentTimestamp);\n\n    if (dateDifferenceInDays < 1) {\n\n        timestamp = dateFormat(messageTimestamp, \"shortTime\");\n\n    } else if (dateDifferenceInDays < 2) {\n\n        timestamp = Translator.translate(\"YESTERDAY\", lang);\n\n    } else if (dateDifferenceInDays < 7) {\n\n        timestamp = dateFormat(messageTimestamp, \"dddd\");\n        timestamp = Translator.translate(timestamp, lang);\n\n    } else {\n\n        timestamp = dateFormat(messageTimestamp, \"dS mmm, yyyy\");\n    }\n\n    return timestamp;\n}\n\nexport const getMessageSentTime = (timestamp, lang) => {\n\n    let oTimestamp = null;\n\n    const messageTimestamp = new Date(timestamp) * 1000;\n    oTimestamp = dateFormat(messageTimestamp, \"shortTime\");\n\n    return oTimestamp;\n}\n\nexport const getMessageDate = (timestamp, lang) => {\n\n    const timeStampInMilliSeconds = timestamp * 1000;\n\n    const messageTimestamp = new Date(timeStampInMilliSeconds);\n    const currentTimestamp = new Date(Date.now());\n\n    const dateDifferenceInDays = dateDiffInDays(messageTimestamp, currentTimestamp);\n\n    if (dateDifferenceInDays < 1) {\n\n        timestamp = Translator.translate(\"TODAY\", lang);\n\n    } else if (dateDifferenceInDays < 2) {\n\n        timestamp = Translator.translate(\"YESTERDAY\", lang);\n\n    } else if (dateDifferenceInDays < 7) {\n\n        timestamp = dateFormat(messageTimestamp, \"dddd\");\n        timestamp = Translator.translate(timestamp, lang);\n\n    } else {\n\n        timestamp = dateFormat(timeStampInMilliSeconds, \"dS mmm, yyyy\");\n    }\n\n    return timestamp;\n}\n"]},"metadata":{},"sourceType":"module"}