{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Users/CometChatUserList/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { UserListManager } from \"./controller\";\nimport { CometChatUserListItem } from \"../../Users\";\nimport { CometChatContextProvider, CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { contactWrapperStyle, contactHeaderStyle, contactHeaderCloseStyle, contactHeaderTitleStyle, contactSearchStyle, contactSearchButtonStyle, contactSearchInputStyle, contactMsgStyle, contactMsgTxtStyle, contactListStyle, contactAlphabetStyle } from \"./style\";\nimport searchIcon from \"./resources/search.svg\";\nimport navigateIcon from \"./resources/back.svg\";\n\nclass CometChatUserList extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.toggleUserSearch = () => {\n      this.getContext().FeatureRestriction.isUserSearchEnabled().then(response => {\n        /**\n         * Don't update state if the response has the same value\n         */\n        if (response !== this.state.enableSearchUser) {\n          this.setState({\n            enableSearchUser: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.enableSearchUser !== false) {\n          this.setState({\n            enableSearchUser: false\n          });\n        }\n      });\n    };\n\n    this.userUpdated = user => {\n      let userlist = [...this.state.userlist]; //search for user\n\n      let userKey = userlist.findIndex(u => u.uid === user.uid); //if found in the list, update user object\n\n      if (userKey > -1) {\n        let userObj = { ...userlist[userKey]\n        };\n        let newUserObj = { ...userObj,\n          ...user\n        };\n        userlist.splice(userKey, 1, newUserObj);\n        this.setState({\n          userlist: userlist\n        });\n      }\n    };\n\n    this.handleScroll = e => {\n      const bottom = Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) === Math.round(e.currentTarget.clientHeight);\n      if (bottom) this.getUsers();\n    };\n\n    this.handleClick = user => {\n      if (!this.props.onItemClick) return;\n      this.props.onItemClick(user, CometChat.ACTION_TYPE.TYPE_USER);\n    };\n\n    this.handleMenuClose = () => {\n      if (!this.props.actionGenerated) {\n        return false;\n      }\n\n      this.props.actionGenerated(enums.ACTIONS[\"TOGGLE_SIDEBAR\"]);\n    };\n\n    this.searchUsers = e => {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      let val = e.target.value;\n      this.UserListManager = new UserListManager(this.getContext(), val);\n      this.UserListManager.initializeUsersRequest().then(response => {\n        this.timeout = setTimeout(() => {\n          this.setState({\n            userlist: [],\n            decoratorMessage: Translator.translate(\"LOADING\", this.state.lang)\n          }, () => this.getUsers());\n        }, 500);\n      }).catch(error => this.setState({\n        decoratorMessage: Translator.translate(\"SOMETHING_WRONG\", this.state.lang)\n      }));\n    };\n\n    this.getUsers = () => {\n      this.UserListManager.fetchNextUsers().then(userList => {\n        if (userList.length === 0) {\n          if (this.state.userlist.length === 0) {\n            this.setState({\n              decoratorMessage: Translator.translate(\"NO_USERS_FOUND\", this.state.lang)\n            });\n          }\n        } else {\n          this.setState({\n            userlist: [...this.state.userlist, ...userList],\n            decoratorMessage: \"\"\n          });\n        }\n      }).catch(error => this.setState({\n        decoratorMessage: Translator.translate(\"SOMETHING_WRONG\", this.state.lang)\n      }));\n    };\n\n    this.getContext = () => {\n      if (this.props._parent.length) {\n        return this.context;\n      } else {\n        return this.contextProviderRef.state;\n      }\n    };\n\n    this.state = {\n      userlist: [],\n      lang: props.lang,\n      enableSearchUser: false,\n      decoratorMessage: Translator.translate(\"LOADING\", props.lang)\n    };\n    this.contextProviderRef = /*#__PURE__*/React.createRef();\n    this.userListRef = /*#__PURE__*/React.createRef();\n    CometChat.getLoggedinUser().then(user => this.loggedInUser = user).catch(error => this.setState({\n      decoratorMessage: Translator.translate(\"SOMETHING_WRONG\", this.state.lang)\n    }));\n  }\n\n  componentDidMount() {\n    this.item = this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER ? this.getContext().item : null;\n    this.toggleUserSearch();\n    this.UserListManager = new UserListManager(this.getContext());\n    this.UserListManager.initializeUsersRequest().then(response => {\n      this.getUsers();\n      this.UserListManager.attachListeners(this.userUpdated);\n    }).catch(error => this.setState({\n      decoratorMessage: Translator.translate(\"SOMETHING_WRONG\", this.state.lang)\n    }));\n  }\n\n  componentDidUpdate(prevProps) {\n    //if user is blocked/unblocked, update userlist\n    if (this.item && Object.keys(this.item).length && this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER && this.item.uid === this.getContext().item.uid && this.item.blockedByMe !== this.getContext().item.blockedByMe) {\n      let userlist = [...this.state.userlist]; //search for user\n\n      let userKey = userlist.findIndex(u => u.uid === this.getContext().item.uid);\n\n      if (userKey > -1) {\n        let userObject = { ...userlist[userKey]\n        };\n        let newUserObject = Object.assign({}, userObject, {\n          blockedByMe: this.getContext().item.blockedByMe\n        });\n        userlist.splice(userKey, 1, newUserObject);\n        this.setState({\n          userlist: userlist\n        });\n      }\n    }\n\n    if (prevProps.lang !== this.props.lang) {\n      this.setState({\n        lang: this.props.lang\n      });\n    }\n\n    this.item = this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER ? this.getContext().item : null;\n    this.toggleUserSearch();\n  }\n\n  componentWillUnmount() {\n    this.UserListManager.removeListeners();\n    this.UserListManager = null;\n  }\n\n  render() {\n    let messageContainer = null;\n\n    if (this.state.decoratorMessage.length !== 0) {\n      messageContainer = jsx(\"div\", {\n        css: contactMsgStyle(),\n        className: \"contacts__decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 9\n        }\n      }, jsx(\"p\", {\n        css: contactMsgTxtStyle(this.getContext()),\n        className: \"decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }\n      }, this.state.decoratorMessage));\n    }\n\n    const userList = [...this.state.userlist];\n    let currentLetter = \"\";\n    const users = userList.map(user => {\n      const chr = user.name[0].toUpperCase();\n      let firstChar = null;\n\n      if (chr !== currentLetter) {\n        currentLetter = chr;\n        firstChar = jsx(\"div\", {\n          css: contactAlphabetStyle(),\n          className: \"contacts__list__alphabet-filter\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 11\n          }\n        }, currentLetter);\n      } else {\n        firstChar = null;\n      }\n\n      let selectedUser = this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER && this.getContext().item.uid === user.uid ? user : null;\n      return jsx(React.Fragment, {\n        key: user.uid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 9\n        }\n      }, firstChar, jsx(CometChatUserListItem, {\n        theme: this.props.theme,\n        user: user,\n        selectedUser: selectedUser,\n        lang: this.state.lang,\n        clickHandler: this.handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }\n      }));\n    });\n    let closeBtn = jsx(\"div\", {\n      css: contactHeaderCloseStyle(navigateIcon, this.getContext()),\n      className: \"header__close\",\n      onClick: this.handleMenuClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 7\n      }\n    });\n\n    if (this.getContext() && Object.keys(this.getContext().item).length === 0) {\n      closeBtn = null;\n    }\n\n    let searchUser = null;\n\n    if (this.state.enableSearchUser) {\n      searchUser = jsx(\"div\", {\n        css: contactSearchStyle(),\n        className: \"contacts__search\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 9\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        className: \"search__button\",\n        css: contactSearchButtonStyle(searchIcon, this.getContext()),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }\n      }), jsx(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        css: contactSearchInputStyle(),\n        className: \"search__input\",\n        placeholder: Translator.translate(\"SEARCH\", this.state.lang),\n        onChange: this.searchUsers,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    const userListTemplate = jsx(\"div\", {\n      css: contactWrapperStyle(this.props, this.getContext()),\n      className: \"contacts\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 7\n      }\n    }, jsx(\"div\", {\n      css: contactHeaderStyle(this.getContext()),\n      className: \"contacts__header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }\n    }, closeBtn, jsx(\"h4\", {\n      css: contactHeaderTitleStyle(this.props),\n      className: \"header__title\",\n      dir: Translator.getDirection(this.state.lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 11\n      }\n    }, Translator.translate(\"USERS\", this.state.lang)), jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 11\n      }\n    })), searchUser, messageContainer, jsx(\"div\", {\n      css: contactListStyle(),\n      className: \"contacts__list\",\n      onScroll: this.handleScroll,\n      ref: el => this.userListRef = el,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }\n    }, users));\n    let userListWrapper = userListTemplate;\n\n    if (this.props._parent === \"\") {\n      userListWrapper = jsx(CometChatContextProvider, {\n        ref: el => this.contextProviderRef = el,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 9\n        }\n      }, userListTemplate);\n    }\n\n    return userListWrapper;\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatUserList.contextType = CometChatContext;\nCometChatUserList.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n  onItemClick: () => {},\n  _parent: \"\"\n};\nCometChatUserList.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n  onItemClick: PropTypes.func,\n  _parent: PropTypes.string\n};\nexport { CometChatUserList };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Users/CometChatUserList/index.js"],"names":["React","jsx","PropTypes","CometChat","UserListManager","CometChatUserListItem","CometChatContextProvider","CometChatContext","enums","theme","Translator","contactWrapperStyle","contactHeaderStyle","contactHeaderCloseStyle","contactHeaderTitleStyle","contactSearchStyle","contactSearchButtonStyle","contactSearchInputStyle","contactMsgStyle","contactMsgTxtStyle","contactListStyle","contactAlphabetStyle","CometChatUserList","PureComponent","constructor","props","toggleUserSearch","getContext","FeatureRestriction","isUserSearchEnabled","then","response","state","enableSearchUser","setState","catch","error","userUpdated","user","userlist","userKey","findIndex","u","uid","userObj","newUserObj","splice","handleScroll","e","bottom","Math","round","currentTarget","scrollHeight","scrollTop","clientHeight","getUsers","handleClick","onItemClick","ACTION_TYPE","TYPE_USER","handleMenuClose","actionGenerated","ACTIONS","searchUsers","timeout","clearTimeout","val","target","value","initializeUsersRequest","setTimeout","decoratorMessage","translate","lang","fetchNextUsers","userList","length","_parent","context","contextProviderRef","createRef","userListRef","getLoggedinUser","loggedInUser","componentDidMount","item","type","attachListeners","componentDidUpdate","prevProps","Object","keys","blockedByMe","userObject","newUserObject","assign","componentWillUnmount","removeListeners","render","messageContainer","currentLetter","users","map","chr","name","toUpperCase","firstChar","selectedUser","closeBtn","navigateIcon","searchUser","searchIcon","userListTemplate","getDirection","el","userListWrapper","contextType","defaultProps","getDefaultLanguage","propTypes","string","object","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA;;AACA;;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AAEA,SAASC,eAAT,QAAgC,cAAhC;AAEA,SAASC,qBAAT,QAAsC,aAAtC;AAEA,SACEC,wBADF,EAEEC,gBAFF,QAGO,gCAHP;AAIA,OAAO,KAAKC,KAAZ,MAAuB,wBAAvB;AAEA,SAASC,KAAT,QAAsB,0BAAtB;AACA,OAAOC,UAAP,MAAuB,4CAAvB;AAEA,SACEC,mBADF,EAEEC,kBAFF,EAGEC,uBAHF,EAIEC,uBAJF,EAKEC,kBALF,EAMEC,wBANF,EAOEC,uBAPF,EAQEC,eARF,EASEC,kBATF,EAUEC,gBAVF,EAWEC,oBAXF,QAYO,SAZP;;;;AAiBA,MAAMC,iBAAN,SAAgCtB,KAAK,CAACuB,aAAtC,CAAoD;AAKlDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA0FnBC,gBA1FmB,GA0FA,MAAM;AACvB,WAAKC,UAAL,GACGC,kBADH,CACsBC,mBADtB,GAEGC,IAFH,CAESC,QAAD,IAAc;AAClB;AACR;AACA;AACQ,YAAIA,QAAQ,KAAK,KAAKC,KAAL,CAAWC,gBAA5B,EAA8C;AAC5C,eAAKC,QAAL,CAAc;AAAED,YAAAA,gBAAgB,EAAEF;AAApB,WAAd;AACD;AACF,OATH,EAUGI,KAVH,CAUUC,KAAD,IAAW;AAChB,YAAI,KAAKJ,KAAL,CAAWC,gBAAX,KAAgC,KAApC,EAA2C;AACzC,eAAKC,QAAL,CAAc;AAAED,YAAAA,gBAAgB,EAAE;AAApB,WAAd;AACD;AACF,OAdH;AAeD,KA1GkB;;AAAA,SA4GnBI,WA5GmB,GA4GJC,IAAD,IAAU;AACtB,UAAIC,QAAQ,GAAG,CAAC,GAAG,KAAKP,KAAL,CAAWO,QAAf,CAAf,CADsB,CAGtB;;AACA,UAAIC,OAAO,GAAGD,QAAQ,CAACE,SAAT,CAAoBC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUL,IAAI,CAACK,GAAzC,CAAd,CAJsB,CAMtB;;AACA,UAAIH,OAAO,GAAG,CAAC,CAAf,EAAkB;AAChB,YAAII,OAAO,GAAG,EAAE,GAAGL,QAAQ,CAACC,OAAD;AAAb,SAAd;AACA,YAAIK,UAAU,GAAG,EAAE,GAAGD,OAAL;AAAc,aAAGN;AAAjB,SAAjB;AACAC,QAAAA,QAAQ,CAACO,MAAT,CAAgBN,OAAhB,EAAyB,CAAzB,EAA4BK,UAA5B;AAEA,aAAKX,QAAL,CAAc;AAAEK,UAAAA,QAAQ,EAAEA;AAAZ,SAAd;AACD;AACF,KA1HkB;;AAAA,SA4HnBQ,YA5HmB,GA4HHC,CAAD,IAAO;AACpB,YAAMC,MAAM,GACVC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,aAAF,CAAgBC,YAAhB,GAA+BL,CAAC,CAACI,aAAF,CAAgBE,SAA1D,MACAJ,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,aAAF,CAAgBG,YAA3B,CAFF;AAGA,UAAIN,MAAJ,EAAY,KAAKO,QAAL;AACb,KAjIkB;;AAAA,SAmInBC,WAnImB,GAmIJnB,IAAD,IAAU;AACtB,UAAI,CAAC,KAAKb,KAAL,CAAWiC,WAAhB,EAA6B;AAE7B,WAAKjC,KAAL,CAAWiC,WAAX,CAAuBpB,IAAvB,EAA6BnC,SAAS,CAACwD,WAAV,CAAsBC,SAAnD;AACD,KAvIkB;;AAAA,SAyInBC,eAzImB,GAyID,MAAM;AACtB,UAAI,CAAC,KAAKpC,KAAL,CAAWqC,eAAhB,EAAiC;AAC/B,eAAO,KAAP;AACD;;AAED,WAAKrC,KAAL,CAAWqC,eAAX,CAA2BtD,KAAK,CAACuD,OAAN,CAAc,gBAAd,CAA3B;AACD,KA/IkB;;AAAA,SAiJnBC,WAjJmB,GAiJJhB,CAAD,IAAO;AACnB,UAAI,KAAKiB,OAAT,EAAkB;AAChBC,QAAAA,YAAY,CAAC,KAAKD,OAAN,CAAZ;AACD;;AAED,UAAIE,GAAG,GAAGnB,CAAC,CAACoB,MAAF,CAASC,KAAnB;AACA,WAAKjE,eAAL,GAAuB,IAAIA,eAAJ,CAAoB,KAAKuB,UAAL,EAApB,EAAuCwC,GAAvC,CAAvB;AACA,WAAK/D,eAAL,CAAqBkE,sBAArB,GACGxC,IADH,CACSC,QAAD,IAAc;AAClB,aAAKkC,OAAL,GAAeM,UAAU,CAAC,MAAM;AAC9B,eAAKrC,QAAL,CACE;AACEK,YAAAA,QAAQ,EAAE,EADZ;AAEEiC,YAAAA,gBAAgB,EAAE9D,UAAU,CAAC+D,SAAX,CAChB,SADgB,EAEhB,KAAKzC,KAAL,CAAW0C,IAFK;AAFpB,WADF,EAQE,MAAM,KAAKlB,QAAL,EARR;AAUD,SAXwB,EAWtB,GAXsB,CAAzB;AAYD,OAdH,EAeGrB,KAfH,CAeUC,KAAD,IACL,KAAKF,QAAL,CAAc;AACZsC,QAAAA,gBAAgB,EAAE9D,UAAU,CAAC+D,SAAX,CAChB,iBADgB,EAEhB,KAAKzC,KAAL,CAAW0C,IAFK;AADN,OAAd,CAhBJ;AAuBD,KA/KkB;;AAAA,SAiLnBlB,QAjLmB,GAiLR,MAAM;AACf,WAAKpD,eAAL,CAAqBuE,cAArB,GACG7C,IADH,CACS8C,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,cAAI,KAAK7C,KAAL,CAAWO,QAAX,CAAoBsC,MAApB,KAA+B,CAAnC,EAAsC;AACpC,iBAAK3C,QAAL,CAAc;AACZsC,cAAAA,gBAAgB,EAAE9D,UAAU,CAAC+D,SAAX,CAChB,gBADgB,EAEhB,KAAKzC,KAAL,CAAW0C,IAFK;AADN,aAAd;AAMD;AACF,SATD,MASO;AACL,eAAKxC,QAAL,CAAc;AACZK,YAAAA,QAAQ,EAAE,CAAC,GAAG,KAAKP,KAAL,CAAWO,QAAf,EAAyB,GAAGqC,QAA5B,CADE;AAEZJ,YAAAA,gBAAgB,EAAE;AAFN,WAAd;AAID;AACF,OAjBH,EAkBGrC,KAlBH,CAkBUC,KAAD,IACL,KAAKF,QAAL,CAAc;AACZsC,QAAAA,gBAAgB,EAAE9D,UAAU,CAAC+D,SAAX,CAChB,iBADgB,EAEhB,KAAKzC,KAAL,CAAW0C,IAFK;AADN,OAAd,CAnBJ;AA0BD,KA5MkB;;AAAA,SA8MnB/C,UA9MmB,GA8MN,MAAM;AACjB,UAAI,KAAKF,KAAL,CAAWqD,OAAX,CAAmBD,MAAvB,EAA+B;AAC7B,eAAO,KAAKE,OAAZ;AACD,OAFD,MAEO;AACL,eAAO,KAAKC,kBAAL,CAAwBhD,KAA/B;AACD;AACF,KApNkB;;AAGjB,SAAKA,KAAL,GAAa;AACXO,MAAAA,QAAQ,EAAE,EADC;AAEXmC,MAAAA,IAAI,EAAEjD,KAAK,CAACiD,IAFD;AAGXzC,MAAAA,gBAAgB,EAAE,KAHP;AAIXuC,MAAAA,gBAAgB,EAAE9D,UAAU,CAAC+D,SAAX,CAAqB,SAArB,EAAgChD,KAAK,CAACiD,IAAtC;AAJP,KAAb;AAOA,SAAKM,kBAAL,gBAA0BhF,KAAK,CAACiF,SAAN,EAA1B;AACA,SAAKC,WAAL,gBAAmBlF,KAAK,CAACiF,SAAN,EAAnB;AAEA9E,IAAAA,SAAS,CAACgF,eAAV,GACGrD,IADH,CACSQ,IAAD,IAAW,KAAK8C,YAAL,GAAoB9C,IADvC,EAEGH,KAFH,CAEUC,KAAD,IACL,KAAKF,QAAL,CAAc;AACZsC,MAAAA,gBAAgB,EAAE9D,UAAU,CAAC+D,SAAX,CAChB,iBADgB,EAEhB,KAAKzC,KAAL,CAAW0C,IAFK;AADN,KAAd,CAHJ;AAUD;;AAEDW,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,IAAL,GACE,KAAK3D,UAAL,GAAkB4D,IAAlB,KAA2BpF,SAAS,CAACwD,WAAV,CAAsBC,SAAjD,GACI,KAAKjC,UAAL,GAAkB2D,IADtB,GAEI,IAHN;AAIA,SAAK5D,gBAAL;AAEA,SAAKtB,eAAL,GAAuB,IAAIA,eAAJ,CAAoB,KAAKuB,UAAL,EAApB,CAAvB;AACA,SAAKvB,eAAL,CAAqBkE,sBAArB,GACGxC,IADH,CACSC,QAAD,IAAc;AAClB,WAAKyB,QAAL;AACA,WAAKpD,eAAL,CAAqBoF,eAArB,CAAqC,KAAKnD,WAA1C;AACD,KAJH,EAKGF,KALH,CAKUC,KAAD,IACL,KAAKF,QAAL,CAAc;AACZsC,MAAAA,gBAAgB,EAAE9D,UAAU,CAAC+D,SAAX,CAChB,iBADgB,EAEhB,KAAKzC,KAAL,CAAW0C,IAFK;AADN,KAAd,CANJ;AAaD;;AAEDe,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B;AACA,QACE,KAAKJ,IAAL,IACAK,MAAM,CAACC,IAAP,CAAY,KAAKN,IAAjB,EAAuBT,MADvB,IAEA,KAAKlD,UAAL,GAAkB4D,IAAlB,KAA2BpF,SAAS,CAACwD,WAAV,CAAsBC,SAFjD,IAGA,KAAK0B,IAAL,CAAU3C,GAAV,KAAkB,KAAKhB,UAAL,GAAkB2D,IAAlB,CAAuB3C,GAHzC,IAIA,KAAK2C,IAAL,CAAUO,WAAV,KAA0B,KAAKlE,UAAL,GAAkB2D,IAAlB,CAAuBO,WALnD,EAME;AACA,UAAItD,QAAQ,GAAG,CAAC,GAAG,KAAKP,KAAL,CAAWO,QAAf,CAAf,CADA,CAGA;;AACA,UAAIC,OAAO,GAAGD,QAAQ,CAACE,SAAT,CACXC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAU,KAAKhB,UAAL,GAAkB2D,IAAlB,CAAuB3C,GAD5B,CAAd;;AAGA,UAAIH,OAAO,GAAG,CAAC,CAAf,EAAkB;AAChB,YAAIsD,UAAU,GAAG,EAAE,GAAGvD,QAAQ,CAACC,OAAD;AAAb,SAAjB;AACA,YAAIuD,aAAa,GAAGJ,MAAM,CAACK,MAAP,CAAc,EAAd,EAAkBF,UAAlB,EAA8B;AAChDD,UAAAA,WAAW,EAAE,KAAKlE,UAAL,GAAkB2D,IAAlB,CAAuBO;AADY,SAA9B,CAApB;AAIAtD,QAAAA,QAAQ,CAACO,MAAT,CAAgBN,OAAhB,EAAyB,CAAzB,EAA4BuD,aAA5B;AACA,aAAK7D,QAAL,CAAc;AAAEK,UAAAA,QAAQ,EAAEA;AAAZ,SAAd;AACD;AACF;;AAED,QAAImD,SAAS,CAAChB,IAAV,KAAmB,KAAKjD,KAAL,CAAWiD,IAAlC,EAAwC;AACtC,WAAKxC,QAAL,CAAc;AAAEwC,QAAAA,IAAI,EAAE,KAAKjD,KAAL,CAAWiD;AAAnB,OAAd;AACD;;AAED,SAAKY,IAAL,GACE,KAAK3D,UAAL,GAAkB4D,IAAlB,KAA2BpF,SAAS,CAACwD,WAAV,CAAsBC,SAAjD,GACI,KAAKjC,UAAL,GAAkB2D,IADtB,GAEI,IAHN;AAIA,SAAK5D,gBAAL;AACD;;AAEDuE,EAAAA,oBAAoB,GAAG;AACrB,SAAK7F,eAAL,CAAqB8F,eAArB;AACA,SAAK9F,eAAL,GAAuB,IAAvB;AACD;;AA8HD+F,EAAAA,MAAM,GAAG;AACP,QAAIC,gBAAgB,GAAG,IAAvB;;AACA,QAAI,KAAKpE,KAAL,CAAWwC,gBAAX,CAA4BK,MAA5B,KAAuC,CAA3C,EAA8C;AAC5CuB,MAAAA,gBAAgB,GACd;AAAK,QAAA,GAAG,EAAElF,eAAe,EAAzB;AAA6B,QAAA,SAAS,EAAC,6BAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,GAAG,EAAEC,kBAAkB,CAAC,KAAKQ,UAAL,EAAD,CADzB;AAEE,QAAA,SAAS,EAAC,mBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,KAAKK,KAAL,CAAWwC,gBAJd,CADF,CADF;AAUD;;AAED,UAAMI,QAAQ,GAAG,CAAC,GAAG,KAAK5C,KAAL,CAAWO,QAAf,CAAjB;AACA,QAAI8D,aAAa,GAAG,EAApB;AAEA,UAAMC,KAAK,GAAG1B,QAAQ,CAAC2B,GAAT,CAAcjE,IAAD,IAAU;AACnC,YAAMkE,GAAG,GAAGlE,IAAI,CAACmE,IAAL,CAAU,CAAV,EAAaC,WAAb,EAAZ;AACA,UAAIC,SAAS,GAAG,IAAhB;;AACA,UAAIH,GAAG,KAAKH,aAAZ,EAA2B;AACzBA,QAAAA,aAAa,GAAGG,GAAhB;AACAG,QAAAA,SAAS,GACP;AACE,UAAA,GAAG,EAAEtF,oBAAoB,EAD3B;AAEE,UAAA,SAAS,EAAC,iCAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIGgF,aAJH,CADF;AAQD,OAVD,MAUO;AACLM,QAAAA,SAAS,GAAG,IAAZ;AACD;;AAED,UAAIC,YAAY,GACd,KAAKjF,UAAL,GAAkB4D,IAAlB,KAA2BpF,SAAS,CAACwD,WAAV,CAAsBC,SAAjD,IACA,KAAKjC,UAAL,GAAkB2D,IAAlB,CAAuB3C,GAAvB,KAA+BL,IAAI,CAACK,GADpC,GAEIL,IAFJ,GAGI,IAJN;AAMA,aACE,IAAC,KAAD,CAAO,QAAP;AAAgB,QAAA,GAAG,EAAEA,IAAI,CAACK,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGgE,SADH,EAEE,IAAC,qBAAD;AACE,QAAA,KAAK,EAAE,KAAKlF,KAAL,CAAWhB,KADpB;AAEE,QAAA,IAAI,EAAE6B,IAFR;AAGE,QAAA,YAAY,EAAEsE,YAHhB;AAIE,QAAA,IAAI,EAAE,KAAK5E,KAAL,CAAW0C,IAJnB;AAKE,QAAA,YAAY,EAAE,KAAKjB,WALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAYD,KAnCa,CAAd;AAqCA,QAAIoD,QAAQ,GACV;AACE,MAAA,GAAG,EAAEhG,uBAAuB,CAACiG,YAAD,EAAe,KAAKnF,UAAL,EAAf,CAD9B;AAEE,MAAA,SAAS,EAAC,eAFZ;AAGE,MAAA,OAAO,EAAE,KAAKkC,eAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;;AAOA,QAAI,KAAKlC,UAAL,MAAqBgE,MAAM,CAACC,IAAP,CAAY,KAAKjE,UAAL,GAAkB2D,IAA9B,EAAoCT,MAApC,KAA+C,CAAxE,EAA2E;AACzEgC,MAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,QAAIE,UAAU,GAAG,IAAjB;;AACA,QAAI,KAAK/E,KAAL,CAAWC,gBAAf,EAAiC;AAC/B8E,MAAAA,UAAU,GACR;AAAK,QAAA,GAAG,EAAEhG,kBAAkB,EAA5B;AAAgC,QAAA,SAAS,EAAC,kBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,SAAS,EAAC,gBAFZ;AAGE,QAAA,GAAG,EAAEC,wBAAwB,CAACgG,UAAD,EAAa,KAAKrF,UAAL,EAAb,CAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,YAAY,EAAC,KAFf;AAGE,QAAA,GAAG,EAAEV,uBAAuB,EAH9B;AAIE,QAAA,SAAS,EAAC,eAJZ;AAKE,QAAA,WAAW,EAAEP,UAAU,CAAC+D,SAAX,CAAqB,QAArB,EAA+B,KAAKzC,KAAL,CAAW0C,IAA1C,CALf;AAME,QAAA,QAAQ,EAAE,KAAKV,WANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CADF;AAiBD;;AAED,UAAMiD,gBAAgB,GACpB;AACE,MAAA,GAAG,EAAEtG,mBAAmB,CAAC,KAAKc,KAAN,EAAa,KAAKE,UAAL,EAAb,CAD1B;AAEE,MAAA,SAAS,EAAC,UAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AACE,MAAA,GAAG,EAAEf,kBAAkB,CAAC,KAAKe,UAAL,EAAD,CADzB;AAEE,MAAA,SAAS,EAAC,kBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIGkF,QAJH,EAKE;AACE,MAAA,GAAG,EAAE/F,uBAAuB,CAAC,KAAKW,KAAN,CAD9B;AAEE,MAAA,SAAS,EAAC,eAFZ;AAGE,MAAA,GAAG,EAAEf,UAAU,CAACwG,YAAX,CAAwB,KAAKlF,KAAL,CAAW0C,IAAnC,CAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGhE,UAAU,CAAC+D,SAAX,CAAqB,OAArB,EAA8B,KAAKzC,KAAL,CAAW0C,IAAzC,CALH,CALF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CAJF,EAkBGqC,UAlBH,EAmBGX,gBAnBH,EAoBE;AACE,MAAA,GAAG,EAAEhF,gBAAgB,EADvB;AAEE,MAAA,SAAS,EAAC,gBAFZ;AAGE,MAAA,QAAQ,EAAE,KAAK2B,YAHjB;AAIE,MAAA,GAAG,EAAGoE,EAAD,IAAS,KAAKjC,WAAL,GAAmBiC,EAJnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGb,KANH,CApBF,CADF;AAgCA,QAAIc,eAAe,GAAGH,gBAAtB;;AACA,QAAI,KAAKxF,KAAL,CAAWqD,OAAX,KAAuB,EAA3B,EAA+B;AAC7BsC,MAAAA,eAAe,GACb,IAAC,wBAAD;AAA0B,QAAA,GAAG,EAAGD,EAAD,IAAS,KAAKnC,kBAAL,GAA0BmC,EAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGF,gBADH,CADF;AAKD;;AAED,WAAOG,eAAP;AACD;;AA5ViD,C,CA+VpD;;;AA/VM9F,iB,CAGG+F,W,GAAc9G,gB;AA6VvBe,iBAAiB,CAACgG,YAAlB,GAAiC;AAC/B5C,EAAAA,IAAI,EAAEhE,UAAU,CAAC6G,kBAAX,EADyB;AAE/B9G,EAAAA,KAAK,EAAEA,KAFwB;AAG/BiD,EAAAA,WAAW,EAAE,MAAM,CAAE,CAHU;AAI/BoB,EAAAA,OAAO,EAAE;AAJsB,CAAjC;AAOAxD,iBAAiB,CAACkG,SAAlB,GAA8B;AAC5B9C,EAAAA,IAAI,EAAExE,SAAS,CAACuH,MADY;AAE5BhH,EAAAA,KAAK,EAAEP,SAAS,CAACwH,MAFW;AAG5BhE,EAAAA,WAAW,EAAExD,SAAS,CAACyH,IAHK;AAI5B7C,EAAAA,OAAO,EAAE5E,SAAS,CAACuH;AAJS,CAA9B;AAOA,SAASnG,iBAAT","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { UserListManager } from \"./controller\";\n\nimport { CometChatUserListItem } from \"../../Users\";\n\nimport {\n  CometChatContextProvider,\n  CometChatContext,\n} from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\n\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\n\nimport {\n  contactWrapperStyle,\n  contactHeaderStyle,\n  contactHeaderCloseStyle,\n  contactHeaderTitleStyle,\n  contactSearchStyle,\n  contactSearchButtonStyle,\n  contactSearchInputStyle,\n  contactMsgStyle,\n  contactMsgTxtStyle,\n  contactListStyle,\n  contactAlphabetStyle,\n} from \"./style\";\n\nimport searchIcon from \"./resources/search.svg\";\nimport navigateIcon from \"./resources/back.svg\";\n\nclass CometChatUserList extends React.PureComponent {\n  item;\n  timeout;\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      userlist: [],\n      lang: props.lang,\n      enableSearchUser: false,\n      decoratorMessage: Translator.translate(\"LOADING\", props.lang),\n    };\n\n    this.contextProviderRef = React.createRef();\n    this.userListRef = React.createRef();\n\n    CometChat.getLoggedinUser()\n      .then((user) => (this.loggedInUser = user))\n      .catch((error) =>\n        this.setState({\n          decoratorMessage: Translator.translate(\n            \"SOMETHING_WRONG\",\n            this.state.lang\n          ),\n        })\n      );\n  }\n\n  componentDidMount() {\n    this.item =\n      this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER\n        ? this.getContext().item\n        : null;\n    this.toggleUserSearch();\n\n    this.UserListManager = new UserListManager(this.getContext());\n    this.UserListManager.initializeUsersRequest()\n      .then((response) => {\n        this.getUsers();\n        this.UserListManager.attachListeners(this.userUpdated);\n      })\n      .catch((error) =>\n        this.setState({\n          decoratorMessage: Translator.translate(\n            \"SOMETHING_WRONG\",\n            this.state.lang\n          ),\n        })\n      );\n  }\n\n  componentDidUpdate(prevProps) {\n    //if user is blocked/unblocked, update userlist\n    if (\n      this.item &&\n      Object.keys(this.item).length &&\n      this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER &&\n      this.item.uid === this.getContext().item.uid &&\n      this.item.blockedByMe !== this.getContext().item.blockedByMe\n    ) {\n      let userlist = [...this.state.userlist];\n\n      //search for user\n      let userKey = userlist.findIndex(\n        (u) => u.uid === this.getContext().item.uid\n      );\n      if (userKey > -1) {\n        let userObject = { ...userlist[userKey] };\n        let newUserObject = Object.assign({}, userObject, {\n          blockedByMe: this.getContext().item.blockedByMe,\n        });\n\n        userlist.splice(userKey, 1, newUserObject);\n        this.setState({ userlist: userlist });\n      }\n    }\n\n    if (prevProps.lang !== this.props.lang) {\n      this.setState({ lang: this.props.lang });\n    }\n\n    this.item =\n      this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER\n        ? this.getContext().item\n        : null;\n    this.toggleUserSearch();\n  }\n\n  componentWillUnmount() {\n    this.UserListManager.removeListeners();\n    this.UserListManager = null;\n  }\n\n  toggleUserSearch = () => {\n    this.getContext()\n      .FeatureRestriction.isUserSearchEnabled()\n      .then((response) => {\n        /**\n         * Don't update state if the response has the same value\n         */\n        if (response !== this.state.enableSearchUser) {\n          this.setState({ enableSearchUser: response });\n        }\n      })\n      .catch((error) => {\n        if (this.state.enableSearchUser !== false) {\n          this.setState({ enableSearchUser: false });\n        }\n      });\n  };\n\n  userUpdated = (user) => {\n    let userlist = [...this.state.userlist];\n\n    //search for user\n    let userKey = userlist.findIndex((u) => u.uid === user.uid);\n\n    //if found in the list, update user object\n    if (userKey > -1) {\n      let userObj = { ...userlist[userKey] };\n      let newUserObj = { ...userObj, ...user };\n      userlist.splice(userKey, 1, newUserObj);\n\n      this.setState({ userlist: userlist });\n    }\n  };\n\n  handleScroll = (e) => {\n    const bottom =\n      Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) ===\n      Math.round(e.currentTarget.clientHeight);\n    if (bottom) this.getUsers();\n  };\n\n  handleClick = (user) => {\n    if (!this.props.onItemClick) return;\n\n    this.props.onItemClick(user, CometChat.ACTION_TYPE.TYPE_USER);\n  };\n\n  handleMenuClose = () => {\n    if (!this.props.actionGenerated) {\n      return false;\n    }\n\n    this.props.actionGenerated(enums.ACTIONS[\"TOGGLE_SIDEBAR\"]);\n  };\n\n  searchUsers = (e) => {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n\n    let val = e.target.value;\n    this.UserListManager = new UserListManager(this.getContext(), val);\n    this.UserListManager.initializeUsersRequest()\n      .then((response) => {\n        this.timeout = setTimeout(() => {\n          this.setState(\n            {\n              userlist: [],\n              decoratorMessage: Translator.translate(\n                \"LOADING\",\n                this.state.lang\n              ),\n            },\n            () => this.getUsers()\n          );\n        }, 500);\n      })\n      .catch((error) =>\n        this.setState({\n          decoratorMessage: Translator.translate(\n            \"SOMETHING_WRONG\",\n            this.state.lang\n          ),\n        })\n      );\n  };\n\n  getUsers = () => {\n    this.UserListManager.fetchNextUsers()\n      .then((userList) => {\n        if (userList.length === 0) {\n          if (this.state.userlist.length === 0) {\n            this.setState({\n              decoratorMessage: Translator.translate(\n                \"NO_USERS_FOUND\",\n                this.state.lang\n              ),\n            });\n          }\n        } else {\n          this.setState({\n            userlist: [...this.state.userlist, ...userList],\n            decoratorMessage: \"\",\n          });\n        }\n      })\n      .catch((error) =>\n        this.setState({\n          decoratorMessage: Translator.translate(\n            \"SOMETHING_WRONG\",\n            this.state.lang\n          ),\n        })\n      );\n  };\n\n  getContext = () => {\n    if (this.props._parent.length) {\n      return this.context;\n    } else {\n      return this.contextProviderRef.state;\n    }\n  };\n\n  render() {\n    let messageContainer = null;\n    if (this.state.decoratorMessage.length !== 0) {\n      messageContainer = (\n        <div css={contactMsgStyle()} className=\"contacts__decorator-message\">\n          <p\n            css={contactMsgTxtStyle(this.getContext())}\n            className=\"decorator-message\"\n          >\n            {this.state.decoratorMessage}\n          </p>\n        </div>\n      );\n    }\n\n    const userList = [...this.state.userlist];\n    let currentLetter = \"\";\n\n    const users = userList.map((user) => {\n      const chr = user.name[0].toUpperCase();\n      let firstChar = null;\n      if (chr !== currentLetter) {\n        currentLetter = chr;\n        firstChar = (\n          <div\n            css={contactAlphabetStyle()}\n            className=\"contacts__list__alphabet-filter\"\n          >\n            {currentLetter}\n          </div>\n        );\n      } else {\n        firstChar = null;\n      }\n\n      let selectedUser =\n        this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER &&\n        this.getContext().item.uid === user.uid\n          ? user\n          : null;\n\n      return (\n        <React.Fragment key={user.uid}>\n          {firstChar}\n          <CometChatUserListItem\n            theme={this.props.theme}\n            user={user}\n            selectedUser={selectedUser}\n            lang={this.state.lang}\n            clickHandler={this.handleClick}\n          />\n        </React.Fragment>\n      );\n    });\n\n    let closeBtn = (\n      <div\n        css={contactHeaderCloseStyle(navigateIcon, this.getContext())}\n        className=\"header__close\"\n        onClick={this.handleMenuClose}\n      ></div>\n    );\n    if (this.getContext() && Object.keys(this.getContext().item).length === 0) {\n      closeBtn = null;\n    }\n\n    let searchUser = null;\n    if (this.state.enableSearchUser) {\n      searchUser = (\n        <div css={contactSearchStyle()} className=\"contacts__search\">\n          <button\n            type=\"button\"\n            className=\"search__button\"\n            css={contactSearchButtonStyle(searchIcon, this.getContext())}\n          />\n          <input\n            type=\"text\"\n            autoComplete=\"off\"\n            css={contactSearchInputStyle()}\n            className=\"search__input\"\n            placeholder={Translator.translate(\"SEARCH\", this.state.lang)}\n            onChange={this.searchUsers}\n          />\n        </div>\n      );\n    }\n\n    const userListTemplate = (\n      <div\n        css={contactWrapperStyle(this.props, this.getContext())}\n        className=\"contacts\"\n      >\n        <div\n          css={contactHeaderStyle(this.getContext())}\n          className=\"contacts__header\"\n        >\n          {closeBtn}\n          <h4\n            css={contactHeaderTitleStyle(this.props)}\n            className=\"header__title\"\n            dir={Translator.getDirection(this.state.lang)}\n          >\n            {Translator.translate(\"USERS\", this.state.lang)}\n          </h4>\n          <div></div>\n        </div>\n        {searchUser}\n        {messageContainer}\n        <div\n          css={contactListStyle()}\n          className=\"contacts__list\"\n          onScroll={this.handleScroll}\n          ref={(el) => (this.userListRef = el)}\n        >\n          {users}\n        </div>\n      </div>\n    );\n\n    let userListWrapper = userListTemplate;\n    if (this.props._parent === \"\") {\n      userListWrapper = (\n        <CometChatContextProvider ref={(el) => (this.contextProviderRef = el)}>\n          {userListTemplate}\n        </CometChatContextProvider>\n      );\n    }\n\n    return userListWrapper;\n  }\n}\n\n// Specifies the default values for props:\nCometChatUserList.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n  onItemClick: () => {},\n  _parent: \"\",\n};\n\nCometChatUserList.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n  onItemClick: PropTypes.func,\n  _parent: PropTypes.string,\n};\n\nexport { CometChatUserList };\n"]},"metadata":{},"sourceType":"module"}