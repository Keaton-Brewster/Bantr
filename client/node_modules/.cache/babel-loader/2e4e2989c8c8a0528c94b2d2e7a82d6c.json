{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Shared/CometChatAvatar/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { theme } from \"../../../resources/theme\";\nimport { imgStyle } from \"./style\";\nimport srcIcon from \"./resources/1px.png\";\n\nclass CometChatAvatar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setAvatarImage = () => {\n      if (this.props.image.trim().length) {\n        this.getImage(this.props.image);\n      } else if (Object.keys(this.props.user).length) {\n        if (this.props.user.hasOwnProperty(\"avatar\")) {\n          const avatarImage = this.props.user.avatar;\n          this.getImage(avatarImage);\n        } else {\n          const uid = this.props.user.uid;\n          const char = this.props.user.name.charAt(0).toUpperCase();\n          const avatarImage = this.generateAvatar(uid, char);\n          this.getImage(avatarImage);\n        }\n      } else if (Object.keys(this.props.group).length) {\n        if (this.props.group.hasOwnProperty(\"icon\")) {\n          const avatarImage = this.props.group.icon;\n          this.getImage(avatarImage);\n        } else {\n          const guid = this.props.group.guid;\n          const char = this.props.group.name.charAt(0).toUpperCase();\n          const avatarImage = this.generateAvatar(guid, char);\n          this.getImage(avatarImage);\n        }\n      }\n    };\n\n    this.getImage = image => {\n      let img = new Image();\n      img.src = image;\n\n      img.onload = () => {\n        if (this._isMounted) {\n          this.setState({\n            avatarImage: image\n          });\n        }\n      };\n    };\n\n    this.generateAvatar = (generator, data) => {\n      const stringToColour = function (str) {\n        let hash = 0;\n\n        for (let i = 0; i < str.length; i++) {\n          hash = str.charCodeAt(i) + ((hash << 5) - hash);\n        }\n\n        let colour = \"#\";\n\n        for (let i = 0; i < 3; i++) {\n          let value = hash >> i * 8 & 0xff;\n          colour += (\"00\" + value.toString(16)).substr(-2);\n        }\n\n        return colour;\n      };\n\n      const canvas = document.createElement(\"canvas\");\n      const context = canvas.getContext(\"2d\");\n      canvas.width = 200;\n      canvas.height = 200; // Draw background\n\n      context.fillStyle = stringToColour(generator);\n      context.fillRect(0, 0, canvas.width, canvas.height); // Draw text\n\n      context.font = \"bold 100px 'Inter', sans-serif\";\n      context.fillStyle = \"white\"; //foregroundColor;\n\n      context.textAlign = \"center\";\n      context.textBaseline = \"middle\";\n      context.fillText(data, canvas.width / 2, canvas.height / 2);\n      return canvas.toDataURL(\"image/png\");\n    };\n\n    this.imgRef = /*#__PURE__*/React.createRef();\n    this._isMounted = false;\n    this.state = {\n      avatarImage: srcIcon\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.setAvatarImage();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.setAvatarImage();\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const borderWidth = this.props.borderWidth;\n    const borderStyle = this.props.borderStyle;\n    const borderColor = this.props.borderColor;\n    const cornerRadius = this.props.cornerRadius;\n\n    const getStyle = () => ({\n      borderWidth: borderWidth,\n      borderStyle: borderStyle,\n      borderColor: borderColor,\n      borderRadius: cornerRadius\n    });\n\n    return jsx(\"img\", {\n      src: this.state.avatarImage,\n      css: imgStyle(),\n      alt: this.state.avatarImage,\n      style: getStyle(),\n      ref: el => {\n        this.imgRef = el;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    });\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatAvatar.defaultProps = {\n  borderWidth: \"1px\",\n  borderStyle: \"solid\",\n  borderColor: theme.borderColor.primary,\n  cornerRadius: \"50%\",\n  theme: theme,\n  image: \"\",\n  user: {},\n  group: {}\n};\nCometChatAvatar.propTypes = {\n  borderWidth: PropTypes.string,\n  borderStyle: PropTypes.string,\n  borderColor: PropTypes.string,\n  cornerRadius: PropTypes.string,\n  image: PropTypes.string,\n  theme: PropTypes.object,\n  user: PropTypes.oneOfType([PropTypes.object, PropTypes.shape(CometChat.User)]),\n  group: PropTypes.oneOfType([PropTypes.object, PropTypes.shape(CometChat.Group)])\n};\nexport { CometChatAvatar };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Shared/CometChatAvatar/index.js"],"names":["React","jsx","PropTypes","CometChat","theme","imgStyle","srcIcon","CometChatAvatar","Component","constructor","props","setAvatarImage","image","trim","length","getImage","Object","keys","user","hasOwnProperty","avatarImage","avatar","uid","char","name","charAt","toUpperCase","generateAvatar","group","icon","guid","img","Image","src","onload","_isMounted","setState","generator","data","stringToColour","str","hash","i","charCodeAt","colour","value","toString","substr","canvas","document","createElement","context","getContext","width","height","fillStyle","fillRect","font","textAlign","textBaseline","fillText","toDataURL","imgRef","createRef","state","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","render","borderWidth","borderStyle","borderColor","cornerRadius","getStyle","borderRadius","el","defaultProps","primary","propTypes","string","object","oneOfType","shape","User","Group"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { theme } from \"../../../resources/theme\";\n\nimport { imgStyle } from \"./style\";\n\nimport srcIcon from \"./resources/1px.png\";\n\nclass CometChatAvatar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.imgRef = React.createRef();\n    this._isMounted = false;\n    this.state = {\n      avatarImage: srcIcon,\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.setAvatarImage();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.setAvatarImage();\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  setAvatarImage = () => {\n    if (this.props.image.trim().length) {\n      this.getImage(this.props.image);\n    } else if (Object.keys(this.props.user).length) {\n      if (this.props.user.hasOwnProperty(\"avatar\")) {\n        const avatarImage = this.props.user.avatar;\n        this.getImage(avatarImage);\n      } else {\n        const uid = this.props.user.uid;\n        const char = this.props.user.name.charAt(0).toUpperCase();\n\n        const avatarImage = this.generateAvatar(uid, char);\n        this.getImage(avatarImage);\n      }\n    } else if (Object.keys(this.props.group).length) {\n      if (this.props.group.hasOwnProperty(\"icon\")) {\n        const avatarImage = this.props.group.icon;\n        this.getImage(avatarImage);\n      } else {\n        const guid = this.props.group.guid;\n        const char = this.props.group.name.charAt(0).toUpperCase();\n\n        const avatarImage = this.generateAvatar(guid, char);\n        this.getImage(avatarImage);\n      }\n    }\n  };\n\n  getImage = (image) => {\n    let img = new Image();\n    img.src = image;\n    img.onload = () => {\n      if (this._isMounted) {\n        this.setState({ avatarImage: image });\n      }\n    };\n  };\n\n  generateAvatar = (generator, data) => {\n    const stringToColour = function (str) {\n      let hash = 0;\n      for (let i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n      }\n\n      let colour = \"#\";\n      for (let i = 0; i < 3; i++) {\n        let value = (hash >> (i * 8)) & 0xff;\n        colour += (\"00\" + value.toString(16)).substr(-2);\n      }\n      return colour;\n    };\n\n    const canvas = document.createElement(\"canvas\");\n    const context = canvas.getContext(\"2d\");\n\n    canvas.width = 200;\n    canvas.height = 200;\n\n    // Draw background\n    context.fillStyle = stringToColour(generator);\n    context.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw text\n    context.font = \"bold 100px 'Inter', sans-serif\";\n    context.fillStyle = \"white\"; //foregroundColor;\n    context.textAlign = \"center\";\n    context.textBaseline = \"middle\";\n    context.fillText(data, canvas.width / 2, canvas.height / 2);\n\n    return canvas.toDataURL(\"image/png\");\n  };\n\n  render() {\n    const borderWidth = this.props.borderWidth;\n    const borderStyle = this.props.borderStyle;\n    const borderColor = this.props.borderColor;\n    const cornerRadius = this.props.cornerRadius;\n\n    const getStyle = () => ({\n      borderWidth: borderWidth,\n      borderStyle: borderStyle,\n      borderColor: borderColor,\n      borderRadius: cornerRadius,\n    });\n\n    return (\n      <img\n        src={this.state.avatarImage}\n        css={imgStyle()}\n        alt={this.state.avatarImage}\n        style={getStyle()}\n        ref={(el) => {\n          this.imgRef = el;\n        }}\n      />\n    );\n  }\n}\n\n// Specifies the default values for props:\nCometChatAvatar.defaultProps = {\n  borderWidth: \"1px\",\n  borderStyle: \"solid\",\n  borderColor: theme.borderColor.primary,\n  cornerRadius: \"50%\",\n  theme: theme,\n  image: \"\",\n  user: {},\n  group: {},\n};\n\nCometChatAvatar.propTypes = {\n  borderWidth: PropTypes.string,\n  borderStyle: PropTypes.string,\n  borderColor: PropTypes.string,\n  cornerRadius: PropTypes.string,\n  image: PropTypes.string,\n  theme: PropTypes.object,\n  user: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.shape(CometChat.User),\n  ]),\n  group: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.shape(CometChat.Group),\n  ]),\n};\n\nexport { CometChatAvatar };\n"]},"metadata":{},"sourceType":"module"}