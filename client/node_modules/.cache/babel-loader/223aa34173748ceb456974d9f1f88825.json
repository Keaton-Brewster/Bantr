{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Messages/Extensions/CometChatMessageReactions/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { Emoji } from \"emoji-mart\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport * as enums from \"../../../../util/enums.js\";\nimport { checkMessageForExtensionsData } from \"../../../../util/common\";\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\nimport { messageReactionsStyle, reactionCountStyle, emojiButtonStyle } from \"./style\";\nimport reactIcon from \"./resources/reactions.svg\";\n\nclass CometChatMessageReactions extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.reactToMessages = emoji => {\n      CometChat.callExtension(\"reactions\", \"POST\", \"v1/react\", {\n        msgId: this.state.message.id,\n        emoji: emoji.colons\n      }).then(response => {\n        // Reaction failed\n        if (response.hasOwnProperty(\"success\") === false || response.hasOwnProperty(\"success\") && response[\"success\"] === false) {\n          this.props.actionGenerated(enums.ACTIONS[\"ERROR\"], [], \"SOMETHING_WRONG\");\n        }\n      }).catch(error => this.props.actionGenerated(enums.ACTIONS[\"ERROR\"], [], \"SOMETHING_WRONG\"));\n    };\n\n    this.triggerEmojiClick = event => {\n      event.stopPropagation();\n      event.currentTarget.querySelector(\".emoji-mart-emoji\").click();\n    };\n\n    this.getMessageReactions = reaction => {\n      if (reaction === null) {\n        return null;\n      }\n\n      const messageReactions = Object.keys(reaction).map((data, key) => {\n        const reactionData = reaction[data];\n        const reactionName = data.replaceAll(\":\", \"\");\n        const reactionCount = Object.keys(reactionData).length;\n\n        if (!reactionCount) {\n          return null;\n        }\n\n        const userList = [];\n        let reactionTitle = \"\";\n\n        for (const user in reactionData) {\n          userList.push(reactionData[user][\"name\"]);\n        }\n\n        if (userList.length) {\n          reactionTitle = userList.join(\", \");\n          const str = ` ${Translator.translate(\"REACTED\", this.props.lang)}`;\n          reactionTitle = reactionTitle.concat(str);\n        }\n\n        const reactionClassName = `reaction reaction__${reactionName}`;\n        return jsx(\"div\", {\n          key: key,\n          css: messageReactionsStyle(this.props, reactionData, this.context),\n          className: reactionClassName,\n          title: reactionTitle,\n          onClick: this.triggerEmojiClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }\n        }, jsx(Emoji, {\n          emoji: {\n            id: reactionName\n          },\n          size: 16,\n          native: true,\n          onClick: this.reactToMessages,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }\n        }), jsx(\"span\", {\n          css: reactionCountStyle(this.context),\n          className: \"reaction__count\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 21\n          }\n        }, reactionCount));\n      });\n      return messageReactions;\n    };\n\n    this.addMessageReaction = () => {\n      //If reacting to messages feature is disabled\n      if (this.props.enableMessageReaction === false) {\n        return null;\n      }\n\n      const addReactionEmoji = jsx(\"div\", {\n        key: \"-1\",\n        css: messageReactionsStyle(this.props, {}, this.context),\n        className: \"reaction reaction__add\",\n        title: Translator.translate(\"ADD_REACTION\", this.props.lang),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        css: emojiButtonStyle(reactIcon, this.context),\n        className: \"button__reacttomessage\",\n        onClick: () => this.props.actionGenerated(enums.ACTIONS[\"REACT_TO_MESSAGE\"], this.props.message),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }\n      }, jsx(\"i\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }\n      })));\n      return addReactionEmoji;\n    };\n\n    this.state = {\n      message: props.message,\n      reaction: props.reaction\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.message !== this.props.message) {\n      this.setState({\n        message: this.props.message\n      });\n    }\n  }\n\n  render() {\n    const reaction = checkMessageForExtensionsData(this.state.message, \"reactions\");\n    const messageReactions = this.getMessageReactions(reaction);\n    const addReactionEmoji = this.addMessageReaction();\n\n    if (messageReactions !== null && messageReactions.length && addReactionEmoji !== null) {\n      if (this.props.message.messageFrom === \"receiver\") {\n        messageReactions.push(addReactionEmoji);\n      } else {\n        messageReactions.unshift(addReactionEmoji);\n      }\n    }\n\n    return messageReactions;\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatMessageReactions.contextType = CometChatContext;\nCometChatMessageReactions.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n  enableMessageReaction: false\n};\nCometChatMessageReactions.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n  enableMessageReaction: PropTypes.bool\n};\nexport { CometChatMessageReactions };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Messages/Extensions/CometChatMessageReactions/index.js"],"names":["React","jsx","PropTypes","Emoji","CometChat","CometChatContext","enums","checkMessageForExtensionsData","theme","Translator","messageReactionsStyle","reactionCountStyle","emojiButtonStyle","CometChatMessageReactions","Component","constructor","props","reactToMessages","emoji","callExtension","msgId","state","message","id","colons","then","response","hasOwnProperty","actionGenerated","ACTIONS","catch","error","triggerEmojiClick","event","stopPropagation","currentTarget","querySelector","click","getMessageReactions","reaction","messageReactions","Object","keys","map","data","key","reactionData","reactionName","replaceAll","reactionCount","length","userList","reactionTitle","user","push","join","str","translate","lang","concat","reactionClassName","context","addMessageReaction","enableMessageReaction","addReactionEmoji","reactIcon","componentDidUpdate","prevProps","prevState","setState","render","messageFrom","unshift","contextType","defaultProps","getDefaultLanguage","propTypes","string","object","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { Emoji } from \"emoji-mart\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport * as enums from \"../../../../util/enums.js\";\nimport { checkMessageForExtensionsData } from \"../../../../util/common\";\n\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\n\nimport {\n    messageReactionsStyle,\n    reactionCountStyle,\n    emojiButtonStyle,\n} from \"./style\";\n\nimport reactIcon from \"./resources/reactions.svg\";\n\nclass CometChatMessageReactions extends React.Component {\n\n    static contextType = CometChatContext;\n\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            message: props.message,\n            reaction: props.reaction\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        if (prevProps.message !== this.props.message) {\n            this.setState({ message: this.props.message });\n        }\n    }\n\n    reactToMessages = (emoji) => {\n\n        CometChat.callExtension(\"reactions\", \"POST\", \"v1/react\", {\n            msgId: this.state.message.id,\n            emoji: emoji.colons,\n        }).then(response => {\n\n            // Reaction failed\n            if (response.hasOwnProperty(\"success\") === false || (response.hasOwnProperty(\"success\") && response[\"success\"] === false)) {\n                this.props.actionGenerated(enums.ACTIONS[\"ERROR\"], [], \"SOMETHING_WRONG\");\n            }\n\n        }).catch(error => this.props.actionGenerated(enums.ACTIONS[\"ERROR\"], [], \"SOMETHING_WRONG\"));\n    }\n\n    triggerEmojiClick = (event) => {\n\n        event.stopPropagation();\n        event.currentTarget.querySelector(\".emoji-mart-emoji\").click();\n    }\n\n    getMessageReactions = (reaction) => {\n\n        if(reaction === null) {\n            return null;\n        }\n\n        const messageReactions = Object.keys(reaction).map((data, key) => {\n\n            const reactionData = reaction[data];\n            const reactionName = data.replaceAll(\":\", \"\");\n            const reactionCount = Object.keys(reactionData).length;\n\n            if (!reactionCount) {\n                return null;\n            }\n\n            const userList = [];\n            let reactionTitle = \"\";\n\n            for (const user in reactionData) {\n                userList.push(reactionData[user][\"name\"]);\n            }\n\n            if (userList.length) {\n\n                reactionTitle = userList.join(\", \");\n                const str = ` ${Translator.translate(\"REACTED\", this.props.lang)}`;\n                reactionTitle = reactionTitle.concat(str);\n            }\n\n            const reactionClassName = `reaction reaction__${reactionName}`;\n            return (\n                <div\n                key={key}\n                css={messageReactionsStyle(this.props, reactionData, this.context)}\n                className={reactionClassName}\n                title={reactionTitle}\n                onClick={this.triggerEmojiClick}>\n                    <Emoji\n                    emoji={{ id: reactionName }}\n                    size={16}\n                    native\n                    onClick={this.reactToMessages} />\n                    <span css={reactionCountStyle(this.context)} className=\"reaction__count\">{reactionCount}</span>\n                </div>\n            );\n        });\n\n        return messageReactions;\n    }\n\n    addMessageReaction = () => {\n\n        //If reacting to messages feature is disabled\n        if (this.props.enableMessageReaction === false) {\n            return null;\n        }\n\n        const addReactionEmoji = (\n            <div key=\"-1\" css={messageReactionsStyle(this.props, {}, this.context)} className=\"reaction reaction__add\" title={Translator.translate(\"ADD_REACTION\", this.props.lang)}>\n                <button type=\"button\" css={emojiButtonStyle(reactIcon, this.context)} className=\"button__reacttomessage\" onClick={() => this.props.actionGenerated(enums.ACTIONS[\"REACT_TO_MESSAGE\"], this.props.message)}>\n                    <i></i>\n                </button>\n            </div>\n        );\n\n        return addReactionEmoji;\n    }\n\n    render() {\n\n        const reaction = checkMessageForExtensionsData(this.state.message, \"reactions\");\n        const messageReactions = this.getMessageReactions(reaction);\n\n        const addReactionEmoji = this.addMessageReaction();\n\n        if (messageReactions !== null && messageReactions.length && addReactionEmoji !== null) {\n\n            if (this.props.message.messageFrom === \"receiver\") {\n                messageReactions.push(addReactionEmoji);\n            } else {\n                messageReactions.unshift(addReactionEmoji);\n            }\n        }\n\n        return (messageReactions);\n    }\n}\n\n// Specifies the default values for props:\nCometChatMessageReactions.defaultProps = {\n\tlang: Translator.getDefaultLanguage(),\n\ttheme: theme,\n\tenableMessageReaction: false,\n};\n\nCometChatMessageReactions.propTypes = {\n\tlang: PropTypes.string,\n\ttheme: PropTypes.object,\n\tenableMessageReaction: PropTypes.bool,\n};\n\nexport { CometChatMessageReactions };"]},"metadata":{},"sourceType":"module"}