{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/Comps/MainContent/index.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useRef, createContext, useContext } from \"react\";\nimport { useViewport } from \"../../utils/ViewportProvider\";\nimport MessagesTopMenu from \"./Messaging/MessagesTopMenu\";\nimport Messaging from \"./Messaging\";\nimport ConversationInfoScreen from \"./Messaging/ConversationInfoScreen\";\nimport { useConversations } from \"../../utils/ConversationProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mainContentContext = /*#__PURE__*/createContext();\nexport function useMainContent() {\n  _s();\n\n  return useContext(mainContentContext);\n}\n\n_s(useMainContent, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default function MainContent() {\n  _s2();\n\n  const [activeContent, setActiveContent] = useState(\"conversation\"); // Container ref is used to give refernce of width to the\n  // Chat input so that is always is 100% width of its parent\n\n  const containerRef = useRef();\n  const {\n    selectedConversation\n  } = useConversations();\n  const {\n    show\n  } = useViewport();\n\n  function renderSwitch() {\n    switch (activeContent) {\n      case \"conversation info\":\n        return /*#__PURE__*/_jsxDEV(ConversationInfoScreen, {\n          containerRef: containerRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 16\n        }, this);\n\n      case \"messaging\":\n        return /*#__PURE__*/_jsxDEV(Messaging, {\n          containerRef: containerRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 16\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(Messaging, {\n          containerRef: containerRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 16\n        }, this);\n    }\n  }\n\n  const value = {\n    setActiveContent\n  };\n  return /*#__PURE__*/_jsxDEV(mainContentContext.Provider, {\n    value: value,\n    children: [/*#__PURE__*/_jsxDEV(MessagesTopMenu, {\n      conversationName: selectedConversation.name,\n      containerRef: containerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: show.mainContent ? \"show\" : \"hide\",\n      ref: containerRef,\n      children: renderSwitch()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(MainContent, \"it/mBQZfUbgrqlNOzu2zmgJn/Mo=\", false, function () {\n  return [useConversations, useViewport];\n});\n\n_c = MainContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainContent\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/Comps/MainContent/index.jsx"],"names":["useState","useRef","createContext","useContext","useViewport","MessagesTopMenu","Messaging","ConversationInfoScreen","useConversations","mainContentContext","useMainContent","MainContent","activeContent","setActiveContent","containerRef","selectedConversation","show","renderSwitch","value","name","mainContent"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,aAA3B,EAA0CC,UAA1C,QAA4D,OAA5D;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,sBAAP,MAAmC,oCAAnC;AACA,SAASC,gBAAT,QAAiC,kCAAjC;;AAEA,MAAMC,kBAAkB,gBAAGP,aAAa,EAAxC;AAEA,OAAO,SAASQ,cAAT,GAA0B;AAAA;;AAC/B,SAAOP,UAAU,CAACM,kBAAD,CAAjB;AACD;;GAFeC,c;;AAIhB,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,cAAD,CAAlD,CADoC,CAEpC;AACA;;AACA,QAAMc,YAAY,GAAGb,MAAM,EAA3B;AACA,QAAM;AAAEc,IAAAA;AAAF,MAA2BP,gBAAgB,EAAjD;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAWZ,WAAW,EAA5B;;AAEA,WAASa,YAAT,GAAwB;AACtB,YAAQL,aAAR;AACE,WAAK,mBAAL;AACE,4BAAO,QAAC,sBAAD;AAAwB,UAAA,YAAY,EAAEE;AAAtC;AAAA;AAAA;AAAA;AAAA,gBAAP;;AACF,WAAK,WAAL;AACE,4BAAO,QAAC,SAAD;AAAW,UAAA,YAAY,EAAEA;AAAzB;AAAA;AAAA;AAAA;AAAA,gBAAP;;AACF;AACE,4BAAO,QAAC,SAAD;AAAW,UAAA,YAAY,EAAEA;AAAzB;AAAA;AAAA;AAAA;AAAA,gBAAP;AANJ;AAQD;;AAED,QAAMI,KAAK,GAAG;AAAEL,IAAAA;AAAF,GAAd;AAEA,sBACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEK,KAApC;AAAA,4BACE,QAAC,eAAD;AACE,MAAA,gBAAgB,EAAEH,oBAAoB,CAACI,IADzC;AAEE,MAAA,YAAY,EAAEL;AAFhB;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAK,MAAA,SAAS,EAAEE,IAAI,CAACI,WAAL,GAAmB,MAAnB,GAA4B,MAA5C;AAAoD,MAAA,GAAG,EAAEN,YAAzD;AAAA,gBACGG,YAAY;AADf;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;IAhCuBN,W;UAKWH,gB,EAChBJ,W;;;KANKO,W","sourcesContent":["import { useState, useRef, createContext, useContext } from \"react\";\nimport { useViewport } from \"../../utils/ViewportProvider\";\nimport MessagesTopMenu from \"./Messaging/MessagesTopMenu\";\nimport Messaging from \"./Messaging\";\nimport ConversationInfoScreen from \"./Messaging/ConversationInfoScreen\";\nimport { useConversations } from \"../../utils/ConversationProvider\";\n\nconst mainContentContext = createContext();\n\nexport function useMainContent() {\n  return useContext(mainContentContext);\n}\n\nexport default function MainContent() {\n  const [activeContent, setActiveContent] = useState(\"conversation\");\n  // Container ref is used to give refernce of width to the\n  // Chat input so that is always is 100% width of its parent\n  const containerRef = useRef();\n  const { selectedConversation } = useConversations();\n  const { show } = useViewport();\n\n  function renderSwitch() {\n    switch (activeContent) {\n      case \"conversation info\":\n        return <ConversationInfoScreen containerRef={containerRef} />;\n      case \"messaging\":\n        return <Messaging containerRef={containerRef} />;\n      default:\n        return <Messaging containerRef={containerRef} />;\n    }\n  }\n\n  const value = { setActiveContent };\n\n  return (\n    <mainContentContext.Provider value={value}>\n      <MessagesTopMenu\n        conversationName={selectedConversation.name}\n        containerRef={containerRef}\n      />\n      <div className={show.mainContent ? \"show\" : \"hide\"} ref={containerRef}>\n        {renderSwitch()}\n      </div>\n    </mainContentContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}