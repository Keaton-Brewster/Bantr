{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/Comps/MainContent/Messaging/ConversationInfoScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Spinner, ListGroup } from \"react-bootstrap\";\nimport { useConversations } from \"../../../utils/ConversationProvider\";\nimport UserCard from \"../../UserCard\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ConversationInfoScreen({\n  containerRef\n}) {\n  _s();\n\n  const [convoInfo, setConvoInfo] = useState();\n  const {\n    selectedConversation\n  } = useConversations();\n  const [loading, setLoading] = useState(true);\n\n  function trimMessages(conversation) {\n    const mutatedConversation = { ...conversation\n    };\n    mutatedConversation.messages = [];\n    return mutatedConversation;\n  }\n\n  async function getConversationInformation() {\n    const filteredConversation = trimMessages(selectedConversation);\n    const conversationInformation = await axios.get(`api/conversations/getInfo/${JSON.stringify(filteredConversation)}`);\n    setConvoInfo(conversationInformation.data);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    getConversationInformation(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\",\n      className: \"spinner\",\n      role: \"status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversationInfoScreen\",\n      children: /*#__PURE__*/_jsxDEV(ListGroup, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Members\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), convoInfo.members.map((member, index) => {\n          return /*#__PURE__*/_jsxDEV(UserCard, {\n            member: member\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 22\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(ConversationInfoScreen, \"zKr4Vs6FaFzBsZxl3+yzQvkPIHw=\", false, function () {\n  return [useConversations];\n});\n\n_c = ConversationInfoScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationInfoScreen\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/Comps/MainContent/Messaging/ConversationInfoScreen.jsx"],"names":["useState","useEffect","Spinner","ListGroup","useConversations","UserCard","axios","ConversationInfoScreen","containerRef","convoInfo","setConvoInfo","selectedConversation","loading","setLoading","trimMessages","conversation","mutatedConversation","messages","getConversationInformation","filteredConversation","conversationInformation","get","JSON","stringify","data","members","map","member","index"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,iBAAnC;AACA,SAASC,gBAAT,QAAiC,qCAAjC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,eAAe,SAASC,sBAAT,CAAgC;AAAEC,EAAAA;AAAF,CAAhC,EAAkD;AAAA;;AAC/D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,EAA1C;AACA,QAAM;AAAEW,IAAAA;AAAF,MAA2BP,gBAAgB,EAAjD;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC;;AAEA,WAASc,YAAT,CAAsBC,YAAtB,EAAoC;AAClC,UAAMC,mBAAmB,GAAG,EAAE,GAAGD;AAAL,KAA5B;AACAC,IAAAA,mBAAmB,CAACC,QAApB,GAA+B,EAA/B;AACA,WAAOD,mBAAP;AACD;;AAED,iBAAeE,0BAAf,GAA4C;AAC1C,UAAMC,oBAAoB,GAAGL,YAAY,CAACH,oBAAD,CAAzC;AACA,UAAMS,uBAAuB,GAAG,MAAMd,KAAK,CAACe,GAAN,CACnC,6BAA4BC,IAAI,CAACC,SAAL,CAAeJ,oBAAf,CAAqC,EAD9B,CAAtC;AAGAT,IAAAA,YAAY,CAACU,uBAAuB,CAACI,IAAzB,CAAZ;AACAX,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AAEDZ,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,0BAA0B,GADZ,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACE;AAAA,cACGN,OAAO,gBACN,QAAC,OAAD;AAAS,MAAA,SAAS,EAAC,QAAnB;AAA4B,MAAA,SAAS,EAAC,SAAtC;AAAgD,MAAA,IAAI,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA,YADM,gBAGN;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,6BACE,QAAC,SAAD;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEGH,SAAS,CAACgB,OAAV,CAAkBC,GAAlB,CAAsB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACxC,8BAAO,QAAC,QAAD;AAAU,YAAA,MAAM,EAAED;AAAlB,aAA+BC,KAA/B;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,SAFA,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJJ,mBADF;AAgBD;;GAzCuBrB,sB;UAEWH,gB;;;KAFXG,sB","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Spinner, ListGroup } from \"react-bootstrap\";\nimport { useConversations } from \"../../../utils/ConversationProvider\";\nimport UserCard from \"../../UserCard\";\nimport axios from \"axios\";\n\nexport default function ConversationInfoScreen({ containerRef }) {\n  const [convoInfo, setConvoInfo] = useState();\n  const { selectedConversation } = useConversations();\n  const [loading, setLoading] = useState(true);\n\n  function trimMessages(conversation) {\n    const mutatedConversation = { ...conversation };\n    mutatedConversation.messages = [];\n    return mutatedConversation;\n  }\n\n  async function getConversationInformation() {\n    const filteredConversation = trimMessages(selectedConversation);\n    const conversationInformation = await axios.get(\n      `api/conversations/getInfo/${JSON.stringify(filteredConversation)}`\n    );\n    setConvoInfo(conversationInformation.data);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    getConversationInformation();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <Spinner animation=\"border\" className=\"spinner\" role=\"status\" />\n      ) : (\n        <div className=\"conversationInfoScreen\">\n          <ListGroup>\n            <h3>Members</h3>\n            {convoInfo.members.map((member, index) => {\n              return <UserCard member={member} key={index} />;\n            })}\n          </ListGroup>\n        </div>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}