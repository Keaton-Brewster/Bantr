{"ast":null,"code":"import _extends from \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatSenderPollMessageBubble/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChatMessageActions, CometChatThreadedMessageReplyCount, CometChatReadReceipt } from \"../../\";\nimport { CometChatMessageReactions } from \"../\";\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport { checkMessageForExtensionsData } from \"../../../../util/common\";\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\nimport { messageContainerStyle, messageWrapperStyle, messageTxtWrapperStyle, pollQuestionStyle, pollAnswerStyle, pollTotalStyle, pollPercentStyle, answerWrapperStyle, messageInfoWrapperStyle, messageReactionsWrapperStyle } from \"./style\";\n\nclass CometChatSenderPollMessageBubble extends React.Component {\n  constructor(props) {\n    super(props);\n    this.requestInProgress = null;\n    this.messageFrom = \"sender\";\n\n    this.handleMouseHover = () => {\n      this.setState(this.toggleHoverState);\n    };\n\n    this.toggleHoverState = state => {\n      return {\n        isHovering: !state.isHovering\n      };\n    };\n\n    const message = Object.assign({}, props.message, {\n      messageFrom: this.messageFrom\n    });\n    this.state = {\n      message: message,\n      isHovering: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const previousMessageStr = JSON.stringify(prevProps.message);\n    const currentMessageStr = JSON.stringify(this.props.message);\n\n    if (previousMessageStr !== currentMessageStr) {\n      const message = Object.assign({}, this.props.message, {\n        messageFrom: this.messageFrom\n      });\n      this.setState({\n        message: message\n      });\n    }\n  }\n\n  render() {\n    if (!this.props.message.hasOwnProperty(\"metadata\")) {\n      return null;\n    }\n\n    if (!this.props.message.metadata.hasOwnProperty(\"@injected\")) {\n      return null;\n    }\n\n    if (!this.props.message.metadata[\"@injected\"].hasOwnProperty(\"extensions\")) {\n      return null;\n    }\n\n    if (!this.props.message.metadata[\"@injected\"][\"extensions\"].hasOwnProperty(\"polls\")) {\n      return null;\n    }\n\n    const pollOptions = [];\n    const pollExtensionData = this.props.message.metadata[\"@injected\"][\"extensions\"][\"polls\"];\n    this.pollId = pollExtensionData.id;\n    const total = pollExtensionData.results.total;\n    let totalText = Translator.translate(\"NO_VOTE\", this.props.lang);\n\n    if (total === 1) {\n      totalText = `${total} ${Translator.translate(\"VOTE\", this.props.lang)}`;\n    } else if (total > 1) {\n      totalText = `${total} ${Translator.translate(\"VOTES\", this.props.lang)}`;\n    }\n\n    for (const option in pollExtensionData.results.options) {\n      const optionData = pollExtensionData.results.options[option];\n      const vote = optionData[\"count\"];\n      let width = \"0%\";\n\n      if (total) {\n        const fraction = vote / total;\n        width = fraction.toLocaleString(\"en\", {\n          style: \"percent\"\n        });\n      }\n\n      const template = jsx(\"li\", {\n        key: option,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }, jsx(\"div\", {\n        css: pollPercentStyle(this.context, width),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }\n      }, \" \"), jsx(\"div\", {\n        css: answerWrapperStyle(this.context, width),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }\n      }, jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }\n      }, width), jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }\n      }, optionData.text)));\n      pollOptions.push(template);\n    }\n\n    let messageReactions = null;\n    const reactionsData = checkMessageForExtensionsData(this.state.message, \"reactions\");\n\n    if (reactionsData) {\n      if (Object.keys(reactionsData).length) {\n        messageReactions = jsx(\"div\", {\n          css: messageReactionsWrapperStyle(),\n          className: \"message__reaction__wrapper\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 11\n          }\n        }, jsx(CometChatMessageReactions, _extends({}, this.props, {\n          message: this.state.message,\n          reaction: reactionsData,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }\n        })));\n      }\n    }\n\n    let toolTipView = null;\n\n    if (this.state.isHovering) {\n      toolTipView = jsx(CometChatMessageActions, _extends({}, this.props, {\n        message: this.state.message,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    return jsx(\"div\", {\n      css: messageContainerStyle(),\n      className: \"sender__message__container message__poll\",\n      onMouseEnter: this.handleMouseHover,\n      onMouseLeave: this.handleMouseHover,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, toolTipView, jsx(\"div\", {\n      css: messageWrapperStyle(),\n      className: \"message__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }, jsx(\"div\", {\n      css: messageTxtWrapperStyle(this.context),\n      className: \"message__poll__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }\n    }, jsx(\"p\", {\n      css: pollQuestionStyle(),\n      className: \"poll__question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }, pollExtensionData.question), jsx(\"ul\", {\n      css: pollAnswerStyle(this.context),\n      className: \"poll__options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }, pollOptions), jsx(\"p\", {\n      css: pollTotalStyle(),\n      className: \"poll__votes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, totalText))), messageReactions, jsx(\"div\", {\n      css: messageInfoWrapperStyle(),\n      className: \"message__info__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }\n    }, jsx(CometChatThreadedMessageReplyCount, _extends({}, this.props, {\n      message: this.state.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    })), jsx(CometChatReadReceipt, _extends({}, this.props, {\n      message: this.state.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatSenderPollMessageBubble.contextType = CometChatContext;\nCometChatSenderPollMessageBubble.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatSenderPollMessageBubble.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatSenderPollMessageBubble };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatSenderPollMessageBubble/index.js"],"names":["React","jsx","PropTypes","CometChatMessageActions","CometChatThreadedMessageReplyCount","CometChatReadReceipt","CometChatMessageReactions","CometChatContext","checkMessageForExtensionsData","theme","Translator","messageContainerStyle","messageWrapperStyle","messageTxtWrapperStyle","pollQuestionStyle","pollAnswerStyle","pollTotalStyle","pollPercentStyle","answerWrapperStyle","messageInfoWrapperStyle","messageReactionsWrapperStyle","CometChatSenderPollMessageBubble","Component","constructor","props","requestInProgress","messageFrom","handleMouseHover","setState","toggleHoverState","state","isHovering","message","Object","assign","componentDidUpdate","prevProps","previousMessageStr","JSON","stringify","currentMessageStr","render","hasOwnProperty","metadata","pollOptions","pollExtensionData","pollId","id","total","results","totalText","translate","lang","option","options","optionData","vote","width","fraction","toLocaleString","style","template","context","text","push","messageReactions","reactionsData","keys","length","toolTipView","question","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA;;AACA;;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SACEC,uBADF,EAEEC,kCAFF,EAGEC,oBAHF,QAIO,QAJP;AAKA,SAASC,yBAAT,QAA0C,KAA1C;AAEA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,6BAAT,QAA8C,yBAA9C;AAEA,SAASC,KAAT,QAAsB,6BAAtB;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AAEA,SACEC,qBADF,EAEEC,mBAFF,EAGEC,sBAHF,EAIEC,iBAJF,EAKEC,eALF,EAMEC,cANF,EAOEC,gBAPF,EAQEC,kBARF,EASEC,uBATF,EAUEC,4BAVF,QAWO,SAXP;;AAaA,MAAMC,gCAAN,SAA+CrB,KAAK,CAACsB,SAArD,CAA+D;AAM7DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAJnBC,iBAImB,GAJC,IAID;AAAA,SAHnBC,WAGmB,GAHL,QAGK;;AAAA,SAwBnBC,gBAxBmB,GAwBA,MAAM;AACvB,WAAKC,QAAL,CAAc,KAAKC,gBAAnB;AACD,KA1BkB;;AAAA,SA4BnBA,gBA5BmB,GA4BCC,KAAD,IAAW;AAC5B,aAAO;AACLC,QAAAA,UAAU,EAAE,CAACD,KAAK,CAACC;AADd,OAAP;AAGD,KAhCkB;;AAEjB,UAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,KAAK,CAACQ,OAAxB,EAAiC;AAC/CN,MAAAA,WAAW,EAAE,KAAKA;AAD6B,KAAjC,CAAhB;AAIA,SAAKI,KAAL,GAAa;AACXE,MAAAA,OAAO,EAAEA,OADE;AAEXD,MAAAA,UAAU,EAAE;AAFD,KAAb;AAID;;AAEDI,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,UAAMC,kBAAkB,GAAGC,IAAI,CAACC,SAAL,CAAeH,SAAS,CAACJ,OAAzB,CAA3B;AACA,UAAMQ,iBAAiB,GAAGF,IAAI,CAACC,SAAL,CAAe,KAAKf,KAAL,CAAWQ,OAA1B,CAA1B;;AAEA,QAAIK,kBAAkB,KAAKG,iBAA3B,EAA8C;AAC5C,YAAMR,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKV,KAAL,CAAWQ,OAA7B,EAAsC;AACpDN,QAAAA,WAAW,EAAE,KAAKA;AADkC,OAAtC,CAAhB;AAGA,WAAKE,QAAL,CAAc;AAAEI,QAAAA,OAAO,EAAEA;AAAX,OAAd;AACD;AACF;;AAYDS,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKjB,KAAL,CAAWQ,OAAX,CAAmBU,cAAnB,CAAkC,UAAlC,CAAL,EAAoD;AAClD,aAAO,IAAP;AACD;;AAED,QAAI,CAAC,KAAKlB,KAAL,CAAWQ,OAAX,CAAmBW,QAAnB,CAA4BD,cAA5B,CAA2C,WAA3C,CAAL,EAA8D;AAC5D,aAAO,IAAP;AACD;;AAED,QACE,CAAC,KAAKlB,KAAL,CAAWQ,OAAX,CAAmBW,QAAnB,CAA4B,WAA5B,EAAyCD,cAAzC,CAAwD,YAAxD,CADH,EAEE;AACA,aAAO,IAAP;AACD;;AAED,QACE,CAAC,KAAKlB,KAAL,CAAWQ,OAAX,CAAmBW,QAAnB,CAA4B,WAA5B,EAAyC,YAAzC,EAAuDD,cAAvD,CACC,OADD,CADH,EAIE;AACA,aAAO,IAAP;AACD;;AAED,UAAME,WAAW,GAAG,EAApB;AACA,UAAMC,iBAAiB,GACrB,KAAKrB,KAAL,CAAWQ,OAAX,CAAmBW,QAAnB,CAA4B,WAA5B,EAAyC,YAAzC,EAAuD,OAAvD,CADF;AAGA,SAAKG,MAAL,GAAcD,iBAAiB,CAACE,EAAhC;AACA,UAAMC,KAAK,GAAGH,iBAAiB,CAACI,OAAlB,CAA0BD,KAAxC;AACA,QAAIE,SAAS,GAAGxC,UAAU,CAACyC,SAAX,CAAqB,SAArB,EAAgC,KAAK3B,KAAL,CAAW4B,IAA3C,CAAhB;;AAEA,QAAIJ,KAAK,KAAK,CAAd,EAAiB;AACfE,MAAAA,SAAS,GAAI,GAAEF,KAAM,IAAGtC,UAAU,CAACyC,SAAX,CAAqB,MAArB,EAA6B,KAAK3B,KAAL,CAAW4B,IAAxC,CAA8C,EAAtE;AACD,KAFD,MAEO,IAAIJ,KAAK,GAAG,CAAZ,EAAe;AACpBE,MAAAA,SAAS,GAAI,GAAEF,KAAM,IAAGtC,UAAU,CAACyC,SAAX,CAAqB,OAArB,EAA8B,KAAK3B,KAAL,CAAW4B,IAAzC,CAA+C,EAAvE;AACD;;AAED,SAAK,MAAMC,MAAX,IAAqBR,iBAAiB,CAACI,OAAlB,CAA0BK,OAA/C,EAAwD;AACtD,YAAMC,UAAU,GAAGV,iBAAiB,CAACI,OAAlB,CAA0BK,OAA1B,CAAkCD,MAAlC,CAAnB;AACA,YAAMG,IAAI,GAAGD,UAAU,CAAC,OAAD,CAAvB;AAEA,UAAIE,KAAK,GAAG,IAAZ;;AACA,UAAIT,KAAJ,EAAW;AACT,cAAMU,QAAQ,GAAGF,IAAI,GAAGR,KAAxB;AACAS,QAAAA,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,IAAxB,EAA8B;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAA9B,CAAR;AACD;;AAED,YAAMC,QAAQ,GACZ;AAAI,QAAA,GAAG,EAAER,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,GAAG,EAAEpC,gBAAgB,CAAC,KAAK6C,OAAN,EAAeL,KAAf,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE;AAAK,QAAA,GAAG,EAAEvC,kBAAkB,CAAC,KAAK4C,OAAN,EAAeL,KAAf,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOA,KAAP,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIF,UAAU,CAACQ,IAAf,CAFF,CAFF,CADF;AASAnB,MAAAA,WAAW,CAACoB,IAAZ,CAAiBH,QAAjB;AACD;;AAED,QAAII,gBAAgB,GAAG,IAAvB;AACA,UAAMC,aAAa,GAAG1D,6BAA6B,CACjD,KAAKsB,KAAL,CAAWE,OADsC,EAEjD,WAFiD,CAAnD;;AAIA,QAAIkC,aAAJ,EAAmB;AACjB,UAAIjC,MAAM,CAACkC,IAAP,CAAYD,aAAZ,EAA2BE,MAA/B,EAAuC;AACrCH,QAAAA,gBAAgB,GACd;AACE,UAAA,GAAG,EAAE7C,4BAA4B,EADnC;AAEE,UAAA,SAAS,EAAC,4BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIE,IAAC,yBAAD,eACM,KAAKI,KADX;AAEE,UAAA,OAAO,EAAE,KAAKM,KAAL,CAAWE,OAFtB;AAGE,UAAA,QAAQ,EAAEkC,aAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAJF,CADF;AAYD;AACF;;AAED,QAAIG,WAAW,GAAG,IAAlB;;AACA,QAAI,KAAKvC,KAAL,CAAWC,UAAf,EAA2B;AACzBsC,MAAAA,WAAW,GACT,IAAC,uBAAD,eAA6B,KAAK7C,KAAlC;AAAyC,QAAA,OAAO,EAAE,KAAKM,KAAL,CAAWE,OAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAGD;;AAED,WACE;AACE,MAAA,GAAG,EAAErB,qBAAqB,EAD5B;AAEE,MAAA,SAAS,EAAC,0CAFZ;AAGE,MAAA,YAAY,EAAE,KAAKgB,gBAHrB;AAIE,MAAA,YAAY,EAAE,KAAKA,gBAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMG0C,WANH,EAQE;AAAK,MAAA,GAAG,EAAEzD,mBAAmB,EAA7B;AAAiC,MAAA,SAAS,EAAC,kBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,GAAG,EAAEC,sBAAsB,CAAC,KAAKiD,OAAN,CAD7B;AAEE,MAAA,SAAS,EAAC,wBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAG,MAAA,GAAG,EAAEhD,iBAAiB,EAAzB;AAA6B,MAAA,SAAS,EAAC,gBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG+B,iBAAiB,CAACyB,QADrB,CAJF,EAOE;AAAI,MAAA,GAAG,EAAEvD,eAAe,CAAC,KAAK+C,OAAN,CAAxB;AAAwC,MAAA,SAAS,EAAC,eAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGlB,WADH,CAPF,EAUE;AAAG,MAAA,GAAG,EAAE5B,cAAc,EAAtB;AAA0B,MAAA,SAAS,EAAC,aAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGkC,SADH,CAVF,CADF,CARF,EAyBGe,gBAzBH,EA2BE;AAAK,MAAA,GAAG,EAAE9C,uBAAuB,EAAjC;AAAqC,MAAA,SAAS,EAAC,wBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,IAAC,kCAAD,eACM,KAAKK,KADX;AAEE,MAAA,OAAO,EAAE,KAAKM,KAAL,CAAWE,OAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,EAKE,IAAC,oBAAD,eAA0B,KAAKR,KAA/B;AAAsC,MAAA,OAAO,EAAE,KAAKM,KAAL,CAAWE,OAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OALF,CA3BF,CADF;AAqCD;;AArK4D,C,CAwK/D;;;AAxKMX,gC,CAIGkD,W,GAAchE,gB;AAqKvBc,gCAAgC,CAACmD,YAAjC,GAAgD;AAC9CpB,EAAAA,IAAI,EAAE1C,UAAU,CAAC+D,kBAAX,EADwC;AAE9ChE,EAAAA,KAAK,EAAEA;AAFuC,CAAhD;AAKAY,gCAAgC,CAACqD,SAAjC,GAA6C;AAC3CtB,EAAAA,IAAI,EAAElD,SAAS,CAACyE,MAD2B;AAE3ClE,EAAAA,KAAK,EAAEP,SAAS,CAAC0E;AAF0B,CAA7C;AAKA,SAASvD,gCAAT","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  CometChatMessageActions,\n  CometChatThreadedMessageReplyCount,\n  CometChatReadReceipt,\n} from \"../../\";\nimport { CometChatMessageReactions } from \"../\";\n\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport { checkMessageForExtensionsData } from \"../../../../util/common\";\n\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\n\nimport {\n  messageContainerStyle,\n  messageWrapperStyle,\n  messageTxtWrapperStyle,\n  pollQuestionStyle,\n  pollAnswerStyle,\n  pollTotalStyle,\n  pollPercentStyle,\n  answerWrapperStyle,\n  messageInfoWrapperStyle,\n  messageReactionsWrapperStyle,\n} from \"./style\";\n\nclass CometChatSenderPollMessageBubble extends React.Component {\n  pollId;\n  requestInProgress = null;\n  messageFrom = \"sender\";\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n    const message = Object.assign({}, props.message, {\n      messageFrom: this.messageFrom,\n    });\n\n    this.state = {\n      message: message,\n      isHovering: false,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const previousMessageStr = JSON.stringify(prevProps.message);\n    const currentMessageStr = JSON.stringify(this.props.message);\n\n    if (previousMessageStr !== currentMessageStr) {\n      const message = Object.assign({}, this.props.message, {\n        messageFrom: this.messageFrom,\n      });\n      this.setState({ message: message });\n    }\n  }\n\n  handleMouseHover = () => {\n    this.setState(this.toggleHoverState);\n  };\n\n  toggleHoverState = (state) => {\n    return {\n      isHovering: !state.isHovering,\n    };\n  };\n\n  render() {\n    if (!this.props.message.hasOwnProperty(\"metadata\")) {\n      return null;\n    }\n\n    if (!this.props.message.metadata.hasOwnProperty(\"@injected\")) {\n      return null;\n    }\n\n    if (\n      !this.props.message.metadata[\"@injected\"].hasOwnProperty(\"extensions\")\n    ) {\n      return null;\n    }\n\n    if (\n      !this.props.message.metadata[\"@injected\"][\"extensions\"].hasOwnProperty(\n        \"polls\"\n      )\n    ) {\n      return null;\n    }\n\n    const pollOptions = [];\n    const pollExtensionData =\n      this.props.message.metadata[\"@injected\"][\"extensions\"][\"polls\"];\n\n    this.pollId = pollExtensionData.id;\n    const total = pollExtensionData.results.total;\n    let totalText = Translator.translate(\"NO_VOTE\", this.props.lang);\n\n    if (total === 1) {\n      totalText = `${total} ${Translator.translate(\"VOTE\", this.props.lang)}`;\n    } else if (total > 1) {\n      totalText = `${total} ${Translator.translate(\"VOTES\", this.props.lang)}`;\n    }\n\n    for (const option in pollExtensionData.results.options) {\n      const optionData = pollExtensionData.results.options[option];\n      const vote = optionData[\"count\"];\n\n      let width = \"0%\";\n      if (total) {\n        const fraction = vote / total;\n        width = fraction.toLocaleString(\"en\", { style: \"percent\" });\n      }\n\n      const template = (\n        <li key={option}>\n          <div css={pollPercentStyle(this.context, width)}> </div>\n          <div css={answerWrapperStyle(this.context, width)}>\n            <span>{width}</span>\n            <p>{optionData.text}</p>\n          </div>\n        </li>\n      );\n      pollOptions.push(template);\n    }\n\n    let messageReactions = null;\n    const reactionsData = checkMessageForExtensionsData(\n      this.state.message,\n      \"reactions\"\n    );\n    if (reactionsData) {\n      if (Object.keys(reactionsData).length) {\n        messageReactions = (\n          <div\n            css={messageReactionsWrapperStyle()}\n            className=\"message__reaction__wrapper\"\n          >\n            <CometChatMessageReactions\n              {...this.props}\n              message={this.state.message}\n              reaction={reactionsData}\n            />\n          </div>\n        );\n      }\n    }\n\n    let toolTipView = null;\n    if (this.state.isHovering) {\n      toolTipView = (\n        <CometChatMessageActions {...this.props} message={this.state.message} />\n      );\n    }\n\n    return (\n      <div\n        css={messageContainerStyle()}\n        className=\"sender__message__container message__poll\"\n        onMouseEnter={this.handleMouseHover}\n        onMouseLeave={this.handleMouseHover}\n      >\n        {toolTipView}\n\n        <div css={messageWrapperStyle()} className=\"message__wrapper\">\n          <div\n            css={messageTxtWrapperStyle(this.context)}\n            className=\"message__poll__wrapper\"\n          >\n            <p css={pollQuestionStyle()} className=\"poll__question\">\n              {pollExtensionData.question}\n            </p>\n            <ul css={pollAnswerStyle(this.context)} className=\"poll__options\">\n              {pollOptions}\n            </ul>\n            <p css={pollTotalStyle()} className=\"poll__votes\">\n              {totalText}\n            </p>\n          </div>\n        </div>\n\n        {messageReactions}\n\n        <div css={messageInfoWrapperStyle()} className=\"message__info__wrapper\">\n          <CometChatThreadedMessageReplyCount\n            {...this.props}\n            message={this.state.message}\n          />\n          <CometChatReadReceipt {...this.props} message={this.state.message} />\n        </div>\n      </div>\n    );\n  }\n}\n\n// Specifies the default values for props:\nCometChatSenderPollMessageBubble.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n};\n\nCometChatSenderPollMessageBubble.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport { CometChatSenderPollMessageBubble };\n"]},"metadata":{},"sourceType":"module"}