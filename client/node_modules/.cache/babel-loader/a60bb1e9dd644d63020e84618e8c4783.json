{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatStickerKeyboard/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx, keyframes } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport * as enums from \"../../../../util/enums.js\";\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\nimport { stickerWrapperStyle, stickerSectionListStyle, stickerListStyle, sectionListItemStyle, stickerItemStyle, stickerMsgStyle, stickerMsgTxtStyle, stickerCloseStyle } from \"./style\";\nimport closeIcon from \"./resources/close.svg\";\n\nclass CometChatStickerKeyboard extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.getStickers = () => {\n      CometChat.callExtension(\"stickers\", \"GET\", \"v1/fetch\", null).then(stickers => {\n        // Stickers received\n        let activeStickerSet = null;\n        const customStickers = stickers.hasOwnProperty(\"customStickers\") ? stickers[\"customStickers\"] : [];\n        const defaultStickers = stickers.hasOwnProperty(\"defaultStickers\") ? stickers[\"defaultStickers\"] : [];\n        defaultStickers.sort(function (a, b) {\n          return a.stickerSetOrder - b.stickerSetOrder;\n        });\n        customStickers.sort(function (a, b) {\n          return a.stickerSetOrder - b.stickerSetOrder;\n        });\n        const stickerList = [...defaultStickers, ...customStickers];\n\n        if (stickerList.length === 0) {\n          this.decoratorMessage = Translator.translate(\"NO_STICKERS_FOUND\", this.props.lang);\n        }\n\n        const stickerSet = stickerList.reduce((r, sticker, index) => {\n          const {\n            stickerSetName\n          } = sticker;\n\n          if (index === 0) {\n            activeStickerSet = stickerSetName;\n          }\n\n          r[stickerSetName] = [...(r[stickerSetName] || []), { ...sticker\n          }];\n          return r;\n        }, {});\n        let activeStickerList = [];\n\n        if (Object.keys(stickerSet).length) {\n          Object.keys(stickerSet).forEach(key => {\n            stickerSet[key].sort(function (a, b) {\n              return a.stickerOrder - b.stickerOrder;\n            });\n          });\n          activeStickerList = stickerSet[activeStickerSet];\n        }\n\n        this.setState({\n          stickerlist: stickerList,\n          stickerset: stickerSet,\n          activestickerlist: activeStickerList,\n          activestickerset: activeStickerSet\n        });\n      }).catch(error => {\n        this.decoratorMessage = Translator.translate(\"SOMETHING_WRONG\", this.props.lang);\n        this.setState({\n          activestickerlist: [],\n          stickerset: {}\n        });\n      });\n    };\n\n    this.sendStickerMessage = stickerItem => {\n      this.props.actionGenerated(enums.ACTIONS[\"SEND_STICKER\"], stickerItem);\n    };\n\n    this.onStickerSetClicked = sectionItem => {\n      this.setState({\n        activestickerlist: []\n      }, () => {\n        const stickerSet = { ...this.state.stickerset\n        };\n        const activeStickerList = stickerSet[sectionItem];\n        this.setState({\n          activestickerset: sectionItem,\n          activestickerlist: activeStickerList\n        });\n      });\n    };\n\n    this.decoratorMessage = Translator.translate(\"LOADING\", props.lang);\n    this.state = {\n      stickerlist: [],\n      stickerset: {},\n      activestickerlist: [],\n      activestickerset: null\n    };\n  }\n\n  componentDidMount() {\n    this.getStickers();\n  }\n\n  render() {\n    let messageContainer = null;\n\n    if (this.state.activestickerlist.length === 0) {\n      messageContainer = jsx(\"div\", {\n        css: stickerMsgStyle(),\n        className: \"stickers__decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }\n      }, jsx(\"p\", {\n        css: stickerMsgTxtStyle(this.context),\n        className: \"decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }\n      }, this.decoratorMessage));\n    }\n\n    let stickers = null;\n\n    if (Object.keys(this.state.stickerset).length) {\n      const sectionItems = Object.keys(this.state.stickerset).map((sectionItem, key) => {\n        const stickerSetThumbnail = this.state.stickerset[sectionItem][0][\"stickerUrl\"];\n        return jsx(\"div\", {\n          key: key,\n          className: \"stickers__sectionitem\",\n          css: sectionListItemStyle(),\n          onClick: () => this.onStickerSetClicked(sectionItem),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }\n        }, jsx(\"img\", {\n          src: stickerSetThumbnail,\n          alt: sectionItem,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }\n        }));\n      });\n      let activeStickerList = [];\n\n      if (this.state.activestickerlist.length) {\n        const stickerList = [...this.state.activestickerlist];\n        activeStickerList = stickerList.map((stickerItem, key) => {\n          return jsx(\"div\", {\n            key: key,\n            css: stickerItemStyle(this.context),\n            onClick: () => this.sendStickerMessage(stickerItem),\n            className: \"stickers__listitem\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 13\n            }\n          }, jsx(\"img\", {\n            src: stickerItem.stickerUrl,\n            alt: stickerItem.stickerName,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }\n          }));\n        });\n      }\n\n      stickers = jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 9\n        }\n      }, jsx(\"div\", {\n        css: stickerCloseStyle(closeIcon, this.context),\n        className: \"stickers__close\",\n        onClick: () => this.props.actionGenerated(enums.ACTIONS[\"CLOSE_STICKER_KEYBOARD\"]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }\n      }), jsx(\"div\", {\n        css: stickerListStyle(this.props),\n        className: \"stickers__list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }\n      }, activeStickerList), jsx(\"div\", {\n        css: stickerSectionListStyle(this.context),\n        className: \"stickers__sections\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }\n      }, sectionItems));\n    }\n\n    return jsx(\"div\", {\n      css: stickerWrapperStyle(this.context, keyframes),\n      className: \"stickers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 7\n      }\n    }, messageContainer, stickers);\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatStickerKeyboard.contextType = CometChatContext;\nCometChatStickerKeyboard.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatStickerKeyboard.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatStickerKeyboard };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatStickerKeyboard/index.js"],"names":["React","jsx","keyframes","PropTypes","CometChat","CometChatContext","enums","theme","Translator","stickerWrapperStyle","stickerSectionListStyle","stickerListStyle","sectionListItemStyle","stickerItemStyle","stickerMsgStyle","stickerMsgTxtStyle","stickerCloseStyle","CometChatStickerKeyboard","PureComponent","constructor","props","getStickers","callExtension","then","stickers","activeStickerSet","customStickers","hasOwnProperty","defaultStickers","sort","a","b","stickerSetOrder","stickerList","length","decoratorMessage","translate","lang","stickerSet","reduce","r","sticker","index","stickerSetName","activeStickerList","Object","keys","forEach","key","stickerOrder","setState","stickerlist","stickerset","activestickerlist","activestickerset","catch","error","sendStickerMessage","stickerItem","actionGenerated","ACTIONS","onStickerSetClicked","sectionItem","state","componentDidMount","render","messageContainer","context","sectionItems","map","stickerSetThumbnail","stickerUrl","stickerName","closeIcon","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, keyframes } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport * as enums from \"../../../../util/enums.js\";\n\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\n\nimport {\n  stickerWrapperStyle,\n  stickerSectionListStyle,\n  stickerListStyle,\n  sectionListItemStyle,\n  stickerItemStyle,\n  stickerMsgStyle,\n  stickerMsgTxtStyle,\n  stickerCloseStyle,\n} from \"./style\";\n\nimport closeIcon from \"./resources/close.svg\";\n\nclass CometChatStickerKeyboard extends React.PureComponent {\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n\n    this.decoratorMessage = Translator.translate(\"LOADING\", props.lang);\n\n    this.state = {\n      stickerlist: [],\n      stickerset: {},\n      activestickerlist: [],\n      activestickerset: null,\n    };\n  }\n\n  componentDidMount() {\n    this.getStickers();\n  }\n\n  getStickers = () => {\n    CometChat.callExtension(\"stickers\", \"GET\", \"v1/fetch\", null)\n      .then((stickers) => {\n        // Stickers received\n        let activeStickerSet = null;\n        const customStickers = stickers.hasOwnProperty(\"customStickers\")\n          ? stickers[\"customStickers\"]\n          : [];\n        const defaultStickers = stickers.hasOwnProperty(\"defaultStickers\")\n          ? stickers[\"defaultStickers\"]\n          : [];\n\n        defaultStickers.sort(function (a, b) {\n          return a.stickerSetOrder - b.stickerSetOrder;\n        });\n\n        customStickers.sort(function (a, b) {\n          return a.stickerSetOrder - b.stickerSetOrder;\n        });\n\n        const stickerList = [...defaultStickers, ...customStickers];\n\n        if (stickerList.length === 0) {\n          this.decoratorMessage = Translator.translate(\n            \"NO_STICKERS_FOUND\",\n            this.props.lang\n          );\n        }\n\n        const stickerSet = stickerList.reduce((r, sticker, index) => {\n          const { stickerSetName } = sticker;\n          if (index === 0) {\n            activeStickerSet = stickerSetName;\n          }\n\n          r[stickerSetName] = [...(r[stickerSetName] || []), { ...sticker }];\n\n          return r;\n        }, {});\n\n        let activeStickerList = [];\n        if (Object.keys(stickerSet).length) {\n          Object.keys(stickerSet).forEach((key) => {\n            stickerSet[key].sort(function (a, b) {\n              return a.stickerOrder - b.stickerOrder;\n            });\n          });\n\n          activeStickerList = stickerSet[activeStickerSet];\n        }\n\n        this.setState({\n          stickerlist: stickerList,\n          stickerset: stickerSet,\n          activestickerlist: activeStickerList,\n          activestickerset: activeStickerSet,\n        });\n      })\n      .catch((error) => {\n        this.decoratorMessage = Translator.translate(\n          \"SOMETHING_WRONG\",\n          this.props.lang\n        );\n        this.setState({ activestickerlist: [], stickerset: {} });\n      });\n  };\n\n  sendStickerMessage = (stickerItem) => {\n    this.props.actionGenerated(enums.ACTIONS[\"SEND_STICKER\"], stickerItem);\n  };\n\n  onStickerSetClicked = (sectionItem) => {\n    this.setState({ activestickerlist: [] }, () => {\n      const stickerSet = { ...this.state.stickerset };\n      const activeStickerList = stickerSet[sectionItem];\n      this.setState({\n        activestickerset: sectionItem,\n        activestickerlist: activeStickerList,\n      });\n    });\n  };\n\n  render() {\n    let messageContainer = null;\n    if (this.state.activestickerlist.length === 0) {\n      messageContainer = (\n        <div css={stickerMsgStyle()} className=\"stickers__decorator-message\">\n          <p\n            css={stickerMsgTxtStyle(this.context)}\n            className=\"decorator-message\"\n          >\n            {this.decoratorMessage}\n          </p>\n        </div>\n      );\n    }\n\n    let stickers = null;\n    if (Object.keys(this.state.stickerset).length) {\n      const sectionItems = Object.keys(this.state.stickerset).map(\n        (sectionItem, key) => {\n          const stickerSetThumbnail =\n            this.state.stickerset[sectionItem][0][\"stickerUrl\"];\n          return (\n            <div\n              key={key}\n              className=\"stickers__sectionitem\"\n              css={sectionListItemStyle()}\n              onClick={() => this.onStickerSetClicked(sectionItem)}\n            >\n              <img src={stickerSetThumbnail} alt={sectionItem} />\n            </div>\n          );\n        }\n      );\n\n      let activeStickerList = [];\n      if (this.state.activestickerlist.length) {\n        const stickerList = [...this.state.activestickerlist];\n        activeStickerList = stickerList.map((stickerItem, key) => {\n          return (\n            <div\n              key={key}\n              css={stickerItemStyle(this.context)}\n              onClick={() => this.sendStickerMessage(stickerItem)}\n              className=\"stickers__listitem\"\n            >\n              <img src={stickerItem.stickerUrl} alt={stickerItem.stickerName} />\n            </div>\n          );\n        });\n      }\n\n      stickers = (\n        <React.Fragment>\n          <div\n            css={stickerCloseStyle(closeIcon, this.context)}\n            className=\"stickers__close\"\n            onClick={() =>\n              this.props.actionGenerated(\n                enums.ACTIONS[\"CLOSE_STICKER_KEYBOARD\"]\n              )\n            }\n          ></div>\n          <div css={stickerListStyle(this.props)} className=\"stickers__list\">\n            {activeStickerList}\n          </div>\n          <div\n            css={stickerSectionListStyle(this.context)}\n            className=\"stickers__sections\"\n          >\n            {sectionItems}\n          </div>\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <div\n        css={stickerWrapperStyle(this.context, keyframes)}\n        className=\"stickers\"\n      >\n        {messageContainer}\n        {stickers}\n      </div>\n    );\n  }\n}\n\n// Specifies the default values for props:\nCometChatStickerKeyboard.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n};\n\nCometChatStickerKeyboard.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport { CometChatStickerKeyboard };\n"]},"metadata":{},"sourceType":"module"}