{"ast":null,"code":"import _extends from \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Chats/CometChatConversationList/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { ConversationListManager } from \"./controller\";\nimport { CometChatConfirmDialog, CometChatToastNotification } from \"../../Shared\";\nimport { CometChatConversationListItem } from \"../\";\nimport { CometChatContextProvider, CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { UIKitSettings } from \"../../../util/UIKitSettings\";\nimport { SoundManager } from \"../../../util/SoundManager\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\nimport { chatsWrapperStyle, chatsHeaderStyle, chatsHeaderCloseStyle, chatsHeaderTitleStyle, chatsMsgStyle, chatsMsgTxtStyle, chatsListStyle } from \"./style\";\nimport navigateIcon from \"./resources/back.svg\";\n\nclass CometChatConversationList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loggedInUser = null;\n    this.selectedConversation = null;\n\n    this.setSelectedConversation = () => {\n      const conversationList = [...this.state.conversationlist];\n      conversationList.forEach(conversation => {\n        if ((conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === this.getContext().type) {\n          var _conversation$convers, _this$getContext$item, _conversation$convers2, _this$getContext$item2;\n\n          if ((conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === CometChat.ACTION_TYPE.TYPE_USER && (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers = conversation.conversationWith) === null || _conversation$convers === void 0 ? void 0 : _conversation$convers.uid) === ((_this$getContext$item = this.getContext().item) === null || _this$getContext$item === void 0 ? void 0 : _this$getContext$item.uid) || (conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === CometChat.ACTION_TYPE.TYPE_GROUP && (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers2 = conversation.conversationWith) === null || _conversation$convers2 === void 0 ? void 0 : _conversation$convers2.guid) === ((_this$getContext$item2 = this.getContext().item) === null || _this$getContext$item2 === void 0 ? void 0 : _this$getContext$item2.guid)) {\n            this.selectedConversation = { ...conversation\n            };\n          }\n        }\n      });\n    };\n\n    this.conversationCallback = (key, item, message, options) => {\n      switch (key) {\n        case enums.USER_ONLINE:\n        case enums.USER_OFFLINE:\n          this.updateUser(item);\n          break;\n\n        case enums.TEXT_MESSAGE_RECEIVED:\n        case enums.MEDIA_MESSAGE_RECEIVED:\n        case enums.CUSTOM_MESSAGE_RECEIVED:\n        case enums.INCOMING_CALL_RECEIVED:\n        case enums.INCOMING_CALL_CANCELLED:\n        case enums.MESSAGE_EDITED:\n        case enums.MESSAGE_DELETED:\n        case enums.MESSAGE_READ:\n        case enums.GROUP_MEMBER_ADDED:\n        case enums.GROUP_MEMBER_KICKED:\n        case enums.GROUP_MEMBER_BANNED:\n        case enums.GROUP_MEMBER_LEFT:\n        case enums.GROUP_MEMBER_SCOPE_CHANGED:\n        case enums.GROUP_MEMBER_JOINED:\n        case enums.GROUP_MEMBER_UNBANNED:\n          this.conversationUpdated(key, message, options);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.conversationUpdated = (key, message, options) => {\n      const chatListMode = this.getContext().UIKitSettings.chatListMode;\n      const chatListFilterOptions = UIKitSettings.chatListFilterOptions;\n\n      if (chatListMode !== chatListFilterOptions[\"USERS_AND_GROUPS\"]) {\n        if (chatListMode === chatListFilterOptions[\"USERS\"] && message.receiverType === CometChat.RECEIVER_TYPE.GROUP || chatListMode === chatListFilterOptions[\"GROUPS\"] && message.receiverType === CometChat.RECEIVER_TYPE.USER) {\n          return false;\n        }\n      }\n\n      switch (key) {\n        case enums.TEXT_MESSAGE_RECEIVED:\n        case enums.MEDIA_MESSAGE_RECEIVED:\n        case enums.CUSTOM_MESSAGE_RECEIVED:\n        case enums.INCOMING_CALL_RECEIVED:\n        case enums.INCOMING_CALL_CANCELLED:\n          this.updateConversation(key, message);\n          break;\n\n        case enums.MESSAGE_EDITED:\n        case enums.MESSAGE_DELETED:\n          this.conversationEditedDeleted(message);\n          break;\n\n        case enums.GROUP_MEMBER_ADDED:\n          this.updateGroupMemberAdded(message, options);\n          break;\n\n        case enums.GROUP_MEMBER_KICKED:\n        case enums.GROUP_MEMBER_BANNED:\n        case enums.GROUP_MEMBER_LEFT:\n          this.updateGroupMemberRemoved(message, options);\n          break;\n\n        case enums.GROUP_MEMBER_SCOPE_CHANGED:\n          this.updateGroupMemberScopeChanged(message, options);\n          break;\n\n        case enums.GROUP_MEMBER_JOINED:\n        case enums.GROUP_MEMBER_UNBANNED:\n          this.updateGroupMemberChanged(message, options);\n          break;\n\n        case enums.MESSAGE_READ:\n          this.onMessagesRead(message);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.updateUser = user => {\n      const conversationlist = [...this.state.conversationlist];\n      const conversationKey = conversationlist.findIndex(conversationObj => conversationObj.conversationType === \"user\" && conversationObj.conversationWith.uid === user.uid);\n\n      if (conversationKey > -1) {\n        let conversationObj = { ...conversationlist[conversationKey]\n        };\n        let conversationWithObj = { ...conversationObj.conversationWith,\n          status: user.getStatus()\n        };\n        let newConversationObj = { ...conversationObj,\n          conversationWith: conversationWithObj\n        };\n        conversationlist.splice(conversationKey, 1, newConversationObj);\n        this.setState({\n          conversationlist: conversationlist\n        });\n      }\n    };\n\n    this.hideGroupActionMessages = () => {\n      this.getContext().FeatureRestriction.isGroupActionMessagesEnabled().then(response => {\n        if (response !== this.state.hideGroupActionMessages) {\n          this.setState({\n            hideGroupActionMessages: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.hideGroupActionMessages !== false) {\n          this.setState({\n            hideGroupActionMessages: false\n          });\n        }\n      });\n    };\n\n    this.playAudio = message => {\n      if (message.category === CometChat.CATEGORY_ACTION && message.type === CometChat.ACTION_TYPE.TYPE_GROUP_MEMBER && this.state.hideGroupActionMessages === true) {\n        return false;\n      }\n      /**\n       * Sound alert for incoming messages\n       */\n\n\n      const receiverType = message.getReceiverType();\n      const receiverId = receiverType === CometChat.RECEIVER_TYPE.USER ? message.getSender().uid : message.getReceiverId();\n\n      if (receiverType === this.getContext().type) {\n        if (receiverType === CometChat.RECEIVER_TYPE.USER && receiverId === this.getContext().item.uid || receiverType === CometChat.RECEIVER_TYPE.GROUP && receiverId === this.getContext().item.guid) {\n          SoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_MESSAGE\"], this.getContext());\n        } else {\n          SoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_OTHER_MESSAGE\"], this.getContext());\n        }\n      } else {\n        SoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_OTHER_MESSAGE\"], this.getContext());\n      }\n    };\n\n    this.onMessagesRead = messageReceipt => {\n      const conversationList = [...this.state.conversationlist];\n      conversationList.forEach((conversation, conversationKey) => {\n        if ((conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === messageReceipt.receiverType) {\n          var _conversation$convers3, _conversation$convers4;\n\n          if ((conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === CometChat.RECEIVER_TYPE.USER && messageReceipt.receiver === (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers3 = conversation.conversationWith) === null || _conversation$convers3 === void 0 ? void 0 : _conversation$convers3.uid) || (conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === CometChat.RECEIVER_TYPE.GROUP && messageReceipt.receiver === (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers4 = conversation.conversationWith) === null || _conversation$convers4 === void 0 ? void 0 : _conversation$convers4.guid)) {\n            var _conversation$lastMes;\n\n            let unreadMessageCount = conversation.unreadMessageCount;\n            /**\n             * If the message id of the read reciept if greater than or equal to the lastmessage id, set unreadmessagecount to 0\n             */\n\n            if ((messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.messageId) >= (conversation === null || conversation === void 0 ? void 0 : (_conversation$lastMes = conversation.lastMessage) === null || _conversation$lastMes === void 0 ? void 0 : _conversation$lastMes.id)) {\n              unreadMessageCount = 0;\n            }\n\n            let newConversationObj = { ...conversation,\n              unreadMessageCount: unreadMessageCount\n            };\n            conversationList.splice(conversationKey, 1, newConversationObj);\n            this.setState({\n              conversationlist: conversationList\n            });\n          }\n        }\n      });\n    };\n\n    this.makeConversation = message => {\n      const promise = new Promise(resolve => {\n        CometChat.CometChatHelper.getConversationFromMessage(message).then(conversation => {\n          let conversationList = [...this.state.conversationlist];\n          let conversationKey = conversationList.findIndex(c => c.conversationId === conversation.conversationId);\n          let conversationObj = { ...conversation\n          };\n\n          if (conversationKey > -1) {\n            conversationObj = { ...conversationList[conversationKey]\n            };\n          }\n\n          resolve({\n            conversationKey: conversationKey,\n            conversationObj: conversationObj,\n            conversationList: conversationList\n          });\n        });\n      });\n      return promise;\n    };\n\n    this.makeUnreadMessageCount = (message, conversation = {}) => {\n      /**\n       * If the received message is sent by the logged in user, don't increment the unread count\n       */\n      if (Object.keys(conversation).length === 0) {\n        var _this$loggedInUser;\n\n        if (message.sender.uid === ((_this$loggedInUser = this.loggedInUser) === null || _this$loggedInUser === void 0 ? void 0 : _this$loggedInUser.uid)) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n\n      let unreadMessageCount = parseInt(conversation.unreadMessageCount);\n\n      if (this.selectedConversation && this.selectedConversation.conversationId === conversation.conversationId) {\n        if (this.getContext().unreadMessages.length) {\n          const unreadMessage = this.getContext().unreadMessages[0];\n          const selectedConversation = this.selectedConversation;\n\n          if (unreadMessage.hasOwnProperty(\"conversationId\") && unreadMessage.conversationId === selectedConversation.conversationId) {\n            unreadMessageCount = 0;\n            this.getContext().unreadMessages.forEach(message => {\n              unreadMessageCount = this.shouldIncrementCount(message) ? ++unreadMessageCount : unreadMessageCount;\n            });\n          }\n        } else {\n          unreadMessageCount = 0;\n        }\n      } else if (this.getContext().item.hasOwnProperty(\"guid\") && conversation.conversationWith.hasOwnProperty(\"guid\") && this.getContext().item.guid === conversation.conversationWith.guid || this.getContext().item.hasOwnProperty(\"uid\") && conversation.conversationWith.hasOwnProperty(\"uid\") && this.getContext().item.uid === conversation.conversationWith.uid) {\n        unreadMessageCount = 0;\n      } else {\n        unreadMessageCount = this.shouldIncrementCount(message) ? ++unreadMessageCount : unreadMessageCount;\n      }\n\n      return unreadMessageCount;\n    };\n\n    this.shouldIncrementCount = incomingMessage => {\n      var _this$loggedInUser2, _this$loggedInUser3;\n\n      let output = false;\n\n      if (incomingMessage.category === CometChat.CATEGORY_MESSAGE && incomingMessage.sender.uid !== ((_this$loggedInUser2 = this.loggedInUser) === null || _this$loggedInUser2 === void 0 ? void 0 : _this$loggedInUser2.uid) || this.getContext().hasKeyValue(incomingMessage, enums.KEYS[\"METADATA\"]) && this.getContext().hasKeyValue(incomingMessage[enums.KEYS[\"METADATA\"]], enums.KEYS[\"INCREMENT_UNREAD_COUNT\"]) && incomingMessage[enums.KEYS[\"METADATA\"]][enums.KEYS[\"INCREMENT_UNREAD_COUNT\"]] === true && incomingMessage.sender.uid !== ((_this$loggedInUser3 = this.loggedInUser) === null || _this$loggedInUser3 === void 0 ? void 0 : _this$loggedInUser3.uid)) {\n        output = true;\n      }\n\n      return output;\n    };\n\n    this.makeLastMessage = (message, conversation = {}) => {\n      const newMessage = Object.assign({}, message);\n      return newMessage;\n    };\n\n    this.updateConversation = (key, message) => {\n      this.makeConversation(message).then(response => {\n        const {\n          conversationKey,\n          conversationObj,\n          conversationList\n        } = response;\n\n        if (conversationKey > -1) {\n          let unreadMessageCount = this.makeUnreadMessageCount(message, conversationObj);\n          let lastMessageObj = this.makeLastMessage(message, conversationObj);\n          let newConversationObj = { ...conversationObj,\n            lastMessage: lastMessageObj,\n            unreadMessageCount: unreadMessageCount\n          };\n          conversationList.splice(conversationKey, 1);\n          conversationList.unshift(newConversationObj);\n          this.setState({\n            conversationlist: conversationList\n          });\n\n          if (key !== enums.INCOMING_CALL_RECEIVED && key !== enums.INCOMING_CALL_CANCELLED) {\n            this.playAudio(message);\n          }\n        } else {\n          let unreadMessageCount = this.makeUnreadMessageCount(message, {});\n          let lastMessageObj = this.makeLastMessage(message);\n          let newConversationObj = { ...conversationObj,\n            lastMessage: lastMessageObj,\n            unreadMessageCount: unreadMessageCount\n          };\n          conversationList.unshift(newConversationObj);\n          this.setState({\n            conversationlist: conversationList\n          });\n\n          if (key !== enums.INCOMING_CALL_RECEIVED && key !== enums.INCOMING_CALL_CANCELLED) {\n            this.playAudio(message);\n          }\n        }\n      });\n    };\n\n    this.conversationEditedDeleted = message => {\n      this.makeConversation(message).then(response => {\n        const {\n          conversationKey,\n          conversationObj,\n          conversationList\n        } = response;\n\n        if (conversationKey > -1) {\n          let lastMessageObj = conversationObj.lastMessage;\n\n          if (lastMessageObj.id === message.id) {\n            const newLastMessageObj = Object.assign({}, lastMessageObj, message);\n            let newConversationObj = Object.assign({}, conversationObj, {\n              lastMessage: newLastMessageObj\n            });\n            conversationList.splice(conversationKey, 1, newConversationObj);\n            this.setState({\n              conversationlist: conversationList\n            });\n          }\n        }\n      });\n    };\n\n    this.updateGroupMemberAdded = (message, options) => {\n      this.makeConversation(message).then(response => {\n        const {\n          conversationKey,\n          conversationObj,\n          conversationList\n        } = response;\n\n        if (conversationKey > -1) {\n          let lastMessageObj = this.makeLastMessage(message, conversationObj);\n          let conversationWithObj = { ...conversationObj.conversationWith\n          };\n          let membersCount = parseInt(conversationWithObj.membersCount);\n\n          if (message.hasOwnProperty(\"actionFor\") && message.actionFor.hasOwnProperty(\"membersCount\")) {\n            membersCount = message.actionFor.membersCount;\n          }\n\n          let newConversationWithObj = { ...conversationWithObj,\n            membersCount: membersCount\n          };\n          let newConversationObj = { ...conversationObj,\n            conversationWith: newConversationWithObj,\n            lastMessage: lastMessageObj\n          };\n          conversationList.splice(conversationKey, 1);\n          conversationList.unshift(newConversationObj);\n          this.setState({\n            conversationlist: conversationList\n          });\n          this.playAudio(message);\n        } else {\n          if (options && this.loggedInUser.uid === options.user.uid) {\n            let lastMessageObj = this.makeLastMessage(message);\n            let conversationWithObj = { ...conversationObj.conversationWith\n            };\n            let membersCount = parseInt(conversationWithObj.membersCount);\n\n            if (message.hasOwnProperty(\"actionFor\") && message.actionFor.hasOwnProperty(\"membersCount\")) {\n              membersCount = message.actionFor.membersCount;\n            }\n\n            let scope = CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT;\n            let hasJoined = options.hasJoined;\n            let newConversationWithObj = { ...conversationWithObj,\n              membersCount: membersCount,\n              scope: scope,\n              hasJoined: hasJoined\n            };\n            let newConversationObj = { ...conversationObj,\n              conversationWith: newConversationWithObj,\n              lastMessage: lastMessageObj\n            };\n            conversationList.unshift(newConversationObj);\n            this.setState({\n              conversationlist: conversationList\n            });\n            this.playAudio(message);\n          }\n        }\n      });\n    };\n\n    this.updateGroupMemberRemoved = (message, options) => {\n      this.makeConversation(message).then(response => {\n        const {\n          conversationKey,\n          conversationObj,\n          conversationList\n        } = response;\n\n        if (conversationKey > -1) {\n          if (options && this.loggedInUser.uid === options.user.uid) {\n            conversationList.splice(conversationKey, 1);\n            this.setState({\n              conversationlist: conversationList\n            });\n          } else {\n            let lastMessageObj = this.makeLastMessage(message, conversationObj);\n            let conversationWithObj = { ...conversationObj.conversationWith\n            };\n            let membersCount = parseInt(conversationWithObj.membersCount);\n\n            if (message.hasOwnProperty(\"actionFor\") && message.actionFor.hasOwnProperty(\"membersCount\")) {\n              membersCount = message.actionFor.membersCount;\n            }\n\n            let newConversationWithObj = { ...conversationWithObj,\n              membersCount: membersCount\n            };\n            let newConversationObj = { ...conversationObj,\n              conversationWith: newConversationWithObj,\n              lastMessage: lastMessageObj\n            };\n            conversationList.splice(conversationKey, 1);\n            conversationList.unshift(newConversationObj);\n            this.setState({\n              conversationlist: conversationList\n            });\n            this.playAudio(message);\n          }\n        }\n      });\n    };\n\n    this.updateGroupMemberScopeChanged = (message, options) => {\n      this.makeConversation(message).then(response => {\n        const {\n          conversationKey,\n          conversationObj,\n          conversationList\n        } = response;\n\n        if (conversationKey > -1) {\n          let lastMessageObj = this.makeLastMessage(message, conversationObj);\n          let conversationWithObj = { ...conversationObj.conversationWith\n          };\n          let membersCount = parseInt(conversationWithObj.membersCount);\n          let scope = conversationWithObj.scope;\n\n          if (options && this.loggedInUser.uid === options.user.uid) {\n            scope = options.scope;\n          }\n\n          let newConversationWithObj = { ...conversationWithObj,\n            membersCount: membersCount,\n            scope: scope\n          };\n          let newConversationObj = { ...conversationObj,\n            conversationWith: newConversationWithObj,\n            lastMessage: lastMessageObj\n          };\n          conversationList.splice(conversationKey, 1);\n          conversationList.unshift(newConversationObj);\n          this.setState({\n            conversationlist: conversationList\n          });\n          this.playAudio(message);\n        }\n      });\n    };\n\n    this.updateGroupMemberChanged = (message, options) => {\n      this.makeConversation(message).then(response => {\n        const {\n          conversationKey,\n          conversationObj,\n          conversationList\n        } = response;\n\n        if (conversationKey > -1) {\n          if (options && this.loggedInUser.uid !== options.user.uid) {\n            let lastMessageObj = this.makeLastMessage(message, conversationObj);\n            let conversationWithObj = { ...conversationObj.conversationWith\n            };\n            let membersCount = parseInt(conversationWithObj.membersCount);\n\n            if (message.hasOwnProperty(\"actionFor\") && message.actionFor.hasOwnProperty(\"membersCount\")) {\n              membersCount = message.actionFor.membersCount;\n            }\n\n            let newConversationWithObj = { ...conversationWithObj,\n              membersCount: membersCount\n            };\n            let newConversationObj = { ...conversationObj,\n              conversationWith: newConversationWithObj,\n              lastMessage: lastMessageObj\n            };\n            conversationList.splice(conversationKey, 1);\n            conversationList.unshift(newConversationObj);\n            this.setState({\n              conversationlist: conversationList\n            });\n            this.playAudio(message);\n          }\n        }\n      });\n    };\n\n    this.handleScroll = e => {\n      const bottom = Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) === Math.round(e.currentTarget.clientHeight);\n      if (bottom) this.getConversations();\n    };\n\n    this.handleClick = conversation => {\n      if (!this.props.onItemClick) return;\n      this.props.onItemClick(conversation.conversationWith, conversation.conversationType);\n      this.selectedConversation = conversation;\n    };\n\n    this.handleMenuClose = () => {\n      if (!this.props.actionGenerated) {\n        return false;\n      }\n\n      this.props.actionGenerated(enums.ACTIONS[\"TOGGLE_SIDEBAR\"]);\n    };\n\n    this.getConversations = () => {\n      this.ConversationListManager.fetchNextConversation().then(conversationList => {\n        if (conversationList.length === 0) {\n          if (this.state.conversationlist.length === 0) {\n            this.setState({\n              decoratorMessage: Translator.translate(\"NO_CHATS_FOUND\", this.state.lang)\n            });\n          }\n        } else {\n          this.setState({\n            decoratorMessage: \"\"\n          });\n        }\n\n        conversationList.forEach(conversation => {\n          if (this.getContext().hasOwnProperty(\"type\") && this.props.hasOwnProperty(\"item\") && this.getContext().type === conversation.conversationType) {\n            if (conversation.conversationType === CometChat.RECEIVER_TYPE.USER && this.getContext().item.uid === conversation.conversationWith.uid || conversation.conversationType === CometChat.RECEIVER_TYPE.GROUP && this.getContext().item.guid === conversation.conversationWith.guid) {\n              conversation.unreadMessageCount = 0;\n            }\n          }\n        });\n        this.setState({\n          conversationlist: [...this.state.conversationlist, ...conversationList]\n        });\n      }).catch(error => this.setState({\n        decoratorMessage: Translator.translate(\"SOMETHING_WRONG\", this.state.lang)\n      }));\n    };\n\n    this.getContext = () => {\n      if (this.props._parent.length) {\n        return this.context;\n      } else {\n        return this.contextProviderRef.state;\n      }\n    };\n\n    this.actionHandler = (action, conversation) => {\n      switch (action) {\n        case enums.ACTIONS[\"CONVERSATION_DELETED\"]:\n          this.conversationDeleted(conversation);\n          break;\n\n        case enums.ACTIONS[\"DELETE_CONVERSATION\"]:\n          this.deleteConversation(conversation);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.deleteConversation = conversation => {\n      if (!this.state.showConfirmDialog) {\n        this.setState({\n          showConfirmDialog: true\n        });\n      }\n    };\n\n    this.onDeleteConfirm = e => {\n      const optionSelected = e.target.value;\n      this.setState({\n        showConfirmDialog: false\n      });\n\n      if (optionSelected === \"yes\") {\n        var _conversation$convers5, _conversation$convers6;\n\n        const conversation = this.context.conversationToBeDeleted;\n        const conversationWith = conversation.conversationType === CometChat.RECEIVER_TYPE.GROUP ? conversation === null || conversation === void 0 ? void 0 : (_conversation$convers5 = conversation.conversationWith) === null || _conversation$convers5 === void 0 ? void 0 : _conversation$convers5.guid : conversation === null || conversation === void 0 ? void 0 : (_conversation$convers6 = conversation.conversationWith) === null || _conversation$convers6 === void 0 ? void 0 : _conversation$convers6.uid;\n        CometChat.deleteConversation(conversationWith, conversation.conversationType).then(deletedConversation => {\n          this.context.setConversationToBeDeleted(null);\n          this.conversationDeleted(conversation);\n        }).catch(error => this.toastRef.setError(\"SOMETHING_WRONG\"));\n      } else {\n        this.context.setConversationToBeDeleted(null);\n        this.setState({\n          showConfirmDialog: false\n        });\n      }\n    };\n\n    this.conversationDeleted = conversation => {\n      const conversationList = [...this.state.conversationlist];\n      const conversationKey = conversationList.findIndex(c => c.conversationId === conversation.conversationId);\n\n      if (conversationKey > -1) {\n        if (this.selectedConversation && this.selectedConversation.conversationId === conversation.conversationId) {\n          this.selectedConversation = null;\n          this.getContext().setTypeAndItem(\"\", {});\n        }\n\n        conversationList.splice(conversationKey, 1);\n        this.setState({\n          conversationlist: conversationList\n        });\n      }\n    };\n\n    this.state = {\n      conversationlist: [],\n      onItemClick: null,\n      lang: props.lang,\n      hideGroupActionMessages: false,\n      showConfirmDialog: false,\n      decoratorMessage: Translator.translate(\"LOADING\", props.lang)\n    };\n    this.contextProviderRef = /*#__PURE__*/React.createRef();\n    this.chatListRef = /*#__PURE__*/React.createRef();\n    this.toastRef = /*#__PURE__*/React.createRef();\n    CometChat.getLoggedinUser().then(user => this.loggedInUser = user).catch(error => this.setState({\n      decoratorMessage: Translator.translate(\"SOMETHING_WRONG\", this.state.lang)\n    }));\n  }\n\n  componentDidMount() {\n    this.item = this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER || CometChat.ACTION_TYPE.TYPE_GROUP ? this.getContext().item : null;\n    this.hideGroupActionMessages();\n    this.setState({\n      conversationlist: []\n    }, () => {\n      this.ConversationListManager = new ConversationListManager(this.getContext());\n      this.getConversations();\n      this.ConversationListManager.attachListeners(this.conversationCallback);\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    //when a particular chat is selected from the chats list\n    if (this.getContext().item !== this.item) {\n      const conversationlist = [...this.state.conversationlist];\n      const conversationObj = conversationlist.find(c => {\n        if (c.conversationType === this.getContext().type && this.getContext().type === CometChat.RECEIVER_TYPE.USER && c.conversationWith.uid === this.getContext().item.uid || c.conversationType === this.getContext().type && this.getContext().type === CometChat.RECEIVER_TYPE.GROUP && c.conversationWith.guid === this.getContext().item.guid) {\n          return c;\n        }\n\n        return false;\n      });\n\n      if (conversationObj) {\n        let conversationKey = conversationlist.indexOf(conversationObj);\n        let newConversationObj = { ...conversationObj,\n          unreadMessageCount: 0\n        };\n        conversationlist.splice(conversationKey, 1, newConversationObj);\n        this.setState({\n          conversationlist: conversationlist\n        });\n      }\n\n      if (Object.keys(this.getContext().item).length === 0) {\n        this.selectedConversation = null;\n      }\n    } //if user is blocked/unblocked, update conversationlist in state\n\n\n    if (this.item && Object.keys(this.item).length && this.item.hasOwnProperty(\"uid\") && this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER && this.item.uid === this.getContext().item.uid && this.item.blockedByMe !== this.getContext().item.blockedByMe) {\n      let conversationlist = [...this.state.conversationlist]; //search for user\n\n      let convKey = conversationlist.findIndex(c => c.conversationType === CometChat.ACTION_TYPE.TYPE_USER && c.conversationWith.uid === this.getContext().item.uid);\n\n      if (convKey > -1) {\n        const convObj = conversationlist[convKey];\n        let convWithObj = { ...convObj.conversationWith\n        };\n        let newConvWithObj = Object.assign({}, convWithObj, {\n          blockedByMe: this.getContext().item.blockedByMe\n        });\n        let newConvObj = Object.assign({}, convObj, {\n          conversationWith: newConvWithObj\n        });\n        conversationlist.splice(convKey, 1, newConvObj);\n        this.setState({\n          conversationlist: conversationlist\n        });\n      }\n    } //if group detail(membersCount) is updated, update grouplist\n\n\n    if (this.item && Object.keys(this.item).length && this.item.hasOwnProperty(\"guid\") && this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP && this.item.guid === this.getContext().item.guid && this.item.membersCount !== this.getContext().item.membersCount) {\n      const conversationlist = [...this.state.conversationlist];\n      let convKey = conversationlist.findIndex(c => c.conversationType === CometChat.ACTION_TYPE.TYPE_GROUP && c.conversationWith.guid === this.getContext().item.guid);\n\n      if (convKey > -1) {\n        const convObj = conversationlist[convKey];\n        let convWithObj = { ...convObj.conversationWith\n        };\n        let newConvWithObj = Object.assign({}, convWithObj, {\n          membersCount: this.getContext().item.membersCount\n        });\n        let newConvObj = Object.assign({}, convObj, {\n          conversationWith: newConvWithObj\n        });\n        conversationlist.splice(convKey, 1, newConvObj);\n        this.setState({\n          conversationlist: conversationlist\n        });\n      }\n    } //upon user deleting a group, remove group from conversation list\n\n\n    if (this.getContext().deletedGroupId.trim().length) {\n      const guid = this.getContext().deletedGroupId.trim();\n      const conversationlist = [...this.state.conversationlist];\n      let conversationKey = conversationlist.findIndex(c => c.conversationType === CometChat.ACTION_TYPE.TYPE_GROUP && c.conversationWith.guid === guid);\n\n      if (conversationKey > -1) {\n        conversationlist.splice(conversationKey, 1);\n        this.setState({\n          conversationlist: conversationlist\n        });\n      }\n    } //upon user leaving a group, remove group from conversation list\n\n\n    if (this.getContext().leftGroupId.trim().length) {\n      const guid = this.getContext().leftGroupId.trim();\n      const conversationlist = [...this.state.conversationlist];\n      let conversationKey = conversationlist.findIndex(c => c.conversationType === CometChat.ACTION_TYPE.TYPE_GROUP && c.conversationWith.guid === guid);\n\n      if (conversationKey > -1) {\n        conversationlist.splice(conversationKey, 1);\n        this.setState({\n          conversationlist: conversationlist\n        });\n      }\n    } //updating last message whenever a message is composed,\n\n\n    if (Object.keys(this.getContext().lastMessage).length) {\n      const lastMessage = this.getContext().lastMessage;\n      const conversationList = [...this.state.conversationlist];\n      const conversationKey = conversationList.findIndex(c => c.conversationId === lastMessage.conversationId);\n\n      if (conversationKey > -1) {\n        const conversationObj = conversationList[conversationKey];\n        let newConversationObj = { ...conversationObj,\n          lastMessage: { ...lastMessage\n          }\n        };\n\n        if (conversationKey === 0) {\n          conversationList.splice(conversationKey, 1, newConversationObj);\n        } else {\n          conversationList.splice(conversationKey, 1);\n          conversationList.unshift(newConversationObj);\n        }\n\n        this.setState({\n          conversationlist: conversationList\n        });\n        this.getContext().setLastMessage({});\n      } else {\n        const chatListMode = this.getContext().UIKitSettings.chatListMode;\n        const chatListFilterOptions = UIKitSettings.chatListFilterOptions;\n\n        if (chatListMode !== chatListFilterOptions[\"USERS_AND_GROUPS\"]) {\n          if (chatListMode === chatListFilterOptions[\"USERS\"] && lastMessage.receiverType === CometChat.RECEIVER_TYPE.GROUP || chatListMode === chatListFilterOptions[\"GROUPS\"] && lastMessage.receiverType === CometChat.RECEIVER_TYPE.USER) {\n            return false;\n          }\n        }\n\n        const getConversationId = () => {\n          let conversationId = null;\n\n          if (this.getContext().type === CometChat.RECEIVER_TYPE.USER) {\n            const users = [this.loggedInUser.uid, this.getContext().item.uid];\n            conversationId = users.sort().join(\"_user_\");\n          } else if (this.getContext().type === CometChat.RECEIVER_TYPE.GROUP) {\n            conversationId = `group_${this.getContext().item.guid}`;\n          }\n\n          return conversationId;\n        };\n\n        let newConversation = new CometChat.Conversation();\n        newConversation.setConversationId(getConversationId());\n        newConversation.setConversationType(this.getContext().type);\n        newConversation.setConversationWith(this.getContext().item);\n        newConversation.setLastMessage(lastMessage);\n        newConversation.setUnreadMessageCount(0);\n        conversationList.unshift(newConversation);\n        this.setState({\n          conversationlist: conversationList\n        });\n        this.getContext().setLastMessage({});\n      }\n    }\n\n    if (prevProps.lang !== this.props.lang) {\n      this.setState({\n        lang: this.props.lang\n      });\n    }\n\n    if (this.getContext().clearedUnreadMessages === true && this.selectedConversation) {\n      let conversationList = [...this.state.conversationlist];\n      let conversationKey = conversationList.findIndex(c => c.conversationId === this.selectedConversation.conversationId);\n\n      if (conversationKey > -1) {\n        let conversationObj = { ...conversationList[conversationKey]\n        };\n        let unreadMessageCount = this.getContext().unreadMessages.length;\n        let newConversationObj = { ...conversationObj,\n          unreadMessageCount: unreadMessageCount\n        };\n        conversationList.splice(conversationKey, 1);\n        conversationList.unshift(newConversationObj);\n        this.setState({\n          conversationlist: conversationList\n        });\n        this.getContext().setClearedUnreadMessages(false);\n      }\n    }\n\n    this.item = this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER || CometChat.ACTION_TYPE.TYPE_GROUP ? this.getContext().item : null;\n    this.hideGroupActionMessages();\n  }\n\n  componentWillUnmount() {\n    this.ConversationListManager.removeListeners();\n    this.ConversationListManager = null;\n  }\n\n  render() {\n    const conversationList = this.state.conversationlist.map((conversation, key) => {\n      let selectedConversation = null;\n\n      if (this.getContext() && Object.keys(this.getContext().item).length && this.getContext().type.trim().length) {\n        if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER && this.getContext().item.uid === conversation.conversationWith.uid) {\n          selectedConversation = conversation;\n        } else if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP && this.getContext().item.guid === conversation.conversationWith.guid) {\n          selectedConversation = conversation;\n        }\n      }\n\n      return jsx(CometChatConversationListItem, {\n        key: key,\n        theme: this.props.theme,\n        config: this.props.config,\n        lang: this.state.lang,\n        conversationKey: key,\n        conversation: conversation,\n        selectedConversation: selectedConversation,\n        loggedInUser: this.loggedInUser,\n        handleClick: this.handleClick,\n        actionGenerated: this.actionHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 5\n        }\n      });\n    });\n    let messageContainer = null;\n\n    if (this.state.decoratorMessage.length !== 0) {\n      messageContainer = jsx(\"div\", {\n        css: chatsMsgStyle(),\n        className: \"chats__decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 5\n        }\n      }, jsx(\"p\", {\n        css: chatsMsgTxtStyle(this.props),\n        className: \"decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 6\n        }\n      }, this.state.decoratorMessage));\n    }\n\n    let closeBtn = jsx(\"div\", {\n      css: chatsHeaderCloseStyle(navigateIcon, this.getContext()),\n      className: \"header__close\",\n      onClick: this.handleMenuClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810,\n        columnNumber: 18\n      }\n    });\n\n    if (this.getContext() && Object.keys(this.getContext().item).length === 0) {\n      closeBtn = null;\n    }\n\n    let showConfirmDialog = null;\n\n    if (this.state.showConfirmDialog) {\n      showConfirmDialog = jsx(CometChatConfirmDialog, _extends({}, this.props, {\n        onClick: this.onDeleteConfirm,\n        message: Translator.translate(\"DELETE_CONFIRM\", this.getContext().language),\n        confirmButtonText: Translator.translate(\"DELETE\", this.getContext().language),\n        cancelButtonText: Translator.translate(\"CANCEL\", this.getContext().language),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 817,\n          columnNumber: 24\n        }\n      }));\n    }\n\n    const chatList = jsx(\"div\", {\n      css: chatsWrapperStyle(this.props),\n      className: \"chats\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825,\n        columnNumber: 4\n      }\n    }, jsx(\"div\", {\n      css: chatsHeaderStyle(this.props),\n      className: \"chats__header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826,\n        columnNumber: 5\n      }\n    }, closeBtn, jsx(\"h4\", {\n      css: chatsHeaderTitleStyle(this.props),\n      className: \"header__title\",\n      dir: Translator.getDirection(this.state.lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828,\n        columnNumber: 6\n      }\n    }, Translator.translate(\"CHATS\", this.state.lang))), messageContainer, jsx(\"div\", {\n      css: chatsListStyle(),\n      className: \"chats__list\",\n      onScroll: this.handleScroll,\n      ref: el => this.chatListRef = el,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833,\n        columnNumber: 5\n      }\n    }, conversationList), showConfirmDialog, jsx(CometChatToastNotification, {\n      ref: el => this.toastRef = el,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837,\n        columnNumber: 5\n      }\n    }));\n    let chatListWrapper = chatList; //if used as a standalone component, add errorboundary and context provider\n\n    if (this.props._parent === \"\") {\n      chatListWrapper = jsx(CometChatContextProvider, {\n        ref: el => this.contextProviderRef = el,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 844,\n          columnNumber: 22\n        }\n      }, chatList);\n    }\n\n    return chatListWrapper;\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatConversationList.contextType = CometChatContext;\nCometChatConversationList.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n  onItemClick: () => {},\n  _parent: \"\"\n};\nCometChatConversationList.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n  onItemClick: PropTypes.func,\n  _parent: PropTypes.string\n};\nexport { CometChatConversationList };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Chats/CometChatConversationList/index.js"],"names":["React","jsx","PropTypes","CometChat","ConversationListManager","CometChatConfirmDialog","CometChatToastNotification","CometChatConversationListItem","CometChatContextProvider","CometChatContext","enums","UIKitSettings","SoundManager","Translator","theme","chatsWrapperStyle","chatsHeaderStyle","chatsHeaderCloseStyle","chatsHeaderTitleStyle","chatsMsgStyle","chatsMsgTxtStyle","chatsListStyle","CometChatConversationList","Component","constructor","props","loggedInUser","selectedConversation","setSelectedConversation","conversationList","state","conversationlist","forEach","conversation","conversationType","getContext","type","ACTION_TYPE","TYPE_USER","conversationWith","uid","item","TYPE_GROUP","guid","conversationCallback","key","message","options","USER_ONLINE","USER_OFFLINE","updateUser","TEXT_MESSAGE_RECEIVED","MEDIA_MESSAGE_RECEIVED","CUSTOM_MESSAGE_RECEIVED","INCOMING_CALL_RECEIVED","INCOMING_CALL_CANCELLED","MESSAGE_EDITED","MESSAGE_DELETED","MESSAGE_READ","GROUP_MEMBER_ADDED","GROUP_MEMBER_KICKED","GROUP_MEMBER_BANNED","GROUP_MEMBER_LEFT","GROUP_MEMBER_SCOPE_CHANGED","GROUP_MEMBER_JOINED","GROUP_MEMBER_UNBANNED","conversationUpdated","chatListMode","chatListFilterOptions","receiverType","RECEIVER_TYPE","GROUP","USER","updateConversation","conversationEditedDeleted","updateGroupMemberAdded","updateGroupMemberRemoved","updateGroupMemberScopeChanged","updateGroupMemberChanged","onMessagesRead","user","conversationKey","findIndex","conversationObj","conversationWithObj","status","getStatus","newConversationObj","splice","setState","hideGroupActionMessages","FeatureRestriction","isGroupActionMessagesEnabled","then","response","catch","error","playAudio","category","CATEGORY_ACTION","TYPE_GROUP_MEMBER","getReceiverType","receiverId","getSender","getReceiverId","play","CONSTANTS","AUDIO","messageReceipt","receiver","unreadMessageCount","messageId","lastMessage","id","makeConversation","promise","Promise","resolve","CometChatHelper","getConversationFromMessage","c","conversationId","makeUnreadMessageCount","Object","keys","length","sender","parseInt","unreadMessages","unreadMessage","hasOwnProperty","shouldIncrementCount","incomingMessage","output","CATEGORY_MESSAGE","hasKeyValue","KEYS","makeLastMessage","newMessage","assign","lastMessageObj","unshift","newLastMessageObj","membersCount","actionFor","newConversationWithObj","scope","GROUP_MEMBER_SCOPE","PARTICIPANT","hasJoined","handleScroll","e","bottom","Math","round","currentTarget","scrollHeight","scrollTop","clientHeight","getConversations","handleClick","onItemClick","handleMenuClose","actionGenerated","ACTIONS","fetchNextConversation","decoratorMessage","translate","lang","_parent","context","contextProviderRef","actionHandler","action","conversationDeleted","deleteConversation","showConfirmDialog","onDeleteConfirm","optionSelected","target","value","conversationToBeDeleted","deletedConversation","setConversationToBeDeleted","toastRef","setError","setTypeAndItem","createRef","chatListRef","getLoggedinUser","componentDidMount","attachListeners","componentDidUpdate","prevProps","find","indexOf","blockedByMe","convKey","convObj","convWithObj","newConvWithObj","newConvObj","deletedGroupId","trim","leftGroupId","setLastMessage","getConversationId","users","sort","join","newConversation","Conversation","setConversationId","setConversationType","setConversationWith","setUnreadMessageCount","clearedUnreadMessages","setClearedUnreadMessages","componentWillUnmount","removeListeners","render","map","config","messageContainer","closeBtn","navigateIcon","language","chatList","getDirection","el","chatListWrapper","contextType","defaultProps","getDefaultLanguage","propTypes","string","object","func"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { ConversationListManager } from \"./controller\";\n\nimport { CometChatConfirmDialog, CometChatToastNotification } from \"../../Shared\";\nimport { CometChatConversationListItem } from \"../\";\n\nimport { CometChatContextProvider, CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { UIKitSettings } from \"../../../util/UIKitSettings\";\nimport { SoundManager } from \"../../../util/SoundManager\";\n\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\n\nimport {\n  chatsWrapperStyle,\n  chatsHeaderStyle,\n  chatsHeaderCloseStyle,\n  chatsHeaderTitleStyle,\n  chatsMsgStyle,\n  chatsMsgTxtStyle,\n  chatsListStyle\n} from \"./style\";\n\nimport navigateIcon from \"./resources/back.svg\";\n\nclass CometChatConversationList extends React.Component {\n\tloggedInUser = null;\n\tselectedConversation = null;\n\tstatic contextType = CometChatContext;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tconversationlist: [],\n\t\t\tonItemClick: null,\n\t\t\tlang: props.lang,\n\t\t\thideGroupActionMessages: false,\n\t\t\tshowConfirmDialog: false,\n\t\t\tdecoratorMessage: Translator.translate(\"LOADING\", props.lang),\n\t\t};\n\n\t\tthis.contextProviderRef = React.createRef();\n\t\tthis.chatListRef = React.createRef();\n\t\tthis.toastRef = React.createRef();\n\n\t\tCometChat.getLoggedinUser()\n\t\t\t.then(user => (this.loggedInUser = user))\n\t\t\t.catch(error => this.setState({ decoratorMessage: Translator.translate(\"SOMETHING_WRONG\", this.state.lang) }));\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.item = this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER || CometChat.ACTION_TYPE.TYPE_GROUP ? this.getContext().item : null;\n\t\tthis.hideGroupActionMessages();\n\n\t\tthis.setState({conversationlist: []}, () => {\n\t\t\tthis.ConversationListManager = new ConversationListManager(this.getContext());\n\t\t\tthis.getConversations();\n\t\t\tthis.ConversationListManager.attachListeners(this.conversationCallback);\n\t\t});\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\t//when a particular chat is selected from the chats list\n\t\tif (this.getContext().item !== this.item) {\n\t\t\tconst conversationlist = [...this.state.conversationlist];\n\t\t\tconst conversationObj = conversationlist.find(c => {\n\t\t\t\tif (\n\t\t\t\t\t(c.conversationType === this.getContext().type && this.getContext().type === CometChat.RECEIVER_TYPE.USER && c.conversationWith.uid === this.getContext().item.uid) ||\n\t\t\t\t\t(c.conversationType === this.getContext().type && this.getContext().type === CometChat.RECEIVER_TYPE.GROUP && c.conversationWith.guid === this.getContext().item.guid)\n\t\t\t\t) {\n\t\t\t\t\treturn c;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t});\n\n\t\t\tif (conversationObj) {\n\t\t\t\tlet conversationKey = conversationlist.indexOf(conversationObj);\n\t\t\t\tlet newConversationObj = { ...conversationObj, unreadMessageCount: 0 };\n\n\t\t\t\tconversationlist.splice(conversationKey, 1, newConversationObj);\n\t\t\t\tthis.setState({ conversationlist: conversationlist });\n\t\t\t}\n\n\t\t\tif (Object.keys(this.getContext().item).length === 0) {\n\t\t\t\tthis.selectedConversation = null;\n\t\t\t}\n\t\t}\n\n\t\t//if user is blocked/unblocked, update conversationlist in state\n\t\tif (this.item && Object.keys(this.item).length && this.item.hasOwnProperty(\"uid\") && this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER && this.item.uid === this.getContext().item.uid && this.item.blockedByMe !== this.getContext().item.blockedByMe) {\n\t\t\tlet conversationlist = [...this.state.conversationlist];\n\n\t\t\t//search for user\n\t\t\tlet convKey = conversationlist.findIndex(c => c.conversationType === CometChat.ACTION_TYPE.TYPE_USER && c.conversationWith.uid === this.getContext().item.uid);\n\t\t\tif (convKey > -1) {\n\t\t\t\tconst convObj = conversationlist[convKey];\n\n\t\t\t\tlet convWithObj = { ...convObj.conversationWith };\n\t\t\t\tlet newConvWithObj = Object.assign({}, convWithObj, { blockedByMe: this.getContext().item.blockedByMe });\n\n\t\t\t\tlet newConvObj = Object.assign({}, convObj, { conversationWith: newConvWithObj });\n\n\t\t\t\tconversationlist.splice(convKey, 1, newConvObj);\n\t\t\t\tthis.setState({ conversationlist: conversationlist });\n\t\t\t}\n\t\t}\n\n\t\t//if group detail(membersCount) is updated, update grouplist\n\t\tif (this.item && Object.keys(this.item).length && this.item.hasOwnProperty(\"guid\") && this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP && this.item.guid === this.getContext().item.guid && this.item.membersCount !== this.getContext().item.membersCount) {\n\t\t\tconst conversationlist = [...this.state.conversationlist];\n\n\t\t\tlet convKey = conversationlist.findIndex(c => c.conversationType === CometChat.ACTION_TYPE.TYPE_GROUP && c.conversationWith.guid === this.getContext().item.guid);\n\t\t\tif (convKey > -1) {\n\t\t\t\tconst convObj = conversationlist[convKey];\n\n\t\t\t\tlet convWithObj = { ...convObj.conversationWith };\n\t\t\t\tlet newConvWithObj = Object.assign({}, convWithObj, { membersCount: this.getContext().item.membersCount });\n\n\t\t\t\tlet newConvObj = Object.assign({}, convObj, { conversationWith: newConvWithObj });\n\n\t\t\t\tconversationlist.splice(convKey, 1, newConvObj);\n\t\t\t\tthis.setState({ conversationlist: conversationlist });\n\t\t\t}\n\t\t}\n\n\t\t//upon user deleting a group, remove group from conversation list\n\t\tif (this.getContext().deletedGroupId.trim().length) {\n\t\t\tconst guid = this.getContext().deletedGroupId.trim();\n\t\t\tconst conversationlist = [...this.state.conversationlist];\n\n\t\t\tlet conversationKey = conversationlist.findIndex(c => c.conversationType === CometChat.ACTION_TYPE.TYPE_GROUP && c.conversationWith.guid === guid);\n\n\t\t\tif (conversationKey > -1) {\n\t\t\t\tconversationlist.splice(conversationKey, 1);\n\t\t\t\tthis.setState({ conversationlist: conversationlist });\n\t\t\t}\n\t\t}\n\n\t\t//upon user leaving a group, remove group from conversation list\n\t\tif (this.getContext().leftGroupId.trim().length) {\n\t\t\tconst guid = this.getContext().leftGroupId.trim();\n\t\t\tconst conversationlist = [...this.state.conversationlist];\n\n\t\t\tlet conversationKey = conversationlist.findIndex(c => c.conversationType === CometChat.ACTION_TYPE.TYPE_GROUP && c.conversationWith.guid === guid);\n\n\t\t\tif (conversationKey > -1) {\n\t\t\t\tconversationlist.splice(conversationKey, 1);\n\t\t\t\tthis.setState({ conversationlist: conversationlist });\n\t\t\t}\n\t\t}\n\n\t\t//updating last message whenever a message is composed,\n\t\tif (Object.keys(this.getContext().lastMessage).length) {\n\t\t\tconst lastMessage = this.getContext().lastMessage;\n\t\t\tconst conversationList = [...this.state.conversationlist];\n\n\t\t\tconst conversationKey = conversationList.findIndex(c => c.conversationId === lastMessage.conversationId);\n\n\t\t\tif (conversationKey > -1) {\n\t\t\t\tconst conversationObj = conversationList[conversationKey];\n\t\t\t\tlet newConversationObj = { ...conversationObj, lastMessage: { ...lastMessage } };\n\n\t\t\t\tif (conversationKey === 0) {\n\t\t\t\t\tconversationList.splice(conversationKey, 1, newConversationObj);\n\t\t\t\t} else {\n\t\t\t\t\tconversationList.splice(conversationKey, 1);\n\t\t\t\t\tconversationList.unshift(newConversationObj);\n\t\t\t\t}\n\n\t\t\t\tthis.setState({ conversationlist: conversationList });\n\t\t\t\tthis.getContext().setLastMessage({});\n\t\t\t} else {\n\t\t\t\tconst chatListMode = this.getContext().UIKitSettings.chatListMode;\n\t\t\t\tconst chatListFilterOptions = UIKitSettings.chatListFilterOptions;\n\t\t\t\tif (chatListMode !== chatListFilterOptions[\"USERS_AND_GROUPS\"]) {\n\t\t\t\t\tif ((chatListMode === chatListFilterOptions[\"USERS\"] && lastMessage.receiverType === CometChat.RECEIVER_TYPE.GROUP) || (chatListMode === chatListFilterOptions[\"GROUPS\"] && lastMessage.receiverType === CometChat.RECEIVER_TYPE.USER)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst getConversationId = () => {\n\t\t\t\t\tlet conversationId = null;\n\t\t\t\t\tif (this.getContext().type === CometChat.RECEIVER_TYPE.USER) {\n\t\t\t\t\t\tconst users = [this.loggedInUser.uid, this.getContext().item.uid];\n\t\t\t\t\t\tconversationId = users.sort().join(\"_user_\");\n\t\t\t\t\t} else if (this.getContext().type === CometChat.RECEIVER_TYPE.GROUP) {\n\t\t\t\t\t\tconversationId = `group_${this.getContext().item.guid}`;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn conversationId;\n\t\t\t\t};\n\n\t\t\t\tlet newConversation = new CometChat.Conversation();\n\t\t\t\tnewConversation.setConversationId(getConversationId());\n\t\t\t\tnewConversation.setConversationType(this.getContext().type);\n\t\t\t\tnewConversation.setConversationWith(this.getContext().item);\n\t\t\t\tnewConversation.setLastMessage(lastMessage);\n\t\t\t\tnewConversation.setUnreadMessageCount(0);\n\n\t\t\t\tconversationList.unshift(newConversation);\n\t\t\t\tthis.setState({ conversationlist: conversationList });\n\t\t\t\tthis.getContext().setLastMessage({});\n\t\t\t}\n\t\t}\n\n\t\tif (prevProps.lang !== this.props.lang) {\n\t\t\tthis.setState({ lang: this.props.lang });\n\t\t}\n\n\t\tif (this.getContext().clearedUnreadMessages === true && this.selectedConversation) {\n\t\t\tlet conversationList = [...this.state.conversationlist];\n\n\t\t\tlet conversationKey = conversationList.findIndex(c => c.conversationId === this.selectedConversation.conversationId);\n\n\t\t\tif (conversationKey > -1) {\n\t\t\t\tlet conversationObj = { ...conversationList[conversationKey] };\n\t\t\t\tlet unreadMessageCount = this.getContext().unreadMessages.length;\n\t\t\t\tlet newConversationObj = { ...conversationObj, unreadMessageCount: unreadMessageCount };\n\n\t\t\t\tconversationList.splice(conversationKey, 1);\n\t\t\t\tconversationList.unshift(newConversationObj);\n\t\t\t\tthis.setState({ conversationlist: conversationList });\n\t\t\t\tthis.getContext().setClearedUnreadMessages(false);\n\t\t\t}\n\t\t}\n\n\t\tthis.item = this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER || CometChat.ACTION_TYPE.TYPE_GROUP ? this.getContext().item : null;\n\t\tthis.hideGroupActionMessages();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.ConversationListManager.removeListeners();\n\t\tthis.ConversationListManager = null;\n\t}\n\n\tsetSelectedConversation = () => {\n\t\tconst conversationList = [...this.state.conversationlist];\n\t\tconversationList.forEach(conversation => {\n\t\t\tif (conversation?.conversationType === this.getContext().type) {\n\t\t\t\tif ((conversation?.conversationType === CometChat.ACTION_TYPE.TYPE_USER && conversation?.conversationWith?.uid === this.getContext().item?.uid) || (conversation?.conversationType === CometChat.ACTION_TYPE.TYPE_GROUP && conversation?.conversationWith?.guid === this.getContext().item?.guid)) {\n\t\t\t\t\tthis.selectedConversation = {...conversation};\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tconversationCallback = (key, item, message, options) => {\n\t\tswitch (key) {\n\t\t\tcase enums.USER_ONLINE:\n\t\t\tcase enums.USER_OFFLINE:\n\t\t\t\tthis.updateUser(item);\n\t\t\t\tbreak;\n\t\t\tcase enums.TEXT_MESSAGE_RECEIVED:\n\t\t\tcase enums.MEDIA_MESSAGE_RECEIVED:\n\t\t\tcase enums.CUSTOM_MESSAGE_RECEIVED:\n\t\t\tcase enums.INCOMING_CALL_RECEIVED:\n\t\t\tcase enums.INCOMING_CALL_CANCELLED:\n\t\t\tcase enums.MESSAGE_EDITED:\n\t\t\tcase enums.MESSAGE_DELETED:\n\t\t\tcase enums.MESSAGE_READ:\n\t\t\tcase enums.GROUP_MEMBER_ADDED:\n\t\t\tcase enums.GROUP_MEMBER_KICKED:\n\t\t\tcase enums.GROUP_MEMBER_BANNED:\n\t\t\tcase enums.GROUP_MEMBER_LEFT:\n\t\t\tcase enums.GROUP_MEMBER_SCOPE_CHANGED:\n\t\t\tcase enums.GROUP_MEMBER_JOINED:\n\t\t\tcase enums.GROUP_MEMBER_UNBANNED:\n\t\t\t\tthis.conversationUpdated(key, message, options);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tconversationUpdated = (key, message, options) => {\n\n\t\tconst chatListMode = this.getContext().UIKitSettings.chatListMode;\n\t\tconst chatListFilterOptions = UIKitSettings.chatListFilterOptions;\n\n\t\tif (chatListMode !== chatListFilterOptions[\"USERS_AND_GROUPS\"]) {\n\t\t\tif ((chatListMode === chatListFilterOptions[\"USERS\"] && message.receiverType === CometChat.RECEIVER_TYPE.GROUP) || (chatListMode === chatListFilterOptions[\"GROUPS\"] && message.receiverType === CometChat.RECEIVER_TYPE.USER)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tswitch (key) {\n\t\t\tcase enums.TEXT_MESSAGE_RECEIVED:\n\t\t\tcase enums.MEDIA_MESSAGE_RECEIVED:\n\t\t\tcase enums.CUSTOM_MESSAGE_RECEIVED:\n\t\t\tcase enums.INCOMING_CALL_RECEIVED:\n\t\t\tcase enums.INCOMING_CALL_CANCELLED:\n\t\t\t\tthis.updateConversation(key, message);\n\t\t\t\tbreak;\n\t\t\tcase enums.MESSAGE_EDITED:\n\t\t\tcase enums.MESSAGE_DELETED:\n\t\t\t\tthis.conversationEditedDeleted(message);\n\t\t\t\tbreak;\n\t\t\tcase enums.GROUP_MEMBER_ADDED:\n\t\t\t\tthis.updateGroupMemberAdded(message, options);\n\t\t\t\tbreak;\n\t\t\tcase enums.GROUP_MEMBER_KICKED:\n\t\t\tcase enums.GROUP_MEMBER_BANNED:\n\t\t\tcase enums.GROUP_MEMBER_LEFT:\n\t\t\t\tthis.updateGroupMemberRemoved(message, options);\n\t\t\t\tbreak;\n\t\t\tcase enums.GROUP_MEMBER_SCOPE_CHANGED:\n\t\t\t\tthis.updateGroupMemberScopeChanged(message, options);\n\t\t\t\tbreak;\n\t\t\tcase enums.GROUP_MEMBER_JOINED:\n\t\t\tcase enums.GROUP_MEMBER_UNBANNED:\n\t\t\t\tthis.updateGroupMemberChanged(message, options);\n\t\t\t\tbreak;\n\t\t\tcase enums.MESSAGE_READ:\n\t\t\t\tthis.onMessagesRead(message);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tupdateUser = user => {\n\t\tconst conversationlist = [...this.state.conversationlist];\n\t\tconst conversationKey = conversationlist.findIndex(conversationObj => conversationObj.conversationType === \"user\" && conversationObj.conversationWith.uid === user.uid);\n\n\t\tif (conversationKey > -1) {\n\t\t\tlet conversationObj = {...conversationlist[conversationKey]};\n\t\t\tlet conversationWithObj = {...conversationObj.conversationWith, status: user.getStatus()};\n\n\t\t\tlet newConversationObj = {...conversationObj, conversationWith: conversationWithObj};\n\t\t\tconversationlist.splice(conversationKey, 1, newConversationObj);\n\t\t\tthis.setState({conversationlist: conversationlist});\n\t\t}\n\t};\n\n\thideGroupActionMessages = () => {\n\t\tthis.getContext()\n\t\t\t.FeatureRestriction.isGroupActionMessagesEnabled()\n\t\t\t.then(response => {\n\t\t\t\tif (response !== this.state.hideGroupActionMessages) {\n\t\t\t\t\tthis.setState({hideGroupActionMessages: response});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tif (this.state.hideGroupActionMessages !== false) {\n\t\t\t\t\tthis.setState({hideGroupActionMessages: false});\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\tplayAudio = message => {\n\n\t\t\n\t\tif (message.category === CometChat.CATEGORY_ACTION && message.type === CometChat.ACTION_TYPE.TYPE_GROUP_MEMBER && this.state.hideGroupActionMessages === true) {\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Sound alert for incoming messages\n\t\t */\n\t\tconst receiverType = message.getReceiverType();\n\t\tconst receiverId = receiverType === CometChat.RECEIVER_TYPE.USER ? message.getSender().uid : message.getReceiverId();\n\n\t\tif (receiverType === this.getContext().type) {\n\t\t\tif ((receiverType === CometChat.RECEIVER_TYPE.USER && receiverId === this.getContext().item.uid) || (receiverType === CometChat.RECEIVER_TYPE.GROUP && receiverId === this.getContext().item.guid)) {\n\t\t\t\tSoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_MESSAGE\"], this.getContext());\n\t\t\t} else {\n\t\t\t\tSoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_OTHER_MESSAGE\"], this.getContext());\n\t\t\t}\n\t\t} else {\n\t\t\tSoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_OTHER_MESSAGE\"], this.getContext());\n\t\t}\n\t};\n\n\tonMessagesRead = messageReceipt => {\n\t\tconst conversationList = [...this.state.conversationlist];\n\t\tconversationList.forEach((conversation, conversationKey) => {\n\t\t\tif (conversation?.conversationType === messageReceipt.receiverType) {\n\t\t\t\tif ((conversation?.conversationType === CometChat.RECEIVER_TYPE.USER && messageReceipt.receiver === conversation?.conversationWith?.uid) || (conversation?.conversationType === CometChat.RECEIVER_TYPE.GROUP && messageReceipt.receiver === conversation?.conversationWith?.guid)) {\n\t\t\t\t\tlet unreadMessageCount = conversation.unreadMessageCount;\n\t\t\t\t\t/**\n\t\t\t\t\t * If the message id of the read reciept if greater than or equal to the lastmessage id, set unreadmessagecount to 0\n\t\t\t\t\t */\n\t\t\t\t\tif (messageReceipt?.messageId >= conversation?.lastMessage?.id) {\n\t\t\t\t\t\tunreadMessageCount = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet newConversationObj = {...conversation, unreadMessageCount: unreadMessageCount};\n\t\t\t\t\tconversationList.splice(conversationKey, 1, newConversationObj);\n\t\t\t\t\tthis.setState({conversationlist: conversationList});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tmakeConversation = message => {\n\t\tconst promise = new Promise(resolve => {\n\t\t\tCometChat.CometChatHelper.getConversationFromMessage(message)\n\t\t\t\t.then(conversation => {\n\t\t\t\t\tlet conversationList = [...this.state.conversationlist];\n\t\t\t\t\tlet conversationKey = conversationList.findIndex(c => c.conversationId === conversation.conversationId);\n\n\t\t\t\t\tlet conversationObj = {...conversation};\n\t\t\t\t\tif (conversationKey > -1) {\n\t\t\t\t\t\tconversationObj = {...conversationList[conversationKey]};\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve({conversationKey: conversationKey, conversationObj: conversationObj, conversationList: conversationList});\n\t\t\t\t});\n\t\t});\n\n\t\treturn promise;\n\t};\n\n\tmakeUnreadMessageCount = (message, conversation = {}) => {\n\t\t\n\t\t/**\n\t\t * If the received message is sent by the logged in user, don't increment the unread count\n\t\t */\n\t\tif (Object.keys(conversation).length === 0) {\n\t\t\tif (message.sender.uid === this.loggedInUser?.uid) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\n\t\tlet unreadMessageCount = parseInt(conversation.unreadMessageCount);\n\t\tif (this.selectedConversation && this.selectedConversation.conversationId === conversation.conversationId) {\n\n\t\t\tif (this.getContext().unreadMessages.length) {\n\t\t\t\tconst unreadMessage = this.getContext().unreadMessages[0];\n\t\t\t\tconst selectedConversation = this.selectedConversation;\n\n\t\t\t\tif (unreadMessage.hasOwnProperty(\"conversationId\") && unreadMessage.conversationId === selectedConversation.conversationId) {\n\n\t\t\t\t\tunreadMessageCount = 0;\n\t\t\t\t\tthis.getContext().unreadMessages.forEach(message => {\n\t\t\t\t\t\tunreadMessageCount = this.shouldIncrementCount(message) ? ++unreadMessageCount : unreadMessageCount;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tunreadMessageCount = 0;\n\t\t\t}\n\t\t} else if (\n\t\t\t(this.getContext().item.hasOwnProperty(\"guid\") && conversation.conversationWith.hasOwnProperty(\"guid\") && this.getContext().item.guid === conversation.conversationWith.guid) ||\n\t\t\t(this.getContext().item.hasOwnProperty(\"uid\") && conversation.conversationWith.hasOwnProperty(\"uid\") && this.getContext().item.uid === conversation.conversationWith.uid)\n\t\t) {\n\t\t\tunreadMessageCount = 0;\n\t\t} else {\n\t\t\tunreadMessageCount = this.shouldIncrementCount(message) ? ++unreadMessageCount : unreadMessageCount;\n\t\t}\n\n\t\treturn unreadMessageCount;\n\t};\n\n\tshouldIncrementCount = (incomingMessage) => {\n\n\t\tlet output = false;\n\t\tif (\n\t\t\t(incomingMessage.category === CometChat.CATEGORY_MESSAGE && incomingMessage.sender.uid !== this.loggedInUser?.uid) \n\t\t\t|| (this.getContext().hasKeyValue(incomingMessage, enums.KEYS[\"METADATA\"]) \n\t\t\t&& this.getContext().hasKeyValue(incomingMessage[enums.KEYS[\"METADATA\"]], enums.KEYS[\"INCREMENT_UNREAD_COUNT\"]) \n\t\t\t&& incomingMessage[enums.KEYS[\"METADATA\"]][enums.KEYS[\"INCREMENT_UNREAD_COUNT\"]] === true \n\t\t\t&& incomingMessage.sender.uid !== this.loggedInUser?.uid)\n\t\t) {\n\t\t\toutput = true;\n\t\t}\n\n\t\treturn output;\n\t}\n\n\tmakeLastMessage = (message, conversation = {}) => {\n\t\tconst newMessage = Object.assign({}, message);\n\t\treturn newMessage;\n\t};\n\n\tupdateConversation = (key, message) => {\n\n\t\tthis.makeConversation(message)\n\t\t\t.then(response => {\n\t\t\t\tconst {conversationKey, conversationObj, conversationList} = response;\n\n\t\t\t\tif (conversationKey > -1) {\n\t\t\t\t\tlet unreadMessageCount = this.makeUnreadMessageCount(message, conversationObj);\n\t\t\t\t\tlet lastMessageObj = this.makeLastMessage(message, conversationObj);\n\n\t\t\t\t\tlet newConversationObj = {...conversationObj, lastMessage: lastMessageObj, unreadMessageCount: unreadMessageCount};\n\t\t\t\t\tconversationList.splice(conversationKey, 1);\n\t\t\t\t\tconversationList.unshift(newConversationObj);\n\t\t\t\t\tthis.setState({conversationlist: conversationList});\n\n\t\t\t\t\tif (key !== enums.INCOMING_CALL_RECEIVED && key !== enums.INCOMING_CALL_CANCELLED) {\n\t\t\t\t\t\tthis.playAudio(message);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet unreadMessageCount = this.makeUnreadMessageCount(message, {});\n\t\t\t\t\tlet lastMessageObj = this.makeLastMessage(message);\n\n\t\t\t\t\tlet newConversationObj = {...conversationObj, lastMessage: lastMessageObj, unreadMessageCount: unreadMessageCount};\n\t\t\t\t\tconversationList.unshift(newConversationObj);\n\t\t\t\t\tthis.setState({conversationlist: conversationList});\n\n\t\t\t\t\tif (key !== enums.INCOMING_CALL_RECEIVED && key !== enums.INCOMING_CALL_CANCELLED) {\n\t\t\t\t\t\tthis.playAudio(message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\tconversationEditedDeleted = message => {\n\t\tthis.makeConversation(message)\n\t\t\t.then(response => {\n\t\t\t\tconst {conversationKey, conversationObj, conversationList} = response;\n\n\t\t\t\tif (conversationKey > -1) {\n\t\t\t\t\tlet lastMessageObj = conversationObj.lastMessage;\n\n\t\t\t\t\tif (lastMessageObj.id === message.id) {\n\t\t\t\t\t\tconst newLastMessageObj = Object.assign({}, lastMessageObj, message);\n\t\t\t\t\t\tlet newConversationObj = Object.assign({}, conversationObj, {lastMessage: newLastMessageObj});\n\t\t\t\t\t\tconversationList.splice(conversationKey, 1, newConversationObj);\n\t\t\t\t\t\tthis.setState({conversationlist: conversationList});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\tupdateGroupMemberAdded = (message, options) => {\n\t\tthis.makeConversation(message)\n\t\t\t.then(response => {\n\t\t\t\tconst {conversationKey, conversationObj, conversationList} = response;\n\n\t\t\t\tif (conversationKey > -1) {\n\t\t\t\t\tlet lastMessageObj = this.makeLastMessage(message, conversationObj);\n\t\t\t\t\tlet conversationWithObj = {...conversationObj.conversationWith};\n\n\t\t\t\t\tlet membersCount = parseInt(conversationWithObj.membersCount);\n\t\t\t\t\tif (message.hasOwnProperty(\"actionFor\") && message.actionFor.hasOwnProperty(\"membersCount\")) {\n\t\t\t\t\t\tmembersCount = message.actionFor.membersCount;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet newConversationWithObj = {...conversationWithObj, membersCount: membersCount};\n\n\t\t\t\t\tlet newConversationObj = {...conversationObj, conversationWith: newConversationWithObj, lastMessage: lastMessageObj};\n\t\t\t\t\tconversationList.splice(conversationKey, 1);\n\t\t\t\t\tconversationList.unshift(newConversationObj);\n\t\t\t\t\tthis.setState({conversationlist: conversationList});\n\t\t\t\t\tthis.playAudio(message);\n\t\t\t\t} else {\n\t\t\t\t\tif (options && this.loggedInUser.uid === options.user.uid) {\n\t\t\t\t\t\tlet lastMessageObj = this.makeLastMessage(message);\n\t\t\t\t\t\tlet conversationWithObj = {...conversationObj.conversationWith};\n\n\t\t\t\t\t\tlet membersCount = parseInt(conversationWithObj.membersCount);\n\t\t\t\t\t\tif (message.hasOwnProperty(\"actionFor\") && message.actionFor.hasOwnProperty(\"membersCount\")) {\n\t\t\t\t\t\t\tmembersCount = message.actionFor.membersCount;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet scope = CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT;\n\t\t\t\t\t\tlet hasJoined = options.hasJoined;\n\n\t\t\t\t\t\tlet newConversationWithObj = {...conversationWithObj, membersCount: membersCount, scope: scope, hasJoined: hasJoined};\n\t\t\t\t\t\tlet newConversationObj = {...conversationObj, conversationWith: newConversationWithObj, lastMessage: lastMessageObj};\n\n\t\t\t\t\t\tconversationList.unshift(newConversationObj);\n\t\t\t\t\t\tthis.setState({conversationlist: conversationList});\n\t\t\t\t\t\tthis.playAudio(message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\tupdateGroupMemberRemoved = (message, options) => {\n\t\tthis.makeConversation(message)\n\t\t\t.then(response => {\n\t\t\t\tconst {conversationKey, conversationObj, conversationList} = response;\n\n\t\t\t\tif (conversationKey > -1) {\n\t\t\t\t\tif (options && this.loggedInUser.uid === options.user.uid) {\n\t\t\t\t\t\tconversationList.splice(conversationKey, 1);\n\t\t\t\t\t\tthis.setState({conversationlist: conversationList});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet lastMessageObj = this.makeLastMessage(message, conversationObj);\n\t\t\t\t\t\tlet conversationWithObj = {...conversationObj.conversationWith};\n\n\t\t\t\t\t\tlet membersCount = parseInt(conversationWithObj.membersCount);\n\t\t\t\t\t\tif (message.hasOwnProperty(\"actionFor\") && message.actionFor.hasOwnProperty(\"membersCount\")) {\n\t\t\t\t\t\t\tmembersCount = message.actionFor.membersCount;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet newConversationWithObj = {...conversationWithObj, membersCount: membersCount};\n\n\t\t\t\t\t\tlet newConversationObj = {...conversationObj, conversationWith: newConversationWithObj, lastMessage: lastMessageObj};\n\t\t\t\t\t\tconversationList.splice(conversationKey, 1);\n\t\t\t\t\t\tconversationList.unshift(newConversationObj);\n\t\t\t\t\t\tthis.setState({conversationlist: conversationList});\n\t\t\t\t\t\tthis.playAudio(message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\tupdateGroupMemberScopeChanged = (message, options) => {\n\t\tthis.makeConversation(message)\n\t\t\t.then(response => {\n\t\t\t\tconst {conversationKey, conversationObj, conversationList} = response;\n\n\t\t\t\tif (conversationKey > -1) {\n\t\t\t\t\tlet lastMessageObj = this.makeLastMessage(message, conversationObj);\n\n\t\t\t\t\tlet conversationWithObj = {...conversationObj.conversationWith};\n\t\t\t\t\tlet membersCount = parseInt(conversationWithObj.membersCount);\n\n\t\t\t\t\tlet scope = conversationWithObj.scope;\n\t\t\t\t\tif (options && this.loggedInUser.uid === options.user.uid) {\n\t\t\t\t\t\tscope = options.scope;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet newConversationWithObj = {...conversationWithObj, membersCount: membersCount, scope: scope};\n\t\t\t\t\tlet newConversationObj = {...conversationObj, conversationWith: newConversationWithObj, lastMessage: lastMessageObj};\n\t\t\t\t\tconversationList.splice(conversationKey, 1);\n\t\t\t\t\tconversationList.unshift(newConversationObj);\n\t\t\t\t\tthis.setState({conversationlist: conversationList});\n\t\t\t\t\tthis.playAudio(message);\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\tupdateGroupMemberChanged = (message, options) => {\n\t\tthis.makeConversation(message)\n\t\t\t.then(response => {\n\t\t\t\tconst {conversationKey, conversationObj, conversationList} = response;\n\t\t\t\tif (conversationKey > -1) {\n\t\t\t\t\tif (options && this.loggedInUser.uid !== options.user.uid) {\n\t\t\t\t\t\tlet lastMessageObj = this.makeLastMessage(message, conversationObj);\n\t\t\t\t\t\tlet conversationWithObj = {...conversationObj.conversationWith};\n\n\t\t\t\t\t\tlet membersCount = parseInt(conversationWithObj.membersCount);\n\t\t\t\t\t\tif (message.hasOwnProperty(\"actionFor\") && message.actionFor.hasOwnProperty(\"membersCount\")) {\n\t\t\t\t\t\t\tmembersCount = message.actionFor.membersCount;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet newConversationWithObj = {...conversationWithObj, membersCount: membersCount};\n\t\t\t\t\t\tlet newConversationObj = {...conversationObj, conversationWith: newConversationWithObj, lastMessage: lastMessageObj};\n\t\t\t\t\t\tconversationList.splice(conversationKey, 1);\n\t\t\t\t\t\tconversationList.unshift(newConversationObj);\n\t\t\t\t\t\tthis.setState({conversationlist: conversationList});\n\t\t\t\t\t\tthis.playAudio(message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\thandleScroll = e => {\n\t\tconst bottom = Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) === Math.round(e.currentTarget.clientHeight);\n\t\tif (bottom) this.getConversations();\n\t};\n\n\t//click handler\n\thandleClick = conversation => {\n\t\tif (!this.props.onItemClick) return;\n\n\t\tthis.props.onItemClick(conversation.conversationWith, conversation.conversationType);\n\t\tthis.selectedConversation = conversation;\n\t};\n\n\thandleMenuClose = () => {\n\t\t\n\t\tif (!this.props.actionGenerated) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.props.actionGenerated(enums.ACTIONS[\"TOGGLE_SIDEBAR\"]);\n\t};\n\n\tgetConversations = () => {\n\t\tthis.ConversationListManager.fetchNextConversation()\n\t\t\t.then(conversationList => {\n\t\t\t\tif (conversationList.length === 0) {\n\n\t\t\t\t\tif (this.state.conversationlist.length === 0) {\n\t\t\t\t\t\tthis.setState({ decoratorMessage: Translator.translate(\"NO_CHATS_FOUND\", this.state.lang) });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({ decoratorMessage: \"\" });\n\t\t\t\t}\n\n\t\t\t\tconversationList.forEach(conversation => {\n\t\t\t\t\tif (this.getContext().hasOwnProperty(\"type\") && this.props.hasOwnProperty(\"item\") && this.getContext().type === conversation.conversationType) {\n\t\t\t\t\t\tif ((conversation.conversationType === CometChat.RECEIVER_TYPE.USER && this.getContext().item.uid === conversation.conversationWith.uid) || (conversation.conversationType === CometChat.RECEIVER_TYPE.GROUP && this.getContext().item.guid === conversation.conversationWith.guid)) {\n\t\t\t\t\t\t\tconversation.unreadMessageCount = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.setState({ conversationlist: [...this.state.conversationlist, ...conversationList] });\n\t\t\t})\n\t\t\t.catch(error => this.setState({ decoratorMessage: Translator.translate(\"SOMETHING_WRONG\", this.state.lang) }));\n\t};\n\n\tgetContext = () => {\n\t\tif (this.props._parent.length) {\n\t\t\treturn this.context;\n\t\t} else {\n\t\t\treturn this.contextProviderRef.state;\n\t\t}\n\t};\n\n\tactionHandler = (action, conversation) => {\n\t\tswitch (action) {\n\t\t\tcase enums.ACTIONS[\"CONVERSATION_DELETED\"]:\n\t\t\t\tthis.conversationDeleted(conversation);\n\t\t\t\tbreak;\n\t\t\tcase enums.ACTIONS[\"DELETE_CONVERSATION\"]:\n\t\t\t\tthis.deleteConversation(conversation);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tdeleteConversation = conversation => {\n\t\t\n\t\tif (!this.state.showConfirmDialog) {\n\t\t\tthis.setState({showConfirmDialog: true});\n\t\t}\n\t};\n\n\tonDeleteConfirm = e => {\n\t\t\n\t\tconst optionSelected = e.target.value;\n\n\t\tthis.setState({showConfirmDialog: false});\n\t\tif(optionSelected === \"yes\") {\n\n\t\t\tconst conversation = this.context.conversationToBeDeleted;\n\t\t\tconst conversationWith = conversation.conversationType === CometChat.RECEIVER_TYPE.GROUP ? conversation?.conversationWith?.guid : conversation?.conversationWith?.uid;\n\t\t\tCometChat.deleteConversation(conversationWith, conversation.conversationType)\n\t\t\t\t.then(deletedConversation => {\n\t\t\t\t\tthis.context.setConversationToBeDeleted(null);\n\t\t\t\t\tthis.conversationDeleted(conversation);\n\t\t\t\t})\n\t\t\t\t.catch(error => this.toastRef.setError(\"SOMETHING_WRONG\"));\n\t\t} else {\n\t\t\tthis.context.setConversationToBeDeleted(null);\n\t\t\tthis.setState({showConfirmDialog: false});\n\t\t}\n\t};\n\n\tconversationDeleted = conversation => {\n\t\tconst conversationList = [...this.state.conversationlist];\n\t\tconst conversationKey = conversationList.findIndex(c => c.conversationId === conversation.conversationId);\n\n\t\tif (conversationKey > -1) {\n\t\t\tif (this.selectedConversation && this.selectedConversation.conversationId === conversation.conversationId) {\n\t\t\t\tthis.selectedConversation = null;\n\t\t\t\tthis.getContext().setTypeAndItem(\"\", {});\n\t\t\t}\n\n\t\t\tconversationList.splice(conversationKey, 1);\n\t\t\tthis.setState({conversationlist: conversationList});\n\t\t}\n\t};\n\n\trender() {\n\t\tconst conversationList = this.state.conversationlist.map((conversation, key) => {\n\t\t\tlet selectedConversation = null;\n\t\t\tif (this.getContext() && Object.keys(this.getContext().item).length && this.getContext().type.trim().length) {\n\t\t\t\tif (this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER && this.getContext().item.uid === conversation.conversationWith.uid) {\n\t\t\t\t\tselectedConversation = conversation;\n\t\t\t\t} else if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP && this.getContext().item.guid === conversation.conversationWith.guid) {\n\t\t\t\t\tselectedConversation = conversation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<CometChatConversationListItem\n\t\t\t\t\tkey={key}\n\t\t\t\t\ttheme={this.props.theme}\n\t\t\t\t\tconfig={this.props.config}\n\t\t\t\t\tlang={this.state.lang}\n\t\t\t\t\tconversationKey={key}\n\t\t\t\t\tconversation={conversation}\n\t\t\t\t\tselectedConversation={selectedConversation}\n\t\t\t\t\tloggedInUser={this.loggedInUser}\n\t\t\t\t\thandleClick={this.handleClick}\n\t\t\t\t\tactionGenerated={this.actionHandler} />\n\t\t\t);\n\t\t});\n\n\t\tlet messageContainer = null;\n\t\tif (this.state.decoratorMessage.length !== 0) {\n\t\t\tmessageContainer = (\n\t\t\t\t<div css={chatsMsgStyle()} className=\"chats__decorator-message\">\n\t\t\t\t\t<p css={chatsMsgTxtStyle(this.props)} className=\"decorator-message\">\n\t\t\t\t\t\t{this.state.decoratorMessage}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\tlet closeBtn = <div css={chatsHeaderCloseStyle(navigateIcon, this.getContext())} className=\"header__close\" onClick={this.handleMenuClose}></div>;\n\t\tif (this.getContext() && Object.keys(this.getContext().item).length === 0) {\n\t\t\tcloseBtn = null;\n\t\t}\n\n\t\tlet showConfirmDialog = null;\n\t\tif (this.state.showConfirmDialog) {\n\t\t\tshowConfirmDialog = <CometChatConfirmDialog {...this.props} \n\t\t\tonClick={this.onDeleteConfirm} \n\t\t\tmessage={Translator.translate(\"DELETE_CONFIRM\", this.getContext().language)}\n\t\t\tconfirmButtonText={Translator.translate(\"DELETE\", this.getContext().language)}\n\t\t\tcancelButtonText={Translator.translate(\"CANCEL\", this.getContext().language)} />;\n\t\t}\n\n\t\tconst chatList = (\n\t\t\t<div css={chatsWrapperStyle(this.props)} className=\"chats\">\n\t\t\t\t<div css={chatsHeaderStyle(this.props)} className=\"chats__header\">\n\t\t\t\t\t{closeBtn}\n\t\t\t\t\t<h4 css={chatsHeaderTitleStyle(this.props)} className=\"header__title\" dir={Translator.getDirection(this.state.lang)}>\n\t\t\t\t\t\t{Translator.translate(\"CHATS\", this.state.lang)}\n\t\t\t\t\t</h4>\n\t\t\t\t</div>\n\t\t\t\t{messageContainer}\n\t\t\t\t<div css={chatsListStyle()} className=\"chats__list\" onScroll={this.handleScroll} ref={el => (this.chatListRef = el)}>\n\t\t\t\t\t{conversationList}\n\t\t\t\t</div>\n\t\t\t\t{showConfirmDialog}\n\t\t\t\t<CometChatToastNotification ref={el => (this.toastRef = el)} />\n\t\t\t</div>\n\t\t);\n\n\t\tlet chatListWrapper = chatList;\n\t\t//if used as a standalone component, add errorboundary and context provider\n\t\tif (this.props._parent === \"\") {\n\t\t\tchatListWrapper = <CometChatContextProvider ref={el => (this.contextProviderRef = el)}>{chatList}</CometChatContextProvider>;\n\t\t}\n\n\t\treturn chatListWrapper;\n\t}\n}\n\n// Specifies the default values for props:\nCometChatConversationList.defaultProps = {\n\tlang: Translator.getDefaultLanguage(),\n\ttheme: theme,\n\tonItemClick: () => { },\n\t_parent: \"\"\n};\n\nCometChatConversationList.propTypes = {\n\tlang: PropTypes.string,\n\ttheme: PropTypes.object,\n\tonItemClick: PropTypes.func,\n\t_parent: PropTypes.string\n}\n\nexport { CometChatConversationList };"]},"metadata":{},"sourceType":"module"}