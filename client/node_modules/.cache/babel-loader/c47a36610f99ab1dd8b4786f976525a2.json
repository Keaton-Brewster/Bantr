{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatMessageReactions/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { Emoji } from \"emoji-mart\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport * as enums from \"../../../../util/enums.js\";\nimport { checkMessageForExtensionsData } from \"../../../../util/common\";\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\nimport { messageReactionsStyle, reactionCountStyle, emojiButtonStyle } from \"./style\";\nimport reactIcon from \"./resources/reactions.svg\";\n\nclass CometChatMessageReactions extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.reactToMessages = emoji => {\n      CometChat.callExtension(\"reactions\", \"POST\", \"v1/react\", {\n        msgId: this.state.message.id,\n        emoji: emoji.colons\n      }).then(response => {\n        // Reaction failed\n        if (response.hasOwnProperty(\"success\") === false || response.hasOwnProperty(\"success\") && response[\"success\"] === false) {\n          this.props.actionGenerated(enums.ACTIONS[\"ERROR\"], [], \"SOMETHING_WRONG\");\n        }\n      }).catch(error => this.props.actionGenerated(enums.ACTIONS[\"ERROR\"], [], \"SOMETHING_WRONG\"));\n    };\n\n    this.triggerEmojiClick = event => {\n      event.stopPropagation();\n      event.currentTarget.querySelector(\".emoji-mart-emoji\").click();\n    };\n\n    this.getMessageReactions = reaction => {\n      if (reaction === null) {\n        return null;\n      }\n\n      const messageReactions = Object.keys(reaction).map((data, key) => {\n        const reactionData = reaction[data];\n        const reactionName = data.replaceAll(\":\", \"\");\n        const reactionCount = Object.keys(reactionData).length;\n\n        if (!reactionCount) {\n          return null;\n        }\n\n        const userList = [];\n        let reactionTitle = \"\";\n\n        for (const user in reactionData) {\n          userList.push(reactionData[user][\"name\"]);\n        }\n\n        if (userList.length) {\n          reactionTitle = userList.join(\", \");\n          const str = ` ${Translator.translate(\"REACTED\", this.props.lang)}`;\n          reactionTitle = reactionTitle.concat(str);\n        }\n\n        const reactionClassName = `reaction reaction__${reactionName}`;\n        return jsx(\"div\", {\n          key: key,\n          css: messageReactionsStyle(this.props, reactionData, this.context),\n          className: reactionClassName,\n          title: reactionTitle,\n          onClick: this.triggerEmojiClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 9\n          }\n        }, jsx(Emoji, {\n          emoji: {\n            id: reactionName\n          },\n          size: 16,\n          native: true,\n          onClick: this.reactToMessages,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 11\n          }\n        }), jsx(\"span\", {\n          css: reactionCountStyle(this.context),\n          className: \"reaction__count\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 11\n          }\n        }, reactionCount));\n      });\n      return messageReactions;\n    };\n\n    this.addMessageReaction = () => {\n      //If reacting to messages feature is disabled\n      if (this.props.enableMessageReaction === false) {\n        return null;\n      }\n\n      const addReactionEmoji = jsx(\"div\", {\n        key: \"-1\",\n        css: messageReactionsStyle(this.props, {}, this.context),\n        className: \"reaction reaction__add\",\n        title: Translator.translate(\"ADD_REACTION\", this.props.lang),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 7\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        css: emojiButtonStyle(reactIcon, this.context),\n        className: \"button__reacttomessage\",\n        onClick: () => this.props.actionGenerated(enums.ACTIONS[\"REACT_TO_MESSAGE\"], this.props.message),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }\n      }, jsx(\"i\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }\n      })));\n      return addReactionEmoji;\n    };\n\n    this.state = {\n      message: props.message,\n      reaction: props.reaction\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.message !== this.props.message) {\n      this.setState({\n        message: this.props.message\n      });\n    }\n  }\n\n  render() {\n    const reaction = checkMessageForExtensionsData(this.state.message, \"reactions\");\n    const messageReactions = this.getMessageReactions(reaction);\n    const addReactionEmoji = this.addMessageReaction();\n\n    if (messageReactions !== null && messageReactions.length && addReactionEmoji !== null) {\n      if (this.props.message.messageFrom === \"receiver\") {\n        messageReactions.push(addReactionEmoji);\n      } else {\n        messageReactions.unshift(addReactionEmoji);\n      }\n    }\n\n    return messageReactions;\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatMessageReactions.contextType = CometChatContext;\nCometChatMessageReactions.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n  enableMessageReaction: false\n};\nCometChatMessageReactions.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n  enableMessageReaction: PropTypes.bool\n};\nexport { CometChatMessageReactions };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatMessageReactions/index.js"],"names":["React","jsx","PropTypes","Emoji","CometChat","CometChatContext","enums","checkMessageForExtensionsData","theme","Translator","messageReactionsStyle","reactionCountStyle","emojiButtonStyle","CometChatMessageReactions","Component","constructor","props","reactToMessages","emoji","callExtension","msgId","state","message","id","colons","then","response","hasOwnProperty","actionGenerated","ACTIONS","catch","error","triggerEmojiClick","event","stopPropagation","currentTarget","querySelector","click","getMessageReactions","reaction","messageReactions","Object","keys","map","data","key","reactionData","reactionName","replaceAll","reactionCount","length","userList","reactionTitle","user","push","join","str","translate","lang","concat","reactionClassName","context","addMessageReaction","enableMessageReaction","addReactionEmoji","reactIcon","componentDidUpdate","prevProps","prevState","setState","render","messageFrom","unshift","contextType","defaultProps","getDefaultLanguage","propTypes","string","object","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { Emoji } from \"emoji-mart\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport * as enums from \"../../../../util/enums.js\";\nimport { checkMessageForExtensionsData } from \"../../../../util/common\";\n\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\n\nimport {\n  messageReactionsStyle,\n  reactionCountStyle,\n  emojiButtonStyle,\n} from \"./style\";\n\nimport reactIcon from \"./resources/reactions.svg\";\n\nclass CometChatMessageReactions extends React.Component {\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: props.message,\n      reaction: props.reaction,\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.message !== this.props.message) {\n      this.setState({ message: this.props.message });\n    }\n  }\n\n  reactToMessages = (emoji) => {\n    CometChat.callExtension(\"reactions\", \"POST\", \"v1/react\", {\n      msgId: this.state.message.id,\n      emoji: emoji.colons,\n    })\n      .then((response) => {\n        // Reaction failed\n        if (\n          response.hasOwnProperty(\"success\") === false ||\n          (response.hasOwnProperty(\"success\") && response[\"success\"] === false)\n        ) {\n          this.props.actionGenerated(\n            enums.ACTIONS[\"ERROR\"],\n            [],\n            \"SOMETHING_WRONG\"\n          );\n        }\n      })\n      .catch((error) =>\n        this.props.actionGenerated(\n          enums.ACTIONS[\"ERROR\"],\n          [],\n          \"SOMETHING_WRONG\"\n        )\n      );\n  };\n\n  triggerEmojiClick = (event) => {\n    event.stopPropagation();\n    event.currentTarget.querySelector(\".emoji-mart-emoji\").click();\n  };\n\n  getMessageReactions = (reaction) => {\n    if (reaction === null) {\n      return null;\n    }\n\n    const messageReactions = Object.keys(reaction).map((data, key) => {\n      const reactionData = reaction[data];\n      const reactionName = data.replaceAll(\":\", \"\");\n      const reactionCount = Object.keys(reactionData).length;\n\n      if (!reactionCount) {\n        return null;\n      }\n\n      const userList = [];\n      let reactionTitle = \"\";\n\n      for (const user in reactionData) {\n        userList.push(reactionData[user][\"name\"]);\n      }\n\n      if (userList.length) {\n        reactionTitle = userList.join(\", \");\n        const str = ` ${Translator.translate(\"REACTED\", this.props.lang)}`;\n        reactionTitle = reactionTitle.concat(str);\n      }\n\n      const reactionClassName = `reaction reaction__${reactionName}`;\n      return (\n        <div\n          key={key}\n          css={messageReactionsStyle(this.props, reactionData, this.context)}\n          className={reactionClassName}\n          title={reactionTitle}\n          onClick={this.triggerEmojiClick}\n        >\n          <Emoji\n            emoji={{ id: reactionName }}\n            size={16}\n            native\n            onClick={this.reactToMessages}\n          />\n          <span\n            css={reactionCountStyle(this.context)}\n            className=\"reaction__count\"\n          >\n            {reactionCount}\n          </span>\n        </div>\n      );\n    });\n\n    return messageReactions;\n  };\n\n  addMessageReaction = () => {\n    //If reacting to messages feature is disabled\n    if (this.props.enableMessageReaction === false) {\n      return null;\n    }\n\n    const addReactionEmoji = (\n      <div\n        key=\"-1\"\n        css={messageReactionsStyle(this.props, {}, this.context)}\n        className=\"reaction reaction__add\"\n        title={Translator.translate(\"ADD_REACTION\", this.props.lang)}\n      >\n        <button\n          type=\"button\"\n          css={emojiButtonStyle(reactIcon, this.context)}\n          className=\"button__reacttomessage\"\n          onClick={() =>\n            this.props.actionGenerated(\n              enums.ACTIONS[\"REACT_TO_MESSAGE\"],\n              this.props.message\n            )\n          }\n        >\n          <i></i>\n        </button>\n      </div>\n    );\n\n    return addReactionEmoji;\n  };\n\n  render() {\n    const reaction = checkMessageForExtensionsData(\n      this.state.message,\n      \"reactions\"\n    );\n    const messageReactions = this.getMessageReactions(reaction);\n\n    const addReactionEmoji = this.addMessageReaction();\n\n    if (\n      messageReactions !== null &&\n      messageReactions.length &&\n      addReactionEmoji !== null\n    ) {\n      if (this.props.message.messageFrom === \"receiver\") {\n        messageReactions.push(addReactionEmoji);\n      } else {\n        messageReactions.unshift(addReactionEmoji);\n      }\n    }\n\n    return messageReactions;\n  }\n}\n\n// Specifies the default values for props:\nCometChatMessageReactions.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n  enableMessageReaction: false,\n};\n\nCometChatMessageReactions.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n  enableMessageReaction: PropTypes.bool,\n};\n\nexport { CometChatMessageReactions };\n"]},"metadata":{},"sourceType":"module"}