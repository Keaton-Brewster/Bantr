{"ast":null,"code":"import * as enums from \"../../util/enums.js\";\nimport translationAR from \"./locales/ar/translation.json\";\nimport translationDE from \"./locales/de/translation.json\";\nimport translationEN from \"./locales/en/translation.json\";\nimport translationES from \"./locales/es/translation.json\";\nimport translationFR from \"./locales/fr/translation.json\";\nimport translationHI from \"./locales/hi/translation.json\";\nimport translationMS from \"./locales/ms/translation.json\";\nimport translationPT from \"./locales/pt/translation.json\";\nimport translationRU from \"./locales/ru/translation.json\";\nimport translationZH from \"./locales/zh/translation.json\";\nimport translationZHTW from \"./locales/zh-tw/translation.json\";\nimport translationSV from \"./locales/sv/translation.json\";\nimport translationLT from \"./locales/lt/translation.json\"; // the translations\n\nconst translations = {\n  \"ar\": translationAR,\n  \"de\": translationDE,\n  \"en\": translationEN,\n  \"es\": translationES,\n  \"fr\": translationFR,\n  \"hi\": translationHI,\n  \"ms\": translationMS,\n  \"pt\": translationPT,\n  \"ru\": translationRU,\n  \"zh\": translationZH,\n  \"zh-tw\": translationZHTW,\n  \"sv\": translationSV,\n  \"lt\": translationLT\n};\nwindow.addEventListener('languagechange', () => {\n  let language = Translator.getBrowserLanguage().toLowerCase();\n  Translator.setLanguage(language);\n});\n\nclass Translator {\n  static getDirection(language) {\n    return this.rtlLanguages.includes(language) ? \"rtl\" : \"ltr\";\n  }\n\n  static translate(str, language) {\n    if (translations.hasOwnProperty(language)) {\n      const languageDb = translations[language];\n\n      if (languageDb.hasOwnProperty(str)) {\n        return languageDb[str];\n      }\n\n      return str;\n    } else {\n      const languageDb = translations[this.defaultLanguage];\n\n      if (languageDb.hasOwnProperty(str)) {\n        return languageDb[str];\n      }\n\n      return str;\n    }\n  }\n\n}\n\nTranslator.key = enums.CONSTANTS[\"LOCALE\"];\nTranslator.rtlLanguages = [\"ar\"];\nTranslator.defaultLanguage = \"en\";\n\nTranslator.getLanguage = () => {\n  return localStorage.getItem(Translator.key);\n};\n\nTranslator.setLanguage = language => {\n  const item = Translator.key;\n  localStorage.setItem(item, language);\n};\n\nTranslator.getBrowserLanguage = () => navigator.languages && navigator.languages[0] || navigator.language || navigator.userLanguage;\n\nTranslator.getDefaultLanguage = () => {\n  //get the language from localstorage\n  const savedLanguage = Translator.getLanguage(); //get the language set in the browser\n\n  const browserLanguageCode = Translator.getBrowserLanguage().toLowerCase();\n  let browserLanguage = browserLanguageCode; //check if the language set in the browser has hyphen(-), if yes split and take the first element of the array\n\n  if (browserLanguageCode !== \"zh-tw\" && browserLanguageCode.indexOf(\"-\") !== -1) {\n    const browserLanguageArray = browserLanguageCode.split(\"-\");\n    browserLanguage = browserLanguageArray[0];\n  } //if there is language set in localstorage and it is different from browser language, update local storage and return the language code\n\n\n  if (savedLanguage) {\n    if (savedLanguage !== browserLanguage) {\n      Translator.setLanguage(browserLanguage); //if the translations are not available, default to en\n\n      return translations.hasOwnProperty(browserLanguage) ? browserLanguage : Translator.defaultLanguage;\n    } else {\n      //if the translations are not available, default to en\n      return translations.hasOwnProperty(browserLanguage) ? browserLanguage : Translator.defaultLanguage;\n    }\n  } else {\n    Translator.setLanguage(browserLanguage); //if the translations are not available, default to en\n\n    return translations.hasOwnProperty(browserLanguage) ? browserLanguage : Translator.defaultLanguage;\n  }\n};\n\nexport default Translator;","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/resources/localization/translator.js"],"names":["enums","translationAR","translationDE","translationEN","translationES","translationFR","translationHI","translationMS","translationPT","translationRU","translationZH","translationZHTW","translationSV","translationLT","translations","window","addEventListener","language","Translator","getBrowserLanguage","toLowerCase","setLanguage","getDirection","rtlLanguages","includes","translate","str","hasOwnProperty","languageDb","defaultLanguage","key","CONSTANTS","getLanguage","localStorage","getItem","item","setItem","navigator","languages","userLanguage","getDefaultLanguage","savedLanguage","browserLanguageCode","browserLanguage","indexOf","browserLanguageArray","split"],"mappings":"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","sourcesContent":["import * as enums from \"../../util/enums.js\";\n\nimport translationAR from \"./locales/ar/translation.json\";\nimport translationDE from \"./locales/de/translation.json\";\nimport translationEN from \"./locales/en/translation.json\";\nimport translationES from \"./locales/es/translation.json\";\nimport translationFR from \"./locales/fr/translation.json\";\nimport translationHI from \"./locales/hi/translation.json\";\nimport translationMS from \"./locales/ms/translation.json\";\nimport translationPT from \"./locales/pt/translation.json\";\nimport translationRU from \"./locales/ru/translation.json\";\nimport translationZH from \"./locales/zh/translation.json\";\nimport translationZHTW from \"./locales/zh-tw/translation.json\";\nimport translationSV from \"./locales/sv/translation.json\";\nimport translationLT from \"./locales/lt/translation.json\";\n\n// the translations\nconst translations = {\n    \"ar\": translationAR,\n    \"de\": translationDE,\n    \"en\": translationEN,\n    \"es\": translationES,\n    \"fr\": translationFR,\n    \"hi\": translationHI,\n    \"ms\": translationMS,\n    \"pt\": translationPT,\n    \"ru\": translationRU,\n    \"zh\": translationZH,\n    \"zh-tw\": translationZHTW,\n    \"sv\": translationSV,\n    \"lt\": translationLT,\n};\n\nwindow.addEventListener('languagechange', () => {\n    let language = Translator.getBrowserLanguage().toLowerCase();\n    Translator.setLanguage(language);\n});\n\nclass Translator {\n\n    static key = enums.CONSTANTS[\"LOCALE\"];\n    static rtlLanguages = [\"ar\"];\n    static defaultLanguage = \"en\";\n\n    static getLanguage = () => {\n\n        return localStorage.getItem(this.key);\n    }\n\n    static setLanguage = (language) => {\n\n        const item = this.key;\n        localStorage.setItem(item, language);\n    }\n\n    static getBrowserLanguage = () => ((navigator.languages && navigator.languages[0]) || navigator.language || navigator.userLanguage);\n\n    static getDefaultLanguage = () => {\n\n        //get the language from localstorage\n        const savedLanguage = this.getLanguage();\n\n        //get the language set in the browser\n        const browserLanguageCode = Translator.getBrowserLanguage().toLowerCase();\n        let browserLanguage = browserLanguageCode;\n\n        //check if the language set in the browser has hyphen(-), if yes split and take the first element of the array\n        if (browserLanguageCode !== \"zh-tw\" && browserLanguageCode.indexOf(\"-\") !== -1) {\n\n            const browserLanguageArray = browserLanguageCode.split(\"-\");\n            browserLanguage = browserLanguageArray[0];\n        }\n\n        //if there is language set in localstorage and it is different from browser language, update local storage and return the language code\n        if (savedLanguage) {\n\n            if (savedLanguage !== browserLanguage) {\n\n                this.setLanguage(browserLanguage);\n                \n                //if the translations are not available, default to en\n                return (translations.hasOwnProperty(browserLanguage)) ? browserLanguage : this.defaultLanguage;\n                \n            } else {\n\n                //if the translations are not available, default to en\n                return (translations.hasOwnProperty(browserLanguage)) ? browserLanguage : this.defaultLanguage;\n            }\n\n        } else {\n\n            this.setLanguage(browserLanguage);\n\n            //if the translations are not available, default to en\n            return (translations.hasOwnProperty(browserLanguage)) ? browserLanguage : this.defaultLanguage;\n        }\n    }\n\n    static getDirection(language) {\n        return this.rtlLanguages.includes(language) ? \"rtl\" : \"ltr\";\n    }\n\n    static translate(str, language) {\n\n        if (translations.hasOwnProperty(language)) {\n\n            const languageDb = translations[language];\n            if (languageDb.hasOwnProperty(str)) {\n                return languageDb[str];\n            }\n\n            return str;\n\n        } else {\n\n            const languageDb = translations[this.defaultLanguage];\n            if (languageDb.hasOwnProperty(str)) {\n                return languageDb[str];\n            }\n\n            return str;\n        }\n    }\n}\n\nexport default Translator;"]},"metadata":{},"sourceType":"module"}