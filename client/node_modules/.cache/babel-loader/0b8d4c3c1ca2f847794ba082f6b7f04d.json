{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Calls/CometChatIncomingDirectCall/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx, keyframes } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { messageAlertManager } from \"./controller\";\nimport { CometChatAvatar } from \"../../Shared\";\nimport { CometChatCallScreen } from \"../CometChatCallScreen\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { SoundManager } from \"../../../util/SoundManager\";\nimport { Storage } from \"../../../util/Storage\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\nimport { incomingCallWrapperStyle, callContainerStyle, headerWrapperStyle, callDetailStyle, nameStyle, callTypeStyle, thumbnailStyle, headerButtonStyle, ButtonStyle, callIconStyle } from \"./style\";\nimport videoCallIcon from \"./resources/incoming-video-call.svg\";\n\nclass CometChatIncomingDirectCall extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.adjustFontSize = () => {\n      if (this.callButtonRef && this.callButtonRef.current) {\n        let reduceFontSize = false;\n        const buttonNodeList = this.callButtonRef.current.querySelectorAll(\"button\");\n        buttonNodeList.forEach(buttonNode => {\n          const parentContainerWidth = buttonNode.clientWidth;\n          const currentTextWidth = buttonNode.scrollWidth;\n\n          if (parentContainerWidth < currentTextWidth) {\n            reduceFontSize = true;\n          }\n        });\n\n        if (reduceFontSize) {\n          buttonNodeList.forEach(buttonNode => {\n            buttonNode.style.fontSize = \"85%\";\n          });\n        }\n      }\n    };\n\n    this.messageListenerCallback = (key, message) => {\n      switch (key) {\n        case enums.CUSTOM_MESSAGE_RECEIVED:\n          //occurs at the callee end\n          this.incomingCallReceived(message);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.incomingCallReceived = message => {\n      if (this._isMounted) {\n        var _this$loggedInUser;\n\n        if (message.type !== enums.CUSTOM_TYPE_MEETING) {\n          return false;\n        }\n\n        if (Object.keys(this.context.callInProgress).length) {\n          if (this.context.checkIfDirectCallIsOngoing() && this.context.getActiveCallSessionID() === message.data.customData.sessionID) {\n            return false;\n          }\n        }\n\n        if ((message === null || message === void 0 ? void 0 : message.sender.uid) !== ((_this$loggedInUser = this.loggedInUser) === null || _this$loggedInUser === void 0 ? void 0 : _this$loggedInUser.uid)) {\n          SoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n          this.setState({\n            incomingCall: message\n          });\n        }\n      }\n    };\n\n    this.joinCall = () => {\n      this.checkForActiveCallAndEndCall().then(response => {\n        SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n        this.props.actionGenerated(enums.ACTIONS[\"ACCEPT_DIRECT_CALL\"], true);\n\n        if (this.context) {\n          this.context.setCallInProgress(this.state.incomingCall, enums.CONSTANTS[\"INCOMING_DIRECT_CALLING\"]);\n        }\n\n        Storage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], this.state.incomingCall);\n        this.setState({\n          incomingCall: null,\n          callInProgress: this.state.incomingCall\n        });\n      }).catch(error => {\n        const errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n        this.context.setToastMessage(\"error\", errorCode);\n      });\n    };\n\n    this.ignoreCall = () => {\n      SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n      Storage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], this.state.incomingCall);\n      this.setState({\n        incomingCall: null\n      });\n    };\n\n    this.checkForActiveCallAndEndCall = () => {\n      const promise = new Promise((resolve, reject) => {\n        if (this.isCallActive() === false) {\n          return resolve({\n            success: true\n          });\n        }\n\n        let sessionID = this.getActiveCallSessionID();\n        CometChat.endCall(sessionID).then(response => {\n          return resolve(response);\n        }).catch(error => {\n          return reject(error);\n        });\n      });\n      return promise;\n    };\n\n    this.isCallActive = () => {\n      if (Object.keys(this.context.callInProgress).length === 0) {\n        return false;\n      }\n\n      let sessionID = this.getActiveCallSessionID();\n\n      if (!sessionID) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.getActiveCallSessionID = () => {\n      return this.context.getActiveCallSessionID();\n    };\n\n    this.actionHandler = action => {\n      switch (action) {\n        case enums.ACTIONS[\"DIRECT_CALL_ENDED\"]:\n        case enums.ACTIONS[\"DIRECT_CALL_ERROR\"]:\n          this.setState({\n            callInProgress: null\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.logStorageChange = event => {\n      if ((event === null || event === void 0 ? void 0 : event.key) !== enums.CONSTANTS[\"ACTIVECALL\"]) {\n        return false;\n      }\n\n      if (event.newValue || event.oldValue) {\n        var _this$state$incomingC, _call;\n\n        let call;\n\n        if (event.newValue) {\n          call = JSON.parse(event.newValue);\n        } else if (event.oldValue) {\n          call = JSON.parse(event.oldValue);\n        }\n\n        if (((_this$state$incomingC = this.state.incomingCall) === null || _this$state$incomingC === void 0 ? void 0 : _this$state$incomingC.sessionId) === ((_call = call) === null || _call === void 0 ? void 0 : _call.sessionId)) {\n          SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n          this.setState({\n            incomingCall: null\n          });\n        }\n      }\n    };\n\n    this._isMounted = false;\n    this.state = {\n      incomingCall: null,\n      callInProgress: null,\n      maximize: true\n    };\n    this.callButtonRef = /*#__PURE__*/React.createRef();\n    CometChat.getLoggedinUser().then(user => this.loggedInUser = user).catch(error => {\n      console.error(error);\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.MessageAlertManager = new messageAlertManager();\n    this.MessageAlertManager.attachListeners(this.messageListenerCallback);\n    Storage.attachChangeDetection(this.logStorageChange);\n  }\n\n  componentDidUpdate() {\n    if (this.state.incomingCall) {\n      this.adjustFontSize();\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    Storage.detachChangeDetection(this.logStorageChange);\n  }\n\n  render() {\n    let callScreen = null,\n        incomingCallAlert = null;\n\n    if (this.state.incomingCall) {\n      let avatar = jsx(\"div\", {\n        css: thumbnailStyle(),\n        className: \"header__thumbnail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 9\n        }\n      }, jsx(CometChatAvatar, {\n        cornerRadius: \"50%\",\n        image: this.state.incomingCall.sender.avatar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }\n      }));\n      const callType = jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 9\n        }\n      }, jsx(\"i\", {\n        css: callIconStyle(videoCallIcon, this.context),\n        title: Translator.translate(\"INCOMING_VIDEO_CALL\", this.props.lang),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }\n      }), jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }\n      }, Translator.translate(\"INCOMING_VIDEO_CALL\", this.props.lang)));\n      incomingCallAlert = jsx(\"div\", {\n        css: incomingCallWrapperStyle(this.props, keyframes),\n        className: \"callalert__wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 9\n        }\n      }, jsx(\"div\", {\n        css: callContainerStyle(),\n        className: \"callalert__container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }\n      }, jsx(\"div\", {\n        css: headerWrapperStyle(),\n        className: \"callalert__header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }\n      }, jsx(\"div\", {\n        css: callDetailStyle(),\n        className: \"header__detail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 15\n        }\n      }, jsx(\"div\", {\n        css: nameStyle(),\n        className: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 17\n        }\n      }, this.state.incomingCall.sender.name), jsx(\"div\", {\n        css: callTypeStyle(this.props),\n        className: \"calltype\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 17\n        }\n      }, callType)), avatar), jsx(\"div\", {\n        css: headerButtonStyle(),\n        className: \"callalert__buttons\",\n        ref: this.callButtonRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        css: ButtonStyle(this.props, 0),\n        className: \"button button__ignore\",\n        onClick: this.ignoreCall,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 15\n        }\n      }, Translator.translate(\"IGNORE\", this.props.lang)), jsx(\"button\", {\n        type: \"button\",\n        css: ButtonStyle(this.props, 1),\n        className: \"button button__join\",\n        onClick: this.joinCall,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 15\n        }\n      }, Translator.translate(\"JOIN\", this.props.lang)))));\n    }\n\n    if (this.state.callInProgress) {\n      callScreen = jsx(CometChatCallScreen, {\n        loggedInUser: this.loggedInUser,\n        call: this.state.callInProgress,\n        actionGenerated: this.actionHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 7\n      }\n    }, incomingCallAlert, callScreen);\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatIncomingDirectCall.contextType = CometChatContext;\nCometChatIncomingDirectCall.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatIncomingDirectCall.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatIncomingDirectCall };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Calls/CometChatIncomingDirectCall/index.js"],"names":["React","jsx","keyframes","PropTypes","CometChat","messageAlertManager","CometChatAvatar","CometChatCallScreen","CometChatContext","enums","SoundManager","Storage","Translator","theme","incomingCallWrapperStyle","callContainerStyle","headerWrapperStyle","callDetailStyle","nameStyle","callTypeStyle","thumbnailStyle","headerButtonStyle","ButtonStyle","callIconStyle","CometChatIncomingDirectCall","PureComponent","constructor","props","adjustFontSize","callButtonRef","current","reduceFontSize","buttonNodeList","querySelectorAll","forEach","buttonNode","parentContainerWidth","clientWidth","currentTextWidth","scrollWidth","style","fontSize","messageListenerCallback","key","message","CUSTOM_MESSAGE_RECEIVED","incomingCallReceived","_isMounted","type","CUSTOM_TYPE_MEETING","Object","keys","context","callInProgress","length","checkIfDirectCallIsOngoing","getActiveCallSessionID","data","customData","sessionID","sender","uid","loggedInUser","play","CONSTANTS","AUDIO","setState","incomingCall","joinCall","checkForActiveCallAndEndCall","then","response","pause","actionGenerated","ACTIONS","setCallInProgress","state","setItem","catch","error","errorCode","hasOwnProperty","code","setToastMessage","ignoreCall","promise","Promise","resolve","reject","isCallActive","success","endCall","actionHandler","action","logStorageChange","event","newValue","oldValue","call","JSON","parse","sessionId","maximize","createRef","getLoggedinUser","user","console","componentDidMount","MessageAlertManager","attachListeners","attachChangeDetection","componentDidUpdate","componentWillUnmount","detachChangeDetection","render","callScreen","incomingCallAlert","avatar","callType","videoCallIcon","translate","lang","name","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, keyframes } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { messageAlertManager } from \"./controller\";\n\nimport { CometChatAvatar } from \"../../Shared\";\nimport { CometChatCallScreen } from \"../CometChatCallScreen\";\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { SoundManager } from \"../../../util/SoundManager\";\nimport { Storage } from \"../../../util/Storage\";\n\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\n\nimport {\n  incomingCallWrapperStyle,\n  callContainerStyle,\n  headerWrapperStyle,\n  callDetailStyle,\n  nameStyle,\n  callTypeStyle,\n  thumbnailStyle,\n  headerButtonStyle,\n  ButtonStyle,\n  callIconStyle,\n} from \"./style\";\n\nimport videoCallIcon from \"./resources/incoming-video-call.svg\";\n\nclass CometChatIncomingDirectCall extends React.PureComponent {\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.state = {\n      incomingCall: null,\n      callInProgress: null,\n      maximize: true,\n    };\n\n    this.callButtonRef = React.createRef();\n\n    CometChat.getLoggedinUser()\n      .then((user) => (this.loggedInUser = user))\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    this.MessageAlertManager = new messageAlertManager();\n    this.MessageAlertManager.attachListeners(this.messageListenerCallback);\n\n    Storage.attachChangeDetection(this.logStorageChange);\n  }\n\n  componentDidUpdate() {\n    if (this.state.incomingCall) {\n      this.adjustFontSize();\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    Storage.detachChangeDetection(this.logStorageChange);\n  }\n\n  adjustFontSize = () => {\n    if (this.callButtonRef && this.callButtonRef.current) {\n      let reduceFontSize = false;\n      const buttonNodeList =\n        this.callButtonRef.current.querySelectorAll(\"button\");\n\n      buttonNodeList.forEach((buttonNode) => {\n        const parentContainerWidth = buttonNode.clientWidth;\n        const currentTextWidth = buttonNode.scrollWidth;\n\n        if (parentContainerWidth < currentTextWidth) {\n          reduceFontSize = true;\n        }\n      });\n\n      if (reduceFontSize) {\n        buttonNodeList.forEach((buttonNode) => {\n          buttonNode.style.fontSize = \"85%\";\n        });\n      }\n    }\n  };\n\n  messageListenerCallback = (key, message) => {\n    switch (key) {\n      case enums.CUSTOM_MESSAGE_RECEIVED: //occurs at the callee end\n        this.incomingCallReceived(message);\n        break;\n      default:\n        break;\n    }\n  };\n\n  incomingCallReceived = (message) => {\n    if (this._isMounted) {\n      if (message.type !== enums.CUSTOM_TYPE_MEETING) {\n        return false;\n      }\n\n      if (Object.keys(this.context.callInProgress).length) {\n        if (\n          this.context.checkIfDirectCallIsOngoing() &&\n          this.context.getActiveCallSessionID() ===\n            message.data.customData.sessionID\n        ) {\n          return false;\n        }\n      }\n\n      if (message?.sender.uid !== this.loggedInUser?.uid) {\n        SoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n        this.setState({ incomingCall: message });\n      }\n    }\n  };\n\n  joinCall = () => {\n    this.checkForActiveCallAndEndCall()\n      .then((response) => {\n        SoundManager.pause(\n          enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"],\n          this.context\n        );\n        this.props.actionGenerated(enums.ACTIONS[\"ACCEPT_DIRECT_CALL\"], true);\n\n        if (this.context) {\n          this.context.setCallInProgress(\n            this.state.incomingCall,\n            enums.CONSTANTS[\"INCOMING_DIRECT_CALLING\"]\n          );\n        }\n        Storage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], this.state.incomingCall);\n        this.setState({\n          incomingCall: null,\n          callInProgress: this.state.incomingCall,\n        });\n      })\n      .catch((error) => {\n        const errorCode =\n          error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n        this.context.setToastMessage(\"error\", errorCode);\n      });\n  };\n\n  ignoreCall = () => {\n    SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n    Storage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], this.state.incomingCall);\n    this.setState({ incomingCall: null });\n  };\n\n  checkForActiveCallAndEndCall = () => {\n    const promise = new Promise((resolve, reject) => {\n      if (this.isCallActive() === false) {\n        return resolve({ success: true });\n      }\n\n      let sessionID = this.getActiveCallSessionID();\n      CometChat.endCall(sessionID)\n        .then((response) => {\n          return resolve(response);\n        })\n        .catch((error) => {\n          return reject(error);\n        });\n    });\n\n    return promise;\n  };\n\n  isCallActive = () => {\n    if (Object.keys(this.context.callInProgress).length === 0) {\n      return false;\n    }\n\n    let sessionID = this.getActiveCallSessionID();\n    if (!sessionID) {\n      return false;\n    }\n\n    return true;\n  };\n\n  getActiveCallSessionID = () => {\n    return this.context.getActiveCallSessionID();\n  };\n\n  actionHandler = (action) => {\n    switch (action) {\n      case enums.ACTIONS[\"DIRECT_CALL_ENDED\"]:\n      case enums.ACTIONS[\"DIRECT_CALL_ERROR\"]:\n        this.setState({ callInProgress: null });\n        break;\n      default:\n        break;\n    }\n  };\n\n  logStorageChange = (event) => {\n    if (event?.key !== enums.CONSTANTS[\"ACTIVECALL\"]) {\n      return false;\n    }\n\n    if (event.newValue || event.oldValue) {\n      let call;\n      if (event.newValue) {\n        call = JSON.parse(event.newValue);\n      } else if (event.oldValue) {\n        call = JSON.parse(event.oldValue);\n      }\n\n      if (this.state.incomingCall?.sessionId === call?.sessionId) {\n        SoundManager.pause(\n          enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"],\n          this.context\n        );\n        this.setState({ incomingCall: null });\n      }\n    }\n  };\n\n  render() {\n    let callScreen = null,\n      incomingCallAlert = null;\n    if (this.state.incomingCall) {\n      let avatar = (\n        <div css={thumbnailStyle()} className=\"header__thumbnail\">\n          <CometChatAvatar\n            cornerRadius=\"50%\"\n            image={this.state.incomingCall.sender.avatar}\n          />\n        </div>\n      );\n\n      const callType = (\n        <React.Fragment>\n          <i\n            css={callIconStyle(videoCallIcon, this.context)}\n            title={Translator.translate(\"INCOMING_VIDEO_CALL\", this.props.lang)}\n          ></i>\n          <span>\n            {Translator.translate(\"INCOMING_VIDEO_CALL\", this.props.lang)}\n          </span>\n        </React.Fragment>\n      );\n\n      incomingCallAlert = (\n        <div\n          css={incomingCallWrapperStyle(this.props, keyframes)}\n          className=\"callalert__wrapper\"\n        >\n          <div css={callContainerStyle()} className=\"callalert__container\">\n            <div css={headerWrapperStyle()} className=\"callalert__header\">\n              <div css={callDetailStyle()} className=\"header__detail\">\n                <div css={nameStyle()} className=\"name\">\n                  {this.state.incomingCall.sender.name}\n                </div>\n                <div css={callTypeStyle(this.props)} className=\"calltype\">\n                  {callType}\n                </div>\n              </div>\n              {avatar}\n            </div>\n            <div\n              css={headerButtonStyle()}\n              className=\"callalert__buttons\"\n              ref={this.callButtonRef}\n            >\n              <button\n                type=\"button\"\n                css={ButtonStyle(this.props, 0)}\n                className=\"button button__ignore\"\n                onClick={this.ignoreCall}\n              >\n                {Translator.translate(\"IGNORE\", this.props.lang)}\n              </button>\n              <button\n                type=\"button\"\n                css={ButtonStyle(this.props, 1)}\n                className=\"button button__join\"\n                onClick={this.joinCall}\n              >\n                {Translator.translate(\"JOIN\", this.props.lang)}\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (this.state.callInProgress) {\n      callScreen = (\n        <CometChatCallScreen\n          loggedInUser={this.loggedInUser}\n          call={this.state.callInProgress}\n          actionGenerated={this.actionHandler}\n        />\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {incomingCallAlert}\n        {callScreen}\n      </React.Fragment>\n    );\n  }\n}\n\n// Specifies the default values for props:\nCometChatIncomingDirectCall.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n};\n\nCometChatIncomingDirectCall.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport { CometChatIncomingDirectCall };\n"]},"metadata":{},"sourceType":"module"}