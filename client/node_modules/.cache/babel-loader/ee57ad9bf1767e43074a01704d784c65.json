{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ConversationProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport API from \"./API\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst conversationContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(conversationContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function Provider({\n  user,\n  children\n}) {\n  _s2();\n\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n\n  function updateConversation(updatedConversation) {\n    const updatedConversations = conversations.map(conversation => {\n      if (conversation._id === updatedConversation._id) {\n        return updatedConversation;\n      }\n\n      return conversation;\n    });\n    setConversations(updatedConversations);\n  }\n\n  function sendMessage(text) {\n    // Yet another place where I ran into id issues.. this is going to be a mess to fix later\n    const convo_id = conversations[selectedConversationIndex]._id; // const convo_id = conversations[selectedConversationIndex]._id;\n\n    API.sendMessage(convo_id, user._id, text).then(updatedConversation => {\n      updateConversation(updatedConversation);\n    }).catch(e => console.error(e));\n  }\n\n  const loadConversations = useCallback(cb => {\n    axios.get(`/api/conversations/${user._id}`).then(conversations => {\n      cb(conversations.data);\n    });\n  }, [user._id]);\n  const formattedConversations = conversations.map(conversation => {\n    const formattedMessages = conversation.messages.map(message => {\n      message.fromMe = message.sender_id === user._id;\n      return message;\n    });\n    conversation.messages = formattedMessages;\n    return conversation;\n  });\n  useEffect(() => {\n    if (!user._id) return;\n    loadConversations(conversations => {\n      setConversations(conversations);\n    });\n  }, [user._id, loadConversations]);\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: conversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex\n  };\n  return /*#__PURE__*/_jsxDEV(conversationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Provider, \"3fJpKWm1OVbRRmQU1wVTDIYpcyE=\");\n\n_c = Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ConversationProvider.js"],"names":["React","useContext","useEffect","useState","useCallback","axios","API","conversationContext","createContext","useConversations","Provider","user","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","updateConversation","updatedConversation","updatedConversations","map","conversation","_id","sendMessage","text","convo_id","then","catch","e","console","error","loadConversations","cb","get","data","formattedConversations","formattedMessages","messages","message","fromMe","sender_id","value","selectedConversation","selectConversationIndex"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport API from \"./API\";\n\nconst conversationContext = React.createContext();\n\nexport function useConversations() {\n  return useContext(conversationContext);\n}\n\nexport function Provider({ user, children }) {\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n\n  function updateConversation(updatedConversation) {\n    const updatedConversations = conversations.map((conversation) => {\n      if (conversation._id === updatedConversation._id) {\n        return updatedConversation;\n      }\n      return conversation;\n    });\n    setConversations(updatedConversations);\n  }\n\n  function sendMessage(text) {\n    // Yet another place where I ran into id issues.. this is going to be a mess to fix later\n    const convo_id = conversations[selectedConversationIndex]._id;\n    // const convo_id = conversations[selectedConversationIndex]._id;\n    API.sendMessage(convo_id, user._id, text)\n      .then((updatedConversation) => {\n        updateConversation(updatedConversation);\n      })\n      .catch((e) => console.error(e));\n  }\n\n  const loadConversations = useCallback(\n    (cb) => {\n      axios.get(`/api/conversations/${user._id}`).then((conversations) => {\n        cb(conversations.data);\n      });\n    },\n    [user._id]\n  );\n\n  const formattedConversations = conversations.map((conversation) => {\n    const formattedMessages = conversation.messages.map((message) => {\n      message.fromMe = message.sender_id === user._id;\n      return message;\n    });\n    conversation.messages = formattedMessages;\n    return conversation;\n  });\n\n  useEffect(() => {\n    if (!user._id) return;\n    loadConversations((conversations) => {\n      setConversations(conversations);\n    });\n  }, [user._id, loadConversations]);\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: conversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n  };\n  return (\n    <conversationContext.Provider value={value}>\n      {children}\n    </conversationContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}