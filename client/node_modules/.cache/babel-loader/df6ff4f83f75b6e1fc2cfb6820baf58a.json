{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/Comps/Dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { Container, Row, Col, Spinner } from \"react-bootstrap\";\nimport { useConversations } from \"../utils/ConvorsationProvider\";\nimport API from \"../utils/API\";\nimport useViewport from \"../utils/useViewport\";\nimport Conversations from \"./Conversations\";\nimport Messages from \"./Messages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Dashboard({\n  user\n}) {\n  _s();\n\n  const {\n    selectedConversation,\n    messageState,\n    loadingMessagesState,\n    mobileViewState\n  } = useConversations();\n  const [messages, setMessages] = messageState;\n  const [loadingMessages, setLoadingMessages] = loadingMessagesState;\n  const [mobileView, setMobileView] = mobileViewState;\n  const {\n    width\n  } = useViewport(); // function sendMessage(text) {\n  //   // Yet another place where I ran into id issues.. this is going to be a mess to fix later\n  //   const convo_id = selectedConversation.id;\n  //   // const convo_id = selectedConversation._id;\n  //   API.sendMessage(convo_id, user._id, text)\n  //     .then((data) => {\n  //       console.log(data);\n  //       setMessages([...messages, data]);\n  //     })\n  //     .catch((e) => console.error(e));\n  // }\n\n  useEffect(() => {\n    if (width <= 575) {\n      setMobileView({\n        conversations: true,\n        messages: false\n      });\n      return;\n    }\n\n    setMobileView({\n      conversations: true,\n      messages: true\n    });\n  }, [width, setMobileView]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: width > 575 ? /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          sm: 3,\n          children: /*#__PURE__*/_jsxDEV(Conversations, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          sm: 9,\n          id: \"messageBox\",\n          children: /*#__PURE__*/_jsxDEV(Messages, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      children: [/*#__PURE__*/_jsxDEV(Conversations, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), loadingMessages ? /*#__PURE__*/_jsxDEV(Spinner, {\n        id: \"spinner\",\n        animation: \"border\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Messages, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(Dashboard, \"ARUS/xcPFqlyVgkMPlLooORSt4U=\", false, function () {\n  return [useConversations, useViewport];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/Comps/Dashboard.jsx"],"names":["useEffect","Container","Row","Col","Spinner","useConversations","API","useViewport","Conversations","Messages","Dashboard","user","selectedConversation","messageState","loadingMessagesState","mobileViewState","messages","setMessages","loadingMessages","setLoadingMessages","mobileView","setMobileView","width","conversations"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,OAA9B,QAA6C,iBAA7C;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,eAAe,SAASC,SAAT,CAAmB;AAAEC,EAAAA;AAAF,CAAnB,EAA6B;AAAA;;AAC1C,QAAM;AACJC,IAAAA,oBADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,oBAHI;AAIJC,IAAAA;AAJI,MAKFV,gBAAgB,EALpB;AAMA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BJ,YAAhC;AACA,QAAM,CAACK,eAAD,EAAkBC,kBAAlB,IAAwCL,oBAA9C;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BN,eAApC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAYf,WAAW,EAA7B,CAV0C,CAY1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsB,KAAK,IAAI,GAAb,EAAkB;AAChBD,MAAAA,aAAa,CAAC;AAAEE,QAAAA,aAAa,EAAE,IAAjB;AAAuBP,QAAAA,QAAQ,EAAE;AAAjC,OAAD,CAAb;AACA;AACD;;AACDK,IAAAA,aAAa,CAAC;AAAEE,MAAAA,aAAa,EAAE,IAAjB;AAAuBP,MAAAA,QAAQ,EAAE;AAAjC,KAAD,CAAb;AACD,GANQ,EAMN,CAACM,KAAD,EAAQD,aAAR,CANM,CAAT;AAQA,sBACE;AAAA,cACGC,KAAK,GAAG,GAAR,gBACC,QAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAA,6BACE,QAAC,GAAD;AAAA,gCACE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAA,iCACE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAY,UAAA,EAAE,EAAC,YAAf;AAAA,iCACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADD,gBAYC,QAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAA,8BACE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,cADF,EAEGJ,eAAe,gBACd,QAAC,OAAD;AAAS,QAAA,EAAE,EAAC,SAAZ;AAAsB,QAAA,SAAS,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,cADc,gBAGd,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAbJ,mBADF;AAyBD;;GAzDuBR,S;UAMlBL,gB,EAIcE,W;;;KAVIG,S","sourcesContent":["import { useEffect } from \"react\";\nimport { Container, Row, Col, Spinner } from \"react-bootstrap\";\nimport { useConversations } from \"../utils/ConvorsationProvider\";\nimport API from \"../utils/API\";\nimport useViewport from \"../utils/useViewport\";\nimport Conversations from \"./Conversations\";\nimport Messages from \"./Messages\";\n\nexport default function Dashboard({ user }) {\n  const {\n    selectedConversation,\n    messageState,\n    loadingMessagesState,\n    mobileViewState,\n  } = useConversations();\n  const [messages, setMessages] = messageState;\n  const [loadingMessages, setLoadingMessages] = loadingMessagesState;\n  const [mobileView, setMobileView] = mobileViewState;\n  const { width } = useViewport();\n\n  // function sendMessage(text) {\n  //   // Yet another place where I ran into id issues.. this is going to be a mess to fix later\n  //   const convo_id = selectedConversation.id;\n  //   // const convo_id = selectedConversation._id;\n  //   API.sendMessage(convo_id, user._id, text)\n  //     .then((data) => {\n  //       console.log(data);\n  //       setMessages([...messages, data]);\n  //     })\n  //     .catch((e) => console.error(e));\n  // }\n\n  useEffect(() => {\n    if (width <= 575) {\n      setMobileView({ conversations: true, messages: false });\n      return;\n    }\n    setMobileView({ conversations: true, messages: true });\n  }, [width, setMobileView]);\n\n  return (\n    <>\n      {width > 575 ? (\n        <Container fluid>\n          <Row>\n            <Col sm={3}>\n              <Conversations />\n            </Col>\n            <Col sm={9} id=\"messageBox\">\n              <Messages />\n            </Col>\n          </Row>\n        </Container>\n      ) : (\n        <Container fluid>\n          <Conversations />\n          {loadingMessages ? (\n            <Spinner id=\"spinner\" animation=\"border\" />\n          ) : (\n            <Messages />\n          )}\n        </Container>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}