{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Calls/CometChatCallScreen/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx, keyframes } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport { Storage } from \"../../../util/Storage\";\nimport * as enums from \"../../../util/enums.js\";\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { callScreenBackgroundStyle, callScreenContainerStyle, callScreenInnerBackgroundStyle, callScreenHeaderStyle, callScreenWrapperStyle, headerTitleStyle, headerButtonStyle, callScreenResizerStyle, iconStyle } from \"./style\";\nimport minimizeIcon from \"./resources/reduce-size.svg\";\nimport maximizeIcon from \"./resources/increase-size.svg\";\n\nclass CometChatCallScreen extends React.PureComponent {\n  constructor(_props) {\n    super(_props);\n\n    this.enableDragging = e => {\n      e.preventDefault();\n\n      if (this.checkIfCallScreenIsMaximized() === true) {\n        return false;\n      }\n\n      this.setState({\n        dragging: true,\n        rel: {\n          x: e.pageX - this.state.x,\n          y: e.pageY - this.state.y\n        }\n      });\n      this.toggleCallScreenBackground(true);\n      this.toggleCallScreenInnerBackground(true);\n\n      this.document.onmousemove = e => this.startDragging(e);\n\n      this.document.onmouseup = e => this.disableDragging(e);\n    };\n\n    this.checkIfCallScreenIsMaximized = () => {\n      const elem = this.callScreenEl.current;\n      const dialogWidth = elem.clientWidth;\n      const dialogHeight = elem.clientHeight;\n      const windowWidth = window.innerWidth;\n      const windowHeight = window.innerHeight;\n\n      if (dialogWidth === windowWidth && dialogHeight === windowHeight) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.checkIfCallScreenIsMinimized = () => {\n      const elem = this.callScreenEl.current;\n      const dialogWidth = elem.clientWidth;\n      const dialogHeight = elem.clientHeight;\n      const minimumWidth = this.props.minWidth;\n      const minimumHeight = this.props.minHeight;\n\n      if (dialogWidth === minimumWidth && dialogHeight === minimumHeight) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.startDragging = e => {\n      if (!this.state.dragging) return;\n      e = e || window.event;\n      const elem = this.callScreenEl.current;\n      const dialogWidth = elem.clientWidth;\n      const dialogHeight = elem.clientHeight;\n      const x = Math.min(Math.max(0, e.pageX - this.state.rel.x), window.innerWidth - dialogWidth - 20);\n      const y = Math.min(Math.max(0, e.pageY - this.state.rel.y), window.innerHeight - dialogHeight - 20);\n      this.setState({\n        x: x,\n        y: y\n      });\n      e.stopPropagation();\n      e.preventDefault();\n    };\n\n    this.disableDragging = e => {\n      this.document.onmousemove = null;\n      this.document.onmouseup = null;\n      this.setState({\n        dragging: false\n      });\n      this.toggleCallScreenBackground(false);\n      this.toggleCallScreenInnerBackground(false);\n    };\n\n    this.initResize = e => {\n      e.preventDefault();\n\n      if (this.checkIfCallScreenIsMaximized() === true) {\n        return false;\n      }\n\n      const element = this.callScreenEl.current;\n      this.startX = e.pageX;\n      this.startY = e.pageY;\n      this.startWidth = parseFloat(getComputedStyle(element, null).getPropertyValue(\"width\").replace(\"px\", \"\"));\n      this.startHeight = parseInt(getComputedStyle(element, null).getPropertyValue(\"height\").replace(\"px\", \"\"));\n\n      this.document.onmousemove = e => this.startResize(e);\n\n      this.document.onmouseup = e => this.stopResize(e);\n    };\n\n    this.startResize = e => {\n      let width = this.startWidth + (e.pageX - this.startX);\n      let height = this.startHeight + (e.pageY - this.startY);\n\n      if (width < this.props.minWidth) {\n        width = this.props.minHWidth;\n      }\n\n      if (width > window.innerWidth) {\n        width = this.props.maxWidth;\n      }\n\n      if (height < this.props.minHeight) {\n        height = this.props.minHeight;\n      }\n\n      if (height > window.innerHeight) {\n        height = this.props.maxHeight;\n      }\n\n      this.callScreenEl.current.style.width = width + \"px\";\n      this.callScreenEl.current.style.height = height + \"px\";\n      this.setDimensionOfCallScreenInnerBackground({\n        width: width + \"px\",\n        height: height + \"px\"\n      });\n      this.toggleCallScreenBackground(true);\n      this.toggleCallScreenInnerBackground(true);\n    };\n\n    this.stopResize = () => {\n      this.document.onmousemove = null;\n      this.document.onmouseup = null;\n      this.toggleCallScreenBackground(false);\n      this.toggleCallScreenInnerBackground(false);\n\n      if (this.checkIfCallScreenIsMaximized() === true) {\n        this.setState({\n          maximized: true\n        });\n      }\n\n      if (this.checkIfCallScreenIsMinimized() === true) {\n        this.setState({\n          maximized: false\n        });\n      }\n    };\n\n    this.toggleCallScreenBackground = flag => {\n      if (this.callScreenBackgroundEl && this.callScreenBackgroundEl.current) {\n        this.callScreenBackgroundEl.current.style.display = flag ? \"block\" : \"none\";\n      }\n    };\n\n    this.toggleCallScreenInnerBackground = flag => {\n      if (this.callScreenInnerBackgroundEl && this.callScreenInnerBackgroundEl.current) {\n        this.callScreenInnerBackgroundEl.current.style.display = flag ? \"block\" : \"none\";\n      }\n    };\n\n    this.setDimensionOfCallScreenInnerBackground = props => {\n      this.callScreenInnerBackgroundEl.current.style.width = props.width;\n      this.callScreenInnerBackgroundEl.current.style.height = props.height;\n    };\n\n    this.setPositionOfCallScreenInnerBackground = props => {\n      this.callScreenInnerBackgroundEl.current.style.top = props.y;\n      this.callScreenInnerBackgroundEl.current.style.left = props.x;\n    };\n\n    this.minimize = () => {\n      if (!this.callScreenEl || !this.callScreenEl.current) {\n        return false;\n      }\n\n      const width = this.props.minWidth + \"px\";\n      const height = this.props.minHeight + \"px\";\n      this.setState({\n        maximized: false\n      });\n      this.setSizingAndPostionOfCallScreen({\n        width: width,\n        height: height\n      });\n      this.setDimensionOfCallScreenInnerBackground({\n        width: width,\n        height: height\n      });\n      this.setPositionOfCallScreenInnerBackground({\n        x: \"0px\",\n        y: \"0px\"\n      });\n    };\n\n    this.maximize = () => {\n      if (!this.callScreenEl || !this.callScreenEl.current) {\n        return false;\n      }\n\n      const width = this.props.maxWidth;\n      const height = this.props.maxHeight;\n      this.setState({\n        maximized: true\n      });\n      this.setSizingAndPostionOfCallScreen({\n        width: width,\n        height: height\n      });\n      this.setDimensionOfCallScreenInnerBackground({\n        width: width,\n        height: height\n      });\n      this.setPositionOfCallScreenInnerBackground({\n        x: \"0px\",\n        y: \"0px\"\n      });\n    };\n\n    this.setSizingAndPostionOfCallScreen = props => {\n      this.callScreenEl.current.style.width = props.width;\n      this.callScreenEl.current.style.height = props.height;\n      this.callScreenEl.current.style.top = \"0px\";\n      this.callScreenEl.current.style.left = \"0px\";\n    };\n\n    this.toggle = e => {\n      this.setState({\n        x: 0,\n        y: 0\n      });\n\n      if (this.state.maximized) {\n        this.minimize();\n      } else {\n        this.maximize();\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n    };\n\n    this.startDirectCall = call => {\n      const sessionId = call.data.customData.sessionID;\n      const customCSS = this.context.UIKitSettings.customCSS;\n      const callSettings = new CometChat.CallSettingsBuilder().enableDefaultLayout(true).setSessionID(sessionId).setIsAudioOnlyCall(false).setCustomCSS(customCSS).setLocalizedStringObject({\n        \"SELECT_VIDEO_SOURCE\": Translator.translate(\"SELECT_VIDEO_SOURCE\", this.props.lang),\n        \"SELECT_INPUT_AUDIO_SOURCE\": Translator.translate(\"SELECT_INPUT_AUDIO_SOURCE\", this.props.lang),\n        \"SELECT_OUTPUT_AUDIO_SOURCE\": Translator.translate(\"SELECT_OUTPUT_AUDIO_SOURCE\", this.props.lang)\n      }).build();\n      const el = this.callScreenFrame;\n      CometChat.startCall(callSettings, el, new CometChat.OngoingCallListener({\n        onCallEnded: call => {\n          if (this.context) {\n            this.context.setCallInProgress({}, \"\");\n          }\n\n          Storage.removeItem(enums.CONSTANTS[\"ACTIVECALL\"]);\n          this.props.actionGenerated(enums.ACTIONS[\"DIRECT_CALL_ENDED\"]);\n        },\n        onError: error => {\n          if (this.context) {\n            this.context.setCallInProgress(null, \"\");\n          }\n\n          this.props.actionGenerated(enums.ACTIONS[\"DIRECT_CALL_ERROR\"]);\n          const errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n          this.context.setToastMessage(\"error\", errorCode);\n        }\n      }));\n    };\n\n    this.startDefaultCall = call => {\n      const sessionId = call.getSessionId();\n      const callType = call.type === CometChat.CALL_TYPE.AUDIO ? true : false;\n      const customCSS = this.context.UIKitSettings.customCSS;\n      const callSettings = new CometChat.CallSettingsBuilder().setSessionID(sessionId).enableDefaultLayout(true).setMode(CometChat.CALL_MODE.DEFAULT).setIsAudioOnlyCall(callType).setCustomCSS(customCSS).setLocalizedStringObject({\n        \"SELECT_VIDEO_SOURCE\": Translator.translate(\"SELECT_VIDEO_SOURCE\", this.props.lang),\n        \"SELECT_INPUT_AUDIO_SOURCE\": Translator.translate(\"SELECT_INPUT_AUDIO_SOURCE\", this.props.lang),\n        \"SELECT_OUTPUT_AUDIO_SOURCE\": Translator.translate(\"SELECT_OUTPUT_AUDIO_SOURCE\", this.props.lang)\n      }).build();\n      const el = this.callScreenFrame;\n      CometChat.startCall(callSettings, el, new CometChat.OngoingCallListener({\n        onUserJoined: user => {\n          /* Notification received here if another user joins the call. */\n\n          /* this method can be use to display message or perform any actions if someone joining the call */\n          //call initiator gets the same info in outgoingcallaccpeted event\n          if (call.callInitiator.uid !== this.loggedInUser.uid && call.callInitiator.uid !== user.uid) {\n            const callMessage = {\n              \"category\": call.category,\n              \"type\": call.type,\n              \"action\": call.action,\n              \"status\": call.status,\n              \"callInitiator\": call.callInitiator,\n              \"callReceiver\": call.callReceiver,\n              \"receiverId\": call.receiverId,\n              \"receiverType\": call.receiverType,\n              \"sentAt\": call.sentAt,\n              \"sender\": { ...user\n              }\n            };\n            this.props.actionGenerated(enums.ACTIONS[\"USER_JOINED_CALL\"], callMessage);\n          }\n        },\n        onUserLeft: user => {\n          /* Notification received here if another user left the call. */\n\n          /* this method can be use to display message or perform any actions if someone leaving the call */\n          //call initiator gets the same info in outgoingcallaccpeted event\n          if (call.callInitiator.uid !== this.loggedInUser.uid && call.callInitiator.uid !== user.uid) {\n            const callMessage = {\n              \"category\": call.category,\n              \"type\": call.type,\n              \"action\": \"left\",\n              \"status\": call.status,\n              \"callInitiator\": call.callInitiator,\n              \"callReceiver\": call.callReceiver,\n              \"receiverId\": call.receiverId,\n              \"receiverType\": call.receiverType,\n              \"sentAt\": call.sentAt,\n              \"sender\": { ...user\n              }\n            };\n            this.props.actionGenerated(enums.ACTIONS[\"USER_LEFT_CALL\"], callMessage);\n          }\n        },\n        onCallEnded: endedCall => {\n          /* Notification received here if current ongoing call is ended. */\n          if (this.context) {\n            this.context.setCallInProgress(null, \"\");\n          }\n\n          Storage.removeItem(enums.CONSTANTS[\"ACTIVECALL\"]);\n          this.props.actionGenerated(enums.ACTIONS[\"OUTGOING_CALL_ENDED\"], endedCall);\n          /* hiding/closing the call screen can be done here. */\n        }\n      }));\n    };\n\n    this.state = {\n      x: 0,\n      y: 0,\n      rel: null,\n      // position relative to the cursor\n      dragging: false,\n      maximized: true\n    };\n    this.loggedInUser = _props.loggedInUser;\n    this.callScreenBackgroundEl = /*#__PURE__*/React.createRef();\n    this.callScreenInnerBackgroundEl = /*#__PURE__*/React.createRef();\n    this.callScreenEl = /*#__PURE__*/React.createRef();\n    this.callScreenFrame = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    this.document = window.document;\n\n    if (this.props.call.type === enums.CUSTOM_TYPE_MEETING) {\n      this.startDirectCall(this.props.call);\n    } else {\n      this.startDefaultCall(this.props.call);\n    }\n  }\n\n  render() {\n    const resizeText = Translator.translate(\"RESIZE\", this.props.lang);\n    let iconView = jsx(\"i\", {\n      css: iconStyle(minimizeIcon),\n      title: resizeText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 25\n      }\n    });\n\n    if (this.state.maximized === false) {\n      iconView = jsx(\"i\", {\n        css: iconStyle(maximizeIcon),\n        title: resizeText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 25\n        }\n      });\n    }\n\n    return jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 13\n      }\n    }, jsx(\"div\", {\n      css: callScreenBackgroundStyle(this.state),\n      ref: this.callScreenBackgroundEl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 17\n      }\n    }), jsx(\"div\", {\n      ref: this.callScreenEl,\n      className: \"callscreen__container\",\n      css: callScreenContainerStyle(this.props),\n      style: {\n        top: this.state.y + \"px\",\n        left: this.state.x + \"px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 17\n      }\n    }, jsx(\"div\", {\n      css: callScreenInnerBackgroundStyle(),\n      ref: this.callScreenInnerBackgroundEl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 21\n      }\n    }), jsx(\"div\", {\n      css: callScreenHeaderStyle(this.state),\n      className: \"callscreen__header\",\n      onMouseDown: this.enableDragging,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 21\n      }\n    }, jsx(\"div\", {\n      css: headerTitleStyle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 25\n      }\n    }, \"\\xA0\"), jsx(\"div\", {\n      css: headerButtonStyle(),\n      onClick: this.toggle,\n      onMouseDown: e => e.stopPropagation(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 25\n      }\n    }, jsx(\"button\", {\n      type: \"button\",\n      title: resizeText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 117\n      }\n    }, iconView))), jsx(\"div\", {\n      css: callScreenWrapperStyle(this.props, keyframes),\n      className: \"callscreen__wrapper\",\n      ref: el => {\n        this.callScreenFrame = el;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 21\n      }\n    }), jsx(\"div\", {\n      css: callScreenResizerStyle(this.state),\n      className: \"callscreen__resizer-both\",\n      onMouseDown: this.initResize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 21\n      }\n    })));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatCallScreen.contextType = CometChatContext;\nCometChatCallScreen.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n  minWidth: 400,\n  minHeight: 300,\n  maxWidth: \"100%\",\n  maxHeight: \"100%\",\n  style: {}\n};\nCometChatCallScreen.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n  minWidth: PropTypes.number,\n  minHeight: PropTypes.number,\n  maxWidth: PropTypes.string,\n  maxHeight: PropTypes.string,\n  style: PropTypes.object\n};\nexport { CometChatCallScreen };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Calls/CometChatCallScreen/index.js"],"names":["React","jsx","keyframes","PropTypes","CometChat","CometChatContext","Storage","enums","theme","Translator","callScreenBackgroundStyle","callScreenContainerStyle","callScreenInnerBackgroundStyle","callScreenHeaderStyle","callScreenWrapperStyle","headerTitleStyle","headerButtonStyle","callScreenResizerStyle","iconStyle","CometChatCallScreen","PureComponent","constructor","props","enableDragging","e","preventDefault","checkIfCallScreenIsMaximized","setState","dragging","rel","x","pageX","state","y","pageY","toggleCallScreenBackground","toggleCallScreenInnerBackground","document","onmousemove","startDragging","onmouseup","disableDragging","elem","callScreenEl","current","dialogWidth","clientWidth","dialogHeight","clientHeight","windowWidth","window","innerWidth","windowHeight","innerHeight","checkIfCallScreenIsMinimized","minimumWidth","minWidth","minimumHeight","minHeight","event","Math","min","max","stopPropagation","initResize","element","startX","startY","startWidth","parseFloat","getComputedStyle","getPropertyValue","replace","startHeight","parseInt","startResize","stopResize","width","height","minHWidth","maxWidth","maxHeight","style","setDimensionOfCallScreenInnerBackground","maximized","flag","callScreenBackgroundEl","display","callScreenInnerBackgroundEl","setPositionOfCallScreenInnerBackground","top","left","minimize","setSizingAndPostionOfCallScreen","maximize","toggle","startDirectCall","call","sessionId","data","customData","sessionID","customCSS","context","UIKitSettings","callSettings","CallSettingsBuilder","enableDefaultLayout","setSessionID","setIsAudioOnlyCall","setCustomCSS","setLocalizedStringObject","translate","lang","build","el","callScreenFrame","startCall","OngoingCallListener","onCallEnded","setCallInProgress","removeItem","CONSTANTS","actionGenerated","ACTIONS","onError","error","errorCode","hasOwnProperty","code","setToastMessage","startDefaultCall","getSessionId","callType","type","CALL_TYPE","AUDIO","setMode","CALL_MODE","DEFAULT","onUserJoined","user","callInitiator","uid","loggedInUser","callMessage","category","action","status","callReceiver","receiverId","receiverType","sentAt","onUserLeft","endedCall","createRef","componentDidMount","CUSTOM_TYPE_MEETING","render","resizeText","iconView","minimizeIcon","maximizeIcon","contextType","defaultProps","getDefaultLanguage","propTypes","string","object","number"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, keyframes } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\n\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport { Storage } from \"../../../util/Storage\";\nimport * as enums from \"../../../util/enums.js\";\n\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\n\nimport {\n    callScreenBackgroundStyle,\n    callScreenContainerStyle,\n    callScreenInnerBackgroundStyle,\n    callScreenHeaderStyle,\n    callScreenWrapperStyle,\n    headerTitleStyle,\n    headerButtonStyle,\n    callScreenResizerStyle,\n    iconStyle\n} from \"./style\";\n\nimport minimizeIcon from \"./resources/reduce-size.svg\";\nimport maximizeIcon from \"./resources/increase-size.svg\";\n\nclass CometChatCallScreen extends React.PureComponent {\n\n    static contextType = CometChatContext;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            x: 0,\n            y: 0,\n            rel: null, // position relative to the cursor\n            dragging: false,\n            maximized: true\n        };\n\n        this.loggedInUser = props.loggedInUser;\n        \n        this.callScreenBackgroundEl = React.createRef();\n        this.callScreenInnerBackgroundEl = React.createRef();\n        this.callScreenEl = React.createRef();\n        this.callScreenFrame = React.createRef();\n    }\n\n    componentDidMount() {\n\n        this.document = window.document;\n\n        if (this.props.call.type === enums.CUSTOM_TYPE_MEETING) {\n            this.startDirectCall(this.props.call);\n        } else {\n            this.startDefaultCall(this.props.call);\n        }\n    }\n\n    enableDragging = (e) => {\n\n        e.preventDefault();\n        \n        if (this.checkIfCallScreenIsMaximized() === true) {\n            return false;\n        }\n\n        this.setState({\n            dragging: true,\n            rel: {\n                x: e.pageX - this.state.x,\n                y: e.pageY - this.state.y\n            }\n        });\n\n        this.toggleCallScreenBackground(true);\n        this.toggleCallScreenInnerBackground(true);\n\n        this.document.onmousemove = (e) => this.startDragging(e);\n        this.document.onmouseup = (e) => this.disableDragging(e);\n    }\n\n    checkIfCallScreenIsMaximized = () => {\n\n        const elem = this.callScreenEl.current;\n\n        const dialogWidth = elem.clientWidth;\n        const dialogHeight = elem.clientHeight;\n\n        const windowWidth = window.innerWidth;\n        const windowHeight = window.innerHeight;\n\n        if (dialogWidth === windowWidth && dialogHeight === windowHeight) {\n            return true;\n        }\n\n        return false;\n    }\n\n    checkIfCallScreenIsMinimized = () => {\n\n        const elem = this.callScreenEl.current;\n\n        const dialogWidth = elem.clientWidth;\n        const dialogHeight = elem.clientHeight;\n\n        const minimumWidth = this.props.minWidth;\n        const minimumHeight = this.props.minHeight;\n\n        if (dialogWidth === minimumWidth && dialogHeight === minimumHeight) {\n            return true;\n        }\n\n        return false;\n    }\n\n    startDragging = (e) => {\n        \n        if (!this.state.dragging) return;\n        \n        e = e || window.event;\n\n        const elem = this.callScreenEl.current;\n\n        const dialogWidth = elem.clientWidth; \n        const dialogHeight = elem.clientHeight; \n        const x = Math.min(\n            Math.max(0, e.pageX - this.state.rel.x),\n            window.innerWidth - dialogWidth - 20\n        );\n        const y = Math.min(\n            Math.max(0, e.pageY - this.state.rel.y),\n            window.innerHeight - dialogHeight - 20\n        ); \n\n        this.setState({\n            x: x,\n            y: y\n        });\n\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    disableDragging = (e) => {\n\n        this.document.onmousemove = null;\n        this.document.onmouseup = null;\n\n        this.setState({ dragging: false });\n\n        this.toggleCallScreenBackground(false);\n        this.toggleCallScreenInnerBackground(false);\n    }\n\n    initResize = (e) => {\n\n        e.preventDefault();\n\n        if (this.checkIfCallScreenIsMaximized() === true) {\n            return false;\n        }\n\n        const element = this.callScreenEl.current;\n\n        this.startX = e.pageX;\n        this.startY = e.pageY;\n\n        this.startWidth = parseFloat(getComputedStyle(element, null).getPropertyValue(\"width\").replace(\"px\", \"\"));\n        this.startHeight = parseInt(getComputedStyle(element, null).getPropertyValue(\"height\").replace(\"px\", \"\"));\n\n        this.document.onmousemove = (e) => this.startResize(e);\n        this.document.onmouseup = (e) => this.stopResize(e);\n    }\n\n    startResize = (e) => {\n        \n        let width = this.startWidth + (e.pageX - this.startX);\n        let height = this.startHeight + (e.pageY - this.startY);\n\n        if (width < this.props.minWidth) {\n            width = this.props.minHWidth;\n        }\n\n        if (width > window.innerWidth) {\n            width = this.props.maxWidth;\n        }\n\n        if (height < this.props.minHeight) {\n            height = this.props.minHeight;\n        }\n\n        if (height > window.innerHeight) {\n            height = this.props.maxHeight;\n        }\n\n        this.callScreenEl.current.style.width = width + \"px\";\n        this.callScreenEl.current.style.height = height + \"px\";\n\n        this.setDimensionOfCallScreenInnerBackground({ width: width + \"px\", height: height + \"px\" });\n\n        this.toggleCallScreenBackground(true);\n        this.toggleCallScreenInnerBackground(true);\n    }\n\n    stopResize = () => {\n        \n        this.document.onmousemove = null;\n        this.document.onmouseup = null;\n\n        this.toggleCallScreenBackground(false);\n        this.toggleCallScreenInnerBackground(false);\n\n        if (this.checkIfCallScreenIsMaximized() === true) {\n            this.setState({ maximized: true });\n        } \n        if (this.checkIfCallScreenIsMinimized() === true) {\n            this.setState({ maximized: false });\n        }\n    }\n\n    toggleCallScreenBackground = (flag) => {\n\n        if (this.callScreenBackgroundEl && this.callScreenBackgroundEl.current) {\n            this.callScreenBackgroundEl.current.style.display = (flag) ? \"block\" : \"none\";\n        }\n    }\n\n    toggleCallScreenInnerBackground = (flag) => {\n\n        if (this.callScreenInnerBackgroundEl && this.callScreenInnerBackgroundEl.current) {\n            this.callScreenInnerBackgroundEl.current.style.display = (flag) ? \"block\" : \"none\";\n        }\n    }\n\n    setDimensionOfCallScreenInnerBackground = (props) => {\n\n        this.callScreenInnerBackgroundEl.current.style.width = props.width;\n        this.callScreenInnerBackgroundEl.current.style.height = props.height;\n    }\n\n    setPositionOfCallScreenInnerBackground = (props) => {\n\n        this.callScreenInnerBackgroundEl.current.style.top = props.y;\n        this.callScreenInnerBackgroundEl.current.style.left = props.x;\n    }\n\n    minimize = () => {\n\n        if (!this.callScreenEl || !this.callScreenEl.current) {\n            return false;\n        }\n\n        const width = this.props.minWidth + \"px\";\n        const height = this.props.minHeight + \"px\";\n\n        this.setState({ maximized: false });\n        this.setSizingAndPostionOfCallScreen({ width: width, height: height });\n        this.setDimensionOfCallScreenInnerBackground({ width: width, height: height });\n        this.setPositionOfCallScreenInnerBackground({ x: \"0px\", y: \"0px\" });\n    }\n\n    maximize = () => {\n\n        if (!this.callScreenEl || !this.callScreenEl.current) {\n            return false;\n        }\n\n        const width = this.props.maxWidth;\n        const height = this.props.maxHeight;\n\n        this.setState({ maximized: true });\n        this.setSizingAndPostionOfCallScreen({ width: width, height: height });\n        this.setDimensionOfCallScreenInnerBackground({ width: width, height: height });\n        this.setPositionOfCallScreenInnerBackground({ x: \"0px\", y: \"0px\" });\n    }\n\n    setSizingAndPostionOfCallScreen = (props) => {\n\n        this.callScreenEl.current.style.width = props.width;\n        this.callScreenEl.current.style.height = props.height;\n        this.callScreenEl.current.style.top = \"0px\";\n        this.callScreenEl.current.style.left = \"0px\";\n    }\n\n    toggle = (e) => {\n\n        this.setState({ x: 0, y: 0 });\n\n        if (this.state.maximized) {\n            this.minimize();\n        } else {\n            this.maximize();\n        }\n\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    startDirectCall = (call) => {\n\n        const sessionId = call.data.customData.sessionID;\n        const customCSS = this.context.UIKitSettings.customCSS;\n\n        const callSettings = new CometChat.CallSettingsBuilder()\n            .enableDefaultLayout(true)\n            .setSessionID(sessionId)\n            .setIsAudioOnlyCall(false)\n            .setCustomCSS(customCSS)\n            .setLocalizedStringObject({\n                \"SELECT_VIDEO_SOURCE\": Translator.translate(\"SELECT_VIDEO_SOURCE\", this.props.lang),\n                \"SELECT_INPUT_AUDIO_SOURCE\": Translator.translate(\"SELECT_INPUT_AUDIO_SOURCE\", this.props.lang),\n                \"SELECT_OUTPUT_AUDIO_SOURCE\": Translator.translate(\"SELECT_OUTPUT_AUDIO_SOURCE\", this.props.lang)\n            }).build();\n\n        const el = this.callScreenFrame;\n        CometChat.startCall(\n            callSettings,\n            el,\n            new CometChat.OngoingCallListener({\n                onCallEnded: call => {\n\n                    if (this.context) {\n                        this.context.setCallInProgress({}, \"\");\n                    }\n                    Storage.removeItem(enums.CONSTANTS[\"ACTIVECALL\"]);\n                    this.props.actionGenerated(enums.ACTIONS[\"DIRECT_CALL_ENDED\"]);\n                },\n                onError: error => {\n\n                    if (this.context) {\n                        this.context.setCallInProgress(null, \"\");\n                    }\n                    \n                    this.props.actionGenerated(enums.ACTIONS[\"DIRECT_CALL_ERROR\"]);\n                    const errorCode = (error && error.hasOwnProperty(\"code\")) ? error.code : \"ERROR\";\n                    this.context.setToastMessage(\"error\", errorCode);\n                }\n            })\n        );\n    }\n\n    startDefaultCall = (call) => {\n\n        const sessionId = call.getSessionId();\n        const callType = (call.type === CometChat.CALL_TYPE.AUDIO ? true : false);\n        const customCSS = this.context.UIKitSettings.customCSS;\n\n        const callSettings = new CometChat.CallSettingsBuilder()\n            .setSessionID(sessionId)\n            .enableDefaultLayout(true)\n            .setMode(CometChat.CALL_MODE.DEFAULT)\n            .setIsAudioOnlyCall(callType)\n            .setCustomCSS(customCSS)\n            .setLocalizedStringObject({\n                \"SELECT_VIDEO_SOURCE\": Translator.translate(\"SELECT_VIDEO_SOURCE\", this.props.lang),\n                \"SELECT_INPUT_AUDIO_SOURCE\": Translator.translate(\"SELECT_INPUT_AUDIO_SOURCE\", this.props.lang),\n                \"SELECT_OUTPUT_AUDIO_SOURCE\": Translator.translate(\"SELECT_OUTPUT_AUDIO_SOURCE\", this.props.lang)\n            }).build();\n\n\n        const el = this.callScreenFrame;\n        CometChat.startCall(\n            callSettings,\n            el,\n            new CometChat.OngoingCallListener({\n                onUserJoined: user => {\n\n                    /* Notification received here if another user joins the call. */\n                    /* this method can be use to display message or perform any actions if someone joining the call */\n                    //call initiator gets the same info in outgoingcallaccpeted event\n                    if (call.callInitiator.uid !== this.loggedInUser.uid && call.callInitiator.uid !== user.uid) {\n\n                        const callMessage = {\n                            \"category\": call.category,\n                            \"type\": call.type,\n                            \"action\": call.action,\n                            \"status\": call.status,\n                            \"callInitiator\": call.callInitiator,\n                            \"callReceiver\": call.callReceiver,\n                            \"receiverId\": call.receiverId,\n                            \"receiverType\": call.receiverType,\n                            \"sentAt\": call.sentAt,\n                            \"sender\": { ...user }\n                        };\n                        this.props.actionGenerated(enums.ACTIONS[\"USER_JOINED_CALL\"], callMessage);\n                    }\n                },\n                onUserLeft: user => {\n                    /* Notification received here if another user left the call. */\n                    /* this method can be use to display message or perform any actions if someone leaving the call */\n                    //call initiator gets the same info in outgoingcallaccpeted event\n                    if (call.callInitiator.uid !== this.loggedInUser.uid && call.callInitiator.uid !== user.uid) {\n\n                        const callMessage = {\n                            \"category\": call.category,\n                            \"type\": call.type,\n                            \"action\": \"left\",\n                            \"status\": call.status,\n                            \"callInitiator\": call.callInitiator,\n                            \"callReceiver\": call.callReceiver,\n                            \"receiverId\": call.receiverId,\n                            \"receiverType\": call.receiverType,\n                            \"sentAt\": call.sentAt,\n                            \"sender\": { ...user }\n                        };\n\n                        this.props.actionGenerated(enums.ACTIONS[\"USER_LEFT_CALL\"], callMessage);\n                    }\n                },\n                onCallEnded: endedCall => {\n\n                    /* Notification received here if current ongoing call is ended. */\n                    if (this.context) {\n                        this.context.setCallInProgress(null, \"\");\n                    }\n                    Storage.removeItem(enums.CONSTANTS[\"ACTIVECALL\"]);\n                    this.props.actionGenerated(enums.ACTIONS[\"OUTGOING_CALL_ENDED\"], endedCall);\n                    /* hiding/closing the call screen can be done here. */\n                }\n            })\n        );\n    }\n\n    render() {\n\n        const resizeText = Translator.translate(\"RESIZE\", this.props.lang);\n        let iconView = (<i css={iconStyle(minimizeIcon)} title={resizeText}></i>);\n        if (this.state.maximized === false) {\n            iconView = (<i css={iconStyle(maximizeIcon)} title={resizeText}></i>);\n        }\n\n        return (\n            <React.Fragment>\n                <div css={callScreenBackgroundStyle(this.state)} ref={this.callScreenBackgroundEl}></div>\n                <div ref={this.callScreenEl} className=\"callscreen__container\" css={callScreenContainerStyle(this.props)} \n                    style={{ top: this.state.y + \"px\", left: this.state.x + \"px\" }}>\n                    <div css={callScreenInnerBackgroundStyle()} ref={this.callScreenInnerBackgroundEl}></div>\n                    <div css={callScreenHeaderStyle(this.state)} className=\"callscreen__header\" onMouseDown={this.enableDragging}>\n                        <div css={headerTitleStyle()}>&nbsp;</div>\n                        <div css={headerButtonStyle()} onClick={this.toggle} onMouseDown={e => e.stopPropagation()}><button type=\"button\" title={resizeText}>{iconView}</button></div>\n                    </div>\n                    <div css={callScreenWrapperStyle(this.props, keyframes)} className=\"callscreen__wrapper\" ref={el => { this.callScreenFrame = el; }}></div>\n                    <div css={callScreenResizerStyle(this.state)} className=\"callscreen__resizer-both\" onMouseDown={this.initResize}></div>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\n// Specifies the default values for props:\nCometChatCallScreen.defaultProps = {\n    lang: Translator.getDefaultLanguage(),\n    theme: theme,\n    minWidth: 400,\n    minHeight: 300,\n    maxWidth: \"100%\",\n    maxHeight: \"100%\",\n    style: {},\n};\n\nCometChatCallScreen.propTypes = {\n    lang: PropTypes.string,\n    theme: PropTypes.object,\n    minWidth: PropTypes.number,\n    minHeight: PropTypes.number,\n    maxWidth: PropTypes.string,\n    maxHeight: PropTypes.string,\n    style: PropTypes.object,\n}\n\nexport { CometChatCallScreen }"]},"metadata":{},"sourceType":"module"}