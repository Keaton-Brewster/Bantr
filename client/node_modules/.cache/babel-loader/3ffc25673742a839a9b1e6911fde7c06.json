{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ConvorsationProvider.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport API from \"./API\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst conversationContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(conversationContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function Provider({\n  children\n}) {\n  _s2();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadingMessages, setLoadingMessages] = useState(false);\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState({});\n  const [messages, setMessages] = useState([]);\n  const [mobileView, setMobileView] = useState({\n    conversations: true,\n    messages: false\n  });\n  const [user, setUser] = useState({\n    _id: \"User1\"\n  });\n  useEffect(() => {\n    API.init(([convos, topMessages]) => {\n      setConversations(convos);\n      setSelectedConversation(convos[0]);\n      setMessages(topMessages);\n      setIsLoading(false);\n    }).catch(e => console.error(e));\n  }, []);\n  const value = {\n    loadingState: [isLoading, setIsLoading],\n    conversationState: [conversations, setConversations],\n    selectedConversationState: [selectedConversation, setSelectedConversation],\n    messageState: [messages, setMessages],\n    userState: [user, setUser],\n    mobileViewState: [mobileView, setMobileView],\n    loadingMessagesState: [loadingMessages, setLoadingMessages]\n  };\n  return /*#__PURE__*/_jsxDEV(conversationContext.Provider, {\n    value: value,\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n      id: \"spinner\",\n      animation: \"border\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 20\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Provider, \"ijjYlLlHd3o84m8zb5iAg5FERxE=\");\n\n_c = Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ConvorsationProvider.jsx"],"names":["React","useContext","useEffect","useState","Spinner","API","conversationContext","createContext","useConversations","Provider","children","isLoading","setIsLoading","loadingMessages","setLoadingMessages","conversations","setConversations","selectedConversation","setSelectedConversation","messages","setMessages","mobileView","setMobileView","user","setUser","_id","init","convos","topMessages","catch","e","console","error","value","loadingState","conversationState","selectedConversationState","messageState","userState","mobileViewState","loadingMessagesState"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,MAAMC,mBAAmB,gBAAGN,KAAK,CAACO,aAAN,EAA5B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AACjC,SAAOP,UAAU,CAACK,mBAAD,CAAjB;AACD;;GAFeE,gB;;AAIhB,OAAO,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAAA;;AACrC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACc,oBAAD,EAAuBC,uBAAvB,IAAkDf,QAAQ,CAAC,EAAD,CAAhE;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACkB,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC;AAC3CY,IAAAA,aAAa,EAAE,IAD4B;AAE3CI,IAAAA,QAAQ,EAAE;AAFiC,GAAD,CAA5C;AAIA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC;AAC/BsB,IAAAA,GAAG,EAAE;AAD0B,GAAD,CAAhC;AAIAvB,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,GAAG,CAACqB,IAAJ,CAAS,CAAC,CAACC,MAAD,EAASC,WAAT,CAAD,KAA2B;AAClCZ,MAAAA,gBAAgB,CAACW,MAAD,CAAhB;AACAT,MAAAA,uBAAuB,CAACS,MAAM,CAAC,CAAD,CAAP,CAAvB;AACAP,MAAAA,WAAW,CAACQ,WAAD,CAAX;AACAhB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KALD,EAKGiB,KALH,CAKUC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CALhB;AAMD,GAPQ,EAON,EAPM,CAAT;AASA,QAAMG,KAAK,GAAG;AACZC,IAAAA,YAAY,EAAE,CAACvB,SAAD,EAAYC,YAAZ,CADF;AAEZuB,IAAAA,iBAAiB,EAAE,CAACpB,aAAD,EAAgBC,gBAAhB,CAFP;AAGZoB,IAAAA,yBAAyB,EAAE,CAACnB,oBAAD,EAAuBC,uBAAvB,CAHf;AAIZmB,IAAAA,YAAY,EAAE,CAAClB,QAAD,EAAWC,WAAX,CAJF;AAKZkB,IAAAA,SAAS,EAAE,CAACf,IAAD,EAAOC,OAAP,CALC;AAMZe,IAAAA,eAAe,EAAE,CAAClB,UAAD,EAAaC,aAAb,CANL;AAOZkB,IAAAA,oBAAoB,EAAE,CAAC3B,eAAD,EAAkBC,kBAAlB;AAPV,GAAd;AASA,sBACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAEmB,KAArC;AAAA,cACGtB,SAAS,gBAAG,QAAC,OAAD;AAAS,MAAA,EAAE,EAAC,SAAZ;AAAsB,MAAA,SAAS,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,YAAH,GAAiDD;AAD7D;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IArCeD,Q;;KAAAA,Q","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport API from \"./API\";\n\nconst conversationContext = React.createContext();\n\nexport function useConversations() {\n  return useContext(conversationContext);\n}\n\nexport function Provider({ children }) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadingMessages, setLoadingMessages] = useState(false);\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState({});\n  const [messages, setMessages] = useState([]);\n  const [mobileView, setMobileView] = useState({\n    conversations: true,\n    messages: false,\n  });\n  const [user, setUser] = useState({\n    _id: \"User1\",\n  });\n\n  useEffect(() => {\n    API.init(([convos, topMessages]) => {\n      setConversations(convos);\n      setSelectedConversation(convos[0]);\n      setMessages(topMessages);\n      setIsLoading(false);\n    }).catch((e) => console.error(e));\n  }, []);\n\n  const value = {\n    loadingState: [isLoading, setIsLoading],\n    conversationState: [conversations, setConversations],\n    selectedConversationState: [selectedConversation, setSelectedConversation],\n    messageState: [messages, setMessages],\n    userState: [user, setUser],\n    mobileViewState: [mobileView, setMobileView],\n    loadingMessagesState: [loadingMessages, setLoadingMessages],\n  };\n  return (\n    <conversationContext.Provider value={value}>\n      {isLoading ? <Spinner id=\"spinner\" animation=\"border\" /> : children}\n    </conversationContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}