{"ast":null,"code":"import { CometChat } from \"@cometchat-pro/chat\";\nimport { UIKitSettings } from \"../../../util/UIKitSettings\";\nexport class AddMembersManager {\n  constructor(context, searchKey) {\n    this.membersRequest = null;\n    this.userListenerId = new Date().getTime();\n\n    this.initializeMembersRequest = () => {\n      const userListMode = this.context.UIKitSettings.userListMode;\n      const userListModeOptions = UIKitSettings.userListFilterOptions;\n      return new Promise((resolve, reject) => {\n        if (userListMode === userListModeOptions[\"ALL\"]) {\n          if (this.searchKey) {\n            this.membersRequest = new CometChat.UsersRequestBuilder().setLimit(30).setSearchKeyword(this.searchKey).build();\n          } else {\n            this.membersRequest = new CometChat.UsersRequestBuilder().setLimit(30).build();\n          }\n\n          return resolve(this.membersRequest);\n        } else if (userListMode === userListModeOptions[\"FRIENDS\"]) {\n          if (this.searchKey) {\n            this.membersRequest = new CometChat.UsersRequestBuilder().setLimit(30).friendsOnly(true).setSearchKeyword(this.searchKey).build();\n          } else {\n            this.membersRequest = new CometChat.UsersRequestBuilder().setLimit(30).friendsOnly(true).build();\n          }\n\n          return resolve(this.membersRequest);\n        } else {\n          return reject({\n            message: \"Invalid filter for userlist\"\n          });\n        }\n      });\n    };\n\n    this.context = context;\n    this.searchKey = searchKey;\n  }\n\n  fetchNextUsers() {\n    return this.membersRequest.fetchNext();\n  }\n\n  attachListeners(callback) {\n    CometChat.addUserListener(this.userListenerId, new CometChat.UserListener({\n      onUserOnline: onlineUser => {\n        /* when someuser/friend comes online, user will be received here */\n        callback(onlineUser);\n      },\n      onUserOffline: offlineUser => {\n        /* when someuser/friend went offline, user will be received here */\n        callback(offlineUser);\n      }\n    }));\n  }\n\n  removeListeners() {\n    CometChat.removeUserListener(this.userListenerId);\n  }\n\n}","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Groups/CometChatAddGroupMemberList/controller.js"],"names":["CometChat","UIKitSettings","AddMembersManager","constructor","context","searchKey","membersRequest","userListenerId","Date","getTime","initializeMembersRequest","userListMode","userListModeOptions","userListFilterOptions","Promise","resolve","reject","UsersRequestBuilder","setLimit","setSearchKeyword","build","friendsOnly","message","fetchNextUsers","fetchNext","attachListeners","callback","addUserListener","UserListener","onUserOnline","onlineUser","onUserOffline","offlineUser","removeListeners","removeUserListener"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AAEA,SAAQC,aAAR,QAA4B,6BAA5B;AAEA,OAAO,MAAMC,iBAAN,CAAwB;AAI9BC,EAAAA,WAAW,CAACC,OAAD,EAAUC,SAAV,EAAqB;AAAA,SAHhCC,cAGgC,GAHf,IAGe;AAAA,SAFhCC,cAEgC,GAFf,IAAIC,IAAJ,GAAWC,OAAX,EAEe;;AAAA,SAMhCC,wBANgC,GAML,MAAM;AAEhC,YAAMC,YAAY,GAAG,KAAKP,OAAL,CAAaH,aAAb,CAA2BU,YAAhD;AACA,YAAMC,mBAAmB,GAAGX,aAAa,CAACY,qBAA1C;AAEA,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEvC,YAAIL,YAAY,KAAKC,mBAAmB,CAAC,KAAD,CAAxC,EAAiD;AAEhD,cAAI,KAAKP,SAAT,EAAoB;AACnB,iBAAKC,cAAL,GAAsB,IAAIN,SAAS,CAACiB,mBAAd,GAAoCC,QAApC,CAA6C,EAA7C,EAAiDC,gBAAjD,CAAkE,KAAKd,SAAvE,EAAkFe,KAAlF,EAAtB;AACA,WAFD,MAEO;AACN,iBAAKd,cAAL,GAAsB,IAAIN,SAAS,CAACiB,mBAAd,GAAoCC,QAApC,CAA6C,EAA7C,EAAiDE,KAAjD,EAAtB;AACA;;AAED,iBAAOL,OAAO,CAAC,KAAKT,cAAN,CAAd;AACA,SATD,MASO,IAAIK,YAAY,KAAKC,mBAAmB,CAAC,SAAD,CAAxC,EAAqD;AAE3D,cAAI,KAAKP,SAAT,EAAoB;AACnB,iBAAKC,cAAL,GAAsB,IAAIN,SAAS,CAACiB,mBAAd,GAAoCC,QAApC,CAA6C,EAA7C,EAAiDG,WAAjD,CAA6D,IAA7D,EAAmEF,gBAAnE,CAAoF,KAAKd,SAAzF,EAAoGe,KAApG,EAAtB;AACA,WAFD,MAEO;AACN,iBAAKd,cAAL,GAAsB,IAAIN,SAAS,CAACiB,mBAAd,GAAoCC,QAApC,CAA6C,EAA7C,EAAiDG,WAAjD,CAA6D,IAA7D,EAAmED,KAAnE,EAAtB;AACA;;AAED,iBAAOL,OAAO,CAAC,KAAKT,cAAN,CAAd;AACA,SATM,MASA;AACN,iBAAOU,MAAM,CAAC;AAACM,YAAAA,OAAO,EAAE;AAAV,WAAD,CAAb;AACA;AACD,OAvBM,CAAP;AAwBA,KAnC+B;;AAE/B,SAAKlB,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA;;AAiCDkB,EAAAA,cAAc,GAAG;AAChB,WAAO,KAAKjB,cAAL,CAAoBkB,SAApB,EAAP;AACA;;AAEDC,EAAAA,eAAe,CAACC,QAAD,EAAW;AACzB1B,IAAAA,SAAS,CAAC2B,eAAV,CACC,KAAKpB,cADN,EAEC,IAAIP,SAAS,CAAC4B,YAAd,CAA2B;AAC1BC,MAAAA,YAAY,EAAEC,UAAU,IAAI;AAC3B;AACAJ,QAAAA,QAAQ,CAACI,UAAD,CAAR;AACA,OAJyB;AAK1BC,MAAAA,aAAa,EAAEC,WAAW,IAAI;AAC7B;AACAN,QAAAA,QAAQ,CAACM,WAAD,CAAR;AACA;AARyB,KAA3B,CAFD;AAaA;;AAEDC,EAAAA,eAAe,GAAG;AACjBjC,IAAAA,SAAS,CAACkC,kBAAV,CAA6B,KAAK3B,cAAlC;AACA;;AA/D6B","sourcesContent":["import { CometChat } from \"@cometchat-pro/chat\";\n\nimport {UIKitSettings} from \"../../../util/UIKitSettings\";\n\nexport class AddMembersManager {\n\tmembersRequest = null;\n\tuserListenerId = new Date().getTime();\n\n\tconstructor(context, searchKey) {\n\n\t\tthis.context = context;\n\t\tthis.searchKey = searchKey;\n\t}\n\n\tinitializeMembersRequest = () => {\n\n\t\tconst userListMode = this.context.UIKitSettings.userListMode;\n\t\tconst userListModeOptions = UIKitSettings.userListFilterOptions;\n\n\t\treturn new Promise((resolve, reject) => {\n\n\t\t\tif (userListMode === userListModeOptions[\"ALL\"]) {\n\n\t\t\t\tif (this.searchKey) {\n\t\t\t\t\tthis.membersRequest = new CometChat.UsersRequestBuilder().setLimit(30).setSearchKeyword(this.searchKey).build();\n\t\t\t\t} else {\n\t\t\t\t\tthis.membersRequest = new CometChat.UsersRequestBuilder().setLimit(30).build();\n\t\t\t\t}\n\n\t\t\t\treturn resolve(this.membersRequest);\n\t\t\t} else if (userListMode === userListModeOptions[\"FRIENDS\"]) {\n\n\t\t\t\tif (this.searchKey) {\n\t\t\t\t\tthis.membersRequest = new CometChat.UsersRequestBuilder().setLimit(30).friendsOnly(true).setSearchKeyword(this.searchKey).build();\n\t\t\t\t} else {\n\t\t\t\t\tthis.membersRequest = new CometChat.UsersRequestBuilder().setLimit(30).friendsOnly(true).build();\n\t\t\t\t}\n\n\t\t\t\treturn resolve(this.membersRequest);\n\t\t\t} else {\n\t\t\t\treturn reject({message: \"Invalid filter for userlist\"});\n\t\t\t}\n\t\t});\n\t};\n\n\tfetchNextUsers() {\n\t\treturn this.membersRequest.fetchNext();\n\t}\n\n\tattachListeners(callback) {\n\t\tCometChat.addUserListener(\n\t\t\tthis.userListenerId,\n\t\t\tnew CometChat.UserListener({\n\t\t\t\tonUserOnline: onlineUser => {\n\t\t\t\t\t/* when someuser/friend comes online, user will be received here */\n\t\t\t\t\tcallback(onlineUser);\n\t\t\t\t},\n\t\t\t\tonUserOffline: offlineUser => {\n\t\t\t\t\t/* when someuser/friend went offline, user will be received here */\n\t\t\t\t\tcallback(offlineUser);\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t}\n\n\tremoveListeners() {\n\t\tCometChat.removeUserListener(this.userListenerId);\n\t}\n}"]},"metadata":{},"sourceType":"module"}