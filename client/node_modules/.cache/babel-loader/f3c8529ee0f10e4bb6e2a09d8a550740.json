{"ast":null,"code":"import { CometChat } from \"@cometchat-pro/chat\";\nimport * as enums from \"../../../util/enums.js\";\nimport { UIKitSettings } from \"../../../util/UIKitSettings\";\nexport class ConversationListManager {\n  constructor(context) {\n    this.conversationRequest = null;\n    this.conversationListenerId = \"chatlist_\" + new Date().getTime();\n    this.userListenerId = \"chatlist_user_\" + new Date().getTime();\n    this.groupListenerId = \"chatlist_group_\" + new Date().getTime();\n    this.callListenerId = \"chatlist_call_\" + new Date().getTime();\n    const chatListMode = context.UIKitSettings.chatListMode;\n    const chatListFilterOptions = UIKitSettings.chatListFilterOptions;\n\n    switch (chatListMode) {\n      case chatListFilterOptions[\"USERS\"]:\n        this.conversationRequest = new CometChat.ConversationsRequestBuilder().setConversationType(CometChat.ACTION_TYPE.TYPE_USER).setLimit(30).build();\n        break;\n\n      case chatListFilterOptions[\"GROUPS\"]:\n        this.conversationRequest = new CometChat.ConversationsRequestBuilder().setConversationType(CometChat.ACTION_TYPE.TYPE_GROUP).setLimit(30).build();\n        break;\n\n      default:\n        this.conversationRequest = new CometChat.ConversationsRequestBuilder().setLimit(30).build();\n        break;\n    }\n  }\n\n  fetchNextConversation() {\n    return this.conversationRequest.fetchNext();\n  }\n\n  attachListeners(callback) {\n    CometChat.addUserListener(this.userListenerId, new CometChat.UserListener({\n      onUserOnline: onlineUser => {\n        /* when someuser/friend comes online, user will be received here */\n        callback(enums.USER_ONLINE, onlineUser);\n      },\n      onUserOffline: offlineUser => {\n        /* when someuser/friend went offline, user will be received here */\n        callback(enums.USER_OFFLINE, offlineUser);\n      }\n    }));\n    CometChat.addGroupListener(this.groupListenerId, new CometChat.GroupListener({\n      onGroupMemberScopeChanged: (message, changedUser, newScope, oldScope, changedGroup) => {\n        callback(enums.GROUP_MEMBER_SCOPE_CHANGED, changedGroup, message, {\n          \"user\": changedUser,\n          \"scope\": newScope\n        });\n      },\n      onGroupMemberKicked: (message, kickedUser, kickedBy, kickedFrom) => {\n        callback(enums.GROUP_MEMBER_KICKED, kickedFrom, message, {\n          \"user\": kickedUser,\n          \"hasJoined\": false\n        });\n      },\n      onGroupMemberBanned: (message, bannedUser, bannedBy, bannedFrom) => {\n        callback(enums.GROUP_MEMBER_BANNED, bannedFrom, message, {\n          \"user\": bannedUser\n        });\n      },\n      onGroupMemberUnbanned: (message, unbannedUser, unbannedBy, unbannedFrom) => {\n        callback(enums.GROUP_MEMBER_UNBANNED, unbannedFrom, message, {\n          \"user\": unbannedUser\n        });\n      },\n      onMemberAddedToGroup: (message, userAdded, userAddedBy, userAddedIn) => {\n        callback(enums.GROUP_MEMBER_ADDED, userAddedIn, message, {\n          \"user\": userAdded,\n          \"hasJoined\": true\n        });\n      },\n      onGroupMemberLeft: (message, leavingUser, group) => {\n        callback(enums.GROUP_MEMBER_LEFT, group, message, {\n          \"user\": leavingUser\n        });\n      },\n      onGroupMemberJoined: (message, joinedUser, joinedGroup) => {\n        callback(enums.GROUP_MEMBER_JOINED, joinedGroup, message, {\n          \"user\": joinedUser\n        });\n      }\n    }));\n    CometChat.addMessageListener(this.conversationListenerId, new CometChat.MessageListener({\n      onTextMessageReceived: textMessage => {\n        callback(enums.TEXT_MESSAGE_RECEIVED, null, textMessage);\n      },\n      onMediaMessageReceived: mediaMessage => {\n        callback(enums.MEDIA_MESSAGE_RECEIVED, null, mediaMessage);\n      },\n      onCustomMessageReceived: customMessage => {\n        callback(enums.CUSTOM_MESSAGE_RECEIVED, null, customMessage);\n      },\n      onMessageDeleted: deletedMessage => {\n        callback(enums.MESSAGE_DELETED, null, deletedMessage);\n      },\n      onMessageEdited: editedMessage => {\n        callback(enums.MESSAGE_EDITED, null, editedMessage);\n      },\n      onMessagesRead: messageReceipt => {\n        callback(enums.MESSAGE_READ, null, messageReceipt);\n      }\n    }));\n    CometChat.addCallListener(this.callListenerId, new CometChat.CallListener({\n      onIncomingCallReceived: call => {\n        callback(enums.INCOMING_CALL_RECEIVED, null, call);\n      },\n      onIncomingCallCancelled: call => {\n        callback(enums.INCOMING_CALL_CANCELLED, null, call);\n      }\n    }));\n  }\n\n  removeListeners() {\n    CometChat.removeMessageListener(this.conversationListenerId);\n    CometChat.removeUserListener(this.userListenerId);\n    CometChat.removeGroupListener(this.groupListenerId);\n    CometChat.removeCallListener(this.callListenerId);\n  }\n\n}","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Chats/CometChatConversationList/controller.js"],"names":["CometChat","enums","UIKitSettings","ConversationListManager","constructor","context","conversationRequest","conversationListenerId","Date","getTime","userListenerId","groupListenerId","callListenerId","chatListMode","chatListFilterOptions","ConversationsRequestBuilder","setConversationType","ACTION_TYPE","TYPE_USER","setLimit","build","TYPE_GROUP","fetchNextConversation","fetchNext","attachListeners","callback","addUserListener","UserListener","onUserOnline","onlineUser","USER_ONLINE","onUserOffline","offlineUser","USER_OFFLINE","addGroupListener","GroupListener","onGroupMemberScopeChanged","message","changedUser","newScope","oldScope","changedGroup","GROUP_MEMBER_SCOPE_CHANGED","onGroupMemberKicked","kickedUser","kickedBy","kickedFrom","GROUP_MEMBER_KICKED","onGroupMemberBanned","bannedUser","bannedBy","bannedFrom","GROUP_MEMBER_BANNED","onGroupMemberUnbanned","unbannedUser","unbannedBy","unbannedFrom","GROUP_MEMBER_UNBANNED","onMemberAddedToGroup","userAdded","userAddedBy","userAddedIn","GROUP_MEMBER_ADDED","onGroupMemberLeft","leavingUser","group","GROUP_MEMBER_LEFT","onGroupMemberJoined","joinedUser","joinedGroup","GROUP_MEMBER_JOINED","addMessageListener","MessageListener","onTextMessageReceived","textMessage","TEXT_MESSAGE_RECEIVED","onMediaMessageReceived","mediaMessage","MEDIA_MESSAGE_RECEIVED","onCustomMessageReceived","customMessage","CUSTOM_MESSAGE_RECEIVED","onMessageDeleted","deletedMessage","MESSAGE_DELETED","onMessageEdited","editedMessage","MESSAGE_EDITED","onMessagesRead","messageReceipt","MESSAGE_READ","addCallListener","CallListener","onIncomingCallReceived","call","INCOMING_CALL_RECEIVED","onIncomingCallCancelled","INCOMING_CALL_CANCELLED","removeListeners","removeMessageListener","removeUserListener","removeGroupListener","removeCallListener"],"mappings":"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","sourcesContent":["import { CometChat } from \"@cometchat-pro/chat\";\n\nimport * as enums from \"../../../util/enums.js\";\nimport { UIKitSettings } from \"../../../util/UIKitSettings\";\n\nexport class ConversationListManager {\n\n    conversationRequest = null;\n\n    conversationListenerId = \"chatlist_\" + new Date().getTime();\n    userListenerId = \"chatlist_user_\" + new Date().getTime();\n    groupListenerId = \"chatlist_group_\" + new Date().getTime();\n    callListenerId = \"chatlist_call_\" + new Date().getTime();\n\n    constructor(context) {\n\n        const chatListMode = context.UIKitSettings.chatListMode;\n        const chatListFilterOptions = UIKitSettings.chatListFilterOptions;\n\n        switch (chatListMode) {\n            case chatListFilterOptions[\"USERS\"]:\n                this.conversationRequest = new CometChat.ConversationsRequestBuilder().setConversationType(CometChat.ACTION_TYPE.TYPE_USER).setLimit(30).build();\n            break;\n            case chatListFilterOptions[\"GROUPS\"]:\n                this.conversationRequest = new CometChat.ConversationsRequestBuilder().setConversationType(CometChat.ACTION_TYPE.TYPE_GROUP).setLimit(30).build();\n                break;\n            default:\n                this.conversationRequest = new CometChat.ConversationsRequestBuilder().setLimit(30).build();\n            break;\n        }\n    }\n\n    fetchNextConversation() {\n        return this.conversationRequest.fetchNext();\n    }\n\n    attachListeners(callback) {\n\n        CometChat.addUserListener(\n            this.userListenerId,\n            new CometChat.UserListener({\n                onUserOnline: onlineUser => {\n                    /* when someuser/friend comes online, user will be received here */\n                    callback(enums.USER_ONLINE, onlineUser);\n                },\n                onUserOffline: offlineUser => {\n                    /* when someuser/friend went offline, user will be received here */\n                    callback(enums.USER_OFFLINE, offlineUser);\n                }\n            })\n        );\n\n        CometChat.addGroupListener(\n            this.groupListenerId,\n            new CometChat.GroupListener({\n                onGroupMemberScopeChanged: (message, changedUser, newScope, oldScope, changedGroup) => {\n                    callback(enums.GROUP_MEMBER_SCOPE_CHANGED, changedGroup, message, {\"user\": changedUser, \"scope\": newScope});\n                }, \n                onGroupMemberKicked: (message, kickedUser, kickedBy, kickedFrom) => {\n                    callback(enums.GROUP_MEMBER_KICKED, kickedFrom, message, {\"user\": kickedUser, \"hasJoined\": false});\n                }, \n                onGroupMemberBanned: (message, bannedUser, bannedBy, bannedFrom) => {\n                    callback(enums.GROUP_MEMBER_BANNED, bannedFrom, message, {\"user\": bannedUser});\n                }, \n                onGroupMemberUnbanned: (message, unbannedUser, unbannedBy, unbannedFrom) => {\n                    callback(enums.GROUP_MEMBER_UNBANNED, unbannedFrom, message, {\"user\": unbannedUser});\n                }, \n                onMemberAddedToGroup: (message, userAdded, userAddedBy, userAddedIn) => {\n                    callback(enums.GROUP_MEMBER_ADDED, userAddedIn, message, {\"user\": userAdded, \"hasJoined\": true});\n                }, \n                onGroupMemberLeft: (message, leavingUser, group) => {\n                    callback(enums.GROUP_MEMBER_LEFT, group, message, {\"user\": leavingUser});\n                }, \n                onGroupMemberJoined: (message, joinedUser, joinedGroup) => {\n                    callback(enums.GROUP_MEMBER_JOINED, joinedGroup, message, {\"user\": joinedUser});\n                }\n            })\n        );\n\n        CometChat.addMessageListener(\n            this.conversationListenerId,\n            new CometChat.MessageListener({\n                onTextMessageReceived: textMessage => {\n                    callback(enums.TEXT_MESSAGE_RECEIVED, null, textMessage);\n                },\n                onMediaMessageReceived: mediaMessage => {\n                    callback(enums.MEDIA_MESSAGE_RECEIVED, null, mediaMessage);\n                },\n                onCustomMessageReceived: customMessage => {\n                    callback(enums.CUSTOM_MESSAGE_RECEIVED, null, customMessage);\n                },\n                onMessageDeleted: deletedMessage => {\n                    callback(enums.MESSAGE_DELETED, null, deletedMessage);\n                },\n                onMessageEdited: editedMessage => {\n                    callback(enums.MESSAGE_EDITED, null, editedMessage);\n                },\n                onMessagesRead: messageReceipt => {\n                    callback(enums.MESSAGE_READ, null, messageReceipt);\n                }\n            })\n        );\n\n        CometChat.addCallListener(\n            this.callListenerId,\n            new CometChat.CallListener({\n                onIncomingCallReceived: call => {\n                  callback(enums.INCOMING_CALL_RECEIVED, null, call);\n                },\n                onIncomingCallCancelled: call => {\n                    callback(enums.INCOMING_CALL_CANCELLED, null, call);\n                }\n            })\n        );\n    }\n\n    removeListeners() {\n        CometChat.removeMessageListener(this.conversationListenerId);\n        CometChat.removeUserListener(this.userListenerId);\n        CometChat.removeGroupListener(this.groupListenerId);\n        CometChat.removeCallListener(this.callListenerId);\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}