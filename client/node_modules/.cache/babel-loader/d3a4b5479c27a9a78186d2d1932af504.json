{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Calls/CometChatOutgoingCall/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx, keyframes } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CallScreenManager } from \"./controller\";\nimport { CometChatCallScreen } from \"../CometChatCallScreen\";\nimport { CometChatAvatar } from \"../../Shared\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { SoundManager } from \"../../../util/SoundManager\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\nimport { callScreenWrapperStyle, callScreenContainerStyle, headerStyle, headerDurationStyle, headerNameStyle, thumbnailWrapperStyle, thumbnailStyle, headerIconStyle, iconWrapperStyle, iconStyle, errorContainerStyle } from \"./style\";\nimport callIcon from \"./resources/end-call.svg\";\n\nclass CometChatOutgoingCall extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.callScreenUpdated = (key, call) => {\n      switch (key) {\n        case enums.OUTGOING_CALL_ACCEPTED:\n          //occurs at the caller end\n          this.outgoingCallAccepted(call);\n          break;\n\n        case enums.OUTGOING_CALL_REJECTED:\n          //occurs at the caller end, callee rejects the call\n          this.outgoingCallRejected(call);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.outgoingCallAccepted = call => {\n      if (this.state.outgoingCallScreen === true) {\n        this.props.actionGenerated(enums.ACTIONS[\"OUTGOING_CALL_ACCEPTED\"], call);\n        SoundManager.pause(enums.CONSTANTS.AUDIO[\"OUTGOING_CALL\"], this.context);\n        this.setState({\n          outgoingCallScreen: false,\n          callInProgress: call,\n          errorScreen: false,\n          errorMessage: null\n        });\n\n        if (this.context) {\n          this.context.setCallInProgress(call, enums.CONSTANTS[\"OUTGOING_DEFAULT_CALLING\"]);\n        }\n      }\n    };\n\n    this.outgoingCallRejected = call => {\n      SoundManager.pause(enums.CONSTANTS.AUDIO[\"OUTGOING_CALL\"], this.context);\n\n      if (call.hasOwnProperty(\"status\") && call.status === CometChat.CALL_STATUS.BUSY) {\n        //show busy message.\n        const errorMessage = `${call.sender.name} ${Translator.translate(\"ON_ANOTHER_CALL\", this.props.lang)}`;\n        this.setState({\n          errorScreen: true,\n          errorMessage: errorMessage\n        });\n        this.clearCallInProgress();\n      } else {\n        this.props.actionGenerated(enums.ACTIONS[\"OUTGOING_CALL_REJECTED\"], call);\n        this.setState({\n          outgoingCallScreen: false,\n          callInProgress: null,\n          errorScreen: false,\n          errorMessage: null\n        });\n        this.clearCallInProgress();\n      }\n    };\n\n    this.startCall = call => {\n      SoundManager.play(enums.CONSTANTS.AUDIO[\"OUTGOING_CALL\"], this.context);\n      this.setState({\n        outgoingCallScreen: true,\n        callInProgress: call,\n        errorScreen: false,\n        errorMessage: null\n      });\n    };\n\n    this.actionHandler = (action, call) => {\n      switch (action) {\n        case enums.ACTIONS[\"OUTGOING_CALL_ENDED\"]:\n          this.setState({\n            callInProgress: null\n          });\n          break;\n\n        case enums.ACTIONS[\"USER_JOINED_CALL\"]:\n        case enums.ACTIONS[\"USER_LEFT_CALL\"]:\n          this.props.actionGenerated(action, call);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.cancelCall = () => {\n      SoundManager.pause(enums.CONSTANTS.AUDIO[\"OUTGOING_CALL\"], this.context); //if user busy error, just close the callscreen, no need to reject the call\n\n      if (this.state.errorScreen) {\n        this.setState({\n          errorScreen: false,\n          errorMessage: null,\n          outgoingCallScreen: false,\n          callInProgress: null\n        });\n        this.clearCallInProgress();\n        this.props.actionGenerated(enums.ACTIONS[\"OUTGOING_CALL_CANCELLED\"]);\n      } else {\n        CometChat.rejectCall(this.state.callInProgress.sessionId, CometChat.CALL_STATUS.CANCELLED).then(call => {\n          this.setState({\n            outgoingCallScreen: false,\n            callInProgress: null\n          });\n          this.clearCallInProgress();\n          this.props.actionGenerated(enums.ACTIONS[\"OUTGOING_CALL_CANCELLED\"]);\n        }).catch(error => {\n          this.setState({\n            outgoingCallScreen: false,\n            callInProgress: null\n          });\n          this.clearCallInProgress();\n        });\n      }\n    };\n\n    this.clearCallInProgress = () => {\n      if (this.context) {\n        this.context.setCallInProgress(null, \"\");\n      }\n    };\n\n    this.callScreenFrame = /*#__PURE__*/React.createRef();\n    this.state = {\n      errorScreen: false,\n      errorMessage: null,\n      outgoingCallScreen: false,\n      callInProgress: null\n    };\n    CometChat.getLoggedinUser().then(user => this.loggedInUser = user).catch(error => {\n      console.error(error);\n    });\n  }\n\n  componentDidMount() {\n    this.CallScreenManager = new CallScreenManager();\n    this.CallScreenManager.attachListeners(this.callScreenUpdated);\n  }\n\n  componentWillUnmount() {\n    this.CallScreenManager.removeListeners();\n    this.CallScreenManager = null;\n  }\n\n  render() {\n    let callScreen = null,\n        errorScreen = null;\n\n    if (this.state.callInProgress) {\n      let avatar = jsx(CometChatAvatar, {\n        user: this.state.callInProgress.receiver,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }\n      });\n\n      if (this.state.errorScreen) {\n        errorScreen = jsx(\"div\", {\n          css: errorContainerStyle(),\n          className: \"callscreen__error__wrapper\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 11\n          }\n        }, jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }\n        }, this.state.errorMessage));\n      }\n\n      if (this.state.outgoingCallScreen) {\n        callScreen = jsx(\"div\", {\n          css: callScreenWrapperStyle(this.props, keyframes),\n          className: \"callscreen__wrapper\",\n          ref: el => {\n            this.callScreenFrame = el;\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 11\n          }\n        }, jsx(\"div\", {\n          css: callScreenContainerStyle(),\n          className: \"callscreen__container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }\n        }, jsx(\"div\", {\n          css: headerStyle(),\n          className: \"callscreen__header\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }\n        }, jsx(\"span\", {\n          css: headerDurationStyle(),\n          className: \"header__calling\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 17\n          }\n        }, Translator.translate(\"CALLING\", this.props.lang)), jsx(\"h6\", {\n          css: headerNameStyle(),\n          className: \"header__name\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 17\n          }\n        }, this.state.callInProgress.receiver.name)), jsx(\"div\", {\n          css: thumbnailWrapperStyle(),\n          className: \"callscreen__thumbnail__wrapper\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }\n        }, jsx(\"div\", {\n          css: thumbnailStyle(),\n          className: \"callscreen__thumbnail\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }\n        }, avatar)), errorScreen, jsx(\"div\", {\n          css: headerIconStyle(),\n          className: \"callscreen__icons\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }\n        }, jsx(\"div\", {\n          css: iconWrapperStyle(),\n          className: \"icon__block\",\n          onClick: this.cancelCall,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 17\n          }\n        }, jsx(\"div\", {\n          css: iconStyle(callIcon),\n          className: \"icon icon__end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 19\n          }\n        }, jsx(\"i\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 21\n          }\n        }))))));\n      } else {\n        callScreen = jsx(CometChatCallScreen, {\n          loggedInUser: this.loggedInUser,\n          call: this.state.callInProgress,\n          actionGenerated: this.actionHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 11\n          }\n        });\n      }\n    }\n\n    return callScreen;\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatOutgoingCall.contextType = CometChatContext;\nCometChatOutgoingCall.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatOutgoingCall.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatOutgoingCall };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Calls/CometChatOutgoingCall/index.js"],"names":["React","jsx","keyframes","PropTypes","CometChat","CallScreenManager","CometChatCallScreen","CometChatAvatar","CometChatContext","enums","SoundManager","Translator","theme","callScreenWrapperStyle","callScreenContainerStyle","headerStyle","headerDurationStyle","headerNameStyle","thumbnailWrapperStyle","thumbnailStyle","headerIconStyle","iconWrapperStyle","iconStyle","errorContainerStyle","CometChatOutgoingCall","PureComponent","constructor","props","callScreenUpdated","key","call","OUTGOING_CALL_ACCEPTED","outgoingCallAccepted","OUTGOING_CALL_REJECTED","outgoingCallRejected","state","outgoingCallScreen","actionGenerated","ACTIONS","pause","CONSTANTS","AUDIO","context","setState","callInProgress","errorScreen","errorMessage","setCallInProgress","hasOwnProperty","status","CALL_STATUS","BUSY","sender","name","translate","lang","clearCallInProgress","startCall","play","actionHandler","action","cancelCall","rejectCall","sessionId","CANCELLED","then","catch","error","callScreenFrame","createRef","getLoggedinUser","user","loggedInUser","console","componentDidMount","attachListeners","componentWillUnmount","removeListeners","render","callScreen","avatar","receiver","el","callIcon","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, keyframes } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CallScreenManager } from \"./controller\";\n\nimport { CometChatCallScreen } from \"../CometChatCallScreen\";\nimport { CometChatAvatar } from \"../../Shared\";\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { SoundManager } from \"../../../util/SoundManager\";\n\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\n\nimport {\n  callScreenWrapperStyle,\n  callScreenContainerStyle,\n  headerStyle,\n  headerDurationStyle,\n  headerNameStyle,\n  thumbnailWrapperStyle,\n  thumbnailStyle,\n  headerIconStyle,\n  iconWrapperStyle,\n  iconStyle,\n  errorContainerStyle,\n} from \"./style\";\n\nimport callIcon from \"./resources/end-call.svg\";\n\nclass CometChatOutgoingCall extends React.PureComponent {\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n\n    this.callScreenFrame = React.createRef();\n\n    this.state = {\n      errorScreen: false,\n      errorMessage: null,\n      outgoingCallScreen: false,\n      callInProgress: null,\n    };\n\n    CometChat.getLoggedinUser()\n      .then((user) => (this.loggedInUser = user))\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  componentDidMount() {\n    this.CallScreenManager = new CallScreenManager();\n    this.CallScreenManager.attachListeners(this.callScreenUpdated);\n  }\n\n  componentWillUnmount() {\n    this.CallScreenManager.removeListeners();\n    this.CallScreenManager = null;\n  }\n\n  callScreenUpdated = (key, call) => {\n    switch (key) {\n      case enums.OUTGOING_CALL_ACCEPTED: //occurs at the caller end\n        this.outgoingCallAccepted(call);\n        break;\n      case enums.OUTGOING_CALL_REJECTED: //occurs at the caller end, callee rejects the call\n        this.outgoingCallRejected(call);\n        break;\n      default:\n        break;\n    }\n  };\n\n  outgoingCallAccepted = (call) => {\n    if (this.state.outgoingCallScreen === true) {\n      this.props.actionGenerated(enums.ACTIONS[\"OUTGOING_CALL_ACCEPTED\"], call);\n\n      SoundManager.pause(enums.CONSTANTS.AUDIO[\"OUTGOING_CALL\"], this.context);\n      this.setState({\n        outgoingCallScreen: false,\n        callInProgress: call,\n        errorScreen: false,\n        errorMessage: null,\n      });\n\n      if (this.context) {\n        this.context.setCallInProgress(\n          call,\n          enums.CONSTANTS[\"OUTGOING_DEFAULT_CALLING\"]\n        );\n      }\n    }\n  };\n\n  outgoingCallRejected = (call) => {\n    SoundManager.pause(enums.CONSTANTS.AUDIO[\"OUTGOING_CALL\"], this.context);\n    if (\n      call.hasOwnProperty(\"status\") &&\n      call.status === CometChat.CALL_STATUS.BUSY\n    ) {\n      //show busy message.\n      const errorMessage = `${call.sender.name} ${Translator.translate(\n        \"ON_ANOTHER_CALL\",\n        this.props.lang\n      )}`;\n      this.setState({ errorScreen: true, errorMessage: errorMessage });\n      this.clearCallInProgress();\n    } else {\n      this.props.actionGenerated(enums.ACTIONS[\"OUTGOING_CALL_REJECTED\"], call);\n      this.setState({\n        outgoingCallScreen: false,\n        callInProgress: null,\n        errorScreen: false,\n        errorMessage: null,\n      });\n      this.clearCallInProgress();\n    }\n  };\n\n  startCall = (call) => {\n    SoundManager.play(enums.CONSTANTS.AUDIO[\"OUTGOING_CALL\"], this.context);\n    this.setState({\n      outgoingCallScreen: true,\n      callInProgress: call,\n      errorScreen: false,\n      errorMessage: null,\n    });\n  };\n\n  actionHandler = (action, call) => {\n    switch (action) {\n      case enums.ACTIONS[\"OUTGOING_CALL_ENDED\"]:\n        this.setState({ callInProgress: null });\n        break;\n      case enums.ACTIONS[\"USER_JOINED_CALL\"]:\n      case enums.ACTIONS[\"USER_LEFT_CALL\"]:\n        this.props.actionGenerated(action, call);\n        break;\n      default:\n        break;\n    }\n  };\n\n  //cancelling an outgoing call\n  cancelCall = () => {\n    SoundManager.pause(enums.CONSTANTS.AUDIO[\"OUTGOING_CALL\"], this.context);\n    //if user busy error, just close the callscreen, no need to reject the call\n    if (this.state.errorScreen) {\n      this.setState({\n        errorScreen: false,\n        errorMessage: null,\n        outgoingCallScreen: false,\n        callInProgress: null,\n      });\n      this.clearCallInProgress();\n      this.props.actionGenerated(enums.ACTIONS[\"OUTGOING_CALL_CANCELLED\"]);\n    } else {\n      CometChat.rejectCall(\n        this.state.callInProgress.sessionId,\n        CometChat.CALL_STATUS.CANCELLED\n      )\n        .then((call) => {\n          this.setState({ outgoingCallScreen: false, callInProgress: null });\n          this.clearCallInProgress();\n          this.props.actionGenerated(enums.ACTIONS[\"OUTGOING_CALL_CANCELLED\"]);\n        })\n        .catch((error) => {\n          this.setState({ outgoingCallScreen: false, callInProgress: null });\n          this.clearCallInProgress();\n        });\n    }\n  };\n\n  clearCallInProgress = () => {\n    if (this.context) {\n      this.context.setCallInProgress(null, \"\");\n    }\n  };\n\n  render() {\n    let callScreen = null,\n      errorScreen = null;\n    if (this.state.callInProgress) {\n      let avatar = (\n        <CometChatAvatar user={this.state.callInProgress.receiver} />\n      );\n      if (this.state.errorScreen) {\n        errorScreen = (\n          <div\n            css={errorContainerStyle()}\n            className=\"callscreen__error__wrapper\"\n          >\n            <div>{this.state.errorMessage}</div>\n          </div>\n        );\n      }\n\n      if (this.state.outgoingCallScreen) {\n        callScreen = (\n          <div\n            css={callScreenWrapperStyle(this.props, keyframes)}\n            className=\"callscreen__wrapper\"\n            ref={(el) => {\n              this.callScreenFrame = el;\n            }}\n          >\n            <div\n              css={callScreenContainerStyle()}\n              className=\"callscreen__container\"\n            >\n              <div css={headerStyle()} className=\"callscreen__header\">\n                <span css={headerDurationStyle()} className=\"header__calling\">\n                  {Translator.translate(\"CALLING\", this.props.lang)}\n                </span>\n                <h6 css={headerNameStyle()} className=\"header__name\">\n                  {this.state.callInProgress.receiver.name}\n                </h6>\n              </div>\n              <div\n                css={thumbnailWrapperStyle()}\n                className=\"callscreen__thumbnail__wrapper\"\n              >\n                <div css={thumbnailStyle()} className=\"callscreen__thumbnail\">\n                  {avatar}\n                </div>\n              </div>\n              {errorScreen}\n              <div css={headerIconStyle()} className=\"callscreen__icons\">\n                <div\n                  css={iconWrapperStyle()}\n                  className=\"icon__block\"\n                  onClick={this.cancelCall}\n                >\n                  <div css={iconStyle(callIcon)} className=\"icon icon__end\">\n                    <i></i>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      } else {\n        callScreen = (\n          <CometChatCallScreen\n            loggedInUser={this.loggedInUser}\n            call={this.state.callInProgress}\n            actionGenerated={this.actionHandler}\n          />\n        );\n      }\n    }\n    return callScreen;\n  }\n}\n\n// Specifies the default values for props:\nCometChatOutgoingCall.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n};\n\nCometChatOutgoingCall.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport { CometChatOutgoingCall };\n"]},"metadata":{},"sourceType":"module"}