{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Groups/CometChatViewGroupMemberList/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatViewGroupMemberListItem } from \"../../Groups\";\nimport { CometChatBackdrop } from \"../../Shared\";\nimport * as enums from \"../../../util/enums.js\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { modalWrapperStyle, modalCloseStyle, modalBodyStyle, modalCaptionStyle, modalListStyle, listHeaderStyle, listStyle, nameColumnStyle, scopeColumnStyle, actionColumnStyle, modalErrorStyle } from \"./style\";\nimport clearIcon from \"./resources/close.svg\";\n\nclass CometChatViewGroupMemberList extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleScroll = e => {\n      const bottom = Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) === Math.round(e.currentTarget.clientHeight);\n\n      if (bottom) {\n        this.props.actionGenerated(enums.ACTIONS[\"FETCH_GROUP_MEMBERS\"]);\n      }\n    };\n\n    this.updateMembers = (action, member, scope) => {\n      switch (action) {\n        case enums.ACTIONS[\"BAN_GROUP_MEMBER\"]:\n          this.banMember(member);\n          break;\n\n        case enums.ACTIONS[\"KICK_GROUP_MEMBER\"]:\n          this.kickMember(member);\n          break;\n\n        case enums.ACTIONS[\"CHANGE_SCOPE_GROUP_MEMBER\"]:\n          this.changeScope(member, scope);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.banMember = memberToBan => {\n      const guid = this.context.item.guid;\n      CometChat.banGroupMember(guid, memberToBan.uid).then(response => {\n        if (response) {\n          this.context.setToastMessage(\"success\", \"BAN_GROUPMEMBER_SUCCESS\");\n          this.props.actionGenerated(enums.ACTIONS[\"BAN_GROUPMEMBER_SUCCESS\"], memberToBan);\n        } else {\n          this.setState({\n            errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n          });\n        }\n      }).catch(error => this.setState({\n        errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n      }));\n    };\n\n    this.kickMember = memberToKick => {\n      const guid = this.context.item.guid;\n      CometChat.kickGroupMember(guid, memberToKick.uid).then(response => {\n        if (response) {\n          this.context.setToastMessage(\"success\", \"KICK_GROUPMEMBER_SUCCESS\");\n          this.props.actionGenerated(enums.ACTIONS[\"KICK_GROUPMEMBER_SUCCESS\"], memberToKick);\n        } else {\n          this.setState({\n            errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n          });\n        }\n      }).catch(error => this.setState({\n        errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n      }));\n    };\n\n    this.changeScope = (member, scope) => {\n      const guid = this.context.item.guid;\n      CometChat.updateGroupMemberScope(guid, member.uid, scope).then(response => {\n        if (response) {\n          this.context.setToastMessage(\"success\", \"SCOPECHANGE_GROUPMEMBER_SUCCESS\");\n          const updatedMember = Object.assign({}, member, {\n            scope: scope\n          });\n          this.props.actionGenerated(enums.ACTIONS[\"SCOPECHANGE_GROUPMEMBER_SUCCESS\"], updatedMember);\n        } else {\n          this.setState({\n            errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n          });\n        }\n      }).catch(error => this.setState({\n        errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n      }));\n    };\n\n    this.setUserColumnTitle = editAccess => {\n      if (this._isMounted) {\n        if (editAccess !== null && this.mq.matches) {\n          this.setState({\n            userColumnTitle: Translator.translate(\"AVATAR\", this.props.lang)\n          });\n        } else {\n          this.setState({\n            userColumnTitle: Translator.translate(\"NAME\", this.props.lang)\n          });\n        }\n      }\n    };\n\n    this._isMounted = false;\n    const chatWindow = context.UIKitSettings.chatWindow;\n    this.mq = chatWindow.matchMedia(this.context.theme.breakPoints[1]);\n    let userColumnTitle = Translator.translate(\"NAME\", props.lang);\n\n    if (this.mq.matches) {\n      userColumnTitle = Translator.translate(\"AVATAR\", props.lang);\n    }\n\n    this.state = {\n      userColumnTitle: userColumnTitle,\n      errorMessage: \"\"\n    };\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const membersList = [...this.context.groupMembers];\n    const groupMembers = membersList.map((member, key) => {\n      return jsx(CometChatViewGroupMemberListItem, {\n        loggedinuser: this.props.loggedinuser,\n        theme: this.props.theme,\n        key: key,\n        member: member,\n        lang: this.props.lang,\n        enableChangeScope: this.props.enableChangeScope,\n        enableBanGroupMembers: this.props.enableBanGroupMembers,\n        enableKickGroupMembers: this.props.enableKickGroupMembers,\n        actionGenerated: this.updateMembers,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 17\n        }\n      });\n    });\n    let editAccess = null;\n\n    if (this.context.item.scope !== CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT) {\n      editAccess = jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }\n      }, jsx(\"div\", {\n        css: actionColumnStyle(this.context),\n        className: \"ban\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }\n      }, Translator.translate(\"BAN\", this.props.lang)), jsx(\"div\", {\n        css: actionColumnStyle(this.context),\n        className: \"kick\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }\n      }, Translator.translate(\"KICK\", this.props.lang)));\n\n      if (this.props.enableKickGroupMembers === false && this.props.enableBanGroupMembers === false) {\n        editAccess = null;\n      }\n    }\n\n    this.mq.addListener(editAccess => this.setUserColumnTitle(editAccess));\n    return jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }, jsx(CometChatBackdrop, {\n      show: true,\n      clicked: this.props.close,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }\n    }), jsx(\"div\", {\n      css: modalWrapperStyle(this.context),\n      className: \"modal__viewmembers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }\n    }, jsx(\"span\", {\n      css: modalCloseStyle(clearIcon, this.context),\n      className: \"modal__close\",\n      onClick: this.props.close,\n      title: Translator.translate(\"CLOSE\", this.props.lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }\n    }), jsx(\"div\", {\n      css: modalBodyStyle(),\n      className: \"modal__body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }\n    }, jsx(\"div\", {\n      css: modalCaptionStyle(Translator.getDirection(this.props.lang)),\n      className: \"modal__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 25\n      }\n    }, Translator.translate(\"GROUP_MEMBERS\", this.props.lang)), jsx(\"div\", {\n      css: modalErrorStyle(this.context),\n      className: \"modal__error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 25\n      }\n    }, this.state.errorMessage), jsx(\"div\", {\n      css: modalListStyle(),\n      className: \"modal__content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 25\n      }\n    }, jsx(\"div\", {\n      css: listHeaderStyle(this.context),\n      className: \"content__header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 29\n      }\n    }, jsx(\"div\", {\n      css: nameColumnStyle(this.context, editAccess),\n      className: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 33\n      }\n    }, this.state.userColumnTitle), jsx(\"div\", {\n      css: scopeColumnStyle(this.context),\n      className: \"scope\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 33\n      }\n    }, Translator.translate(\"SCOPE\", this.props.lang)), editAccess), jsx(\"div\", {\n      css: listStyle(),\n      className: \"content__list\",\n      onScroll: this.handleScroll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 29\n      }\n    }, groupMembers)))));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatViewGroupMemberList.contextType = CometChatContext;\nCometChatViewGroupMemberList.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n  userColumnTitle: \"\",\n  enableChangeScope: false,\n  enableKickGroupMembers: false,\n  enableBanGroupMembers: false\n};\nCometChatViewGroupMemberList.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n  userColumnTitle: PropTypes.string,\n  enableChangeScope: PropTypes.bool,\n  enableKickGroupMembers: PropTypes.bool,\n  enableBanGroupMembers: PropTypes.bool\n};\nexport { CometChatViewGroupMemberList };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Groups/CometChatViewGroupMemberList/index.js"],"names":["React","jsx","PropTypes","CometChat","CometChatViewGroupMemberListItem","CometChatBackdrop","enums","CometChatContext","theme","Translator","modalWrapperStyle","modalCloseStyle","modalBodyStyle","modalCaptionStyle","modalListStyle","listHeaderStyle","listStyle","nameColumnStyle","scopeColumnStyle","actionColumnStyle","modalErrorStyle","CometChatViewGroupMemberList","Component","constructor","props","context","handleScroll","e","bottom","Math","round","currentTarget","scrollHeight","scrollTop","clientHeight","actionGenerated","ACTIONS","updateMembers","action","member","scope","banMember","kickMember","changeScope","memberToBan","guid","item","banGroupMember","uid","then","response","setToastMessage","setState","errorMessage","translate","lang","catch","error","memberToKick","kickGroupMember","updateGroupMemberScope","updatedMember","Object","assign","setUserColumnTitle","editAccess","_isMounted","mq","matches","userColumnTitle","chatWindow","UIKitSettings","matchMedia","breakPoints","state","componentWillUnmount","render","membersList","groupMembers","map","key","loggedinuser","enableChangeScope","enableBanGroupMembers","enableKickGroupMembers","GROUP_MEMBER_SCOPE","PARTICIPANT","addListener","close","clearIcon","getDirection","contextType","defaultProps","getDefaultLanguage","propTypes","string","object","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CometChatViewGroupMemberListItem } from \"../../Groups\";\nimport { CometChatBackdrop } from \"../../Shared\";\n\nimport * as enums from \"../../../util/enums.js\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\n\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\n\nimport {\n    modalWrapperStyle,\n    modalCloseStyle,\n    modalBodyStyle,\n    modalCaptionStyle,\n    modalListStyle,\n    listHeaderStyle,\n    listStyle,\n    nameColumnStyle,\n    scopeColumnStyle,\n    actionColumnStyle,\n    modalErrorStyle\n} from \"./style\";\n\nimport clearIcon from \"./resources/close.svg\";\n\nclass CometChatViewGroupMemberList extends React.Component {\n\n    static contextType = CometChatContext;\n\n    constructor(props, context) {\n\n        super(props, context);\n        this._isMounted = false;\n        const chatWindow = context.UIKitSettings.chatWindow;\n        this.mq = chatWindow.matchMedia(this.context.theme.breakPoints[1]);\n        \n        let userColumnTitle = Translator.translate(\"NAME\", props.lang);\n        if (this.mq.matches) {\n            userColumnTitle = Translator.translate(\"AVATAR\", props.lang)\n        }\n\n        this.state = {\n            userColumnTitle: userColumnTitle,\n            errorMessage: \"\"\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    handleScroll = (e) => {\n\n        const bottom = Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) === Math.round(e.currentTarget.clientHeight);\n        if (bottom) {\n            this.props.actionGenerated(enums.ACTIONS[\"FETCH_GROUP_MEMBERS\"]);\n        }\n    }\n\n    updateMembers = (action, member, scope) => {\n\n        switch(action) {\n            case enums.ACTIONS[\"BAN_GROUP_MEMBER\"]:\n                this.banMember(member);\n                break;\n            case enums.ACTIONS[\"KICK_GROUP_MEMBER\"]:\n                this.kickMember(member);\n                break;\n            case enums.ACTIONS[\"CHANGE_SCOPE_GROUP_MEMBER\"]:\n                this.changeScope(member, scope);\n                break;\n            default:\n                break;\n        }\n    }\n\n    banMember = (memberToBan) => {\n\n        const guid = this.context.item.guid;\n        CometChat.banGroupMember(guid, memberToBan.uid).then(response => {\n            \n            if(response) {\n\n                this.context.setToastMessage(\"success\", \"BAN_GROUPMEMBER_SUCCESS\");\n                this.props.actionGenerated(enums.ACTIONS[\"BAN_GROUPMEMBER_SUCCESS\"], memberToBan);\n\n            } else {\n                this.setState({ errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang) });\n            }\n\n        }).catch(error => this.setState({ errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang) }));\n    }\n\n    kickMember = (memberToKick) => {\n\n        const guid = this.context.item.guid;\n        CometChat.kickGroupMember(guid, memberToKick.uid).then(response => {\n            \n            if(response) {\n\n                this.context.setToastMessage(\"success\", \"KICK_GROUPMEMBER_SUCCESS\");\n                this.props.actionGenerated(enums.ACTIONS[\"KICK_GROUPMEMBER_SUCCESS\"], memberToKick);\n\n            } else {\n                this.setState({ errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang) });\n            }\n            \n        }).catch(error => this.setState({ errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang) }));\n    }\n\n    changeScope = (member, scope) => {\n\n        const guid = this.context.item.guid;\n        CometChat.updateGroupMemberScope(guid, member.uid, scope).then(response => {\n            \n            if(response) {\n\n                this.context.setToastMessage(\"success\", \"SCOPECHANGE_GROUPMEMBER_SUCCESS\");\n                const updatedMember = Object.assign({}, member, {scope: scope});\n                this.props.actionGenerated(enums.ACTIONS[\"SCOPECHANGE_GROUPMEMBER_SUCCESS\"], updatedMember);\n            } else {\n                this.setState({ errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang) });\n            }\n            \n        }).catch(error => this.setState({ errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang) }));\n    }\n\n    setUserColumnTitle = (editAccess) => {\n\n        if (this._isMounted) {\n            \n            if (editAccess !== null && this.mq.matches) {\n                this.setState({ userColumnTitle: Translator.translate(\"AVATAR\", this.props.lang) });\n            } else {\n                this.setState({ userColumnTitle: Translator.translate(\"NAME\", this.props.lang) });\n            }\n        }\n    }\n\n    render() {\n\n        const membersList = [...this.context.groupMembers];\n        \n        const groupMembers = membersList.map((member, key) => {\n        \n            return (\n                <CometChatViewGroupMemberListItem\n                    loggedinuser={this.props.loggedinuser}\n                    theme={this.props.theme}\n                    key={key}\n                    member={member}\n                    lang={this.props.lang}\n                    enableChangeScope={this.props.enableChangeScope}\n                    enableBanGroupMembers={this.props.enableBanGroupMembers}\n                    enableKickGroupMembers={this.props.enableKickGroupMembers}\n                    actionGenerated={this.updateMembers} />\n            );\n        });\n\n        let editAccess = null;\n        if(this.context.item.scope !== CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT) {\n\n            editAccess = (\n                <React.Fragment>\n                    <div css={actionColumnStyle(this.context)} className=\"ban\">{Translator.translate(\"BAN\", this.props.lang)}</div>\n                    <div css={actionColumnStyle(this.context)} className=\"kick\">{Translator.translate(\"KICK\", this.props.lang)}</div>\n                </React.Fragment>\n            );\n\n            if (this.props.enableKickGroupMembers === false && this.props.enableBanGroupMembers === false) {\n                editAccess = null;\n            }\n        }\n\n        this.mq.addListener(editAccess => this.setUserColumnTitle(editAccess));\n\n        return (\n            <React.Fragment>\n                <CometChatBackdrop show={true} clicked={this.props.close} />\n                <div css={modalWrapperStyle(this.context)} className=\"modal__viewmembers\">\n                    <span css={modalCloseStyle(clearIcon, this.context)} className=\"modal__close\" onClick={this.props.close} title={Translator.translate(\"CLOSE\", this.props.lang)}></span>\n                    <div css={modalBodyStyle()} className=\"modal__body\">\n                        <div css={modalCaptionStyle(Translator.getDirection(this.props.lang))} className=\"modal__title\">{Translator.translate(\"GROUP_MEMBERS\", this.props.lang)}</div>\n                        <div css={modalErrorStyle(this.context)} className=\"modal__error\">{this.state.errorMessage}</div>\n                        <div css={modalListStyle()} className=\"modal__content\">\n                            <div css={listHeaderStyle(this.context)} className=\"content__header\">\n                                <div css={nameColumnStyle(this.context, editAccess)} className=\"name\">{this.state.userColumnTitle}</div>\n                                <div css={scopeColumnStyle(this.context)} className=\"scope\">{Translator.translate(\"SCOPE\", this.props.lang)}</div>\n                                {editAccess}\n                            </div>\n                            <div css={listStyle()} className=\"content__list\" onScroll={this.handleScroll}>\n                                {groupMembers}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\n// Specifies the default values for props:\nCometChatViewGroupMemberList.defaultProps = {\n\tlang: Translator.getDefaultLanguage(),\n\ttheme: theme,\n\tuserColumnTitle: \"\",\n\tenableChangeScope: false,\n\tenableKickGroupMembers: false,\n\tenableBanGroupMembers: false\n};\n\nCometChatViewGroupMemberList.propTypes = {\n\tlang: PropTypes.string,\n\ttheme: PropTypes.object,\n\tuserColumnTitle: PropTypes.string,\n\tenableChangeScope: PropTypes.bool,\n\tenableKickGroupMembers: PropTypes.bool,\n\tenableBanGroupMembers: PropTypes.bool\n};\n\nexport { CometChatViewGroupMemberList };\n"]},"metadata":{},"sourceType":"module"}