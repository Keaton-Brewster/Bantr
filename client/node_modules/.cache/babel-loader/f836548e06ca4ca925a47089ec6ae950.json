{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Calls/CometChatCallScreen/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx, keyframes } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport { Storage } from \"../../../util/Storage\";\nimport * as enums from \"../../../util/enums.js\";\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { callScreenBackgroundStyle, callScreenContainerStyle, callScreenInnerBackgroundStyle, callScreenHeaderStyle, callScreenWrapperStyle, headerTitleStyle, headerButtonStyle, callScreenResizerStyle, iconStyle } from \"./style\";\nimport minimizeIcon from \"./resources/reduce-size.svg\";\nimport maximizeIcon from \"./resources/increase-size.svg\";\n\nclass CometChatCallScreen extends React.PureComponent {\n  constructor(_props) {\n    super(_props);\n\n    this.enableDragging = e => {\n      e.preventDefault();\n\n      if (this.checkIfCallScreenIsMaximized() === true) {\n        return false;\n      }\n\n      this.setState({\n        dragging: true,\n        rel: {\n          x: e.pageX - this.state.x,\n          y: e.pageY - this.state.y\n        }\n      });\n      this.toggleCallScreenBackground(true);\n      this.toggleCallScreenInnerBackground(true);\n\n      this.document.onmousemove = e => this.startDragging(e);\n\n      this.document.onmouseup = e => this.disableDragging(e);\n    };\n\n    this.checkIfCallScreenIsMaximized = () => {\n      const elem = this.callScreenEl.current;\n      const dialogWidth = elem.clientWidth;\n      const dialogHeight = elem.clientHeight;\n      const windowWidth = window.innerWidth;\n      const windowHeight = window.innerHeight;\n\n      if (dialogWidth === windowWidth && dialogHeight === windowHeight) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.checkIfCallScreenIsMinimized = () => {\n      const elem = this.callScreenEl.current;\n      const dialogWidth = elem.clientWidth;\n      const dialogHeight = elem.clientHeight;\n      const minimumWidth = this.props.minWidth;\n      const minimumHeight = this.props.minHeight;\n\n      if (dialogWidth === minimumWidth && dialogHeight === minimumHeight) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.startDragging = e => {\n      if (!this.state.dragging) return;\n      e = e || window.event;\n      const elem = this.callScreenEl.current;\n      const dialogWidth = elem.clientWidth;\n      const dialogHeight = elem.clientHeight;\n      const x = Math.min(Math.max(0, e.pageX - this.state.rel.x), window.innerWidth - dialogWidth - 20);\n      const y = Math.min(Math.max(0, e.pageY - this.state.rel.y), window.innerHeight - dialogHeight - 20);\n      this.setState({\n        x: x,\n        y: y\n      });\n      e.stopPropagation();\n      e.preventDefault();\n    };\n\n    this.disableDragging = e => {\n      this.document.onmousemove = null;\n      this.document.onmouseup = null;\n      this.setState({\n        dragging: false\n      });\n      this.toggleCallScreenBackground(false);\n      this.toggleCallScreenInnerBackground(false);\n    };\n\n    this.initResize = e => {\n      e.preventDefault();\n\n      if (this.checkIfCallScreenIsMaximized() === true) {\n        return false;\n      }\n\n      const element = this.callScreenEl.current;\n      this.startX = e.pageX;\n      this.startY = e.pageY;\n      this.startWidth = parseFloat(getComputedStyle(element, null).getPropertyValue(\"width\").replace(\"px\", \"\"));\n      this.startHeight = parseInt(getComputedStyle(element, null).getPropertyValue(\"height\").replace(\"px\", \"\"));\n\n      this.document.onmousemove = e => this.startResize(e);\n\n      this.document.onmouseup = e => this.stopResize(e);\n    };\n\n    this.startResize = e => {\n      let width = this.startWidth + (e.pageX - this.startX);\n      let height = this.startHeight + (e.pageY - this.startY);\n\n      if (width < this.props.minWidth) {\n        width = this.props.minHWidth;\n      }\n\n      if (width > window.innerWidth) {\n        width = this.props.maxWidth;\n      }\n\n      if (height < this.props.minHeight) {\n        height = this.props.minHeight;\n      }\n\n      if (height > window.innerHeight) {\n        height = this.props.maxHeight;\n      }\n\n      this.callScreenEl.current.style.width = width + \"px\";\n      this.callScreenEl.current.style.height = height + \"px\";\n      this.setDimensionOfCallScreenInnerBackground({\n        width: width + \"px\",\n        height: height + \"px\"\n      });\n      this.toggleCallScreenBackground(true);\n      this.toggleCallScreenInnerBackground(true);\n    };\n\n    this.stopResize = () => {\n      this.document.onmousemove = null;\n      this.document.onmouseup = null;\n      this.toggleCallScreenBackground(false);\n      this.toggleCallScreenInnerBackground(false);\n\n      if (this.checkIfCallScreenIsMaximized() === true) {\n        this.setState({\n          maximized: true\n        });\n      }\n\n      if (this.checkIfCallScreenIsMinimized() === true) {\n        this.setState({\n          maximized: false\n        });\n      }\n    };\n\n    this.toggleCallScreenBackground = flag => {\n      if (this.callScreenBackgroundEl && this.callScreenBackgroundEl.current) {\n        this.callScreenBackgroundEl.current.style.display = flag ? \"block\" : \"none\";\n      }\n    };\n\n    this.toggleCallScreenInnerBackground = flag => {\n      if (this.callScreenInnerBackgroundEl && this.callScreenInnerBackgroundEl.current) {\n        this.callScreenInnerBackgroundEl.current.style.display = flag ? \"block\" : \"none\";\n      }\n    };\n\n    this.setDimensionOfCallScreenInnerBackground = props => {\n      this.callScreenInnerBackgroundEl.current.style.width = props.width;\n      this.callScreenInnerBackgroundEl.current.style.height = props.height;\n    };\n\n    this.setPositionOfCallScreenInnerBackground = props => {\n      this.callScreenInnerBackgroundEl.current.style.top = props.y;\n      this.callScreenInnerBackgroundEl.current.style.left = props.x;\n    };\n\n    this.minimize = () => {\n      if (!this.callScreenEl || !this.callScreenEl.current) {\n        return false;\n      }\n\n      const width = this.props.minWidth + \"px\";\n      const height = this.props.minHeight + \"px\";\n      this.setState({\n        maximized: false\n      });\n      this.setSizingAndPostionOfCallScreen({\n        width: width,\n        height: height\n      });\n      this.setDimensionOfCallScreenInnerBackground({\n        width: width,\n        height: height\n      });\n      this.setPositionOfCallScreenInnerBackground({\n        x: \"0px\",\n        y: \"0px\"\n      });\n    };\n\n    this.maximize = () => {\n      if (!this.callScreenEl || !this.callScreenEl.current) {\n        return false;\n      }\n\n      const width = this.props.maxWidth;\n      const height = this.props.maxHeight;\n      this.setState({\n        maximized: true\n      });\n      this.setSizingAndPostionOfCallScreen({\n        width: width,\n        height: height\n      });\n      this.setDimensionOfCallScreenInnerBackground({\n        width: width,\n        height: height\n      });\n      this.setPositionOfCallScreenInnerBackground({\n        x: \"0px\",\n        y: \"0px\"\n      });\n    };\n\n    this.setSizingAndPostionOfCallScreen = props => {\n      this.callScreenEl.current.style.width = props.width;\n      this.callScreenEl.current.style.height = props.height;\n      this.callScreenEl.current.style.top = \"0px\";\n      this.callScreenEl.current.style.left = \"0px\";\n    };\n\n    this.toggle = e => {\n      this.setState({\n        x: 0,\n        y: 0\n      });\n\n      if (this.state.maximized) {\n        this.minimize();\n      } else {\n        this.maximize();\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n    };\n\n    this.startDirectCall = call => {\n      const sessionId = call.data.customData.sessionID;\n      const customCSS = this.context.UIKitSettings.customCSS;\n      const callSettings = new CometChat.CallSettingsBuilder().enableDefaultLayout(true).setSessionID(sessionId).setIsAudioOnlyCall(false).setCustomCSS(customCSS).setLocalizedStringObject({\n        SELECT_VIDEO_SOURCE: Translator.translate(\"SELECT_VIDEO_SOURCE\", this.props.lang),\n        SELECT_INPUT_AUDIO_SOURCE: Translator.translate(\"SELECT_INPUT_AUDIO_SOURCE\", this.props.lang),\n        SELECT_OUTPUT_AUDIO_SOURCE: Translator.translate(\"SELECT_OUTPUT_AUDIO_SOURCE\", this.props.lang)\n      }).build();\n      const el = this.callScreenFrame;\n      CometChat.startCall(callSettings, el, new CometChat.OngoingCallListener({\n        onCallEnded: call => {\n          if (this.context) {\n            this.context.setCallInProgress({}, \"\");\n          }\n\n          Storage.removeItem(enums.CONSTANTS[\"ACTIVECALL\"]);\n          this.props.actionGenerated(enums.ACTIONS[\"DIRECT_CALL_ENDED\"]);\n        },\n        onError: error => {\n          if (this.context) {\n            this.context.setCallInProgress(null, \"\");\n          }\n\n          this.props.actionGenerated(enums.ACTIONS[\"DIRECT_CALL_ERROR\"]);\n          const errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n          this.context.setToastMessage(\"error\", errorCode);\n        }\n      }));\n    };\n\n    this.startDefaultCall = call => {\n      const sessionId = call.getSessionId();\n      const callType = call.type === CometChat.CALL_TYPE.AUDIO ? true : false;\n      const customCSS = this.context.UIKitSettings.customCSS;\n      const callSettings = new CometChat.CallSettingsBuilder().setSessionID(sessionId).enableDefaultLayout(true).setMode(CometChat.CALL_MODE.DEFAULT).setIsAudioOnlyCall(callType).setCustomCSS(customCSS).setLocalizedStringObject({\n        SELECT_VIDEO_SOURCE: Translator.translate(\"SELECT_VIDEO_SOURCE\", this.props.lang),\n        SELECT_INPUT_AUDIO_SOURCE: Translator.translate(\"SELECT_INPUT_AUDIO_SOURCE\", this.props.lang),\n        SELECT_OUTPUT_AUDIO_SOURCE: Translator.translate(\"SELECT_OUTPUT_AUDIO_SOURCE\", this.props.lang)\n      }).build();\n      const el = this.callScreenFrame;\n      CometChat.startCall(callSettings, el, new CometChat.OngoingCallListener({\n        onUserJoined: user => {\n          /* Notification received here if another user joins the call. */\n\n          /* this method can be use to display message or perform any actions if someone joining the call */\n          //call initiator gets the same info in outgoingcallaccpeted event\n          if (call.callInitiator.uid !== this.loggedInUser.uid && call.callInitiator.uid !== user.uid) {\n            const callMessage = {\n              category: call.category,\n              type: call.type,\n              action: call.action,\n              status: call.status,\n              callInitiator: call.callInitiator,\n              callReceiver: call.callReceiver,\n              receiverId: call.receiverId,\n              receiverType: call.receiverType,\n              sentAt: call.sentAt,\n              sender: { ...user\n              }\n            };\n            this.props.actionGenerated(enums.ACTIONS[\"USER_JOINED_CALL\"], callMessage);\n          }\n        },\n        onUserLeft: user => {\n          /* Notification received here if another user left the call. */\n\n          /* this method can be use to display message or perform any actions if someone leaving the call */\n          //call initiator gets the same info in outgoingcallaccpeted event\n          if (call.callInitiator.uid !== this.loggedInUser.uid && call.callInitiator.uid !== user.uid) {\n            const callMessage = {\n              category: call.category,\n              type: call.type,\n              action: \"left\",\n              status: call.status,\n              callInitiator: call.callInitiator,\n              callReceiver: call.callReceiver,\n              receiverId: call.receiverId,\n              receiverType: call.receiverType,\n              sentAt: call.sentAt,\n              sender: { ...user\n              }\n            };\n            this.props.actionGenerated(enums.ACTIONS[\"USER_LEFT_CALL\"], callMessage);\n          }\n        },\n        onCallEnded: endedCall => {\n          /* Notification received here if current ongoing call is ended. */\n          if (this.context) {\n            this.context.setCallInProgress(null, \"\");\n          }\n\n          Storage.removeItem(enums.CONSTANTS[\"ACTIVECALL\"]);\n          this.props.actionGenerated(enums.ACTIONS[\"OUTGOING_CALL_ENDED\"], endedCall);\n          /* hiding/closing the call screen can be done here. */\n        }\n      }));\n    };\n\n    this.state = {\n      x: 0,\n      y: 0,\n      rel: null,\n      // position relative to the cursor\n      dragging: false,\n      maximized: true\n    };\n    this.loggedInUser = _props.loggedInUser;\n    this.callScreenBackgroundEl = /*#__PURE__*/React.createRef();\n    this.callScreenInnerBackgroundEl = /*#__PURE__*/React.createRef();\n    this.callScreenEl = /*#__PURE__*/React.createRef();\n    this.callScreenFrame = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    this.document = window.document;\n\n    if (this.props.call.type === enums.CUSTOM_TYPE_MEETING) {\n      this.startDirectCall(this.props.call);\n    } else {\n      this.startDefaultCall(this.props.call);\n    }\n  }\n\n  render() {\n    const resizeText = Translator.translate(\"RESIZE\", this.props.lang);\n    let iconView = jsx(\"i\", {\n      css: iconStyle(minimizeIcon),\n      title: resizeText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 20\n      }\n    });\n\n    if (this.state.maximized === false) {\n      iconView = jsx(\"i\", {\n        css: iconStyle(maximizeIcon),\n        title: resizeText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 18\n        }\n      });\n    }\n\n    return jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 7\n      }\n    }, jsx(\"div\", {\n      css: callScreenBackgroundStyle(this.state),\n      ref: this.callScreenBackgroundEl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 9\n      }\n    }), jsx(\"div\", {\n      ref: this.callScreenEl,\n      className: \"callscreen__container\",\n      css: callScreenContainerStyle(this.props),\n      style: {\n        top: this.state.y + \"px\",\n        left: this.state.x + \"px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }\n    }, jsx(\"div\", {\n      css: callScreenInnerBackgroundStyle(),\n      ref: this.callScreenInnerBackgroundEl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 11\n      }\n    }), jsx(\"div\", {\n      css: callScreenHeaderStyle(this.state),\n      className: \"callscreen__header\",\n      onMouseDown: this.enableDragging,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 11\n      }\n    }, jsx(\"div\", {\n      css: headerTitleStyle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 13\n      }\n    }, \"\\xA0\"), jsx(\"div\", {\n      css: headerButtonStyle(),\n      onClick: this.toggle,\n      onMouseDown: e => e.stopPropagation(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 13\n      }\n    }, jsx(\"button\", {\n      type: \"button\",\n      title: resizeText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 15\n      }\n    }, iconView))), jsx(\"div\", {\n      css: callScreenWrapperStyle(this.props, keyframes),\n      className: \"callscreen__wrapper\",\n      ref: el => {\n        this.callScreenFrame = el;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 11\n      }\n    }), jsx(\"div\", {\n      css: callScreenResizerStyle(this.state),\n      className: \"callscreen__resizer-both\",\n      onMouseDown: this.initResize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 11\n      }\n    })));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatCallScreen.contextType = CometChatContext;\nCometChatCallScreen.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n  minWidth: 400,\n  minHeight: 300,\n  maxWidth: \"100%\",\n  maxHeight: \"100%\",\n  style: {}\n};\nCometChatCallScreen.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n  minWidth: PropTypes.number,\n  minHeight: PropTypes.number,\n  maxWidth: PropTypes.string,\n  maxHeight: PropTypes.string,\n  style: PropTypes.object\n};\nexport { CometChatCallScreen };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Calls/CometChatCallScreen/index.js"],"names":["React","jsx","keyframes","PropTypes","CometChat","CometChatContext","Storage","enums","theme","Translator","callScreenBackgroundStyle","callScreenContainerStyle","callScreenInnerBackgroundStyle","callScreenHeaderStyle","callScreenWrapperStyle","headerTitleStyle","headerButtonStyle","callScreenResizerStyle","iconStyle","CometChatCallScreen","PureComponent","constructor","props","enableDragging","e","preventDefault","checkIfCallScreenIsMaximized","setState","dragging","rel","x","pageX","state","y","pageY","toggleCallScreenBackground","toggleCallScreenInnerBackground","document","onmousemove","startDragging","onmouseup","disableDragging","elem","callScreenEl","current","dialogWidth","clientWidth","dialogHeight","clientHeight","windowWidth","window","innerWidth","windowHeight","innerHeight","checkIfCallScreenIsMinimized","minimumWidth","minWidth","minimumHeight","minHeight","event","Math","min","max","stopPropagation","initResize","element","startX","startY","startWidth","parseFloat","getComputedStyle","getPropertyValue","replace","startHeight","parseInt","startResize","stopResize","width","height","minHWidth","maxWidth","maxHeight","style","setDimensionOfCallScreenInnerBackground","maximized","flag","callScreenBackgroundEl","display","callScreenInnerBackgroundEl","setPositionOfCallScreenInnerBackground","top","left","minimize","setSizingAndPostionOfCallScreen","maximize","toggle","startDirectCall","call","sessionId","data","customData","sessionID","customCSS","context","UIKitSettings","callSettings","CallSettingsBuilder","enableDefaultLayout","setSessionID","setIsAudioOnlyCall","setCustomCSS","setLocalizedStringObject","SELECT_VIDEO_SOURCE","translate","lang","SELECT_INPUT_AUDIO_SOURCE","SELECT_OUTPUT_AUDIO_SOURCE","build","el","callScreenFrame","startCall","OngoingCallListener","onCallEnded","setCallInProgress","removeItem","CONSTANTS","actionGenerated","ACTIONS","onError","error","errorCode","hasOwnProperty","code","setToastMessage","startDefaultCall","getSessionId","callType","type","CALL_TYPE","AUDIO","setMode","CALL_MODE","DEFAULT","onUserJoined","user","callInitiator","uid","loggedInUser","callMessage","category","action","status","callReceiver","receiverId","receiverType","sentAt","sender","onUserLeft","endedCall","createRef","componentDidMount","CUSTOM_TYPE_MEETING","render","resizeText","iconView","minimizeIcon","maximizeIcon","contextType","defaultProps","getDefaultLanguage","propTypes","string","object","number"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, keyframes } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\n\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport { Storage } from \"../../../util/Storage\";\nimport * as enums from \"../../../util/enums.js\";\n\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\n\nimport {\n  callScreenBackgroundStyle,\n  callScreenContainerStyle,\n  callScreenInnerBackgroundStyle,\n  callScreenHeaderStyle,\n  callScreenWrapperStyle,\n  headerTitleStyle,\n  headerButtonStyle,\n  callScreenResizerStyle,\n  iconStyle,\n} from \"./style\";\n\nimport minimizeIcon from \"./resources/reduce-size.svg\";\nimport maximizeIcon from \"./resources/increase-size.svg\";\n\nclass CometChatCallScreen extends React.PureComponent {\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      x: 0,\n      y: 0,\n      rel: null, // position relative to the cursor\n      dragging: false,\n      maximized: true,\n    };\n\n    this.loggedInUser = props.loggedInUser;\n\n    this.callScreenBackgroundEl = React.createRef();\n    this.callScreenInnerBackgroundEl = React.createRef();\n    this.callScreenEl = React.createRef();\n    this.callScreenFrame = React.createRef();\n  }\n\n  componentDidMount() {\n    this.document = window.document;\n\n    if (this.props.call.type === enums.CUSTOM_TYPE_MEETING) {\n      this.startDirectCall(this.props.call);\n    } else {\n      this.startDefaultCall(this.props.call);\n    }\n  }\n\n  enableDragging = (e) => {\n    e.preventDefault();\n\n    if (this.checkIfCallScreenIsMaximized() === true) {\n      return false;\n    }\n\n    this.setState({\n      dragging: true,\n      rel: {\n        x: e.pageX - this.state.x,\n        y: e.pageY - this.state.y,\n      },\n    });\n\n    this.toggleCallScreenBackground(true);\n    this.toggleCallScreenInnerBackground(true);\n\n    this.document.onmousemove = (e) => this.startDragging(e);\n    this.document.onmouseup = (e) => this.disableDragging(e);\n  };\n\n  checkIfCallScreenIsMaximized = () => {\n    const elem = this.callScreenEl.current;\n\n    const dialogWidth = elem.clientWidth;\n    const dialogHeight = elem.clientHeight;\n\n    const windowWidth = window.innerWidth;\n    const windowHeight = window.innerHeight;\n\n    if (dialogWidth === windowWidth && dialogHeight === windowHeight) {\n      return true;\n    }\n\n    return false;\n  };\n\n  checkIfCallScreenIsMinimized = () => {\n    const elem = this.callScreenEl.current;\n\n    const dialogWidth = elem.clientWidth;\n    const dialogHeight = elem.clientHeight;\n\n    const minimumWidth = this.props.minWidth;\n    const minimumHeight = this.props.minHeight;\n\n    if (dialogWidth === minimumWidth && dialogHeight === minimumHeight) {\n      return true;\n    }\n\n    return false;\n  };\n\n  startDragging = (e) => {\n    if (!this.state.dragging) return;\n\n    e = e || window.event;\n\n    const elem = this.callScreenEl.current;\n\n    const dialogWidth = elem.clientWidth;\n    const dialogHeight = elem.clientHeight;\n    const x = Math.min(\n      Math.max(0, e.pageX - this.state.rel.x),\n      window.innerWidth - dialogWidth - 20\n    );\n    const y = Math.min(\n      Math.max(0, e.pageY - this.state.rel.y),\n      window.innerHeight - dialogHeight - 20\n    );\n\n    this.setState({\n      x: x,\n      y: y,\n    });\n\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  disableDragging = (e) => {\n    this.document.onmousemove = null;\n    this.document.onmouseup = null;\n\n    this.setState({ dragging: false });\n\n    this.toggleCallScreenBackground(false);\n    this.toggleCallScreenInnerBackground(false);\n  };\n\n  initResize = (e) => {\n    e.preventDefault();\n\n    if (this.checkIfCallScreenIsMaximized() === true) {\n      return false;\n    }\n\n    const element = this.callScreenEl.current;\n\n    this.startX = e.pageX;\n    this.startY = e.pageY;\n\n    this.startWidth = parseFloat(\n      getComputedStyle(element, null)\n        .getPropertyValue(\"width\")\n        .replace(\"px\", \"\")\n    );\n    this.startHeight = parseInt(\n      getComputedStyle(element, null)\n        .getPropertyValue(\"height\")\n        .replace(\"px\", \"\")\n    );\n\n    this.document.onmousemove = (e) => this.startResize(e);\n    this.document.onmouseup = (e) => this.stopResize(e);\n  };\n\n  startResize = (e) => {\n    let width = this.startWidth + (e.pageX - this.startX);\n    let height = this.startHeight + (e.pageY - this.startY);\n\n    if (width < this.props.minWidth) {\n      width = this.props.minHWidth;\n    }\n\n    if (width > window.innerWidth) {\n      width = this.props.maxWidth;\n    }\n\n    if (height < this.props.minHeight) {\n      height = this.props.minHeight;\n    }\n\n    if (height > window.innerHeight) {\n      height = this.props.maxHeight;\n    }\n\n    this.callScreenEl.current.style.width = width + \"px\";\n    this.callScreenEl.current.style.height = height + \"px\";\n\n    this.setDimensionOfCallScreenInnerBackground({\n      width: width + \"px\",\n      height: height + \"px\",\n    });\n\n    this.toggleCallScreenBackground(true);\n    this.toggleCallScreenInnerBackground(true);\n  };\n\n  stopResize = () => {\n    this.document.onmousemove = null;\n    this.document.onmouseup = null;\n\n    this.toggleCallScreenBackground(false);\n    this.toggleCallScreenInnerBackground(false);\n\n    if (this.checkIfCallScreenIsMaximized() === true) {\n      this.setState({ maximized: true });\n    }\n    if (this.checkIfCallScreenIsMinimized() === true) {\n      this.setState({ maximized: false });\n    }\n  };\n\n  toggleCallScreenBackground = (flag) => {\n    if (this.callScreenBackgroundEl && this.callScreenBackgroundEl.current) {\n      this.callScreenBackgroundEl.current.style.display = flag\n        ? \"block\"\n        : \"none\";\n    }\n  };\n\n  toggleCallScreenInnerBackground = (flag) => {\n    if (\n      this.callScreenInnerBackgroundEl &&\n      this.callScreenInnerBackgroundEl.current\n    ) {\n      this.callScreenInnerBackgroundEl.current.style.display = flag\n        ? \"block\"\n        : \"none\";\n    }\n  };\n\n  setDimensionOfCallScreenInnerBackground = (props) => {\n    this.callScreenInnerBackgroundEl.current.style.width = props.width;\n    this.callScreenInnerBackgroundEl.current.style.height = props.height;\n  };\n\n  setPositionOfCallScreenInnerBackground = (props) => {\n    this.callScreenInnerBackgroundEl.current.style.top = props.y;\n    this.callScreenInnerBackgroundEl.current.style.left = props.x;\n  };\n\n  minimize = () => {\n    if (!this.callScreenEl || !this.callScreenEl.current) {\n      return false;\n    }\n\n    const width = this.props.minWidth + \"px\";\n    const height = this.props.minHeight + \"px\";\n\n    this.setState({ maximized: false });\n    this.setSizingAndPostionOfCallScreen({ width: width, height: height });\n    this.setDimensionOfCallScreenInnerBackground({\n      width: width,\n      height: height,\n    });\n    this.setPositionOfCallScreenInnerBackground({ x: \"0px\", y: \"0px\" });\n  };\n\n  maximize = () => {\n    if (!this.callScreenEl || !this.callScreenEl.current) {\n      return false;\n    }\n\n    const width = this.props.maxWidth;\n    const height = this.props.maxHeight;\n\n    this.setState({ maximized: true });\n    this.setSizingAndPostionOfCallScreen({ width: width, height: height });\n    this.setDimensionOfCallScreenInnerBackground({\n      width: width,\n      height: height,\n    });\n    this.setPositionOfCallScreenInnerBackground({ x: \"0px\", y: \"0px\" });\n  };\n\n  setSizingAndPostionOfCallScreen = (props) => {\n    this.callScreenEl.current.style.width = props.width;\n    this.callScreenEl.current.style.height = props.height;\n    this.callScreenEl.current.style.top = \"0px\";\n    this.callScreenEl.current.style.left = \"0px\";\n  };\n\n  toggle = (e) => {\n    this.setState({ x: 0, y: 0 });\n\n    if (this.state.maximized) {\n      this.minimize();\n    } else {\n      this.maximize();\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  startDirectCall = (call) => {\n    const sessionId = call.data.customData.sessionID;\n    const customCSS = this.context.UIKitSettings.customCSS;\n\n    const callSettings = new CometChat.CallSettingsBuilder()\n      .enableDefaultLayout(true)\n      .setSessionID(sessionId)\n      .setIsAudioOnlyCall(false)\n      .setCustomCSS(customCSS)\n      .setLocalizedStringObject({\n        SELECT_VIDEO_SOURCE: Translator.translate(\n          \"SELECT_VIDEO_SOURCE\",\n          this.props.lang\n        ),\n        SELECT_INPUT_AUDIO_SOURCE: Translator.translate(\n          \"SELECT_INPUT_AUDIO_SOURCE\",\n          this.props.lang\n        ),\n        SELECT_OUTPUT_AUDIO_SOURCE: Translator.translate(\n          \"SELECT_OUTPUT_AUDIO_SOURCE\",\n          this.props.lang\n        ),\n      })\n      .build();\n\n    const el = this.callScreenFrame;\n    CometChat.startCall(\n      callSettings,\n      el,\n      new CometChat.OngoingCallListener({\n        onCallEnded: (call) => {\n          if (this.context) {\n            this.context.setCallInProgress({}, \"\");\n          }\n          Storage.removeItem(enums.CONSTANTS[\"ACTIVECALL\"]);\n          this.props.actionGenerated(enums.ACTIONS[\"DIRECT_CALL_ENDED\"]);\n        },\n        onError: (error) => {\n          if (this.context) {\n            this.context.setCallInProgress(null, \"\");\n          }\n\n          this.props.actionGenerated(enums.ACTIONS[\"DIRECT_CALL_ERROR\"]);\n          const errorCode =\n            error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n          this.context.setToastMessage(\"error\", errorCode);\n        },\n      })\n    );\n  };\n\n  startDefaultCall = (call) => {\n    const sessionId = call.getSessionId();\n    const callType = call.type === CometChat.CALL_TYPE.AUDIO ? true : false;\n    const customCSS = this.context.UIKitSettings.customCSS;\n\n    const callSettings = new CometChat.CallSettingsBuilder()\n      .setSessionID(sessionId)\n      .enableDefaultLayout(true)\n      .setMode(CometChat.CALL_MODE.DEFAULT)\n      .setIsAudioOnlyCall(callType)\n      .setCustomCSS(customCSS)\n      .setLocalizedStringObject({\n        SELECT_VIDEO_SOURCE: Translator.translate(\n          \"SELECT_VIDEO_SOURCE\",\n          this.props.lang\n        ),\n        SELECT_INPUT_AUDIO_SOURCE: Translator.translate(\n          \"SELECT_INPUT_AUDIO_SOURCE\",\n          this.props.lang\n        ),\n        SELECT_OUTPUT_AUDIO_SOURCE: Translator.translate(\n          \"SELECT_OUTPUT_AUDIO_SOURCE\",\n          this.props.lang\n        ),\n      })\n      .build();\n\n    const el = this.callScreenFrame;\n    CometChat.startCall(\n      callSettings,\n      el,\n      new CometChat.OngoingCallListener({\n        onUserJoined: (user) => {\n          /* Notification received here if another user joins the call. */\n          /* this method can be use to display message or perform any actions if someone joining the call */\n          //call initiator gets the same info in outgoingcallaccpeted event\n          if (\n            call.callInitiator.uid !== this.loggedInUser.uid &&\n            call.callInitiator.uid !== user.uid\n          ) {\n            const callMessage = {\n              category: call.category,\n              type: call.type,\n              action: call.action,\n              status: call.status,\n              callInitiator: call.callInitiator,\n              callReceiver: call.callReceiver,\n              receiverId: call.receiverId,\n              receiverType: call.receiverType,\n              sentAt: call.sentAt,\n              sender: { ...user },\n            };\n            this.props.actionGenerated(\n              enums.ACTIONS[\"USER_JOINED_CALL\"],\n              callMessage\n            );\n          }\n        },\n        onUserLeft: (user) => {\n          /* Notification received here if another user left the call. */\n          /* this method can be use to display message or perform any actions if someone leaving the call */\n          //call initiator gets the same info in outgoingcallaccpeted event\n          if (\n            call.callInitiator.uid !== this.loggedInUser.uid &&\n            call.callInitiator.uid !== user.uid\n          ) {\n            const callMessage = {\n              category: call.category,\n              type: call.type,\n              action: \"left\",\n              status: call.status,\n              callInitiator: call.callInitiator,\n              callReceiver: call.callReceiver,\n              receiverId: call.receiverId,\n              receiverType: call.receiverType,\n              sentAt: call.sentAt,\n              sender: { ...user },\n            };\n\n            this.props.actionGenerated(\n              enums.ACTIONS[\"USER_LEFT_CALL\"],\n              callMessage\n            );\n          }\n        },\n        onCallEnded: (endedCall) => {\n          /* Notification received here if current ongoing call is ended. */\n          if (this.context) {\n            this.context.setCallInProgress(null, \"\");\n          }\n          Storage.removeItem(enums.CONSTANTS[\"ACTIVECALL\"]);\n          this.props.actionGenerated(\n            enums.ACTIONS[\"OUTGOING_CALL_ENDED\"],\n            endedCall\n          );\n          /* hiding/closing the call screen can be done here. */\n        },\n      })\n    );\n  };\n\n  render() {\n    const resizeText = Translator.translate(\"RESIZE\", this.props.lang);\n    let iconView = <i css={iconStyle(minimizeIcon)} title={resizeText}></i>;\n    if (this.state.maximized === false) {\n      iconView = <i css={iconStyle(maximizeIcon)} title={resizeText}></i>;\n    }\n\n    return (\n      <React.Fragment>\n        <div\n          css={callScreenBackgroundStyle(this.state)}\n          ref={this.callScreenBackgroundEl}\n        ></div>\n        <div\n          ref={this.callScreenEl}\n          className=\"callscreen__container\"\n          css={callScreenContainerStyle(this.props)}\n          style={{ top: this.state.y + \"px\", left: this.state.x + \"px\" }}\n        >\n          <div\n            css={callScreenInnerBackgroundStyle()}\n            ref={this.callScreenInnerBackgroundEl}\n          ></div>\n          <div\n            css={callScreenHeaderStyle(this.state)}\n            className=\"callscreen__header\"\n            onMouseDown={this.enableDragging}\n          >\n            <div css={headerTitleStyle()}>&nbsp;</div>\n            <div\n              css={headerButtonStyle()}\n              onClick={this.toggle}\n              onMouseDown={(e) => e.stopPropagation()}\n            >\n              <button type=\"button\" title={resizeText}>\n                {iconView}\n              </button>\n            </div>\n          </div>\n          <div\n            css={callScreenWrapperStyle(this.props, keyframes)}\n            className=\"callscreen__wrapper\"\n            ref={(el) => {\n              this.callScreenFrame = el;\n            }}\n          ></div>\n          <div\n            css={callScreenResizerStyle(this.state)}\n            className=\"callscreen__resizer-both\"\n            onMouseDown={this.initResize}\n          ></div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n// Specifies the default values for props:\nCometChatCallScreen.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n  minWidth: 400,\n  minHeight: 300,\n  maxWidth: \"100%\",\n  maxHeight: \"100%\",\n  style: {},\n};\n\nCometChatCallScreen.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n  minWidth: PropTypes.number,\n  minHeight: PropTypes.number,\n  maxWidth: PropTypes.string,\n  maxHeight: PropTypes.string,\n  style: PropTypes.object,\n};\n\nexport { CometChatCallScreen };\n"]},"metadata":{},"sourceType":"module"}