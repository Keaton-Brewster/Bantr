{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ViewportProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect, createContext, useContext, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst viewportContext = /*#__PURE__*/createContext();\nexport function useViewport() {\n  _s();\n\n  return useContext(viewportContext);\n}\n\n_s(useViewport, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default function ViewportProvider({\n  children\n}) {\n  _s2();\n\n  const [width, setWidth] = useState(window.innerWidth);\n  const [show, setShow] = useState(() => {\n    if (width < 575) return {\n      convos: true,\n      mainContent: false\n    };\n    return {\n      convos: true,\n      mainContent: true\n    };\n  });\n  const mobileScreen = width < 575;\n  const bottomOfMessages = useRef(); // Setting up this function in the vieport provider\n  // So that we can call it from other events\n\n  function scrollToBottomMessages() {\n    var _bottomOfMessages$cur;\n\n    (_bottomOfMessages$cur = bottomOfMessages.current) === null || _bottomOfMessages$cur === void 0 ? void 0 : _bottomOfMessages$cur.scrollIntoView();\n  } // This is just the hook that sets width on window resize\n\n\n  useEffect(() => {\n    const handleWindowResize = () => setWidth(window.innerWidth);\n\n    window.addEventListener(\"resize\", handleWindowResize);\n    return () => window.removeEventListener(\"resize\", handleWindowResize);\n  }, []); // This handles the changes between mobile layout and desktop layout\n\n  useEffect(() => {\n    const {\n      convos,\n      mainContent\n    } = show;\n\n    if (width >= 575 && (!convos || !mainContent)) {\n      return setShow({\n        convos: true,\n        mainContent: true\n      });\n    }\n\n    if (width < 575 && convos && mainContent) {\n      return setShow({\n        convos: true,\n        mainContent: false\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [width]);\n  const value = {\n    width,\n    mobileScreen,\n    show,\n    setShow,\n    bottomOfMessages,\n    scrollToBottomMessages\n  };\n  return /*#__PURE__*/_jsxDEV(viewportContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ViewportProvider, \"mT+Nhc/eluISEdZehmNzRVvBGr8=\");\n\n_c = ViewportProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewportProvider\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ViewportProvider.js"],"names":["useState","useEffect","createContext","useContext","useRef","viewportContext","useViewport","ViewportProvider","children","width","setWidth","window","innerWidth","show","setShow","convos","mainContent","mobileScreen","bottomOfMessages","scrollToBottomMessages","current","scrollIntoView","handleWindowResize","addEventListener","removeEventListener","value"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,aAA9B,EAA6CC,UAA7C,EAAyDC,MAAzD,QAAuE,OAAvE;;AAEA,MAAMC,eAAe,gBAAGH,aAAa,EAArC;AAEA,OAAO,SAASI,WAAT,GAAuB;AAAA;;AAC5B,SAAOH,UAAU,CAACE,eAAD,CAAjB;AACD;;GAFeC,W;;AAIhB,eAAe,SAASC,gBAAT,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAwC;AAAA;;AACrD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACW,MAAM,CAACC,UAAR,CAAlC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,MAAM;AACrC,QAAIS,KAAK,GAAG,GAAZ,EAAiB,OAAO;AAAEM,MAAAA,MAAM,EAAE,IAAV;AAAgBC,MAAAA,WAAW,EAAE;AAA7B,KAAP;AACjB,WAAO;AAAED,MAAAA,MAAM,EAAE,IAAV;AAAgBC,MAAAA,WAAW,EAAE;AAA7B,KAAP;AACD,GAH+B,CAAhC;AAIA,QAAMC,YAAY,GAAGR,KAAK,GAAG,GAA7B;AACA,QAAMS,gBAAgB,GAAGd,MAAM,EAA/B,CAPqD,CASrD;AACA;;AACA,WAASe,sBAAT,GAAkC;AAAA;;AAChC,6BAAAD,gBAAgB,CAACE,OAAjB,gFAA0BC,cAA1B;AACD,GAboD,CAerD;;;AACApB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,kBAAkB,GAAG,MAAMZ,QAAQ,CAACC,MAAM,CAACC,UAAR,CAAzC;;AACAD,IAAAA,MAAM,CAACY,gBAAP,CAAwB,QAAxB,EAAkCD,kBAAlC;AACA,WAAO,MAAMX,MAAM,CAACa,mBAAP,CAA2B,QAA3B,EAAqCF,kBAArC,CAAb;AACD,GAJQ,EAIN,EAJM,CAAT,CAhBqD,CAsBrD;;AACArB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEc,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAA0BH,IAAhC;;AAEA,QAAIJ,KAAK,IAAI,GAAT,KAAiB,CAACM,MAAD,IAAW,CAACC,WAA7B,CAAJ,EAA+C;AAC7C,aAAOF,OAAO,CAAC;AACbC,QAAAA,MAAM,EAAE,IADK;AAEbC,QAAAA,WAAW,EAAE;AAFA,OAAD,CAAd;AAID;;AACD,QAAIP,KAAK,GAAG,GAAR,IAAeM,MAAf,IAAyBC,WAA7B,EAA0C;AACxC,aAAOF,OAAO,CAAC;AACbC,QAAAA,MAAM,EAAE,IADK;AAEbC,QAAAA,WAAW,EAAE;AAFA,OAAD,CAAd;AAID,KAda,CAed;;AACD,GAhBQ,EAgBN,CAACP,KAAD,CAhBM,CAAT;AAkBA,QAAMgB,KAAK,GAAG;AACZhB,IAAAA,KADY;AAEZQ,IAAAA,YAFY;AAGZJ,IAAAA,IAHY;AAIZC,IAAAA,OAJY;AAKZI,IAAAA,gBALY;AAMZC,IAAAA;AANY,GAAd;AASA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEM,KAAjC;AAAA,cACGjB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IAvDuBD,gB;;KAAAA,gB","sourcesContent":["import { useState, useEffect, createContext, useContext, useRef } from \"react\";\n\nconst viewportContext = createContext();\n\nexport function useViewport() {\n  return useContext(viewportContext);\n}\n\nexport default function ViewportProvider({ children }) {\n  const [width, setWidth] = useState(window.innerWidth);\n  const [show, setShow] = useState(() => {\n    if (width < 575) return { convos: true, mainContent: false };\n    return { convos: true, mainContent: true };\n  });\n  const mobileScreen = width < 575;\n  const bottomOfMessages = useRef();\n\n  // Setting up this function in the vieport provider\n  // So that we can call it from other events\n  function scrollToBottomMessages() {\n    bottomOfMessages.current?.scrollIntoView();\n  }\n\n  // This is just the hook that sets width on window resize\n  useEffect(() => {\n    const handleWindowResize = () => setWidth(window.innerWidth);\n    window.addEventListener(\"resize\", handleWindowResize);\n    return () => window.removeEventListener(\"resize\", handleWindowResize);\n  }, []);\n\n  // This handles the changes between mobile layout and desktop layout\n  useEffect(() => {\n    const { convos, mainContent } = show;\n\n    if (width >= 575 && (!convos || !mainContent)) {\n      return setShow({\n        convos: true,\n        mainContent: true,\n      });\n    }\n    if (width < 575 && convos && mainContent) {\n      return setShow({\n        convos: true,\n        mainContent: false,\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [width]);\n\n  const value = {\n    width,\n    mobileScreen,\n    show,\n    setShow,\n    bottomOfMessages,\n    scrollToBottomMessages,\n  };\n\n  return (\n    <viewportContext.Provider value={value}>\n      {children}\n    </viewportContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}