{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Shared/CometChatSharedMediaView/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport { SharedMediaManager } from \"./controller\";\nimport * as enums from \"../../../util/enums.js\";\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { sectionStyle, sectionHeaderStyle, sectionContentStyle, mediaBtnStyle, buttonStyle, mediaItemStyle, itemStyle } from \"./style\";\nimport fileIcon from \"./resources/file-upload.svg\";\n\nclass CometChatSharedMediaView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.messageUpdated = (key, message) => {\n      switch (key) {\n        case enums.MESSAGE_DELETED:\n          this.messageDeleted(message);\n          break;\n\n        case enums.MEDIA_MESSAGE_RECEIVED:\n          this.messageReceived(message);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.messageDeleted = deletedMessage => {\n      const messageType = deletedMessage.data.type;\n\n      if (this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP && deletedMessage.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP && deletedMessage.getReceiver().guid === this.context.item.guid && messageType === this.state.messagetype) {\n        const messageList = [...this.state.messageList];\n        const filteredMessages = messageList.filter(message => message.id !== deletedMessage.id);\n        this.setState({\n          messageList: filteredMessages,\n          scrollToBottom: false\n        });\n      }\n    };\n\n    this.messageReceived = message => {\n      const messageType = message.data.type;\n\n      if (this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP && message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP && message.getReceiver().guid === this.context.item.guid && messageType === this.state.messagetype) {\n        let messages = [...this.state.messageList];\n        messages = messages.concat(message);\n        this.setState({\n          messageList: messages,\n          scrollToBottom: true\n        });\n      }\n    };\n\n    this.getMessages = (scrollToBottom = false) => {\n      this.SharedMediaManager.fetchPreviousMessages().then(messages => {\n        const messageList = [...messages, ...this.state.messageList];\n\n        if (this._isMounted) {\n          this.setState({\n            messageList: messageList\n          });\n\n          if (scrollToBottom) {\n            this.scrollToBottom();\n          }\n        }\n      }).catch(error => {\n        const errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n        this.context.setToastMessage(\"error\", errorCode);\n      });\n    };\n\n    this.scrollToBottom = () => {\n      if (this.messageContainer) {\n        this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n      }\n    };\n\n    this.handleScroll = e => {\n      const top = Math.round(e.currentTarget.scrollTop) === 0;\n\n      if (top && this.state.messageList.length) {\n        this.getMessages();\n      }\n    };\n\n    this.mediaClickHandler = type => {\n      this.setState({\n        messagetype: type,\n        messageList: []\n      });\n    };\n\n    this._isMounted = false;\n    this.state = {\n      messagetype: \"image\",\n      messageList: []\n    };\n    this.messageContainer = /*#__PURE__*/React.createRef();\n    CometChat.getLoggedinUser().then(user => this.loggedInUser = user).catch(error => {\n      console.error(error);\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.SharedMediaManager = new SharedMediaManager(this.context.item, this.context.type, this.state.messagetype);\n    this.getMessages(true);\n    this.SharedMediaManager.attachListeners(this.messageUpdated);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.messagetype !== this.state.messagetype) {\n      this.SharedMediaManager = null;\n      this.SharedMediaManager = new SharedMediaManager(this.context.item, this.context.type, this.state.messagetype);\n      this.getMessages(true);\n      this.SharedMediaManager.attachListeners(this.messageUpdated);\n    }\n  }\n\n  componentWillUnmount() {\n    this.SharedMediaManager.removeListeners();\n    this.SharedMediaManager = null;\n    this._isMounted = false;\n  } //callback for listener functions\n\n\n  render() {\n    const template = (message, key) => {\n      if (this.state.messagetype === \"image\" && message.data.url) {\n        return jsx(\"div\", {\n          id: message.id,\n          key: key,\n          css: itemStyle(this.state, this.props, fileIcon, this.context),\n          className: \"item item__image\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 11\n          }\n        }, jsx(\"img\", {\n          src: message.data.url,\n          alt: Translator.translate(\"SHARED_MEDIA\", this.props.lang),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }\n        }));\n      } else if (this.state.messagetype === \"video\" && message.data.url) {\n        return jsx(\"div\", {\n          id: message.id,\n          key: key,\n          css: itemStyle(this.state, this.props, fileIcon, this.context),\n          className: \"item item__video\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 11\n          }\n        }, jsx(\"video\", {\n          src: message.data.url,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }\n        }));\n      } else if (this.state.messagetype === \"file\" && message.data.attachments) {\n        return jsx(\"div\", {\n          id: message.id,\n          key: key,\n          css: itemStyle(this.state, this.props, fileIcon, this.context),\n          className: \"item item__file\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 11\n          }\n        }, jsx(\"a\", {\n          href: message.data.attachments[0].url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }\n        }, jsx(\"i\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }\n        }), jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }\n        }, message.data.attachments[0].name)));\n      }\n    };\n\n    const messages = [...this.state.messageList];\n    const messageList = messages.map((message, key) => {\n      return template(message, key);\n    });\n    return jsx(\"div\", {\n      css: sectionStyle(this.props),\n      className: \"section section__sharedmedia\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 7\n      }\n    }, jsx(\"h6\", {\n      css: sectionHeaderStyle(this.props),\n      className: \"section__header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }\n    }, Translator.translate(\"SHARED_MEDIA\", this.props.lang)), jsx(\"div\", {\n      css: sectionContentStyle(this.props),\n      \"data-id\": \"sharedmedia\",\n      className: \"section__content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }, jsx(\"div\", {\n      css: mediaBtnStyle(),\n      className: \"media__button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }\n    }, jsx(\"span\", {\n      css: buttonStyle(this.state, \"image\"),\n      onClick: () => this.mediaClickHandler(\"image\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }\n    }, Translator.translate(\"PHOTOS\", this.props.lang)), jsx(\"span\", {\n      css: buttonStyle(this.state, \"video\"),\n      onClick: () => this.mediaClickHandler(\"video\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    }, Translator.translate(\"VIDEOS\", this.props.lang)), jsx(\"span\", {\n      css: buttonStyle(this.state, \"file\"),\n      onClick: () => this.mediaClickHandler(\"file\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }\n    }, Translator.translate(\"DOCS\", this.props.lang))), jsx(\"div\", {\n      css: mediaItemStyle(),\n      className: \"media_items\",\n      ref: el => this.messageContainer = el,\n      onScroll: this.handleScroll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }\n    }, messageList.length ? messageList : Translator.translate(\"NO_RECORDS_FOUND\", this.props.lang))));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatSharedMediaView.contextType = CometChatContext;\nCometChatSharedMediaView.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatSharedMediaView.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatSharedMediaView };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Shared/CometChatSharedMediaView/index.js"],"names":["React","jsx","PropTypes","CometChat","CometChatContext","SharedMediaManager","enums","theme","Translator","sectionStyle","sectionHeaderStyle","sectionContentStyle","mediaBtnStyle","buttonStyle","mediaItemStyle","itemStyle","CometChatSharedMediaView","Component","constructor","props","messageUpdated","key","message","MESSAGE_DELETED","messageDeleted","MEDIA_MESSAGE_RECEIVED","messageReceived","deletedMessage","messageType","data","type","context","ACTION_TYPE","TYPE_GROUP","getReceiverType","RECEIVER_TYPE","GROUP","getReceiver","guid","item","state","messagetype","messageList","filteredMessages","filter","id","setState","scrollToBottom","messages","concat","getMessages","fetchPreviousMessages","then","_isMounted","catch","error","errorCode","hasOwnProperty","code","setToastMessage","messageContainer","scrollTop","scrollHeight","handleScroll","e","top","Math","round","currentTarget","length","mediaClickHandler","createRef","getLoggedinUser","user","loggedInUser","console","componentDidMount","attachListeners","componentDidUpdate","prevProps","prevState","componentWillUnmount","removeListeners","render","template","url","fileIcon","translate","lang","attachments","name","map","el","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\n\nimport { SharedMediaManager } from \"./controller\";\nimport * as enums from \"../../../util/enums.js\";\n\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\n\nimport {\n  sectionStyle,\n  sectionHeaderStyle,\n  sectionContentStyle,\n  mediaBtnStyle,\n  buttonStyle,\n  mediaItemStyle,\n  itemStyle,\n} from \"./style\";\n\nimport fileIcon from \"./resources/file-upload.svg\";\n\nclass CometChatSharedMediaView extends React.Component {\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.state = {\n      messagetype: \"image\",\n      messageList: [],\n    };\n\n    this.messageContainer = React.createRef();\n\n    CometChat.getLoggedinUser()\n      .then((user) => (this.loggedInUser = user))\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.SharedMediaManager = new SharedMediaManager(\n      this.context.item,\n      this.context.type,\n      this.state.messagetype\n    );\n    this.getMessages(true);\n    this.SharedMediaManager.attachListeners(this.messageUpdated);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.messagetype !== this.state.messagetype) {\n      this.SharedMediaManager = null;\n      this.SharedMediaManager = new SharedMediaManager(\n        this.context.item,\n        this.context.type,\n        this.state.messagetype\n      );\n      this.getMessages(true);\n      this.SharedMediaManager.attachListeners(this.messageUpdated);\n    }\n  }\n\n  componentWillUnmount() {\n    this.SharedMediaManager.removeListeners();\n    this.SharedMediaManager = null;\n    this._isMounted = false;\n  }\n\n  //callback for listener functions\n  messageUpdated = (key, message) => {\n    switch (key) {\n      case enums.MESSAGE_DELETED:\n        this.messageDeleted(message);\n        break;\n      case enums.MEDIA_MESSAGE_RECEIVED:\n        this.messageReceived(message);\n        break;\n      default:\n        break;\n    }\n  };\n\n  messageDeleted = (deletedMessage) => {\n    const messageType = deletedMessage.data.type;\n    if (\n      this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP &&\n      deletedMessage.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP &&\n      deletedMessage.getReceiver().guid === this.context.item.guid &&\n      messageType === this.state.messagetype\n    ) {\n      const messageList = [...this.state.messageList];\n      const filteredMessages = messageList.filter(\n        (message) => message.id !== deletedMessage.id\n      );\n      this.setState({ messageList: filteredMessages, scrollToBottom: false });\n    }\n  };\n\n  //message is received or composed & sent\n  messageReceived = (message) => {\n    const messageType = message.data.type;\n    if (\n      this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP &&\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP &&\n      message.getReceiver().guid === this.context.item.guid &&\n      messageType === this.state.messagetype\n    ) {\n      let messages = [...this.state.messageList];\n      messages = messages.concat(message);\n      this.setState({ messageList: messages, scrollToBottom: true });\n    }\n  };\n\n  getMessages = (scrollToBottom = false) => {\n    this.SharedMediaManager.fetchPreviousMessages()\n      .then((messages) => {\n        const messageList = [...messages, ...this.state.messageList];\n        if (this._isMounted) {\n          this.setState({ messageList: messageList });\n          if (scrollToBottom) {\n            this.scrollToBottom();\n          }\n        }\n      })\n      .catch((error) => {\n        const errorCode =\n          error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n        this.context.setToastMessage(\"error\", errorCode);\n      });\n  };\n\n  scrollToBottom = () => {\n    if (this.messageContainer) {\n      this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n    }\n  };\n\n  handleScroll = (e) => {\n    const top = Math.round(e.currentTarget.scrollTop) === 0;\n    if (top && this.state.messageList.length) {\n      this.getMessages();\n    }\n  };\n\n  mediaClickHandler = (type) => {\n    this.setState({ messagetype: type, messageList: [] });\n  };\n\n  render() {\n    const template = (message, key) => {\n      if (this.state.messagetype === \"image\" && message.data.url) {\n        return (\n          <div\n            id={message.id}\n            key={key}\n            css={itemStyle(this.state, this.props, fileIcon, this.context)}\n            className=\"item item__image\"\n          >\n            <img\n              src={message.data.url}\n              alt={Translator.translate(\"SHARED_MEDIA\", this.props.lang)}\n            />\n          </div>\n        );\n      } else if (this.state.messagetype === \"video\" && message.data.url) {\n        return (\n          <div\n            id={message.id}\n            key={key}\n            css={itemStyle(this.state, this.props, fileIcon, this.context)}\n            className=\"item item__video\"\n          >\n            <video src={message.data.url} />\n          </div>\n        );\n      } else if (\n        this.state.messagetype === \"file\" &&\n        message.data.attachments\n      ) {\n        return (\n          <div\n            id={message.id}\n            key={key}\n            css={itemStyle(this.state, this.props, fileIcon, this.context)}\n            className=\"item item__file\"\n          >\n            <a\n              href={message.data.attachments[0].url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <i></i>\n              <span>{message.data.attachments[0].name}</span>\n            </a>\n          </div>\n        );\n      }\n    };\n\n    const messages = [...this.state.messageList];\n    const messageList = messages.map((message, key) => {\n      return template(message, key);\n    });\n\n    return (\n      <div\n        css={sectionStyle(this.props)}\n        className=\"section section__sharedmedia\"\n      >\n        <h6 css={sectionHeaderStyle(this.props)} className=\"section__header\">\n          {Translator.translate(\"SHARED_MEDIA\", this.props.lang)}\n        </h6>\n        <div\n          css={sectionContentStyle(this.props)}\n          data-id=\"sharedmedia\"\n          className=\"section__content\"\n        >\n          <div css={mediaBtnStyle()} className=\"media__button\">\n            <span\n              css={buttonStyle(this.state, \"image\")}\n              onClick={() => this.mediaClickHandler(\"image\")}\n            >\n              {Translator.translate(\"PHOTOS\", this.props.lang)}\n            </span>\n            <span\n              css={buttonStyle(this.state, \"video\")}\n              onClick={() => this.mediaClickHandler(\"video\")}\n            >\n              {Translator.translate(\"VIDEOS\", this.props.lang)}\n            </span>\n            <span\n              css={buttonStyle(this.state, \"file\")}\n              onClick={() => this.mediaClickHandler(\"file\")}\n            >\n              {Translator.translate(\"DOCS\", this.props.lang)}\n            </span>\n          </div>\n          <div\n            css={mediaItemStyle()}\n            className=\"media_items\"\n            ref={(el) => (this.messageContainer = el)}\n            onScroll={this.handleScroll}\n          >\n            {messageList.length\n              ? messageList\n              : Translator.translate(\"NO_RECORDS_FOUND\", this.props.lang)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// Specifies the default values for props:\nCometChatSharedMediaView.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n};\n\nCometChatSharedMediaView.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport { CometChatSharedMediaView };\n"]},"metadata":{},"sourceType":"module"}