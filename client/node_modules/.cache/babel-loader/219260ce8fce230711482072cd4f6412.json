{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Groups/CometChatCreateGroup/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatBackdrop } from \"../../Shared\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { modalWrapperStyle, modalCloseStyle, modalBodyStyle, modalTableStyle, tableCaptionStyle, tableBodyStyle, inputStyle, tableFootStyle, modalErrorStyle } from \"./style\";\nimport creatingIcon from \"./resources/creating.svg\";\nimport closeIcon from \"./resources/close.svg\";\n\nclass CometChatCreateGroup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.enablePublicGroup = () => {\n      this.context.FeatureRestriction.isPublicGroupEnabled().then(response => {\n        /**\n         * Don't update state if the response has the same value\n         */\n        if (response !== this.state.enablePublicGroup) {\n          this.setState({\n            enablePublicGroup: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.enablePublicGroup !== false) {\n          this.setState({\n            enablePublicGroup: false\n          });\n        }\n      });\n    };\n\n    this.enablePasswordGroup = () => {\n      this.context.FeatureRestriction.isPasswordGroupEnabled().then(response => {\n        /**\n         * Don't update state if the response has the same value\n         */\n        if (response !== this.state.enablePasswordGroup) {\n          this.setState({\n            enablePasswordGroup: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.enablePasswordGroup !== false) {\n          this.setState({\n            enablePasswordGroup: false\n          });\n        }\n      });\n    };\n\n    this.enablePrivateGroup = () => {\n      this.context.FeatureRestriction.isPrivateGroupEnabled().then(response => {\n        /**\n         * Don't update state if the response has the same value\n         */\n        if (response !== this.state.enablePrivateGroup) {\n          this.setState({\n            enablePrivateGroup: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.enablePrivateGroup !== false) {\n          this.setState({\n            enablePrivateGroup: false\n          });\n        }\n      });\n    };\n\n    this.passwordChangeHandler = event => {\n      this.setState({\n        password: event.target.value\n      });\n    };\n\n    this.nameChangeHandler = event => {\n      this.setState({\n        name: event.target.value\n      });\n    };\n\n    this.typeChangeHandler = event => {\n      const type = event.target.value;\n      this.setState({\n        type\n      });\n\n      if (type === CometChat.GROUP_TYPE.PASSWORD) {\n        this.setState({\n          passwordInput: true\n        });\n      } else {\n        this.setState({\n          passwordInput: false\n        });\n      }\n    };\n\n    this.validate = () => {\n      const groupName = this.state.name.trim();\n      const groupType = this.state.type.trim();\n\n      if (!groupName) {\n        this.setState({\n          errorMessage: Translator.translate(\"INVALID_GROUP_NAME\", this.props.lang)\n        });\n        return false;\n      }\n\n      if (!groupType) {\n        this.setState({\n          errorMessage: Translator.translate(\"INVALID_GROUP_TYPE\", this.props.lang)\n        });\n        return false;\n      }\n\n      let password = \"\";\n\n      if (groupType === CometChat.GROUP_TYPE.PASSWORD) {\n        password = this.state.password;\n\n        if (!password.length) {\n          this.setState({\n            errorMessage: Translator.translate(\"INVALID_PASSWORD\", this.props.lang)\n          });\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    this.createGroup = () => {\n      if (!this.validate()) {\n        return false;\n      }\n\n      this.setState({\n        creatingGroup: true\n      });\n      const groupType = this.state.type.trim();\n      const password = this.state.password;\n      const guid = \"group_\" + new Date().getTime();\n      const name = this.state.name.trim();\n      let type = CometChat.GROUP_TYPE.PUBLIC;\n\n      switch (groupType) {\n        case \"public\":\n          type = CometChat.GROUP_TYPE.PUBLIC;\n          break;\n\n        case \"private\":\n          type = CometChat.GROUP_TYPE.PRIVATE;\n          break;\n\n        case \"password\":\n          type = CometChat.GROUP_TYPE.PASSWORD;\n          break;\n\n        default:\n          break;\n      }\n\n      const group = new CometChat.Group(guid, name, type, password);\n      CometChat.createGroup(group).then(newGroup => {\n        this.setState({\n          creatingGroup: false\n        });\n\n        if (typeof newGroup === \"object\" && Object.keys(newGroup).length) {\n          this.context.setToastMessage(\"success\", \"GROUP_CREATION_SUCCESS\");\n          this.setState({\n            name: \"\",\n            type: \"\",\n            password: \"\",\n            passwordInput: \"\"\n          });\n          this.props.actionGenerated(enums.ACTIONS[\"GROUP_CREATED\"], newGroup);\n        } else {\n          this.setState({\n            errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          creatingGroup: false,\n          errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n        });\n      });\n    };\n\n    this.populateGroupType = () => {};\n\n    this.state = {\n      errorMessage: \"\",\n      passwordInput: false,\n      name: \"\",\n      type: \"\",\n      password: \"\",\n      creatingGroup: false,\n      enablePublicGroup: false,\n      enablePasswordGroup: false,\n      enablePrivateGroup: false\n    };\n  }\n\n  componentDidMount() {\n    this.enablePublicGroup();\n    this.enablePasswordGroup();\n    this.enablePrivateGroup();\n  }\n\n  componentDidUpdate() {\n    this.enablePublicGroup();\n    this.enablePasswordGroup();\n    this.enablePrivateGroup();\n  }\n\n  render() {\n    const groupTypes = {};\n    let groupTypeSelect = null;\n\n    if (this.state.enablePublicGroup === true) {\n      groupTypes[CometChat.GROUP_TYPE.PUBLIC] = Translator.translate(\"PUBLIC\", this.props.lang);\n    }\n\n    if (this.state.enablePasswordGroup === true) {\n      groupTypes[CometChat.GROUP_TYPE.PASSWORD] = Translator.translate(\"PASSWORD_PROTECTED\", this.props.lang);\n    }\n\n    if (this.state.enablePrivateGroup === true) {\n      groupTypes[CometChat.GROUP_TYPE.PRIVATE] = Translator.translate(\"PRIVATE\", this.props.lang);\n    }\n\n    const groupTypeKeys = Object.keys(groupTypes);\n\n    if (groupTypeKeys.length) {\n      const groupTypeListOptions = groupTypeKeys.map(groupTypeKey => {\n        return jsx(\"option\", {\n          value: groupTypeKey,\n          key: groupTypeKey,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 11\n          }\n        }, groupTypes[groupTypeKey]);\n      });\n\n      if (groupTypeKeys.length > 1) {\n        groupTypeSelect = jsx(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 11\n          }\n        }, jsx(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }\n        }, jsx(\"select\", {\n          css: inputStyle(this.props),\n          className: \"grouptype\",\n          onChange: this.typeChangeHandler,\n          value: this.state.type,\n          tabIndex: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }\n        }, jsx(\"option\", {\n          value: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 17\n          }\n        }, Translator.translate(\"SELECT_GROUP_TYPE\", this.props.lang)), groupTypeListOptions)));\n      } else {\n        groupTypeSelect = jsx(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 11\n          }\n        }, jsx(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }\n        }, jsx(\"select\", {\n          css: inputStyle(this.props),\n          className: \"grouptype\",\n          onChange: this.typeChangeHandler,\n          value: this.state.type,\n          tabIndex: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }\n        }, groupTypeListOptions)));\n      }\n    }\n\n    let password = null;\n\n    if (this.state.passwordInput) {\n      password = jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 9\n        }\n      }, jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }\n      }, jsx(\"input\", {\n        autoComplete: \"off\",\n        css: inputStyle(this.context),\n        placeholder: Translator.translate(\"ENTER_GROUP_PASSWORD\", this.props.lang),\n        type: \"password\",\n        tabIndex: \"3\",\n        onChange: this.passwordChangeHandler,\n        value: this.state.password,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 13\n        }\n      })));\n    }\n\n    const createText = this.state.creatingGroup ? Translator.translate(\"CREATING\", this.props.lang) : Translator.translate(\"CREATE\", this.props.lang);\n    return jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 7\n      }\n    }, jsx(CometChatBackdrop, {\n      show: true,\n      clicked: this.props.close,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }\n    }), jsx(\"div\", {\n      css: modalWrapperStyle(this.context),\n      className: \"modal__creategroup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }\n    }, jsx(\"span\", {\n      css: modalCloseStyle(closeIcon, this.context),\n      className: \"modal__close\",\n      onClick: this.props.close,\n      title: Translator.translate(\"CLOSE\", this.props.lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }\n    }), jsx(\"div\", {\n      css: modalBodyStyle(),\n      className: \"modal__body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }\n    }, jsx(\"table\", {\n      css: modalTableStyle(this.props),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 13\n      }\n    }, jsx(\"caption\", {\n      css: tableCaptionStyle(),\n      className: \"modal__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 15\n      }\n    }, \" \", Translator.translate(\"CREATE_GROUP\", this.props.lang), \" \"), jsx(\"tbody\", {\n      css: tableBodyStyle(),\n      className: \"modal__search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 15\n      }\n    }, jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 17\n      }\n    }, jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 19\n      }\n    }, jsx(\"div\", {\n      css: modalErrorStyle(this.context),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 21\n      }\n    }, this.state.errorMessage))), jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 17\n      }\n    }, jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 19\n      }\n    }, jsx(\"input\", {\n      autoComplete: \"off\",\n      css: inputStyle(this.props),\n      className: \"search__input\",\n      placeholder: Translator.translate(\"ENTER_GROUP_NAME\", this.props.lang),\n      type: \"text\",\n      tabIndex: \"1\",\n      onChange: this.nameChangeHandler,\n      value: this.state.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 21\n      }\n    }))), groupTypeSelect, password), jsx(\"tfoot\", {\n      css: tableFootStyle(this.context, this.state, creatingIcon),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 15\n      }\n    }, jsx(\"tr\", {\n      className: \"creategroup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 17\n      }\n    }, jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 19\n      }\n    }, jsx(\"button\", {\n      type: \"button\",\n      tabIndex: \"4\",\n      onClick: this.createGroup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 21\n      }\n    }, jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 23\n      }\n    }, createText)))))))));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatCreateGroup.contextType = CometChatContext;\nCometChatCreateGroup.defaultProps = {\n  lang: Translator.getDefaultLanguage()\n};\nCometChatCreateGroup.propTypes = {\n  lang: PropTypes.string\n};\nexport { CometChatCreateGroup };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Groups/CometChatCreateGroup/index.js"],"names":["React","jsx","PropTypes","CometChat","CometChatBackdrop","CometChatContext","enums","Translator","modalWrapperStyle","modalCloseStyle","modalBodyStyle","modalTableStyle","tableCaptionStyle","tableBodyStyle","inputStyle","tableFootStyle","modalErrorStyle","CometChatCreateGroup","Component","constructor","props","enablePublicGroup","context","FeatureRestriction","isPublicGroupEnabled","then","response","state","setState","catch","error","enablePasswordGroup","isPasswordGroupEnabled","enablePrivateGroup","isPrivateGroupEnabled","passwordChangeHandler","event","password","target","value","nameChangeHandler","name","typeChangeHandler","type","GROUP_TYPE","PASSWORD","passwordInput","validate","groupName","trim","groupType","errorMessage","translate","lang","length","createGroup","creatingGroup","guid","Date","getTime","PUBLIC","PRIVATE","group","Group","newGroup","Object","keys","setToastMessage","actionGenerated","ACTIONS","populateGroupType","componentDidMount","componentDidUpdate","render","groupTypes","groupTypeSelect","groupTypeKeys","groupTypeListOptions","map","groupTypeKey","createText","close","closeIcon","creatingIcon","contextType","defaultProps","getDefaultLanguage","propTypes","string"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CometChatBackdrop } from \"../../Shared\";\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport Translator from \"../../../resources/localization/translator\";\n\nimport {\n  modalWrapperStyle,\n  modalCloseStyle,\n  modalBodyStyle,\n  modalTableStyle,\n  tableCaptionStyle,\n  tableBodyStyle,\n  inputStyle,\n  tableFootStyle,\n  modalErrorStyle,\n} from \"./style\";\n\nimport creatingIcon from \"./resources/creating.svg\";\nimport closeIcon from \"./resources/close.svg\";\n\nclass CometChatCreateGroup extends React.Component {\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      errorMessage: \"\",\n      passwordInput: false,\n      name: \"\",\n      type: \"\",\n      password: \"\",\n      creatingGroup: false,\n      enablePublicGroup: false,\n      enablePasswordGroup: false,\n      enablePrivateGroup: false,\n    };\n  }\n\n  componentDidMount() {\n    this.enablePublicGroup();\n    this.enablePasswordGroup();\n    this.enablePrivateGroup();\n  }\n\n  componentDidUpdate() {\n    this.enablePublicGroup();\n    this.enablePasswordGroup();\n    this.enablePrivateGroup();\n  }\n\n  enablePublicGroup = () => {\n    this.context.FeatureRestriction.isPublicGroupEnabled()\n      .then((response) => {\n        /**\n         * Don't update state if the response has the same value\n         */\n        if (response !== this.state.enablePublicGroup) {\n          this.setState({ enablePublicGroup: response });\n        }\n      })\n      .catch((error) => {\n        if (this.state.enablePublicGroup !== false) {\n          this.setState({ enablePublicGroup: false });\n        }\n      });\n  };\n\n  enablePasswordGroup = () => {\n    this.context.FeatureRestriction.isPasswordGroupEnabled()\n      .then((response) => {\n        /**\n         * Don't update state if the response has the same value\n         */\n        if (response !== this.state.enablePasswordGroup) {\n          this.setState({ enablePasswordGroup: response });\n        }\n      })\n      .catch((error) => {\n        if (this.state.enablePasswordGroup !== false) {\n          this.setState({ enablePasswordGroup: false });\n        }\n      });\n  };\n\n  enablePrivateGroup = () => {\n    this.context.FeatureRestriction.isPrivateGroupEnabled()\n      .then((response) => {\n        /**\n         * Don't update state if the response has the same value\n         */\n        if (response !== this.state.enablePrivateGroup) {\n          this.setState({ enablePrivateGroup: response });\n        }\n      })\n      .catch((error) => {\n        if (this.state.enablePrivateGroup !== false) {\n          this.setState({ enablePrivateGroup: false });\n        }\n      });\n  };\n\n  passwordChangeHandler = (event) => {\n    this.setState({ password: event.target.value });\n  };\n\n  nameChangeHandler = (event) => {\n    this.setState({ name: event.target.value });\n  };\n\n  typeChangeHandler = (event) => {\n    const type = event.target.value;\n    this.setState({ type });\n\n    if (type === CometChat.GROUP_TYPE.PASSWORD) {\n      this.setState({ passwordInput: true });\n    } else {\n      this.setState({ passwordInput: false });\n    }\n  };\n\n  validate = () => {\n    const groupName = this.state.name.trim();\n    const groupType = this.state.type.trim();\n\n    if (!groupName) {\n      this.setState({\n        errorMessage: Translator.translate(\n          \"INVALID_GROUP_NAME\",\n          this.props.lang\n        ),\n      });\n      return false;\n    }\n\n    if (!groupType) {\n      this.setState({\n        errorMessage: Translator.translate(\n          \"INVALID_GROUP_TYPE\",\n          this.props.lang\n        ),\n      });\n      return false;\n    }\n\n    let password = \"\";\n    if (groupType === CometChat.GROUP_TYPE.PASSWORD) {\n      password = this.state.password;\n\n      if (!password.length) {\n        this.setState({\n          errorMessage: Translator.translate(\n            \"INVALID_PASSWORD\",\n            this.props.lang\n          ),\n        });\n        return false;\n      }\n    }\n    return true;\n  };\n\n  createGroup = () => {\n    if (!this.validate()) {\n      return false;\n    }\n\n    this.setState({ creatingGroup: true });\n\n    const groupType = this.state.type.trim();\n\n    const password = this.state.password;\n    const guid = \"group_\" + new Date().getTime();\n    const name = this.state.name.trim();\n    let type = CometChat.GROUP_TYPE.PUBLIC;\n\n    switch (groupType) {\n      case \"public\":\n        type = CometChat.GROUP_TYPE.PUBLIC;\n        break;\n      case \"private\":\n        type = CometChat.GROUP_TYPE.PRIVATE;\n        break;\n      case \"password\":\n        type = CometChat.GROUP_TYPE.PASSWORD;\n        break;\n      default:\n        break;\n    }\n\n    const group = new CometChat.Group(guid, name, type, password);\n    CometChat.createGroup(group)\n      .then((newGroup) => {\n        this.setState({ creatingGroup: false });\n\n        if (typeof newGroup === \"object\" && Object.keys(newGroup).length) {\n          this.context.setToastMessage(\"success\", \"GROUP_CREATION_SUCCESS\");\n          this.setState({\n            name: \"\",\n            type: \"\",\n            password: \"\",\n            passwordInput: \"\",\n          });\n          this.props.actionGenerated(enums.ACTIONS[\"GROUP_CREATED\"], newGroup);\n        } else {\n          this.setState({\n            errorMessage: Translator.translate(\n              \"SOMETHING_WRONG\",\n              this.props.lang\n            ),\n          });\n        }\n      })\n      .catch((error) => {\n        this.setState({\n          creatingGroup: false,\n          errorMessage: Translator.translate(\n            \"SOMETHING_WRONG\",\n            this.props.lang\n          ),\n        });\n      });\n  };\n\n  populateGroupType = () => {};\n\n  render() {\n    const groupTypes = {};\n    let groupTypeSelect = null;\n\n    if (this.state.enablePublicGroup === true) {\n      groupTypes[CometChat.GROUP_TYPE.PUBLIC] = Translator.translate(\n        \"PUBLIC\",\n        this.props.lang\n      );\n    }\n\n    if (this.state.enablePasswordGroup === true) {\n      groupTypes[CometChat.GROUP_TYPE.PASSWORD] = Translator.translate(\n        \"PASSWORD_PROTECTED\",\n        this.props.lang\n      );\n    }\n\n    if (this.state.enablePrivateGroup === true) {\n      groupTypes[CometChat.GROUP_TYPE.PRIVATE] = Translator.translate(\n        \"PRIVATE\",\n        this.props.lang\n      );\n    }\n\n    const groupTypeKeys = Object.keys(groupTypes);\n    if (groupTypeKeys.length) {\n      const groupTypeListOptions = groupTypeKeys.map((groupTypeKey) => {\n        return (\n          <option value={groupTypeKey} key={groupTypeKey}>\n            {groupTypes[groupTypeKey]}\n          </option>\n        );\n      });\n\n      if (groupTypeKeys.length > 1) {\n        groupTypeSelect = (\n          <tr>\n            <td>\n              <select\n                css={inputStyle(this.props)}\n                className=\"grouptype\"\n                onChange={this.typeChangeHandler}\n                value={this.state.type}\n                tabIndex=\"2\"\n              >\n                <option value=\"\">\n                  {Translator.translate(\"SELECT_GROUP_TYPE\", this.props.lang)}\n                </option>\n                {groupTypeListOptions}\n              </select>\n            </td>\n          </tr>\n        );\n      } else {\n        groupTypeSelect = (\n          <tr>\n            <td>\n              <select\n                css={inputStyle(this.props)}\n                className=\"grouptype\"\n                onChange={this.typeChangeHandler}\n                value={this.state.type}\n                tabIndex=\"2\"\n              >\n                {groupTypeListOptions}\n              </select>\n            </td>\n          </tr>\n        );\n      }\n    }\n\n    let password = null;\n    if (this.state.passwordInput) {\n      password = (\n        <tr>\n          <td>\n            <input\n              autoComplete=\"off\"\n              css={inputStyle(this.context)}\n              placeholder={Translator.translate(\n                \"ENTER_GROUP_PASSWORD\",\n                this.props.lang\n              )}\n              type=\"password\"\n              tabIndex=\"3\"\n              onChange={this.passwordChangeHandler}\n              value={this.state.password}\n            />\n          </td>\n        </tr>\n      );\n    }\n\n    const createText = this.state.creatingGroup\n      ? Translator.translate(\"CREATING\", this.props.lang)\n      : Translator.translate(\"CREATE\", this.props.lang);\n\n    return (\n      <React.Fragment>\n        <CometChatBackdrop show={true} clicked={this.props.close} />\n        <div\n          css={modalWrapperStyle(this.context)}\n          className=\"modal__creategroup\"\n        >\n          <span\n            css={modalCloseStyle(closeIcon, this.context)}\n            className=\"modal__close\"\n            onClick={this.props.close}\n            title={Translator.translate(\"CLOSE\", this.props.lang)}\n          ></span>\n          <div css={modalBodyStyle()} className=\"modal__body\">\n            <table css={modalTableStyle(this.props)}>\n              <caption css={tableCaptionStyle()} className=\"modal__title\">\n                {\" \"}\n                {Translator.translate(\"CREATE_GROUP\", this.props.lang)}{\" \"}\n              </caption>\n              <tbody css={tableBodyStyle()} className=\"modal__search\">\n                <tr>\n                  <td>\n                    <div css={modalErrorStyle(this.context)}>\n                      {this.state.errorMessage}\n                    </div>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <input\n                      autoComplete=\"off\"\n                      css={inputStyle(this.props)}\n                      className=\"search__input\"\n                      placeholder={Translator.translate(\n                        \"ENTER_GROUP_NAME\",\n                        this.props.lang\n                      )}\n                      type=\"text\"\n                      tabIndex=\"1\"\n                      onChange={this.nameChangeHandler}\n                      value={this.state.name}\n                    />\n                  </td>\n                </tr>\n                {groupTypeSelect}\n                {password}\n              </tbody>\n              <tfoot\n                css={tableFootStyle(this.context, this.state, creatingIcon)}\n              >\n                <tr className=\"creategroup\">\n                  <td>\n                    <button\n                      type=\"button\"\n                      tabIndex=\"4\"\n                      onClick={this.createGroup}\n                    >\n                      <span>{createText}</span>\n                    </button>\n                  </td>\n                </tr>\n              </tfoot>\n            </table>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n// Specifies the default values for props:\nCometChatCreateGroup.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n};\n\nCometChatCreateGroup.propTypes = {\n  lang: PropTypes.string,\n};\n\nexport { CometChatCreateGroup };\n"]},"metadata":{},"sourceType":"module"}