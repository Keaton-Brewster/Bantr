{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ConversationProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport CometChat, { authKey } from \"../CometChat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst conversationContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(conversationContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default function ConversationProvider({\n  user,\n  children\n}) {\n  _s2();\n\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n\n  function updateConversation(updatedConversation) {\n    const updatedConversations = conversations.map(conversation => {\n      if (conversation._id === updatedConversation._id) {\n        return updatedConversation;\n      }\n\n      return conversation;\n    });\n    setConversations(updatedConversations);\n  }\n\n  function sendMessage(text) {\n    axios.put(\"/api/messages/newMessage\", {\n      message: {\n        sender_id: user._id,\n        content: text,\n        senderName: user.name\n      },\n      conversation_id: conversations[selectedConversationIndex]._id\n    }).then(response => response.data).then(updatedConversation => {\n      updateConversation(updatedConversation);\n    }).catch(e => console.error(e));\n  }\n\n  const loadConversations = useCallback(cb => {\n    axios.get(`/api/conversations/${user._id}`).then(conversations => {\n      cb(conversations.data);\n    });\n  }, [user._id]);\n  const formattedConversations = conversations.map(conversation => {\n    const formattedMessages = conversation.messages.map(message => {\n      message.fromMe = message.sender_id === user._id;\n      return message;\n    });\n    conversation.messages = formattedMessages;\n    return conversation;\n  });\n  useEffect(() => {\n    if (!user._id) return;\n    CometChat.login(user._id, authKey).then(user => {\n      console.log(\"Login Successful:\", {\n        user\n      });\n    }, error => {\n      console.log(\"Login failed with exception:\", {\n        error\n      });\n    });\n    loadConversations(conversations => {\n      setConversations(conversations);\n    });\n  }, [user._id, loadConversations]);\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: conversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex\n  };\n  return /*#__PURE__*/_jsxDEV(conversationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationProvider, \"3fJpKWm1OVbRRmQU1wVTDIYpcyE=\");\n\n_c = ConversationProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationProvider\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ConversationProvider.js"],"names":["React","useContext","useEffect","useState","useCallback","axios","CometChat","authKey","conversationContext","createContext","useConversations","ConversationProvider","user","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","updateConversation","updatedConversation","updatedConversations","map","conversation","_id","sendMessage","text","put","message","sender_id","content","senderName","name","conversation_id","then","response","data","catch","e","console","error","loadConversations","cb","get","formattedConversations","formattedMessages","messages","fromMe","login","log","value","selectedConversation","selectConversationIndex"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport CometChat, { authKey } from \"../CometChat\";\n\nconst conversationContext = React.createContext();\n\nexport function useConversations() {\n  return useContext(conversationContext);\n}\n\nexport default function ConversationProvider({ user, children }) {\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n\n  function updateConversation(updatedConversation) {\n    const updatedConversations = conversations.map((conversation) => {\n      if (conversation._id === updatedConversation._id) {\n        return updatedConversation;\n      }\n      return conversation;\n    });\n    setConversations(updatedConversations);\n  }\n\n  function sendMessage(text) {\n    axios\n      .put(\"/api/messages/newMessage\", {\n        message: {\n          sender_id: user._id,\n          content: text,\n          senderName: user.name,\n        },\n        conversation_id: conversations[selectedConversationIndex]._id,\n      })\n      .then((response) => response.data)\n      .then((updatedConversation) => {\n        updateConversation(updatedConversation);\n      })\n      .catch((e) => console.error(e));\n  }\n\n  const loadConversations = useCallback(\n    (cb) => {\n      axios.get(`/api/conversations/${user._id}`).then((conversations) => {\n        cb(conversations.data);\n      });\n    },\n    [user._id]\n  );\n\n  const formattedConversations = conversations.map((conversation) => {\n    const formattedMessages = conversation.messages.map((message) => {\n      message.fromMe = message.sender_id === user._id;\n      return message;\n    });\n    conversation.messages = formattedMessages;\n    return conversation;\n  });\n\n  useEffect(() => {\n    if (!user._id) return;\n\n    CometChat.login(user._id, authKey).then(\n      (user) => {\n        console.log(\"Login Successful:\", { user });\n      },\n      (error) => {\n        console.log(\"Login failed with exception:\", { error });\n      }\n    );\n    loadConversations((conversations) => {\n      setConversations(conversations);\n    });\n  }, [user._id, loadConversations]);\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: conversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n  };\n  return (\n    <conversationContext.Provider value={value}>\n      {children}\n    </conversationContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}