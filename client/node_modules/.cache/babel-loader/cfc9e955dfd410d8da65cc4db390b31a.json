{"ast":null,"code":"import { CometChat } from \"@cometchat-pro/chat\";\nimport * as enums from \"../../../util/enums.js\";\nexport class GroupListManager {\n  constructor(searchKey) {\n    this.groupRequest = null;\n    this.groupListenerId = \"grouplist_\" + new Date().getTime();\n\n    if (searchKey) {\n      this.groupRequest = new CometChat.GroupsRequestBuilder().setLimit(30).setSearchKeyword(searchKey).build();\n    } else {\n      this.groupRequest = new CometChat.GroupsRequestBuilder().setLimit(30).build();\n    }\n  }\n\n  fetchNextGroups() {\n    return this.groupRequest.fetchNext();\n  }\n\n  attachListeners(callback) {\n    CometChat.addGroupListener(this.groupListenerId, new CometChat.GroupListener({\n      onGroupMemberScopeChanged: (message, changedUser, newScope, oldScope, changedGroup) => {\n        callback(enums.GROUP_MEMBER_SCOPE_CHANGED, message, changedGroup, {\n          \"user\": changedUser,\n          \"scope\": newScope\n        });\n      },\n      onGroupMemberKicked: (message, kickedUser, kickedBy, kickedFrom) => {\n        callback(enums.GROUP_MEMBER_KICKED, message, kickedFrom, {\n          \"user\": kickedUser,\n          \"hasJoined\": false\n        });\n      },\n      onGroupMemberBanned: (message, bannedUser, bannedBy, bannedFrom) => {\n        callback(enums.GROUP_MEMBER_BANNED, message, bannedFrom, {\n          \"user\": bannedUser,\n          \"hasJoined\": false\n        });\n      },\n      onGroupMemberUnbanned: (message, unbannedUser, unbannedBy, unbannedFrom) => {\n        callback(enums.GROUP_MEMBER_UNBANNED, message, unbannedFrom, {\n          \"user\": unbannedUser,\n          \"hasJoined\": false\n        });\n      },\n      onMemberAddedToGroup: (message, userAdded, userAddedBy, userAddedIn) => {\n        callback(enums.GROUP_MEMBER_ADDED, message, userAddedIn, {\n          \"user\": userAdded,\n          \"hasJoined\": true\n        });\n      },\n      onGroupMemberLeft: (message, leavingUser, group) => {\n        callback(enums.GROUP_MEMBER_LEFT, message, group, {\n          \"user\": leavingUser\n        });\n      },\n      onGroupMemberJoined: (message, joinedUser, joinedGroup) => {\n        callback(enums.GROUP_MEMBER_JOINED, message, joinedGroup, {\n          \"user\": joinedUser\n        });\n      }\n    }));\n  }\n\n  removeListeners() {\n    CometChat.removeGroupListener(this.groupListenerId);\n  }\n\n}","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Groups/CometChatGroupList/controller.js"],"names":["CometChat","enums","GroupListManager","constructor","searchKey","groupRequest","groupListenerId","Date","getTime","GroupsRequestBuilder","setLimit","setSearchKeyword","build","fetchNextGroups","fetchNext","attachListeners","callback","addGroupListener","GroupListener","onGroupMemberScopeChanged","message","changedUser","newScope","oldScope","changedGroup","GROUP_MEMBER_SCOPE_CHANGED","onGroupMemberKicked","kickedUser","kickedBy","kickedFrom","GROUP_MEMBER_KICKED","onGroupMemberBanned","bannedUser","bannedBy","bannedFrom","GROUP_MEMBER_BANNED","onGroupMemberUnbanned","unbannedUser","unbannedBy","unbannedFrom","GROUP_MEMBER_UNBANNED","onMemberAddedToGroup","userAdded","userAddedBy","userAddedIn","GROUP_MEMBER_ADDED","onGroupMemberLeft","leavingUser","group","GROUP_MEMBER_LEFT","onGroupMemberJoined","joinedUser","joinedGroup","GROUP_MEMBER_JOINED","removeListeners","removeGroupListener"],"mappings":"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","sourcesContent":["import { CometChat } from \"@cometchat-pro/chat\";\n\nimport * as enums from \"../../../util/enums.js\";\n\nexport class GroupListManager {\n\n    groupRequest = null;\n    groupListenerId = \"grouplist_\" + new Date().getTime();\n\n    constructor(searchKey) {\n\n        if (searchKey) {\n            this.groupRequest = new CometChat.GroupsRequestBuilder().setLimit(30).setSearchKeyword(searchKey).build();\n        } else {\n            this.groupRequest = new CometChat.GroupsRequestBuilder().setLimit(30).build();\n        }\n    }\n\n    fetchNextGroups() {\n        return this.groupRequest.fetchNext();\n    }\n\n    attachListeners(callback) {\n\n        CometChat.addGroupListener(\n            this.groupListenerId,\n            new CometChat.GroupListener({\n                onGroupMemberScopeChanged: (message, changedUser, newScope, oldScope, changedGroup) => {\n                    callback(enums.GROUP_MEMBER_SCOPE_CHANGED, message, changedGroup, {\"user\": changedUser, \"scope\": newScope});\n                }, \n                onGroupMemberKicked: (message, kickedUser, kickedBy, kickedFrom) => {\n                    callback(enums.GROUP_MEMBER_KICKED, message, kickedFrom, {\"user\": kickedUser, \"hasJoined\": false});\n                }, \n                onGroupMemberBanned: (message, bannedUser, bannedBy, bannedFrom) => {\n                    callback(enums.GROUP_MEMBER_BANNED, message, bannedFrom, {\"user\": bannedUser, \"hasJoined\": false});\n                }, \n                onGroupMemberUnbanned: (message, unbannedUser, unbannedBy, unbannedFrom) => {\n                    callback(enums.GROUP_MEMBER_UNBANNED, message, unbannedFrom, {\"user\": unbannedUser, \"hasJoined\": false});\n                }, \n                onMemberAddedToGroup: (message, userAdded, userAddedBy, userAddedIn) => {\n                    callback(enums.GROUP_MEMBER_ADDED, message, userAddedIn, {\"user\": userAdded, \"hasJoined\": true});\n                }, \n                onGroupMemberLeft: (message, leavingUser, group) => {\n                    callback(enums.GROUP_MEMBER_LEFT, message, group, {\"user\": leavingUser});\n                }, \n                onGroupMemberJoined: (message, joinedUser, joinedGroup) => {\n                    callback(enums.GROUP_MEMBER_JOINED, message, joinedGroup, {\"user\": joinedUser});\n                }\n            })\n        );\n    }\n\n    removeListeners() {\n        CometChat.removeGroupListener(this.groupListenerId);\n    }\n}"]},"metadata":{},"sourceType":"module"}