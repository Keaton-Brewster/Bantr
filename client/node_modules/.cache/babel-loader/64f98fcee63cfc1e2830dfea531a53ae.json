{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Messages/Extensions/CometChatCreatePoll/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatBackdrop } from \"../../../Shared\";\nimport { CometChatCreatePollOptions } from \"../\";\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport * as enums from \"../../../../util/enums.js\";\nimport Translator from \"../../../../resources/localization/translator\";\nimport { modalWrapperStyle, modalCloseStyle, modalBodyStyle, modalErrorStyle, modalTableStyle, tableCaptionStyle, tableBodyStyle, tableFootStyle, iconWrapperStyle, addOptionIconStyle } from \"./style\";\nimport creatingIcon from \"./resources/creating.svg\";\nimport addIcon from \"./resources/add-circle-filled.svg\";\nimport clearIcon from \"./resources/close.svg\";\n\nclass CometChatCreatePoll extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loggedInUser = null;\n\n    this.addPollOption = () => {\n      const options = [...this.state.options];\n      options.push({\n        value: \"\",\n        id: new Date().getTime()\n      });\n      this.setState({\n        options: options\n      });\n    };\n\n    this.removePollOption = option => {\n      const options = [...this.state.options];\n      const optionKey = options.findIndex(opt => opt.id === option.id);\n\n      if (optionKey > -1) {\n        options.splice(optionKey, 1);\n        this.setState({\n          options: options\n        });\n      }\n    };\n\n    this.optionChangeHandler = (event, option) => {\n      const options = [...this.state.options];\n      const optionKey = options.findIndex(opt => opt.id === option.id);\n\n      if (optionKey > -1) {\n        const newOption = { ...option,\n          value: event.target.value\n        };\n        options.splice(optionKey, 1, newOption);\n        this.setState({\n          options: options\n        });\n      }\n    };\n\n    this.createPoll = () => {\n      const question = this.questionRef.current.value.trim();\n      const firstOption = this.optionOneRef.current.value.trim();\n      const secondOption = this.optionTwoRef.current.value.trim();\n      const optionItems = [firstOption, secondOption];\n\n      if (question.length === 0) {\n        this.setState({\n          errorMessage: Translator.translate(\"INVALID_POLL_QUESTION\", this.props.lang)\n        });\n        return false;\n      }\n\n      if (firstOption.length === 0 || secondOption.length === 0) {\n        this.setState({\n          errorMessage: Translator.translate(\"INVALID_POLL_OPTION\", this.props.lang)\n        });\n        return false;\n      }\n\n      this.state.options.forEach(function (option) {\n        optionItems.push(option.value);\n      });\n      let receiverId;\n      let receiverType = this.context.type;\n\n      if (this.context.type === CometChat.RECEIVER_TYPE.USER) {\n        receiverId = this.context.item.uid;\n      } else if (this.context.type === CometChat.RECEIVER_TYPE.GROUP) {\n        receiverId = this.context.item.guid;\n      }\n\n      this.setState({\n        creatingPoll: true,\n        errorMessage: \"\"\n      });\n      CometChat.callExtension('polls', 'POST', 'v2/create', {\n        \"question\": question,\n        \"options\": optionItems,\n        \"receiver\": receiverId,\n        \"receiverType\": receiverType\n      }).then(response => {\n        if (response && response.hasOwnProperty(\"success\") && response[\"success\"] === true) {\n          this.setState({\n            creatingPoll: false\n          });\n          this.props.actionGenerated(enums.ACTIONS[\"POLL_CREATED\"]);\n        } else {\n          this.setState({\n            errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          creatingPoll: false\n        });\n        this.setState({\n          errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n        });\n      });\n    };\n\n    this.state = {\n      errorMessage: \"\",\n      options: [],\n      creatingPoll: false\n    };\n    this.questionRef = /*#__PURE__*/React.createRef();\n    this.optionOneRef = /*#__PURE__*/React.createRef();\n    this.optionTwoRef = /*#__PURE__*/React.createRef();\n    this.optionRef = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    const optionList = [...this.state.options];\n    const pollOptionView = optionList.map((option, index) => {\n      return jsx(CometChatCreatePollOptions, {\n        key: index,\n        option: option,\n        tabIndex: index + 4,\n        lang: this.props.lang,\n        optionChangeHandler: this.optionChangeHandler,\n        removePollOption: this.removePollOption,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }\n      });\n    });\n    const createText = this.state.creatingPoll ? Translator.translate(\"CREATING\", this.props.lang) : Translator.translate(\"CREATE\", this.props.lang);\n    return jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, jsx(CometChatBackdrop, {\n      show: true,\n      clicked: this.props.close,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }), jsx(\"div\", {\n      css: modalWrapperStyle(this.context),\n      className: \"modal__createpoll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }, jsx(\"span\", {\n      css: modalCloseStyle(clearIcon, this.context),\n      className: \"modal__close\",\n      onClick: this.props.close,\n      title: Translator.translate(\"CLOSE\", this.props.lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }\n    }), jsx(\"div\", {\n      css: modalBodyStyle(),\n      className: \"modal__body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }, jsx(\"table\", {\n      css: modalTableStyle(this.context),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    }, jsx(\"caption\", {\n      css: tableCaptionStyle(),\n      className: \"modal__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 29\n      }\n    }, Translator.translate(\"CREATE_POLL\", this.props.lang)), jsx(\"tbody\", {\n      css: tableBodyStyle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 29\n      }\n    }, jsx(\"tr\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 33\n      }\n    }, jsx(\"td\", {\n      colSpan: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 37\n      }\n    }, jsx(\"div\", {\n      css: modalErrorStyle(this.context),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 53\n      }\n    }, this.state.errorMessage))), jsx(\"tr\", {\n      className: \"poll__question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 33\n      }\n    }, jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 37\n      }\n    }, jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 41\n      }\n    }, Translator.translate(\"QUESTION\", this.props.lang))), jsx(\"td\", {\n      colSpan: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 37\n      }\n    }, jsx(\"input\", {\n      type: \"text\",\n      autoFocus: true,\n      tabIndex: \"1\",\n      placeholder: Translator.translate(\"ENTER_YOUR_QUESTION\", this.props.lang),\n      ref: this.questionRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 41\n      }\n    }))), jsx(\"tr\", {\n      className: \"poll__options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 33\n      }\n    }, jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 37\n      }\n    }, jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 41\n      }\n    }, Translator.translate(\"OPTIONS\", this.props.lang))), jsx(\"td\", {\n      colSpan: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 37\n      }\n    }, jsx(\"input\", {\n      type: \"text\",\n      tabIndex: \"2\",\n      placeholder: Translator.translate(\"ENTER_YOUR_OPTION\", this.props.lang),\n      ref: this.optionOneRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 41\n      }\n    }))), jsx(\"tr\", {\n      ref: this.optionRef,\n      className: \"poll__options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 33\n      }\n    }, jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 37\n      }\n    }, \"\\xA0\"), jsx(\"td\", {\n      colSpan: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 37\n      }\n    }, jsx(\"input\", {\n      type: \"text\",\n      tabIndex: \"3\",\n      placeholder: Translator.translate(\"ENTER_YOUR_OPTION\", this.props.lang),\n      ref: this.optionTwoRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 41\n      }\n    }))), pollOptionView, jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 33\n      }\n    }, jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 37\n      }\n    }, \"\\xA0\"), jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 37\n      }\n    }, jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 41\n      }\n    }, Translator.translate(\"ADD_NEW_OPTION\", this.props.lang))), jsx(\"td\", {\n      css: iconWrapperStyle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 37\n      }\n    }, jsx(\"i\", {\n      tabIndex: \"100\",\n      css: addOptionIconStyle(addIcon, this.context),\n      className: \"option__add\",\n      onClick: this.addPollOption,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 41\n      }\n    })))), jsx(\"tfoot\", {\n      css: tableFootStyle(this.context, this.state, creatingIcon),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 29\n      }\n    }, jsx(\"tr\", {\n      className: \"createpoll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 33\n      }\n    }, jsx(\"td\", {\n      colSpan: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 37\n      }\n    }, jsx(\"button\", {\n      type: \"button\",\n      onClick: this.createPoll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 41\n      }\n    }, jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 45\n      }\n    }, createText)))))))));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatCreatePoll.contextType = CometChatContext;\nCometChatCreatePoll.defaultProps = {\n  lang: Translator.getDefaultLanguage()\n};\nCometChatCreatePoll.propTypes = {\n  lang: PropTypes.string\n};\nexport { CometChatCreatePoll };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Messages/Extensions/CometChatCreatePoll/index.js"],"names":["React","jsx","PropTypes","CometChat","CometChatBackdrop","CometChatCreatePollOptions","CometChatContext","enums","Translator","modalWrapperStyle","modalCloseStyle","modalBodyStyle","modalErrorStyle","modalTableStyle","tableCaptionStyle","tableBodyStyle","tableFootStyle","iconWrapperStyle","addOptionIconStyle","CometChatCreatePoll","Component","constructor","props","loggedInUser","addPollOption","options","state","push","value","id","Date","getTime","setState","removePollOption","option","optionKey","findIndex","opt","splice","optionChangeHandler","event","newOption","target","createPoll","question","questionRef","current","trim","firstOption","optionOneRef","secondOption","optionTwoRef","optionItems","length","errorMessage","translate","lang","forEach","receiverId","receiverType","context","type","RECEIVER_TYPE","USER","item","uid","GROUP","guid","creatingPoll","callExtension","then","response","hasOwnProperty","actionGenerated","ACTIONS","catch","error","createRef","optionRef","render","optionList","pollOptionView","map","index","createText","close","clearIcon","addIcon","creatingIcon","contextType","defaultProps","getDefaultLanguage","propTypes","string"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CometChatBackdrop } from \"../../../Shared\";\nimport { CometChatCreatePollOptions } from \"../\";\n\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport * as enums from \"../../../../util/enums.js\"; \nimport Translator from \"../../../../resources/localization/translator\";\n\nimport {\n    modalWrapperStyle,\n    modalCloseStyle,\n    modalBodyStyle,\n    modalErrorStyle,\n    modalTableStyle,\n    tableCaptionStyle,\n    tableBodyStyle,\n    tableFootStyle,\n    iconWrapperStyle,\n    addOptionIconStyle\n} from \"./style\";\n\nimport creatingIcon from \"./resources/creating.svg\";\nimport addIcon from \"./resources/add-circle-filled.svg\";\nimport clearIcon from \"./resources/close.svg\";\n\nclass CometChatCreatePoll extends React.Component {\n\n    loggedInUser = null;\n    static contextType = CometChatContext;\n\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            errorMessage: \"\",\n            options: [],\n            creatingPoll: false\n        }\n\n        this.questionRef = React.createRef();\n        this.optionOneRef = React.createRef();\n        this.optionTwoRef = React.createRef();\n        this.optionRef = React.createRef();\n    }\n\n    addPollOption = () => {\n\n        const options = [...this.state.options];\n        options.push({ value: \"\", id: new Date().getTime() });\n        this.setState({options: options});\n    }\n\n    removePollOption = (option) => {\n\n        const options = [...this.state.options];\n        const optionKey = options.findIndex(opt => opt.id === option.id);\n        if (optionKey > -1) {\n\n            options.splice(optionKey, 1);\n            this.setState({ options: options});\n        }\n    }\n\n    optionChangeHandler = (event, option) => {\n\n        const options = [...this.state.options];\n        const optionKey = options.findIndex(opt => opt.id === option.id); \n        if (optionKey > -1) {\n\n            const newOption = { ...option, value: event.target.value}\n            options.splice(optionKey, 1, newOption);\n            this.setState({ options: options });\n        }\n    }\n\n    createPoll = () => {\n\n        const question = this.questionRef.current.value.trim();\n        const firstOption = this.optionOneRef.current.value.trim();\n        const secondOption = this.optionTwoRef.current.value.trim();\n        const optionItems = [firstOption, secondOption];\n\n        if (question.length === 0) {\n\n            this.setState({ errorMessage: Translator.translate(\"INVALID_POLL_QUESTION\", this.props.lang) });\n            return false;\n        }\n\n        if (firstOption.length === 0 || secondOption.length === 0) {\n\n            this.setState({ errorMessage: Translator.translate(\"INVALID_POLL_OPTION\", this.props.lang) });\n            return false;\n        }\n\n        this.state.options.forEach(function (option) {\n            optionItems.push(option.value)\n        })\n\n        let receiverId;\n        let receiverType = this.context.type;\n        if (this.context.type === CometChat.RECEIVER_TYPE.USER) {\n            receiverId = this.context.item.uid;\n        } else if (this.context.type === CometChat.RECEIVER_TYPE.GROUP) {\n            receiverId = this.context.item.guid;\n        }\n        \n        this.setState({ creatingPoll: true, errorMessage: \"\" });\n\n        CometChat.callExtension('polls', 'POST', 'v2/create', {\n            \"question\": question,\n            \"options\": optionItems,\n            \"receiver\": receiverId,\n            \"receiverType\": receiverType\n        }).then(response => {\n\n            if (response && response.hasOwnProperty(\"success\") && response[\"success\"] === true) {\n\n                this.setState({ creatingPoll: false });\n                this.props.actionGenerated(enums.ACTIONS[\"POLL_CREATED\"]);\n\n            } else {\n                this.setState({ errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang) });\n            }\n\n        }).catch(error => {\n\n            this.setState({ creatingPoll: false });\n            this.setState({ errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang) });\n        });\n    }\n\n    render() {\n\n        const optionList = [...this.state.options];\n        const pollOptionView = optionList.map((option, index) => {\n            return (\n                <CometChatCreatePollOptions \n                key={index} \n                option={option} \n                tabIndex={index+4}\n                lang={this.props.lang}\n                optionChangeHandler={this.optionChangeHandler}\n                removePollOption={this.removePollOption} />\n            );\n        });\n\n        const createText = (this.state.creatingPoll) ? Translator.translate(\"CREATING\", this.props.lang) : Translator.translate(\"CREATE\", this.props.lang);\n        return (\n            <React.Fragment>\n                <CometChatBackdrop show={true} clicked={this.props.close} />\n                <div css={modalWrapperStyle(this.context)} className=\"modal__createpoll\">\n                    <span css={modalCloseStyle(clearIcon, this.context)} className=\"modal__close\" onClick={this.props.close} title={Translator.translate(\"CLOSE\", this.props.lang)}></span>\n                    <div css={modalBodyStyle()} className=\"modal__body\">\n                        <table css={modalTableStyle(this.context)}>\n                            <caption css={tableCaptionStyle()} className=\"modal__title\">{Translator.translate(\"CREATE_POLL\", this.props.lang)}</caption>\n                            <tbody css={tableBodyStyle()}>\n                                <tr className=\"error\">\n                                    <td colSpan=\"3\"><div css={modalErrorStyle(this.context)}>{this.state.errorMessage}</div></td>\n                                </tr>\n                                <tr className=\"poll__question\">\n                                    <td><label>{Translator.translate(\"QUESTION\", this.props.lang)}</label></td>\n                                    <td colSpan=\"2\">\n                                        <input type=\"text\" autoFocus tabIndex=\"1\" placeholder={Translator.translate(\"ENTER_YOUR_QUESTION\", this.props.lang)} ref={this.questionRef} />\n                                    </td>\n                                </tr>\n                                <tr className=\"poll__options\">\n                                    <td>\n                                        <label>{Translator.translate(\"OPTIONS\", this.props.lang)}</label>\n                                    </td>\n                                    <td colSpan=\"2\">\n                                        <input type=\"text\" tabIndex=\"2\" placeholder={Translator.translate(\"ENTER_YOUR_OPTION\", this.props.lang)} ref={this.optionOneRef} />\n                                    </td>\n                                </tr>\n                                <tr ref={this.optionRef} className=\"poll__options\">\n                                    <td>&nbsp;</td>\n                                    <td colSpan=\"2\">\n                                        <input type=\"text\" tabIndex=\"3\" placeholder={Translator.translate(\"ENTER_YOUR_OPTION\", this.props.lang)} ref={this.optionTwoRef} />\n                                    </td>\n                                </tr>\n                                {pollOptionView}\n                                <tr>\n                                    <td>&nbsp;</td>\n                                    <td>\n                                        <label>{Translator.translate(\"ADD_NEW_OPTION\", this.props.lang)}</label>\n                                    </td>\n                                    <td css={iconWrapperStyle()}>\n                                        <i tabIndex=\"100\" css={addOptionIconStyle(addIcon, this.context)} className=\"option__add\" onClick={this.addPollOption}></i>\n                                    </td>\n                                </tr>\n                            </tbody>\n                            <tfoot css={tableFootStyle(this.context, this.state, creatingIcon)}>\n                                <tr className=\"createpoll\">\n                                    <td colSpan=\"2\">\n                                        <button type=\"button\" onClick={this.createPoll}>\n                                            <span>{createText}</span>\n                                        </button>\n                                    </td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\n// Specifies the default values for props:\nCometChatCreatePoll.defaultProps = {\n    lang: Translator.getDefaultLanguage(),\n};\n\nCometChatCreatePoll.propTypes = {\n    lang: PropTypes.string,\n}\n\nexport { CometChatCreatePoll };"]},"metadata":{},"sourceType":"module"}