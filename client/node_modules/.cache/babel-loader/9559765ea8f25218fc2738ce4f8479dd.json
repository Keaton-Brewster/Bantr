{"ast":null,"code":"import _extends from \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/CometChatReceiverTextMessageBubble/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport twemoji from \"twemoji\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatMessageActions, CometChatThreadedMessageReplyCount, CometChatReadReceipt, CometChatLinkPreview } from \"../\";\nimport { CometChatMessageReactions } from \"../Extensions\";\nimport { CometChatAvatar } from \"../../Shared\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport { linkify, checkMessageForExtensionsData } from \"../../../util/common\";\nimport * as enums from \"../../../util/enums.js\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\nimport { messageContainerStyle, messageWrapperStyle, messageThumbnailStyle, messageDetailStyle, nameWrapperStyle, nameStyle, messageTxtContainerStyle, messageTxtWrapperStyle, messageTxtStyle, messageInfoWrapperStyle, messageReactionsWrapperStyle } from \"./style\";\n\nclass CometChatReceiverTextMessageBubble extends React.Component {\n  constructor(props) {\n    super(props);\n    this.messageFrom = \"receiver\";\n\n    this.getMessageText = () => {\n      let messageText = this.state.message.text; //xss extensions data\n\n      const xssData = checkMessageForExtensionsData(this.state.message, \"xss-filter\");\n\n      if (xssData && xssData.hasOwnProperty(\"sanitized_text\") && xssData.hasOwnProperty(\"hasXSS\") && xssData.hasXSS === \"yes\") {\n        messageText = xssData.sanitized_text;\n      } //datamasking extensions data\n\n\n      const maskedData = checkMessageForExtensionsData(this.state.message, \"data-masking\");\n\n      if (maskedData && maskedData.hasOwnProperty(\"data\") && maskedData.data.hasOwnProperty(\"sensitive_data\") && maskedData.data.hasOwnProperty(\"message_masked\") && maskedData.data.sensitive_data === \"yes\") {\n        messageText = maskedData.data.message_masked;\n      } //profanity extensions data\n\n\n      const profaneData = checkMessageForExtensionsData(this.state.message, \"profanity-filter\");\n\n      if (profaneData && profaneData.hasOwnProperty(\"profanity\") && profaneData.hasOwnProperty(\"message_clean\") && profaneData.profanity === \"yes\") {\n        messageText = profaneData.message_clean;\n      }\n\n      const formattedText = linkify(messageText);\n      const emojiParsedMessage = twemoji.parse(formattedText, {\n        folder: \"svg\",\n        ext: \".svg\"\n      });\n      const parsedMessage = ReactHtmlParser(emojiParsedMessage, {\n        decodeEntities: false\n      });\n      const emojiMessage = parsedMessage.filter(message => message instanceof Object && message.type === \"img\");\n      let showVariation = true; //if larger size emojis feature is disabled\n\n      if (this.state.enableLargerSizeEmojis === false) {\n        showVariation = false;\n      }\n\n      messageText = jsx(\"div\", {\n        css: messageTxtWrapperStyle(this.context),\n        className: \"message__txt__wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }\n      }, jsx(\"p\", {\n        css: messageTxtStyle(parsedMessage, emojiMessage, showVariation),\n        className: \"message__txt\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 9\n        }\n      }, parsedMessage, this.state.translatedMessage));\n      return messageText;\n    };\n\n    this.translateMessage = message => {\n      const messageId = message.id;\n      const messageText = message.text;\n      const browserLanguageCode = Translator.getBrowserLanguage().toLowerCase();\n      let translateToLanguage = browserLanguageCode;\n\n      if (browserLanguageCode.indexOf(\"-\") !== -1) {\n        const browserLanguageArray = browserLanguageCode.split(\"-\");\n        translateToLanguage = browserLanguageArray[0];\n      }\n\n      let translatedMessage = \"\";\n      CometChat.callExtension(\"message-translation\", \"POST\", \"v2/translate\", {\n        msgId: messageId,\n        text: messageText,\n        languages: [translateToLanguage]\n      }).then(result => {\n        if (result && result.hasOwnProperty(\"language_original\") && result[\"language_original\"] !== translateToLanguage) {\n          if (result.hasOwnProperty(\"translations\") && result.translations.length) {\n            const messageTranslation = result.translations[0];\n\n            if (messageTranslation.hasOwnProperty(\"message_translated\")) {\n              translatedMessage = `\\n(${messageTranslation[\"message_translated\"]})`;\n            }\n          } else {\n            this.props.actionGenerated(enums.ACTIONS[\"ERROR\"], [], \"SOMETHING_WRONG\");\n          }\n        } else {\n          this.props.actionGenerated(enums.ACTIONS[\"INFO\"], [], \"SAME_LANGUAGE_MESSAGE\");\n        }\n\n        this.setState({\n          translatedMessage: translatedMessage\n        });\n      }).catch(error => this.props.actionGenerated(enums.ACTIONS[\"ERROR\"], [], \"SOMETHING_WRONG\"));\n    };\n\n    this.enableLargerSizeEmojis = () => {\n      this.context.FeatureRestriction.isLargerSizeEmojisEnabled().then(response => {\n        if (response !== this.state.enableLargerSizeEmojis) {\n          this.setState({\n            enableLargerSizeEmojis: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.enableLargerSizeEmojis !== false) {\n          this.setState({\n            enableLargerSizeEmojis: false\n          });\n        }\n      });\n    };\n\n    this.handleMouseHover = () => {\n      this.setState(this.toggleHoverState);\n    };\n\n    this.toggleHoverState = state => {\n      return {\n        isHovering: !state.isHovering\n      };\n    };\n\n    const _message = Object.assign({}, props.message, {\n      messageFrom: this.messageFrom\n    });\n\n    this.state = {\n      message: _message,\n      translatedMessage: \"\",\n      isHovering: false,\n      enableLargerSizeEmojis: false\n    };\n  }\n\n  componentDidMount() {\n    this.enableLargerSizeEmojis();\n  }\n\n  componentDidUpdate(prevProps) {\n    const previousMessageStr = JSON.stringify(prevProps.message);\n    const currentMessageStr = JSON.stringify(this.props.message);\n\n    if (previousMessageStr !== currentMessageStr) {\n      const message = Object.assign({}, this.props.message, {\n        messageFrom: this.messageFrom\n      });\n      this.setState({\n        message: message,\n        translatedMessage: \"\"\n      });\n    }\n\n    this.enableLargerSizeEmojis();\n  }\n\n  render() {\n    let avatar = null,\n        name = null;\n\n    if (this.state.message.receiverType === CometChat.RECEIVER_TYPE.GROUP) {\n      avatar = jsx(\"div\", {\n        css: messageThumbnailStyle(),\n        className: \"message__thumbnail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 9\n        }\n      }, jsx(CometChatAvatar, {\n        user: this.state.message.sender,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }\n      }));\n      name = jsx(\"div\", {\n        css: nameWrapperStyle(avatar),\n        className: \"message__name__wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 9\n        }\n      }, jsx(\"span\", {\n        css: nameStyle(this.context),\n        className: \"message__name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }\n      }, this.state.message.sender.name));\n    }\n\n    let messageText = this.getMessageText(); //linkpreview extensions data\n\n    const linkPreviewData = checkMessageForExtensionsData(this.state.message, \"link-preview\");\n\n    if (linkPreviewData && linkPreviewData.hasOwnProperty(\"links\") && linkPreviewData[\"links\"].length) {\n      messageText = jsx(CometChatLinkPreview, _extends({}, this.props, {\n        message: this.state.message,\n        messageText: messageText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 9\n        }\n      }));\n    } //messagereactions extensions data\n\n\n    let messageReactions = null;\n    const reactionsData = checkMessageForExtensionsData(this.state.message, \"reactions\");\n\n    if (reactionsData) {\n      if (Object.keys(reactionsData).length) {\n        messageReactions = jsx(\"div\", {\n          css: messageReactionsWrapperStyle(),\n          className: \"message__reaction__wrapper\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 11\n          }\n        }, jsx(CometChatMessageReactions, _extends({}, this.props, {\n          message: this.state.message,\n          reaction: reactionsData,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }\n        })));\n      }\n    }\n\n    let toolTipView = null;\n\n    if (this.state.isHovering) {\n      toolTipView = jsx(CometChatMessageActions, _extends({}, this.props, {\n        message: this.state.message,\n        name: name,\n        translateMessage: this.translateMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    return jsx(\"div\", {\n      css: messageContainerStyle(),\n      className: \"receiver__message__container message__text\",\n      onMouseEnter: this.handleMouseHover,\n      onMouseLeave: this.handleMouseHover,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 7\n      }\n    }, jsx(\"div\", {\n      css: messageWrapperStyle(),\n      className: \"message__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }\n    }, avatar, jsx(\"div\", {\n      css: messageDetailStyle(),\n      className: \"message__details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }\n    }, name, toolTipView, jsx(\"div\", {\n      css: messageTxtContainerStyle(),\n      className: \"message__text__container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 13\n      }\n    }, messageText), messageReactions, jsx(\"div\", {\n      css: messageInfoWrapperStyle(),\n      className: \"message__info__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 13\n      }\n    }, jsx(CometChatReadReceipt, _extends({}, this.props, {\n      message: this.state.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 15\n      }\n    })), jsx(CometChatThreadedMessageReplyCount, _extends({}, this.props, {\n      message: this.state.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 15\n      }\n    }))))));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatReceiverTextMessageBubble.contextType = CometChatContext;\nCometChatReceiverTextMessageBubble.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatReceiverTextMessageBubble.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatReceiverTextMessageBubble };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/CometChatReceiverTextMessageBubble/index.js"],"names":["React","jsx","twemoji","ReactHtmlParser","PropTypes","CometChat","CometChatMessageActions","CometChatThreadedMessageReplyCount","CometChatReadReceipt","CometChatLinkPreview","CometChatMessageReactions","CometChatAvatar","CometChatContext","linkify","checkMessageForExtensionsData","enums","Translator","theme","messageContainerStyle","messageWrapperStyle","messageThumbnailStyle","messageDetailStyle","nameWrapperStyle","nameStyle","messageTxtContainerStyle","messageTxtWrapperStyle","messageTxtStyle","messageInfoWrapperStyle","messageReactionsWrapperStyle","CometChatReceiverTextMessageBubble","Component","constructor","props","messageFrom","getMessageText","messageText","state","message","text","xssData","hasOwnProperty","hasXSS","sanitized_text","maskedData","data","sensitive_data","message_masked","profaneData","profanity","message_clean","formattedText","emojiParsedMessage","parse","folder","ext","parsedMessage","decodeEntities","emojiMessage","filter","Object","type","showVariation","enableLargerSizeEmojis","context","translatedMessage","translateMessage","messageId","id","browserLanguageCode","getBrowserLanguage","toLowerCase","translateToLanguage","indexOf","browserLanguageArray","split","callExtension","msgId","languages","then","result","translations","length","messageTranslation","actionGenerated","ACTIONS","setState","catch","error","FeatureRestriction","isLargerSizeEmojisEnabled","response","handleMouseHover","toggleHoverState","isHovering","assign","componentDidMount","componentDidUpdate","prevProps","previousMessageStr","JSON","stringify","currentMessageStr","render","avatar","name","receiverType","RECEIVER_TYPE","GROUP","sender","linkPreviewData","messageReactions","reactionsData","keys","toolTipView","contextType","defaultProps","lang","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport twemoji from \"twemoji\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport {\n  CometChatMessageActions,\n  CometChatThreadedMessageReplyCount,\n  CometChatReadReceipt,\n  CometChatLinkPreview,\n} from \"../\";\nimport { CometChatMessageReactions } from \"../Extensions\";\nimport { CometChatAvatar } from \"../../Shared\";\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport { linkify, checkMessageForExtensionsData } from \"../../../util/common\";\nimport * as enums from \"../../../util/enums.js\";\n\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\n\nimport {\n  messageContainerStyle,\n  messageWrapperStyle,\n  messageThumbnailStyle,\n  messageDetailStyle,\n  nameWrapperStyle,\n  nameStyle,\n  messageTxtContainerStyle,\n  messageTxtWrapperStyle,\n  messageTxtStyle,\n  messageInfoWrapperStyle,\n  messageReactionsWrapperStyle,\n} from \"./style\";\n\nclass CometChatReceiverTextMessageBubble extends React.Component {\n  static contextType = CometChatContext;\n  messageFrom = \"receiver\";\n\n  constructor(props) {\n    super(props);\n\n    const message = Object.assign({}, props.message, {\n      messageFrom: this.messageFrom,\n    });\n    this.state = {\n      message: message,\n      translatedMessage: \"\",\n      isHovering: false,\n      enableLargerSizeEmojis: false,\n    };\n  }\n\n  componentDidMount() {\n    this.enableLargerSizeEmojis();\n  }\n\n  componentDidUpdate(prevProps) {\n    const previousMessageStr = JSON.stringify(prevProps.message);\n    const currentMessageStr = JSON.stringify(this.props.message);\n\n    if (previousMessageStr !== currentMessageStr) {\n      const message = Object.assign({}, this.props.message, {\n        messageFrom: this.messageFrom,\n      });\n      this.setState({ message: message, translatedMessage: \"\" });\n    }\n\n    this.enableLargerSizeEmojis();\n  }\n\n  getMessageText = () => {\n    let messageText = this.state.message.text;\n\n    //xss extensions data\n    const xssData = checkMessageForExtensionsData(\n      this.state.message,\n      \"xss-filter\"\n    );\n    if (\n      xssData &&\n      xssData.hasOwnProperty(\"sanitized_text\") &&\n      xssData.hasOwnProperty(\"hasXSS\") &&\n      xssData.hasXSS === \"yes\"\n    ) {\n      messageText = xssData.sanitized_text;\n    }\n\n    //datamasking extensions data\n    const maskedData = checkMessageForExtensionsData(\n      this.state.message,\n      \"data-masking\"\n    );\n    if (\n      maskedData &&\n      maskedData.hasOwnProperty(\"data\") &&\n      maskedData.data.hasOwnProperty(\"sensitive_data\") &&\n      maskedData.data.hasOwnProperty(\"message_masked\") &&\n      maskedData.data.sensitive_data === \"yes\"\n    ) {\n      messageText = maskedData.data.message_masked;\n    }\n\n    //profanity extensions data\n    const profaneData = checkMessageForExtensionsData(\n      this.state.message,\n      \"profanity-filter\"\n    );\n    if (\n      profaneData &&\n      profaneData.hasOwnProperty(\"profanity\") &&\n      profaneData.hasOwnProperty(\"message_clean\") &&\n      profaneData.profanity === \"yes\"\n    ) {\n      messageText = profaneData.message_clean;\n    }\n\n    const formattedText = linkify(messageText);\n\n    const emojiParsedMessage = twemoji.parse(formattedText, {\n      folder: \"svg\",\n      ext: \".svg\",\n    });\n    const parsedMessage = ReactHtmlParser(emojiParsedMessage, {\n      decodeEntities: false,\n    });\n    const emojiMessage = parsedMessage.filter(\n      (message) => message instanceof Object && message.type === \"img\"\n    );\n\n    let showVariation = true;\n    //if larger size emojis feature is disabled\n    if (this.state.enableLargerSizeEmojis === false) {\n      showVariation = false;\n    }\n\n    messageText = (\n      <div\n        css={messageTxtWrapperStyle(this.context)}\n        className=\"message__txt__wrapper\"\n      >\n        <p\n          css={messageTxtStyle(parsedMessage, emojiMessage, showVariation)}\n          className=\"message__txt\"\n        >\n          {parsedMessage}\n          {this.state.translatedMessage}\n        </p>\n      </div>\n    );\n\n    return messageText;\n  };\n\n  translateMessage = (message) => {\n    const messageId = message.id;\n    const messageText = message.text;\n\n    const browserLanguageCode = Translator.getBrowserLanguage().toLowerCase();\n    let translateToLanguage = browserLanguageCode;\n    if (browserLanguageCode.indexOf(\"-\") !== -1) {\n      const browserLanguageArray = browserLanguageCode.split(\"-\");\n      translateToLanguage = browserLanguageArray[0];\n    }\n\n    let translatedMessage = \"\";\n    CometChat.callExtension(\"message-translation\", \"POST\", \"v2/translate\", {\n      msgId: messageId,\n      text: messageText,\n      languages: [translateToLanguage],\n    })\n      .then((result) => {\n        if (\n          result &&\n          result.hasOwnProperty(\"language_original\") &&\n          result[\"language_original\"] !== translateToLanguage\n        ) {\n          if (\n            result.hasOwnProperty(\"translations\") &&\n            result.translations.length\n          ) {\n            const messageTranslation = result.translations[0];\n            if (messageTranslation.hasOwnProperty(\"message_translated\")) {\n              translatedMessage = `\\n(${messageTranslation[\"message_translated\"]})`;\n            }\n          } else {\n            this.props.actionGenerated(\n              enums.ACTIONS[\"ERROR\"],\n              [],\n              \"SOMETHING_WRONG\"\n            );\n          }\n        } else {\n          this.props.actionGenerated(\n            enums.ACTIONS[\"INFO\"],\n            [],\n            \"SAME_LANGUAGE_MESSAGE\"\n          );\n        }\n\n        this.setState({ translatedMessage: translatedMessage });\n      })\n      .catch((error) =>\n        this.props.actionGenerated(\n          enums.ACTIONS[\"ERROR\"],\n          [],\n          \"SOMETHING_WRONG\"\n        )\n      );\n  };\n\n  enableLargerSizeEmojis = () => {\n    this.context.FeatureRestriction.isLargerSizeEmojisEnabled()\n      .then((response) => {\n        if (response !== this.state.enableLargerSizeEmojis) {\n          this.setState({ enableLargerSizeEmojis: response });\n        }\n      })\n      .catch((error) => {\n        if (this.state.enableLargerSizeEmojis !== false) {\n          this.setState({ enableLargerSizeEmojis: false });\n        }\n      });\n  };\n\n  handleMouseHover = () => {\n    this.setState(this.toggleHoverState);\n  };\n\n  toggleHoverState = (state) => {\n    return {\n      isHovering: !state.isHovering,\n    };\n  };\n\n  render() {\n    let avatar = null,\n      name = null;\n    if (this.state.message.receiverType === CometChat.RECEIVER_TYPE.GROUP) {\n      avatar = (\n        <div css={messageThumbnailStyle()} className=\"message__thumbnail\">\n          <CometChatAvatar user={this.state.message.sender} />\n        </div>\n      );\n\n      name = (\n        <div css={nameWrapperStyle(avatar)} className=\"message__name__wrapper\">\n          <span css={nameStyle(this.context)} className=\"message__name\">\n            {this.state.message.sender.name}\n          </span>\n        </div>\n      );\n    }\n\n    let messageText = this.getMessageText();\n    //linkpreview extensions data\n    const linkPreviewData = checkMessageForExtensionsData(\n      this.state.message,\n      \"link-preview\"\n    );\n    if (\n      linkPreviewData &&\n      linkPreviewData.hasOwnProperty(\"links\") &&\n      linkPreviewData[\"links\"].length\n    ) {\n      messageText = (\n        <CometChatLinkPreview\n          {...this.props}\n          message={this.state.message}\n          messageText={messageText}\n        />\n      );\n    }\n\n    //messagereactions extensions data\n    let messageReactions = null;\n    const reactionsData = checkMessageForExtensionsData(\n      this.state.message,\n      \"reactions\"\n    );\n    if (reactionsData) {\n      if (Object.keys(reactionsData).length) {\n        messageReactions = (\n          <div\n            css={messageReactionsWrapperStyle()}\n            className=\"message__reaction__wrapper\"\n          >\n            <CometChatMessageReactions\n              {...this.props}\n              message={this.state.message}\n              reaction={reactionsData}\n            />\n          </div>\n        );\n      }\n    }\n\n    let toolTipView = null;\n    if (this.state.isHovering) {\n      toolTipView = (\n        <CometChatMessageActions\n          {...this.props}\n          message={this.state.message}\n          name={name}\n          translateMessage={this.translateMessage}\n        />\n      );\n    }\n\n    return (\n      <div\n        css={messageContainerStyle()}\n        className=\"receiver__message__container message__text\"\n        onMouseEnter={this.handleMouseHover}\n        onMouseLeave={this.handleMouseHover}\n      >\n        <div css={messageWrapperStyle()} className=\"message__wrapper\">\n          {avatar}\n          <div css={messageDetailStyle()} className=\"message__details\">\n            {name}\n            {toolTipView}\n            <div\n              css={messageTxtContainerStyle()}\n              className=\"message__text__container\"\n            >\n              {messageText}\n            </div>\n\n            {messageReactions}\n\n            <div\n              css={messageInfoWrapperStyle()}\n              className=\"message__info__wrapper\"\n            >\n              <CometChatReadReceipt\n                {...this.props}\n                message={this.state.message}\n              />\n              <CometChatThreadedMessageReplyCount\n                {...this.props}\n                message={this.state.message}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// Specifies the default values for props:\nCometChatReceiverTextMessageBubble.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n};\n\nCometChatReceiverTextMessageBubble.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport { CometChatReceiverTextMessageBubble };\n"]},"metadata":{},"sourceType":"module"}