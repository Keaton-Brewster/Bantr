{"ast":null,"code":"import _extends from \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/CometChatMessageList/index.js\";\nimport React from \"react\";\nimport dateFormat from \"dateformat\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { MessageListManager } from \"./controller\";\nimport { CometChatSenderTextMessageBubble, CometChatReceiverTextMessageBubble, CometChatSenderImageMessageBubble, CometChatReceiverImageMessageBubble, CometChatSenderFileMessageBubble, CometChatReceiverFileMessageBubble, CometChatSenderAudioMessageBubble, CometChatReceiverAudioMessageBubble, CometChatSenderVideoMessageBubble, CometChatReceiverVideoMessageBubble, CometChatSenderDirectCallBubble, CometChatReceiverDirectCallBubble, CometChatDeleteMessageBubble, CometChatActionMessageBubble } from \"../\";\nimport { CometChatSenderPollMessageBubble, CometChatReceiverPollMessageBubble, CometChatSenderStickerBubble, CometChatReceiverStickerMessageBubble, CometChatSenderDocumentBubble, CometChatReceiverDocumentBubble, CometChatSenderWhiteboardBubble, CometChatReceiverWhiteboardBubble } from \"../Extensions\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { getMessageDate } from \"../../../util/common\";\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { chatListStyle, listWrapperStyle, messageDateContainerStyle, messageDateStyle, decoratorMessageStyle, decoratorMessageTxtStyle } from \"./style\";\n\nclass CometChatMessageList extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.loggedInUser = null;\n    this.lastScrollTop = 0;\n    this.times = 0;\n    this.item = {};\n\n    this.enableMessageReaction = () => {\n      /**\n       * If reacting to messages feature is disabled\n       */\n      this.context.FeatureRestriction.isReactionsEnabled().then(response => {\n        if (response !== this.state.enableMessageReaction) {\n          this.setState({\n            enableMessageReaction: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.enableMessageReaction !== false) {\n          this.setState({\n            enableMessageReaction: false\n          });\n        }\n      });\n    };\n\n    this.scrollToBottom = (scrollHeight = 0) => {\n      if (this.messagesEnd) {\n        this.messagesEnd.scrollTop = this.messagesEnd.scrollHeight - scrollHeight;\n      }\n    };\n\n    this.messageHandler = (item, actionGenerated = enums.ACTIONS[\"MESSAGES_FETCHED\"]) => {\n      this.fetchMessages().then(messageList => {\n        if (messageList.length === 0) {\n          this.setState({\n            decoratorMessage: Translator.translate(\"NO_MESSAGES_FOUND\", this.props.lang)\n          });\n        } else {\n          this.setState({\n            decoratorMessage: \"\"\n          });\n        } //updating messagecount variable\n\n\n        this.messageCount = messageList.length;\n        messageList.forEach(message => {\n          //if the sender of the message is not the loggedin user, mark the message as read.\n          if (message.getSender().getUid() !== this.loggedInUser.getUid() && message.hasOwnProperty(\"readAt\") === false) {\n            if (message.getReceiverType() === CometChat.RECEIVER_TYPE.USER) {\n              CometChat.markAsRead(message.getId().toString(), message.getSender().getUid(), message.getReceiverType());\n              this.props.actionGenerated(enums.ACTIONS[\"MESSAGE_READ\"], message);\n            } else if (message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP) {\n              CometChat.markAsRead(message.getId().toString(), message.getReceiverId(), message.getReceiverType());\n              this.props.actionGenerated(enums.ACTIONS[\"MESSAGE_READ\"], message);\n            }\n          }\n        });\n        this.lastScrollTop = this.messagesEnd.scrollHeight; //abort(don't return messagelist), when the chat window changes\n\n        if (item.hasOwnProperty(\"uid\") && this.context.item.hasOwnProperty(\"uid\") && item.uid === this.context.item.uid || item.hasOwnProperty(\"guid\") && this.context.item.hasOwnProperty(\"guid\") && item.guid === this.context.item.guid) {\n          this.props.actionGenerated(actionGenerated, messageList);\n        }\n      }).catch(error => {\n        if (this.props.messages.length === 0) {\n          this.setState({\n            decoratorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n          });\n        }\n\n        if (error && error.hasOwnProperty(\"code\") && error.code === \"ERR_GUID_NOT_FOUND\") {//this.context.setDeletedGroupId(this.context.item.guid);\n        }\n      });\n    };\n\n    this.fetchMessages = () => {\n      const promise = new Promise((resolve, reject) => {\n        this.MessageListManager.fetchPreviousMessages().then(messageList => {\n          resolve(messageList);\n        }).catch(error => reject(error));\n      });\n      return promise;\n    };\n\n    this.messageUpdated = (key, message, group, options) => {\n      switch (key) {\n        case enums.MESSAGE_DELETED:\n          this.onMessageDeleted(message);\n          break;\n\n        case enums.MESSAGE_EDITED:\n          this.onMessageEdited(message);\n          break;\n\n        case enums.MESSAGE_DELIVERED:\n        case enums.MESSAGE_READ:\n          this.onMessageReadAndDelivered(message);\n          break;\n\n        case enums.TEXT_MESSAGE_RECEIVED:\n        case enums.MEDIA_MESSAGE_RECEIVED:\n          this.onMessageReceived(message);\n          break;\n\n        case enums.CUSTOM_MESSAGE_RECEIVED:\n          this.onCustomMessageReceived(message);\n          break;\n\n        case enums.GROUP_MEMBER_SCOPE_CHANGED:\n        case enums.GROUP_MEMBER_JOINED:\n        case enums.GROUP_MEMBER_LEFT:\n        case enums.GROUP_MEMBER_ADDED:\n        case enums.GROUP_MEMBER_KICKED:\n        case enums.GROUP_MEMBER_BANNED:\n        case enums.GROUP_MEMBER_UNBANNED:\n          this.onGroupUpdated(key, message, group, options);\n          break;\n\n        case enums.INCOMING_CALL_RECEIVED:\n        case enums.INCOMING_CALL_CANCELLED:\n        case enums.OUTGOING_CALL_ACCEPTED:\n        case enums.OUTGOING_CALL_REJECTED:\n          this.onCallUpdated(key, message);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onMessageDeleted = message => {\n      if (this.context.type === CometChat.RECEIVER_TYPE.GROUP && message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP && message.getReceiverId() === this.context.item.guid) {\n        this.props.actionGenerated(enums.ACTIONS[\"ON_MESSAGE_DELETED\"], [message]);\n      } else if (this.context.type === CometChat.RECEIVER_TYPE.USER && message.getReceiverType() === CometChat.RECEIVER_TYPE.USER && message.getSender().uid === this.context.item.uid) {\n        this.props.actionGenerated(enums.ACTIONS[\"ON_MESSAGE_DELETED\"], [message]);\n      }\n    };\n\n    this.onMessageEdited = message => {\n      const messageList = [...this.props.messages];\n\n      const updateEditedMessage = message => {\n        let messageKey = messageList.findIndex(m => m.id === message.id);\n\n        if (messageKey > -1) {\n          const messageObj = messageList[messageKey];\n          const newMessageObj = Object.assign({}, messageObj, message);\n          messageList.splice(messageKey, 1, newMessageObj);\n          this.props.actionGenerated(enums.ACTIONS[\"ON_MESSAGE_EDITED\"], messageList, newMessageObj);\n        }\n      };\n\n      if (this.context.type === CometChat.RECEIVER_TYPE.GROUP && message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP && message.getReceiverId() === this.context.item.guid) {\n        updateEditedMessage(message);\n      } else if (this.context.type === CometChat.RECEIVER_TYPE.USER && message.getReceiverType() === CometChat.RECEIVER_TYPE.USER && this.loggedInUser.uid === message.getReceiverId() && message.getSender().uid === this.context.item.uid) {\n        updateEditedMessage(message);\n      } else if (this.context.type === CometChat.RECEIVER_TYPE.USER && message.getReceiverType() === CometChat.RECEIVER_TYPE.USER && this.loggedInUser.uid === message.getSender().uid && message.getReceiverId() === this.context.item.uid) {\n        updateEditedMessage(message);\n      }\n    };\n\n    this.onMessageReadAndDelivered = message => {\n      //read receipts\n      if (message.getReceiverType() === CometChat.RECEIVER_TYPE.USER && message.getSender().getUid() === this.context.item.uid && message.getReceiver() === this.loggedInUser.uid) {\n        let messageList = [...this.props.messages];\n\n        if (message.getReceiptType() === \"delivery\") {\n          //search for message\n          let messageKey = messageList.findIndex(m => m.id === message.messageId);\n\n          if (messageKey > -1) {\n            let messageObj = messageList[messageKey];\n            let newMessageObj = Object.assign({}, messageObj, {\n              deliveredAt: message.getDeliveredAt()\n            });\n            messageList.splice(messageKey, 1, newMessageObj);\n            this.props.actionGenerated(enums.ACTIONS[\"ON_MESSAGE_READ_DELIVERED\"], messageList);\n          }\n        } else if (message.getReceiptType() === \"read\") {\n          //search for message\n          let messageKey = messageList.findIndex(m => m.id === message.messageId);\n\n          if (messageKey > -1) {\n            let messageObj = { ...messageList[messageKey]\n            };\n            let newMessageObj = Object.assign({}, messageObj, {\n              readAt: message.getReadAt()\n            });\n            messageList.splice(messageKey, 1, newMessageObj);\n            this.props.actionGenerated(enums.ACTIONS[\"ON_MESSAGE_READ_DELIVERED\"], messageList);\n          }\n        }\n      } else if (message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP && message.getReceiver() === this.context.item.guid) {//not implemented\n      }\n    };\n\n    this.reInitializeMessageBuilder = () => {\n      if (this.props.hasOwnProperty(\"parentMessageId\") === false) {\n        this.messageCount = 0;\n      }\n\n      this.props.actionGenerated(enums.ACTIONS[\"REFRESHING_MESSAGES\"], []);\n      this.setState({\n        decoratorMessage: Translator.translate(\"LOADING\", this.props.lang)\n      });\n      this.MessageListManager.removeListeners();\n\n      if (this.props.parentMessageId) {\n        this.MessageListManager = new MessageListManager(this.context, this.context.item, this.context.type, this.props.parentMessageId);\n      } else {\n        this.MessageListManager = new MessageListManager(this.context, this.context.item, this.context.type);\n      }\n\n      this.MessageListManager.initializeMessageRequest().then(() => {\n        this.messageHandler(this.context.item, enums.ACTIONS[\"MESSAGES_REFRESHED\"]);\n        this.MessageListManager.attachListeners(this.messageUpdated);\n      });\n    };\n\n    this.markMessageAsRead = (message, type) => {\n      if (message.hasOwnProperty(\"readAt\") === false) {\n        if (type === CometChat.ACTION_TYPE.TYPE_USER) {\n          CometChat.markAsRead(message.getId().toString(), message.getSender().uid, message.getReceiverType());\n        } else if (type === CometChat.ACTION_TYPE.TYPE_GROUP) {\n          CometChat.markAsRead(message.getId().toString(), message.getReceiverId(), message.getReceiverType());\n        }\n      }\n    };\n\n    this.onMessageReceived = message => {\n      /**\n       * message receiver is chat window group\n       */\n      if (this.context.type === CometChat.RECEIVER_TYPE.GROUP && message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP && message.getReceiverId() === this.context.item.guid) {\n        this.messageReceivedHandler(message, CometChat.RECEIVER_TYPE.GROUP);\n      } else if (this.context.type === CometChat.RECEIVER_TYPE.USER && message.getReceiverType() === CometChat.RECEIVER_TYPE.USER) {\n        var _this$loggedInUser, _this$loggedInUser2;\n\n        /**\n         * If the message sender is chat window user and message receiver is logged-in user\n         * OR\n         * If the message sender is logged-in user and message receiver is chat window user\n         */\n        if (message.getSender().uid === this.context.item.uid && message.getReceiverId() === ((_this$loggedInUser = this.loggedInUser) === null || _this$loggedInUser === void 0 ? void 0 : _this$loggedInUser.uid) || message.getSender().uid === ((_this$loggedInUser2 = this.loggedInUser) === null || _this$loggedInUser2 === void 0 ? void 0 : _this$loggedInUser2.uid) && message.getReceiverId() === this.context.item.uid) {\n          this.messageReceivedHandler(message, CometChat.RECEIVER_TYPE.USER);\n        }\n      }\n    };\n\n    this.messageReceivedHandler = (message, type) => {\n      //handling dom lag - increment count only for main message list\n      if (message.hasOwnProperty(\"parentMessageId\") === false && this.props.hasOwnProperty(\"parentMessageId\") === false) {\n        ++this.messageCount; //if the user has not scrolled in chat window(scroll is at the bottom of the chat window)\n\n        if (this.messagesEnd.scrollHeight - this.messagesEnd.scrollTop - this.messagesEnd.clientHeight < 20) {\n          if (this.messageCount > enums.CONSTANTS[\"MAX_MESSAGE_COUNT\"]) {\n            this.reInitializeMessageBuilder();\n          } else {\n            this.markMessageAsRead(message, type);\n            this.props.actionGenerated(enums.ACTIONS[\"MESSAGE_RECEIVED\"], [message]);\n          }\n        } else {\n          //if the user has scrolled up in chat window\n          this.props.actionGenerated(enums.ACTIONS[\"NEW_MESSAGES\"], [message]);\n        }\n      } else if (message.hasOwnProperty(\"parentMessageId\") === true && this.props.hasOwnProperty(\"parentMessageId\") === true) {\n        if (message.parentMessageId === this.props.parentMessageId) {\n          this.markMessageAsRead(message, type);\n        }\n\n        this.props.actionGenerated(enums.ACTIONS[\"MESSAGE_RECEIVED\"], [message]);\n      } else {\n        this.props.actionGenerated(enums.ACTIONS[\"MESSAGE_RECEIVED\"], [message]);\n      }\n    };\n\n    this.onCustomMessageReceived = message => {\n      //new messages\n      if (this.context.type === CometChat.RECEIVER_TYPE.GROUP && message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP && this.loggedInUser.uid === message.getSender().uid && message.getReceiverId() === this.context.item.guid && (message.type === enums.CUSTOM_TYPE_POLL || message.type === enums.CUSTOM_TYPE_DOCUMENT || message.type === enums.CUSTOM_TYPE_WHITEBOARD)) {\n        //showing polls, collaborative document and whiteboard for sender (custom message received listener for sender)\n        this.props.actionGenerated(enums.ACTIONS[\"CUSTOM_MESSAGE_RECEIVED\"], [message]);\n      } else if (this.context.type === CometChat.RECEIVER_TYPE.GROUP && message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP && message.getReceiverId() === this.context.item.guid) {\n        this.customMessageReceivedHandler(message, CometChat.RECEIVER_TYPE.GROUP);\n      } else if (this.context.type === CometChat.RECEIVER_TYPE.USER && message.getReceiverType() === CometChat.RECEIVER_TYPE.USER && message.getSender().uid === this.context.item.uid) {\n        this.customMessageReceivedHandler(message, CometChat.RECEIVER_TYPE.USER);\n      } else if (this.context.type === CometChat.RECEIVER_TYPE.USER && message.getReceiverType() === CometChat.RECEIVER_TYPE.USER && this.loggedInUser.uid === message.getSender().uid && message.getReceiverId() === this.context.item.uid && (message.type === enums.CUSTOM_TYPE_POLL || message.type === enums.CUSTOM_TYPE_DOCUMENT || message.type === enums.CUSTOM_TYPE_WHITEBOARD)) {\n        //showing polls, collaborative document and whiteboard for sender (custom message received listener for sender)\n        this.props.actionGenerated(enums.ACTIONS[\"CUSTOM_MESSAGE_RECEIVED\"], [message]);\n      }\n    };\n\n    this.customMessageReceivedHandler = (message, type) => {\n      //handling dom lag - increment count only for main message list\n      if (message.hasOwnProperty(\"parentMessageId\") === false && this.props.hasOwnProperty(\"parentMessageId\") === false) {\n        ++this.messageCount; //if the user has not scrolled in chat window(scroll is at the bottom of the chat window)\n\n        if (this.messagesEnd.scrollHeight - this.messagesEnd.scrollTop === this.messagesEnd.clientHeight) {\n          if (this.messageCount > enums.CONSTANTS[\"MAX_MESSAGE_COUNT\"]) {\n            this.reInitializeMessageBuilder();\n          } else {\n            this.markMessageAsRead(message, type);\n            this.props.actionGenerated(enums.ACTIONS[\"CUSTOM_MESSAGE_RECEIVED\"], [message]);\n          }\n        } else {\n          //if the user has scrolled in chat window\n          this.props.actionGenerated(enums.ACTIONS[\"NEW_MESSAGES\"], [message]);\n        }\n      } else if (message.hasOwnProperty(\"parentMessageId\") === true && this.props.hasOwnProperty(\"parentMessageId\") === true) {\n        if (message.parentMessageId === this.props.parentMessageId) {\n          this.markMessageAsRead(message, type);\n        }\n\n        this.props.actionGenerated(enums.ACTIONS[\"CUSTOM_MESSAGE_RECEIVED\"], [message]);\n      } else {\n        this.props.actionGenerated(enums.ACTIONS[\"CUSTOM_MESSAGE_RECEIVED\"], [message]);\n      }\n    };\n\n    this.onCallUpdated = (key, message) => {\n      if (this.context.type === CometChat.RECEIVER_TYPE.GROUP && message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP && message.getReceiverId() === this.context.item.guid) {\n        this.props.actionGenerated(key, message);\n      } else if (this.context.type === CometChat.RECEIVER_TYPE.USER && message.getReceiverType() === CometChat.RECEIVER_TYPE.USER && message.getSender().uid === this.context.item.uid) {\n        this.props.actionGenerated(key, message);\n      }\n    };\n\n    this.onGroupUpdated = (key, message, group, options) => {\n      if (this.context.type === CometChat.RECEIVER_TYPE.GROUP && message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP && message.getReceiverId() === this.context.item.guid) {\n        this.props.actionGenerated(key, message, null, group, options);\n      }\n    };\n\n    this.handleScroll = e => {\n      const scrollTop = e.currentTarget.scrollTop;\n      const scrollHeight = e.currentTarget.scrollHeight;\n      const clientHeight = e.currentTarget.clientHeight;\n      this.lastScrollTop = scrollHeight - scrollTop;\n\n      if (this.lastScrollTop === clientHeight) {\n        this.props.actionGenerated(enums.ACTIONS[\"CLEAR_UNREAD_MESSAGES\"]);\n      }\n\n      const top = Math.round(scrollTop) === 0;\n\n      if (top && this.props.messages.length) {\n        this.messageHandler(this.context.item);\n      }\n    };\n\n    this.getSenderMessageComponent = (message, key) => {\n      let component;\n\n      if (message.hasOwnProperty(\"deletedAt\")) {\n        component = jsx(CometChatDeleteMessageBubble, _extends({\n          key: key,\n          message: message,\n          messageOf: \"sender\"\n        }, this.props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 735,\n            columnNumber: 9\n          }\n        }));\n      } else {\n        switch (message.type) {\n          case CometChat.MESSAGE_TYPE.TEXT:\n            component = jsx(CometChatSenderTextMessageBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 746,\n                columnNumber: 13\n              }\n            }));\n            break;\n\n          case CometChat.MESSAGE_TYPE.IMAGE:\n            component = jsx(CometChatSenderImageMessageBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 757,\n                columnNumber: 13\n              }\n            }));\n            break;\n\n          case CometChat.MESSAGE_TYPE.FILE:\n            component = jsx(CometChatSenderFileMessageBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 768,\n                columnNumber: 13\n              }\n            }));\n            break;\n\n          case CometChat.MESSAGE_TYPE.VIDEO:\n            component = jsx(CometChatSenderVideoMessageBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 779,\n                columnNumber: 13\n              }\n            }));\n            break;\n\n          case CometChat.MESSAGE_TYPE.AUDIO:\n            component = jsx(CometChatSenderAudioMessageBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 790,\n                columnNumber: 13\n              }\n            }));\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return component;\n    };\n\n    this.getReceiverMessageComponent = (message, key) => {\n      let component;\n\n      if (message.hasOwnProperty(\"deletedAt\")) {\n        component = jsx(CometChatDeleteMessageBubble, {\n          key: key,\n          message: message,\n          messageOf: \"receiver\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 812,\n            columnNumber: 9\n          }\n        });\n      } else {\n        switch (message.type) {\n          case \"message\":\n          case CometChat.MESSAGE_TYPE.TEXT:\n            component = message.text ? jsx(CometChatReceiverTextMessageBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 823,\n                columnNumber: 13\n              }\n            })) : null;\n            break;\n\n          case CometChat.MESSAGE_TYPE.IMAGE:\n            component = message.data.url ? jsx(CometChatReceiverImageMessageBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 834,\n                columnNumber: 13\n              }\n            })) : null;\n            break;\n\n          case CometChat.MESSAGE_TYPE.FILE:\n            component = message.data.attachments ? jsx(CometChatReceiverFileMessageBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 845,\n                columnNumber: 13\n              }\n            })) : null;\n            break;\n\n          case CometChat.MESSAGE_TYPE.AUDIO:\n            component = message.data.url ? jsx(CometChatReceiverAudioMessageBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 856,\n                columnNumber: 13\n              }\n            })) : null;\n            break;\n\n          case CometChat.MESSAGE_TYPE.VIDEO:\n            component = message.data.url ? jsx(CometChatReceiverVideoMessageBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 867,\n                columnNumber: 13\n              }\n            })) : null;\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return component;\n    };\n\n    this.getSenderCustomMessageComponent = (message, key) => {\n      let component;\n\n      if (message.hasOwnProperty(\"deletedAt\")) {\n        component = jsx(CometChatDeleteMessageBubble, _extends({\n          key: key,\n          message: message,\n          messageOf: \"sender\"\n        }, this.props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 887,\n            columnNumber: 9\n          }\n        }));\n      } else {\n        switch (message.type) {\n          case enums.CUSTOM_TYPE_POLL:\n            component = jsx(CometChatSenderPollMessageBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 898,\n                columnNumber: 13\n              }\n            }));\n            break;\n\n          case enums.CUSTOM_TYPE_STICKER:\n            component = jsx(CometChatSenderStickerBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 909,\n                columnNumber: 13\n              }\n            }));\n            break;\n\n          case enums.CUSTOM_TYPE_DOCUMENT:\n            component = jsx(CometChatSenderDocumentBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 920,\n                columnNumber: 13\n              }\n            }));\n            break;\n\n          case enums.CUSTOM_TYPE_WHITEBOARD:\n            component = jsx(CometChatSenderWhiteboardBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 931,\n                columnNumber: 13\n              }\n            }));\n            break;\n\n          case enums.CUSTOM_TYPE_MEETING:\n            component = jsx(CometChatSenderDirectCallBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 942,\n                columnNumber: 13\n              }\n            }));\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return component;\n    };\n\n    this.getReceiverCustomMessageComponent = (message, key) => {\n      let component;\n\n      if (message.hasOwnProperty(\"deletedAt\")) {\n        component = jsx(CometChatDeleteMessageBubble, _extends({\n          key: key,\n          message: message,\n          messageOf: \"receiver\"\n        }, this.props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 963,\n            columnNumber: 9\n          }\n        }));\n      } else {\n        switch (message.type) {\n          case enums.CUSTOM_TYPE_POLL:\n            component = jsx(CometChatReceiverPollMessageBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 974,\n                columnNumber: 13\n              }\n            }));\n            break;\n\n          case enums.CUSTOM_TYPE_STICKER:\n            component = jsx(CometChatReceiverStickerMessageBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 985,\n                columnNumber: 13\n              }\n            }));\n            break;\n\n          case enums.CUSTOM_TYPE_DOCUMENT:\n            component = jsx(CometChatReceiverDocumentBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 996,\n                columnNumber: 13\n              }\n            }));\n            break;\n\n          case enums.CUSTOM_TYPE_WHITEBOARD:\n            component = jsx(CometChatReceiverWhiteboardBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1007,\n                columnNumber: 13\n              }\n            }));\n            break;\n\n          case enums.CUSTOM_TYPE_MEETING:\n            component = jsx(CometChatReceiverDirectCallBubble, _extends({\n              loggedInUser: this.loggedInUser,\n              key: key,\n              message: message\n            }, this.props, {\n              enableMessageReaction: this.state.enableMessageReaction,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1018,\n                columnNumber: 13\n              }\n            }));\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return component;\n    };\n\n    this.getActionMessageComponent = (message, key) => {\n      return jsx(CometChatActionMessageBubble, _extends({\n        loggedInUser: this.loggedInUser,\n        key: key,\n        message: message\n      }, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1037,\n          columnNumber: 7\n        }\n      }));\n    };\n\n    this.getComponent = (message, key) => {\n      let component;\n\n      switch (message.category) {\n        case CometChat.CATEGORY_ACTION:\n        case CometChat.CATEGORY_CALL:\n          component = this.getActionMessageComponent(message, key);\n          break;\n\n        case CometChat.CATEGORY_MESSAGE:\n          if (this.loggedInUser.uid === message.sender.uid) {\n            component = this.getSenderMessageComponent(message, key);\n          } else {\n            component = this.getReceiverMessageComponent(message, key);\n          }\n\n          break;\n\n        case CometChat.CATEGORY_CUSTOM:\n          if (this.loggedInUser.uid === message.sender.uid) {\n            component = this.getSenderCustomMessageComponent(message, key);\n          } else {\n            component = this.getReceiverCustomMessageComponent(message, key);\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      return component;\n    };\n\n    this.state = {\n      onItemClick: null,\n      enableMessageReaction: false,\n      decoratorMessage: Translator.translate(\"LOADING\", this.props.lang)\n    };\n    this.messagesEnd = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    CometChat.getLoggedinUser().then(user => this.loggedInUser = user).catch(error => this.props.actionGenerated(enums.ACTIONS[\"ERROR\"], [], \"SOMETHING_WRONG\"));\n\n    if (Object.keys(this.context.item).length === 0 && this.context.type.trim().length === 0) {\n      return false;\n    }\n\n    this.item = this.context.type === CometChat.ACTION_TYPE.TYPE_USER || CometChat.ACTION_TYPE.TYPE_GROUP ? this.context.item : {};\n\n    if (this.props.parentMessageId) {\n      this.MessageListManager = new MessageListManager(this.context, this.context.item, this.context.type, this.props.parentMessageId);\n    } else {\n      this.MessageListManager = new MessageListManager(this.context, this.context.item, this.context.type);\n    }\n\n    this.MessageListManager.initializeMessageRequest().then(() => {\n      this.messageHandler(this.context.item);\n      this.MessageListManager.attachListeners(this.messageUpdated);\n    });\n    this.enableMessageReaction();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const ifChatWindowChanged = () => {\n      let output = false;\n\n      if (this.context.type === CometChat.ACTION_TYPE.TYPE_USER && this.context.item.uid !== this.item.uid) {\n        output = true;\n      } else if (this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP && this.context.item.guid !== this.item.guid) {\n        output = true;\n      } else if (prevProps.parentMessageId !== this.props.parentMessageId) {\n        output = true;\n      }\n\n      return output;\n    };\n\n    if (ifChatWindowChanged() === true) {\n      var _this$MessageListMana;\n\n      this.messageCount = 0;\n      this.setState({\n        decoratorMessage: Translator.translate(\"LOADING\", this.props.lang)\n      });\n      (_this$MessageListMana = this.MessageListManager) === null || _this$MessageListMana === void 0 ? void 0 : _this$MessageListMana.removeListeners();\n\n      if (this.props.parentMessageId) {\n        this.MessageListManager = new MessageListManager(this.context, this.context.item, this.context.type, this.props.parentMessageId);\n      } else {\n        this.MessageListManager = new MessageListManager(this.context, this.context.item, this.context.type);\n      }\n\n      this.MessageListManager.initializeMessageRequest().then(() => {\n        this.messageHandler(this.context.item);\n        this.MessageListManager.attachListeners(this.messageUpdated);\n      });\n    }\n\n    const previousMessageStr = JSON.stringify(prevProps.messages);\n    const currentMessageStr = JSON.stringify(this.props.messages);\n\n    if (previousMessageStr !== currentMessageStr) {\n      if (this.props.scrollToBottom) {\n        this.scrollToBottom();\n      } else {\n        this.scrollToBottom(this.lastScrollTop);\n      }\n    }\n\n    this.item = this.context.type === CometChat.ACTION_TYPE.TYPE_USER || CometChat.ACTION_TYPE.TYPE_GROUP ? this.context.item : {};\n\n    if (this.context.leftGroupId.trim().length) {\n      this.item = {};\n    }\n\n    this.enableMessageReaction();\n  }\n\n  componentWillUnmount() {\n    this.MessageListManager.removeListeners();\n    this.MessageListManager = null;\n  }\n\n  render() {\n    let messageContainer = null;\n\n    if (this.state.decoratorMessage.length !== 0 && this.props.messages.length === 0) {\n      messageContainer = jsx(\"div\", {\n        css: decoratorMessageStyle(),\n        className: \"messages__decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1082,\n          columnNumber: 9\n        }\n      }, jsx(\"p\", {\n        css: decoratorMessageTxtStyle(this.context),\n        className: \"decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1086,\n          columnNumber: 11\n        }\n      }, this.state.decoratorMessage));\n    }\n\n    let cDate = null;\n    const messages = this.props.messages.map((message, key) => {\n      let dateSeparator = null;\n      const dateField = message._composedAt || message.sentAt;\n      const messageDate = message.sentAt * 1000;\n      const messageSentDate = dateFormat(messageDate, \"dd/mm/yyyy\");\n\n      if (cDate !== messageSentDate) {\n        dateSeparator = jsx(\"div\", {\n          css: messageDateContainerStyle(),\n          className: \"message__date\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1107,\n            columnNumber: 11\n          }\n        }, jsx(\"span\", {\n          css: messageDateStyle(this.context),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1108,\n            columnNumber: 13\n          }\n        }, getMessageDate(dateField, this.props.lang)));\n      }\n\n      cDate = messageSentDate;\n      return jsx(React.Fragment, {\n        key: key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1117,\n          columnNumber: 9\n        }\n      }, dateSeparator, this.getComponent(message, key));\n    });\n    return jsx(\"div\", {\n      className: \"chat__list\",\n      css: chatListStyle(this.context),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1125,\n        columnNumber: 7\n      }\n    }, messageContainer, jsx(\"div\", {\n      className: \"list__wrapper\",\n      css: listWrapperStyle(),\n      ref: el => {\n        this.messagesEnd = el;\n      },\n      onScroll: this.handleScroll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1127,\n        columnNumber: 9\n      }\n    }, messages));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatMessageList.contextType = CometChatContext;\nCometChatMessageList.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatMessageList.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatMessageList };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/CometChatMessageList/index.js"],"names":["React","dateFormat","jsx","PropTypes","CometChat","MessageListManager","CometChatSenderTextMessageBubble","CometChatReceiverTextMessageBubble","CometChatSenderImageMessageBubble","CometChatReceiverImageMessageBubble","CometChatSenderFileMessageBubble","CometChatReceiverFileMessageBubble","CometChatSenderAudioMessageBubble","CometChatReceiverAudioMessageBubble","CometChatSenderVideoMessageBubble","CometChatReceiverVideoMessageBubble","CometChatSenderDirectCallBubble","CometChatReceiverDirectCallBubble","CometChatDeleteMessageBubble","CometChatActionMessageBubble","CometChatSenderPollMessageBubble","CometChatReceiverPollMessageBubble","CometChatSenderStickerBubble","CometChatReceiverStickerMessageBubble","CometChatSenderDocumentBubble","CometChatReceiverDocumentBubble","CometChatSenderWhiteboardBubble","CometChatReceiverWhiteboardBubble","CometChatContext","enums","getMessageDate","theme","Translator","chatListStyle","listWrapperStyle","messageDateContainerStyle","messageDateStyle","decoratorMessageStyle","decoratorMessageTxtStyle","CometChatMessageList","PureComponent","constructor","props","loggedInUser","lastScrollTop","times","item","enableMessageReaction","context","FeatureRestriction","isReactionsEnabled","then","response","state","setState","catch","error","scrollToBottom","scrollHeight","messagesEnd","scrollTop","messageHandler","actionGenerated","ACTIONS","fetchMessages","messageList","length","decoratorMessage","translate","lang","messageCount","forEach","message","getSender","getUid","hasOwnProperty","getReceiverType","RECEIVER_TYPE","USER","markAsRead","getId","toString","GROUP","getReceiverId","uid","guid","messages","code","promise","Promise","resolve","reject","fetchPreviousMessages","messageUpdated","key","group","options","MESSAGE_DELETED","onMessageDeleted","MESSAGE_EDITED","onMessageEdited","MESSAGE_DELIVERED","MESSAGE_READ","onMessageReadAndDelivered","TEXT_MESSAGE_RECEIVED","MEDIA_MESSAGE_RECEIVED","onMessageReceived","CUSTOM_MESSAGE_RECEIVED","onCustomMessageReceived","GROUP_MEMBER_SCOPE_CHANGED","GROUP_MEMBER_JOINED","GROUP_MEMBER_LEFT","GROUP_MEMBER_ADDED","GROUP_MEMBER_KICKED","GROUP_MEMBER_BANNED","GROUP_MEMBER_UNBANNED","onGroupUpdated","INCOMING_CALL_RECEIVED","INCOMING_CALL_CANCELLED","OUTGOING_CALL_ACCEPTED","OUTGOING_CALL_REJECTED","onCallUpdated","type","updateEditedMessage","messageKey","findIndex","m","id","messageObj","newMessageObj","Object","assign","splice","getReceiver","getReceiptType","messageId","deliveredAt","getDeliveredAt","readAt","getReadAt","reInitializeMessageBuilder","removeListeners","parentMessageId","initializeMessageRequest","attachListeners","markMessageAsRead","ACTION_TYPE","TYPE_USER","TYPE_GROUP","messageReceivedHandler","clientHeight","CONSTANTS","CUSTOM_TYPE_POLL","CUSTOM_TYPE_DOCUMENT","CUSTOM_TYPE_WHITEBOARD","customMessageReceivedHandler","handleScroll","e","currentTarget","top","Math","round","getSenderMessageComponent","component","MESSAGE_TYPE","TEXT","IMAGE","FILE","VIDEO","AUDIO","getReceiverMessageComponent","text","data","url","attachments","getSenderCustomMessageComponent","CUSTOM_TYPE_STICKER","CUSTOM_TYPE_MEETING","getReceiverCustomMessageComponent","getActionMessageComponent","getComponent","category","CATEGORY_ACTION","CATEGORY_CALL","CATEGORY_MESSAGE","sender","CATEGORY_CUSTOM","onItemClick","createRef","componentDidMount","getLoggedinUser","user","keys","trim","componentDidUpdate","prevProps","prevState","ifChatWindowChanged","output","previousMessageStr","JSON","stringify","currentMessageStr","leftGroupId","componentWillUnmount","render","messageContainer","cDate","map","dateSeparator","dateField","_composedAt","sentAt","messageDate","messageSentDate","el","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport dateFormat from \"dateformat\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { MessageListManager } from \"./controller\";\n\nimport {\n  CometChatSenderTextMessageBubble,\n  CometChatReceiverTextMessageBubble,\n  CometChatSenderImageMessageBubble,\n  CometChatReceiverImageMessageBubble,\n  CometChatSenderFileMessageBubble,\n  CometChatReceiverFileMessageBubble,\n  CometChatSenderAudioMessageBubble,\n  CometChatReceiverAudioMessageBubble,\n  CometChatSenderVideoMessageBubble,\n  CometChatReceiverVideoMessageBubble,\n  CometChatSenderDirectCallBubble,\n  CometChatReceiverDirectCallBubble,\n  CometChatDeleteMessageBubble,\n  CometChatActionMessageBubble,\n} from \"../\";\n\nimport {\n  CometChatSenderPollMessageBubble,\n  CometChatReceiverPollMessageBubble,\n  CometChatSenderStickerBubble,\n  CometChatReceiverStickerMessageBubble,\n  CometChatSenderDocumentBubble,\n  CometChatReceiverDocumentBubble,\n  CometChatSenderWhiteboardBubble,\n  CometChatReceiverWhiteboardBubble,\n} from \"../Extensions\";\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { getMessageDate } from \"../../../util/common\";\n\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\n\nimport {\n  chatListStyle,\n  listWrapperStyle,\n  messageDateContainerStyle,\n  messageDateStyle,\n  decoratorMessageStyle,\n  decoratorMessageTxtStyle,\n} from \"./style\";\n\nclass CometChatMessageList extends React.PureComponent {\n  loggedInUser = null;\n  lastScrollTop = 0;\n  times = 0;\n  item = {};\n\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      onItemClick: null,\n      enableMessageReaction: false,\n      decoratorMessage: Translator.translate(\"LOADING\", this.props.lang),\n    };\n\n    this.messagesEnd = React.createRef();\n  }\n\n  componentDidMount() {\n    CometChat.getLoggedinUser()\n      .then((user) => (this.loggedInUser = user))\n      .catch((error) =>\n        this.props.actionGenerated(\n          enums.ACTIONS[\"ERROR\"],\n          [],\n          \"SOMETHING_WRONG\"\n        )\n      );\n\n    if (\n      Object.keys(this.context.item).length === 0 &&\n      this.context.type.trim().length === 0\n    ) {\n      return false;\n    }\n\n    this.item =\n      this.context.type === CometChat.ACTION_TYPE.TYPE_USER ||\n      CometChat.ACTION_TYPE.TYPE_GROUP\n        ? this.context.item\n        : {};\n\n    if (this.props.parentMessageId) {\n      this.MessageListManager = new MessageListManager(\n        this.context,\n        this.context.item,\n        this.context.type,\n        this.props.parentMessageId\n      );\n    } else {\n      this.MessageListManager = new MessageListManager(\n        this.context,\n        this.context.item,\n        this.context.type\n      );\n    }\n\n    this.MessageListManager.initializeMessageRequest().then(() => {\n      this.messageHandler(this.context.item);\n      this.MessageListManager.attachListeners(this.messageUpdated);\n    });\n\n    this.enableMessageReaction();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const ifChatWindowChanged = () => {\n      let output = false;\n\n      if (\n        this.context.type === CometChat.ACTION_TYPE.TYPE_USER &&\n        this.context.item.uid !== this.item.uid\n      ) {\n        output = true;\n      } else if (\n        this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP &&\n        this.context.item.guid !== this.item.guid\n      ) {\n        output = true;\n      } else if (prevProps.parentMessageId !== this.props.parentMessageId) {\n        output = true;\n      }\n      return output;\n    };\n\n    if (ifChatWindowChanged() === true) {\n      this.messageCount = 0;\n      this.setState({\n        decoratorMessage: Translator.translate(\"LOADING\", this.props.lang),\n      });\n\n      this.MessageListManager?.removeListeners();\n\n      if (this.props.parentMessageId) {\n        this.MessageListManager = new MessageListManager(\n          this.context,\n          this.context.item,\n          this.context.type,\n          this.props.parentMessageId\n        );\n      } else {\n        this.MessageListManager = new MessageListManager(\n          this.context,\n          this.context.item,\n          this.context.type\n        );\n      }\n\n      this.MessageListManager.initializeMessageRequest().then(() => {\n        this.messageHandler(this.context.item);\n        this.MessageListManager.attachListeners(this.messageUpdated);\n      });\n    }\n\n    const previousMessageStr = JSON.stringify(prevProps.messages);\n    const currentMessageStr = JSON.stringify(this.props.messages);\n\n    if (previousMessageStr !== currentMessageStr) {\n      if (this.props.scrollToBottom) {\n        this.scrollToBottom();\n      } else {\n        this.scrollToBottom(this.lastScrollTop);\n      }\n    }\n\n    this.item =\n      this.context.type === CometChat.ACTION_TYPE.TYPE_USER ||\n      CometChat.ACTION_TYPE.TYPE_GROUP\n        ? this.context.item\n        : {};\n    if (this.context.leftGroupId.trim().length) {\n      this.item = {};\n    }\n\n    this.enableMessageReaction();\n  }\n\n  componentWillUnmount() {\n    this.MessageListManager.removeListeners();\n    this.MessageListManager = null;\n  }\n\n  enableMessageReaction = () => {\n    /**\n     * If reacting to messages feature is disabled\n     */\n    this.context.FeatureRestriction.isReactionsEnabled()\n      .then((response) => {\n        if (response !== this.state.enableMessageReaction) {\n          this.setState({ enableMessageReaction: response });\n        }\n      })\n      .catch((error) => {\n        if (this.state.enableMessageReaction !== false) {\n          this.setState({ enableMessageReaction: false });\n        }\n      });\n  };\n\n  scrollToBottom = (scrollHeight = 0) => {\n    if (this.messagesEnd) {\n      this.messagesEnd.scrollTop = this.messagesEnd.scrollHeight - scrollHeight;\n    }\n  };\n\n  messageHandler = (\n    item,\n    actionGenerated = enums.ACTIONS[\"MESSAGES_FETCHED\"]\n  ) => {\n    this.fetchMessages()\n      .then((messageList) => {\n        if (messageList.length === 0) {\n          this.setState({\n            decoratorMessage: Translator.translate(\n              \"NO_MESSAGES_FOUND\",\n              this.props.lang\n            ),\n          });\n        } else {\n          this.setState({ decoratorMessage: \"\" });\n        }\n\n        //updating messagecount variable\n        this.messageCount = messageList.length;\n\n        messageList.forEach((message) => {\n          //if the sender of the message is not the loggedin user, mark the message as read.\n          if (\n            message.getSender().getUid() !== this.loggedInUser.getUid() &&\n            message.hasOwnProperty(\"readAt\") === false\n          ) {\n            if (message.getReceiverType() === CometChat.RECEIVER_TYPE.USER) {\n              CometChat.markAsRead(\n                message.getId().toString(),\n                message.getSender().getUid(),\n                message.getReceiverType()\n              );\n              this.props.actionGenerated(\n                enums.ACTIONS[\"MESSAGE_READ\"],\n                message\n              );\n            } else if (\n              message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP\n            ) {\n              CometChat.markAsRead(\n                message.getId().toString(),\n                message.getReceiverId(),\n                message.getReceiverType()\n              );\n              this.props.actionGenerated(\n                enums.ACTIONS[\"MESSAGE_READ\"],\n                message\n              );\n            }\n          }\n        });\n\n        this.lastScrollTop = this.messagesEnd.scrollHeight;\n\n        //abort(don't return messagelist), when the chat window changes\n        if (\n          (item.hasOwnProperty(\"uid\") &&\n            this.context.item.hasOwnProperty(\"uid\") &&\n            item.uid === this.context.item.uid) ||\n          (item.hasOwnProperty(\"guid\") &&\n            this.context.item.hasOwnProperty(\"guid\") &&\n            item.guid === this.context.item.guid)\n        ) {\n          this.props.actionGenerated(actionGenerated, messageList);\n        }\n      })\n      .catch((error) => {\n        if (this.props.messages.length === 0) {\n          this.setState({\n            decoratorMessage: Translator.translate(\n              \"SOMETHING_WRONG\",\n              this.props.lang\n            ),\n          });\n        }\n\n        if (\n          error &&\n          error.hasOwnProperty(\"code\") &&\n          error.code === \"ERR_GUID_NOT_FOUND\"\n        ) {\n          //this.context.setDeletedGroupId(this.context.item.guid);\n        }\n      });\n  };\n\n  fetchMessages = () => {\n    const promise = new Promise((resolve, reject) => {\n      this.MessageListManager.fetchPreviousMessages()\n        .then((messageList) => {\n          resolve(messageList);\n        })\n        .catch((error) => reject(error));\n    });\n\n    return promise;\n  };\n\n  //callback for listener functions\n  messageUpdated = (key, message, group, options) => {\n    switch (key) {\n      case enums.MESSAGE_DELETED:\n        this.onMessageDeleted(message);\n        break;\n      case enums.MESSAGE_EDITED:\n        this.onMessageEdited(message);\n        break;\n      case enums.MESSAGE_DELIVERED:\n      case enums.MESSAGE_READ:\n        this.onMessageReadAndDelivered(message);\n        break;\n      case enums.TEXT_MESSAGE_RECEIVED:\n      case enums.MEDIA_MESSAGE_RECEIVED:\n        this.onMessageReceived(message);\n        break;\n      case enums.CUSTOM_MESSAGE_RECEIVED:\n        this.onCustomMessageReceived(message);\n        break;\n      case enums.GROUP_MEMBER_SCOPE_CHANGED:\n      case enums.GROUP_MEMBER_JOINED:\n      case enums.GROUP_MEMBER_LEFT:\n      case enums.GROUP_MEMBER_ADDED:\n      case enums.GROUP_MEMBER_KICKED:\n      case enums.GROUP_MEMBER_BANNED:\n      case enums.GROUP_MEMBER_UNBANNED:\n        this.onGroupUpdated(key, message, group, options);\n        break;\n      case enums.INCOMING_CALL_RECEIVED:\n      case enums.INCOMING_CALL_CANCELLED:\n      case enums.OUTGOING_CALL_ACCEPTED:\n      case enums.OUTGOING_CALL_REJECTED:\n        this.onCallUpdated(key, message);\n        break;\n      default:\n        break;\n    }\n  };\n\n  onMessageDeleted = (message) => {\n    if (\n      this.context.type === CometChat.RECEIVER_TYPE.GROUP &&\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP &&\n      message.getReceiverId() === this.context.item.guid\n    ) {\n      this.props.actionGenerated(enums.ACTIONS[\"ON_MESSAGE_DELETED\"], [\n        message,\n      ]);\n    } else if (\n      this.context.type === CometChat.RECEIVER_TYPE.USER &&\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.USER &&\n      message.getSender().uid === this.context.item.uid\n    ) {\n      this.props.actionGenerated(enums.ACTIONS[\"ON_MESSAGE_DELETED\"], [\n        message,\n      ]);\n    }\n  };\n\n  onMessageEdited = (message) => {\n    const messageList = [...this.props.messages];\n    const updateEditedMessage = (message) => {\n      let messageKey = messageList.findIndex((m) => m.id === message.id);\n\n      if (messageKey > -1) {\n        const messageObj = messageList[messageKey];\n        const newMessageObj = Object.assign({}, messageObj, message);\n\n        messageList.splice(messageKey, 1, newMessageObj);\n        this.props.actionGenerated(\n          enums.ACTIONS[\"ON_MESSAGE_EDITED\"],\n          messageList,\n          newMessageObj\n        );\n      }\n    };\n\n    if (\n      this.context.type === CometChat.RECEIVER_TYPE.GROUP &&\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP &&\n      message.getReceiverId() === this.context.item.guid\n    ) {\n      updateEditedMessage(message);\n    } else if (\n      this.context.type === CometChat.RECEIVER_TYPE.USER &&\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.USER &&\n      this.loggedInUser.uid === message.getReceiverId() &&\n      message.getSender().uid === this.context.item.uid\n    ) {\n      updateEditedMessage(message);\n    } else if (\n      this.context.type === CometChat.RECEIVER_TYPE.USER &&\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.USER &&\n      this.loggedInUser.uid === message.getSender().uid &&\n      message.getReceiverId() === this.context.item.uid\n    ) {\n      updateEditedMessage(message);\n    }\n  };\n\n  onMessageReadAndDelivered = (message) => {\n    //read receipts\n    if (\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.USER &&\n      message.getSender().getUid() === this.context.item.uid &&\n      message.getReceiver() === this.loggedInUser.uid\n    ) {\n      let messageList = [...this.props.messages];\n\n      if (message.getReceiptType() === \"delivery\") {\n        //search for message\n\n        let messageKey = messageList.findIndex(\n          (m) => m.id === message.messageId\n        );\n\n        if (messageKey > -1) {\n          let messageObj = messageList[messageKey];\n          let newMessageObj = Object.assign({}, messageObj, {\n            deliveredAt: message.getDeliveredAt(),\n          });\n\n          messageList.splice(messageKey, 1, newMessageObj);\n          this.props.actionGenerated(\n            enums.ACTIONS[\"ON_MESSAGE_READ_DELIVERED\"],\n            messageList\n          );\n        }\n      } else if (message.getReceiptType() === \"read\") {\n        //search for message\n        let messageKey = messageList.findIndex(\n          (m) => m.id === message.messageId\n        );\n\n        if (messageKey > -1) {\n          let messageObj = { ...messageList[messageKey] };\n          let newMessageObj = Object.assign({}, messageObj, {\n            readAt: message.getReadAt(),\n          });\n\n          messageList.splice(messageKey, 1, newMessageObj);\n          this.props.actionGenerated(\n            enums.ACTIONS[\"ON_MESSAGE_READ_DELIVERED\"],\n            messageList\n          );\n        }\n      }\n    } else if (\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP &&\n      message.getReceiver() === this.context.item.guid\n    ) {\n      //not implemented\n    }\n  };\n\n  reInitializeMessageBuilder = () => {\n    if (this.props.hasOwnProperty(\"parentMessageId\") === false) {\n      this.messageCount = 0;\n    }\n\n    this.props.actionGenerated(enums.ACTIONS[\"REFRESHING_MESSAGES\"], []);\n\n    this.setState({\n      decoratorMessage: Translator.translate(\"LOADING\", this.props.lang),\n    });\n    this.MessageListManager.removeListeners();\n\n    if (this.props.parentMessageId) {\n      this.MessageListManager = new MessageListManager(\n        this.context,\n        this.context.item,\n        this.context.type,\n        this.props.parentMessageId\n      );\n    } else {\n      this.MessageListManager = new MessageListManager(\n        this.context,\n        this.context.item,\n        this.context.type\n      );\n    }\n\n    this.MessageListManager.initializeMessageRequest().then(() => {\n      this.messageHandler(\n        this.context.item,\n        enums.ACTIONS[\"MESSAGES_REFRESHED\"]\n      );\n      this.MessageListManager.attachListeners(this.messageUpdated);\n    });\n  };\n\n  markMessageAsRead = (message, type) => {\n    if (message.hasOwnProperty(\"readAt\") === false) {\n      if (type === CometChat.ACTION_TYPE.TYPE_USER) {\n        CometChat.markAsRead(\n          message.getId().toString(),\n          message.getSender().uid,\n          message.getReceiverType()\n        );\n      } else if (type === CometChat.ACTION_TYPE.TYPE_GROUP) {\n        CometChat.markAsRead(\n          message.getId().toString(),\n          message.getReceiverId(),\n          message.getReceiverType()\n        );\n      }\n    }\n  };\n\n  onMessageReceived = (message) => {\n    /**\n     * message receiver is chat window group\n     */\n    if (\n      this.context.type === CometChat.RECEIVER_TYPE.GROUP &&\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP &&\n      message.getReceiverId() === this.context.item.guid\n    ) {\n      this.messageReceivedHandler(message, CometChat.RECEIVER_TYPE.GROUP);\n    } else if (\n      this.context.type === CometChat.RECEIVER_TYPE.USER &&\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.USER\n    ) {\n      /**\n       * If the message sender is chat window user and message receiver is logged-in user\n       * OR\n       * If the message sender is logged-in user and message receiver is chat window user\n       */\n      if (\n        (message.getSender().uid === this.context.item.uid &&\n          message.getReceiverId() === this.loggedInUser?.uid) ||\n        (message.getSender().uid === this.loggedInUser?.uid &&\n          message.getReceiverId() === this.context.item.uid)\n      ) {\n        this.messageReceivedHandler(message, CometChat.RECEIVER_TYPE.USER);\n      }\n    }\n  };\n\n  messageReceivedHandler = (message, type) => {\n    //handling dom lag - increment count only for main message list\n    if (\n      message.hasOwnProperty(\"parentMessageId\") === false &&\n      this.props.hasOwnProperty(\"parentMessageId\") === false\n    ) {\n      ++this.messageCount;\n\n      //if the user has not scrolled in chat window(scroll is at the bottom of the chat window)\n      if (\n        this.messagesEnd.scrollHeight -\n          this.messagesEnd.scrollTop -\n          this.messagesEnd.clientHeight <\n        20\n      ) {\n        if (this.messageCount > enums.CONSTANTS[\"MAX_MESSAGE_COUNT\"]) {\n          this.reInitializeMessageBuilder();\n        } else {\n          this.markMessageAsRead(message, type);\n          this.props.actionGenerated(enums.ACTIONS[\"MESSAGE_RECEIVED\"], [\n            message,\n          ]);\n        }\n      } else {\n        //if the user has scrolled up in chat window\n        this.props.actionGenerated(enums.ACTIONS[\"NEW_MESSAGES\"], [message]);\n      }\n    } else if (\n      message.hasOwnProperty(\"parentMessageId\") === true &&\n      this.props.hasOwnProperty(\"parentMessageId\") === true\n    ) {\n      if (message.parentMessageId === this.props.parentMessageId) {\n        this.markMessageAsRead(message, type);\n      }\n\n      this.props.actionGenerated(enums.ACTIONS[\"MESSAGE_RECEIVED\"], [message]);\n    } else {\n      this.props.actionGenerated(enums.ACTIONS[\"MESSAGE_RECEIVED\"], [message]);\n    }\n  };\n\n  //polls, stickers, collaborative document, collaborative whiteboard\n  onCustomMessageReceived = (message) => {\n    //new messages\n    if (\n      this.context.type === CometChat.RECEIVER_TYPE.GROUP &&\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP &&\n      this.loggedInUser.uid === message.getSender().uid &&\n      message.getReceiverId() === this.context.item.guid &&\n      (message.type === enums.CUSTOM_TYPE_POLL ||\n        message.type === enums.CUSTOM_TYPE_DOCUMENT ||\n        message.type === enums.CUSTOM_TYPE_WHITEBOARD)\n    ) {\n      //showing polls, collaborative document and whiteboard for sender (custom message received listener for sender)\n      this.props.actionGenerated(enums.ACTIONS[\"CUSTOM_MESSAGE_RECEIVED\"], [\n        message,\n      ]);\n    } else if (\n      this.context.type === CometChat.RECEIVER_TYPE.GROUP &&\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP &&\n      message.getReceiverId() === this.context.item.guid\n    ) {\n      this.customMessageReceivedHandler(message, CometChat.RECEIVER_TYPE.GROUP);\n    } else if (\n      this.context.type === CometChat.RECEIVER_TYPE.USER &&\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.USER &&\n      message.getSender().uid === this.context.item.uid\n    ) {\n      this.customMessageReceivedHandler(message, CometChat.RECEIVER_TYPE.USER);\n    } else if (\n      this.context.type === CometChat.RECEIVER_TYPE.USER &&\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.USER &&\n      this.loggedInUser.uid === message.getSender().uid &&\n      message.getReceiverId() === this.context.item.uid &&\n      (message.type === enums.CUSTOM_TYPE_POLL ||\n        message.type === enums.CUSTOM_TYPE_DOCUMENT ||\n        message.type === enums.CUSTOM_TYPE_WHITEBOARD)\n    ) {\n      //showing polls, collaborative document and whiteboard for sender (custom message received listener for sender)\n      this.props.actionGenerated(enums.ACTIONS[\"CUSTOM_MESSAGE_RECEIVED\"], [\n        message,\n      ]);\n    }\n  };\n\n  customMessageReceivedHandler = (message, type) => {\n    //handling dom lag - increment count only for main message list\n    if (\n      message.hasOwnProperty(\"parentMessageId\") === false &&\n      this.props.hasOwnProperty(\"parentMessageId\") === false\n    ) {\n      ++this.messageCount;\n\n      //if the user has not scrolled in chat window(scroll is at the bottom of the chat window)\n      if (\n        this.messagesEnd.scrollHeight - this.messagesEnd.scrollTop ===\n        this.messagesEnd.clientHeight\n      ) {\n        if (this.messageCount > enums.CONSTANTS[\"MAX_MESSAGE_COUNT\"]) {\n          this.reInitializeMessageBuilder();\n        } else {\n          this.markMessageAsRead(message, type);\n          this.props.actionGenerated(enums.ACTIONS[\"CUSTOM_MESSAGE_RECEIVED\"], [\n            message,\n          ]);\n        }\n      } else {\n        //if the user has scrolled in chat window\n\n        this.props.actionGenerated(enums.ACTIONS[\"NEW_MESSAGES\"], [message]);\n      }\n    } else if (\n      message.hasOwnProperty(\"parentMessageId\") === true &&\n      this.props.hasOwnProperty(\"parentMessageId\") === true\n    ) {\n      if (message.parentMessageId === this.props.parentMessageId) {\n        this.markMessageAsRead(message, type);\n      }\n      this.props.actionGenerated(enums.ACTIONS[\"CUSTOM_MESSAGE_RECEIVED\"], [\n        message,\n      ]);\n    } else {\n      this.props.actionGenerated(enums.ACTIONS[\"CUSTOM_MESSAGE_RECEIVED\"], [\n        message,\n      ]);\n    }\n  };\n\n  onCallUpdated = (key, message) => {\n    if (\n      this.context.type === CometChat.RECEIVER_TYPE.GROUP &&\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP &&\n      message.getReceiverId() === this.context.item.guid\n    ) {\n      this.props.actionGenerated(key, message);\n    } else if (\n      this.context.type === CometChat.RECEIVER_TYPE.USER &&\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.USER &&\n      message.getSender().uid === this.context.item.uid\n    ) {\n      this.props.actionGenerated(key, message);\n    }\n  };\n\n  onGroupUpdated = (key, message, group, options) => {\n    if (\n      this.context.type === CometChat.RECEIVER_TYPE.GROUP &&\n      message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP &&\n      message.getReceiverId() === this.context.item.guid\n    ) {\n      this.props.actionGenerated(key, message, null, group, options);\n    }\n  };\n\n  handleScroll = (e) => {\n    const scrollTop = e.currentTarget.scrollTop;\n    const scrollHeight = e.currentTarget.scrollHeight;\n    const clientHeight = e.currentTarget.clientHeight;\n\n    this.lastScrollTop = scrollHeight - scrollTop;\n\n    if (this.lastScrollTop === clientHeight) {\n      this.props.actionGenerated(enums.ACTIONS[\"CLEAR_UNREAD_MESSAGES\"]);\n    }\n\n    const top = Math.round(scrollTop) === 0;\n    if (top && this.props.messages.length) {\n      this.messageHandler(this.context.item);\n    }\n  };\n\n  getSenderMessageComponent = (message, key) => {\n    let component;\n\n    if (message.hasOwnProperty(\"deletedAt\")) {\n      component = (\n        <CometChatDeleteMessageBubble\n          key={key}\n          message={message}\n          messageOf=\"sender\"\n          {...this.props}\n        />\n      );\n    } else {\n      switch (message.type) {\n        case CometChat.MESSAGE_TYPE.TEXT:\n          component = (\n            <CometChatSenderTextMessageBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          );\n          break;\n        case CometChat.MESSAGE_TYPE.IMAGE:\n          component = (\n            <CometChatSenderImageMessageBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          );\n          break;\n        case CometChat.MESSAGE_TYPE.FILE:\n          component = (\n            <CometChatSenderFileMessageBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          );\n          break;\n        case CometChat.MESSAGE_TYPE.VIDEO:\n          component = (\n            <CometChatSenderVideoMessageBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          );\n          break;\n        case CometChat.MESSAGE_TYPE.AUDIO:\n          component = (\n            <CometChatSenderAudioMessageBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          );\n          break;\n        default:\n          break;\n      }\n    }\n\n    return component;\n  };\n\n  getReceiverMessageComponent = (message, key) => {\n    let component;\n\n    if (message.hasOwnProperty(\"deletedAt\")) {\n      component = (\n        <CometChatDeleteMessageBubble\n          key={key}\n          message={message}\n          messageOf=\"receiver\"\n        />\n      );\n    } else {\n      switch (message.type) {\n        case \"message\":\n        case CometChat.MESSAGE_TYPE.TEXT:\n          component = message.text ? (\n            <CometChatReceiverTextMessageBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          ) : null;\n          break;\n        case CometChat.MESSAGE_TYPE.IMAGE:\n          component = message.data.url ? (\n            <CometChatReceiverImageMessageBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          ) : null;\n          break;\n        case CometChat.MESSAGE_TYPE.FILE:\n          component = message.data.attachments ? (\n            <CometChatReceiverFileMessageBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          ) : null;\n          break;\n        case CometChat.MESSAGE_TYPE.AUDIO:\n          component = message.data.url ? (\n            <CometChatReceiverAudioMessageBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          ) : null;\n          break;\n        case CometChat.MESSAGE_TYPE.VIDEO:\n          component = message.data.url ? (\n            <CometChatReceiverVideoMessageBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          ) : null;\n          break;\n        default:\n          break;\n      }\n    }\n    return component;\n  };\n\n  getSenderCustomMessageComponent = (message, key) => {\n    let component;\n    if (message.hasOwnProperty(\"deletedAt\")) {\n      component = (\n        <CometChatDeleteMessageBubble\n          key={key}\n          message={message}\n          messageOf=\"sender\"\n          {...this.props}\n        />\n      );\n    } else {\n      switch (message.type) {\n        case enums.CUSTOM_TYPE_POLL:\n          component = (\n            <CometChatSenderPollMessageBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          );\n          break;\n        case enums.CUSTOM_TYPE_STICKER:\n          component = (\n            <CometChatSenderStickerBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          );\n          break;\n        case enums.CUSTOM_TYPE_DOCUMENT:\n          component = (\n            <CometChatSenderDocumentBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          );\n          break;\n        case enums.CUSTOM_TYPE_WHITEBOARD:\n          component = (\n            <CometChatSenderWhiteboardBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          );\n          break;\n        case enums.CUSTOM_TYPE_MEETING:\n          component = (\n            <CometChatSenderDirectCallBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          );\n          break;\n        default:\n          break;\n      }\n    }\n\n    return component;\n  };\n\n  getReceiverCustomMessageComponent = (message, key) => {\n    let component;\n    if (message.hasOwnProperty(\"deletedAt\")) {\n      component = (\n        <CometChatDeleteMessageBubble\n          key={key}\n          message={message}\n          messageOf=\"receiver\"\n          {...this.props}\n        />\n      );\n    } else {\n      switch (message.type) {\n        case enums.CUSTOM_TYPE_POLL:\n          component = (\n            <CometChatReceiverPollMessageBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          );\n          break;\n        case enums.CUSTOM_TYPE_STICKER:\n          component = (\n            <CometChatReceiverStickerMessageBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          );\n          break;\n        case enums.CUSTOM_TYPE_DOCUMENT:\n          component = (\n            <CometChatReceiverDocumentBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          );\n          break;\n        case enums.CUSTOM_TYPE_WHITEBOARD:\n          component = (\n            <CometChatReceiverWhiteboardBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          );\n          break;\n        case enums.CUSTOM_TYPE_MEETING:\n          component = (\n            <CometChatReceiverDirectCallBubble\n              loggedInUser={this.loggedInUser}\n              key={key}\n              message={message}\n              {...this.props}\n              enableMessageReaction={this.state.enableMessageReaction}\n            />\n          );\n          break;\n        default:\n          break;\n      }\n    }\n\n    return component;\n  };\n\n  getActionMessageComponent = (message, key) => {\n    return (\n      <CometChatActionMessageBubble\n        loggedInUser={this.loggedInUser}\n        key={key}\n        message={message}\n        {...this.props}\n      />\n    );\n  };\n\n  getComponent = (message, key) => {\n    let component;\n\n    switch (message.category) {\n      case CometChat.CATEGORY_ACTION:\n      case CometChat.CATEGORY_CALL:\n        component = this.getActionMessageComponent(message, key);\n        break;\n      case CometChat.CATEGORY_MESSAGE:\n        if (this.loggedInUser.uid === message.sender.uid) {\n          component = this.getSenderMessageComponent(message, key);\n        } else {\n          component = this.getReceiverMessageComponent(message, key);\n        }\n        break;\n      case CometChat.CATEGORY_CUSTOM:\n        if (this.loggedInUser.uid === message.sender.uid) {\n          component = this.getSenderCustomMessageComponent(message, key);\n        } else {\n          component = this.getReceiverCustomMessageComponent(message, key);\n        }\n        break;\n      default:\n        break;\n    }\n\n    return component;\n  };\n\n  render() {\n    let messageContainer = null;\n    if (\n      this.state.decoratorMessage.length !== 0 &&\n      this.props.messages.length === 0\n    ) {\n      messageContainer = (\n        <div\n          css={decoratorMessageStyle()}\n          className=\"messages__decorator-message\"\n        >\n          <p\n            css={decoratorMessageTxtStyle(this.context)}\n            className=\"decorator-message\"\n          >\n            {this.state.decoratorMessage}\n          </p>\n        </div>\n      );\n    }\n\n    let cDate = null;\n    const messages = this.props.messages.map((message, key) => {\n      let dateSeparator = null;\n\n      const dateField = message._composedAt || message.sentAt;\n\n      const messageDate = message.sentAt * 1000;\n      const messageSentDate = dateFormat(messageDate, \"dd/mm/yyyy\");\n\n      if (cDate !== messageSentDate) {\n        dateSeparator = (\n          <div css={messageDateContainerStyle()} className=\"message__date\">\n            <span css={messageDateStyle(this.context)}>\n              {getMessageDate(dateField, this.props.lang)}\n            </span>\n          </div>\n        );\n      }\n      cDate = messageSentDate;\n\n      return (\n        <React.Fragment key={key}>\n          {dateSeparator}\n          {this.getComponent(message, key)}\n        </React.Fragment>\n      );\n    });\n\n    return (\n      <div className=\"chat__list\" css={chatListStyle(this.context)}>\n        {messageContainer}\n        <div\n          className=\"list__wrapper\"\n          css={listWrapperStyle()}\n          ref={(el) => {\n            this.messagesEnd = el;\n          }}\n          onScroll={this.handleScroll}\n        >\n          {messages}\n        </div>\n      </div>\n    );\n  }\n}\n\n// Specifies the default values for props:\nCometChatMessageList.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n};\n\nCometChatMessageList.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport { CometChatMessageList };\n"]},"metadata":{},"sourceType":"module"}