{"ast":null,"code":"import { CometChat } from \"@cometchat-pro/chat\";\nimport * as enums from \"../../../util/enums.js\";\nimport MessageFilter from \"./MessageFilter\";\nexport class MessageListManager {\n  constructor(context, item, type, parentMessageId) {\n    this.item = {};\n    this.type = \"\";\n    this.parentMessageId = null;\n    this.messageRequest = null;\n    this.limit = 30;\n    this.msgListenerId = \"message_\" + new Date().getTime();\n    this.groupListenerId = \"group_\" + new Date().getTime();\n    this.callListenerId = \"call_\" + new Date().getTime();\n\n    this.initializeMessageRequest = () => {\n      return new Promise(resolve => {\n        let categories = {};\n        let types = {};\n        let messageFilterManager = new MessageFilter(this.context);\n        messageFilterManager.getCategories().then(categoryList => categories = Object.keys(categoryList)).then(() => messageFilterManager.getTypes()).then(typeList => types = Object.keys(typeList)).then(() => this.context.FeatureRestriction.isHideDeletedMessagesEnabled()).then(hideDeletedMessages => {\n          if (this.type === CometChat.ACTION_TYPE.TYPE_USER) {\n            if (this.parentMessageId) {\n              this.messageRequest = new CometChat.MessagesRequestBuilder().setUID(this.item.uid).setParentMessageId(this.parentMessageId).setCategories(categories).setTypes(types).hideDeletedMessages(hideDeletedMessages).setLimit(this.limit).build();\n            } else {\n              this.messageRequest = new CometChat.MessagesRequestBuilder().setUID(this.item.uid).setCategories(categories).setTypes(types).hideReplies(true).hideDeletedMessages(hideDeletedMessages).setLimit(this.limit).build();\n            }\n\n            resolve(this.messageRequest);\n          } else if (this.type === CometChat.ACTION_TYPE.TYPE_GROUP) {\n            if (this.parentMessageId) {\n              this.messageRequest = new CometChat.MessagesRequestBuilder().setGUID(this.item.guid).setParentMessageId(this.parentMessageId).setCategories(categories).setTypes(types).hideDeletedMessages(hideDeletedMessages).setLimit(this.limit).build();\n            } else {\n              this.messageRequest = new CometChat.MessagesRequestBuilder().setGUID(this.item.guid).setCategories(categories).setTypes(types).hideReplies(true).hideDeletedMessages(hideDeletedMessages).setLimit(this.limit).build();\n            }\n\n            resolve(this.messageRequest);\n          }\n        });\n      });\n    };\n\n    this.item = item;\n    this.type = type;\n    this.parentMessageId = parentMessageId;\n    this.context = context;\n  }\n\n  fetchPreviousMessages() {\n    return this.messageRequest.fetchPrevious();\n  }\n\n  attachListeners(callback) {\n    CometChat.addMessageListener(this.msgListenerId, new CometChat.MessageListener({\n      onTextMessageReceived: textMessage => {\n        callback(enums.TEXT_MESSAGE_RECEIVED, textMessage);\n      },\n      onMediaMessageReceived: mediaMessage => {\n        callback(enums.MEDIA_MESSAGE_RECEIVED, mediaMessage);\n      },\n      onCustomMessageReceived: customMessage => {\n        callback(enums.CUSTOM_MESSAGE_RECEIVED, customMessage);\n      },\n      onMessagesDelivered: messageReceipt => {\n        callback(enums.MESSAGE_DELIVERED, messageReceipt);\n      },\n      onMessagesRead: messageReceipt => {\n        callback(enums.MESSAGE_READ, messageReceipt);\n      },\n      onMessageDeleted: deletedMessage => {\n        callback(enums.MESSAGE_DELETED, deletedMessage);\n      },\n      onMessageEdited: editedMessage => {\n        callback(enums.MESSAGE_EDITED, editedMessage);\n      }\n    }));\n    CometChat.addGroupListener(this.groupListenerId, new CometChat.GroupListener({\n      onGroupMemberScopeChanged: (message, changedUser, newScope, oldScope, changedGroup) => {\n        callback(enums.GROUP_MEMBER_SCOPE_CHANGED, message, changedGroup, {\n          \"user\": changedUser,\n          \"scope\": newScope\n        });\n      },\n      onGroupMemberKicked: (message, kickedUser, kickedBy, kickedFrom) => {\n        callback(enums.GROUP_MEMBER_KICKED, message, kickedFrom, {\n          \"user\": kickedUser,\n          \"hasJoined\": false\n        });\n      },\n      onGroupMemberBanned: (message, bannedUser, bannedBy, bannedFrom) => {\n        callback(enums.GROUP_MEMBER_BANNED, message, bannedFrom, {\n          \"user\": bannedUser\n        });\n      },\n      onGroupMemberUnbanned: (message, unbannedUser, unbannedBy, unbannedFrom) => {\n        callback(enums.GROUP_MEMBER_UNBANNED, message, unbannedFrom, {\n          \"user\": unbannedUser\n        });\n      },\n      onMemberAddedToGroup: (message, userAdded, userAddedBy, userAddedIn) => {\n        callback(enums.GROUP_MEMBER_ADDED, message, userAddedIn, {\n          \"user\": userAdded,\n          \"hasJoined\": true\n        });\n      },\n      onGroupMemberLeft: (message, leavingUser, group) => {\n        callback(enums.GROUP_MEMBER_LEFT, message, group, {\n          \"user\": leavingUser\n        });\n      },\n      onGroupMemberJoined: (message, joinedUser, joinedGroup) => {\n        callback(enums.GROUP_MEMBER_JOINED, message, joinedGroup, {\n          \"user\": joinedUser\n        });\n      }\n    }));\n    CometChat.addCallListener(this.callListenerId, new CometChat.CallListener({\n      onIncomingCallReceived: call => {\n        callback(enums.INCOMING_CALL_RECEIVED, call);\n      },\n      onIncomingCallCancelled: call => {\n        callback(enums.INCOMING_CALL_CANCELLED, call);\n      },\n      onOutgoingCallAccepted: call => {\n        callback(enums.OUTGOING_CALL_ACCEPTED, call);\n      },\n      onOutgoingCallRejected: call => {\n        callback(enums.OUTGOING_CALL_REJECTED, call);\n      }\n    }));\n  }\n\n  removeListeners() {\n    CometChat.removeMessageListener(this.msgListenerId);\n    CometChat.removeGroupListener(this.groupListenerId);\n    CometChat.removeCallListener(this.callListenerId);\n  }\n\n}","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Messages/CometChatMessageList/controller.js"],"names":["CometChat","enums","MessageFilter","MessageListManager","constructor","context","item","type","parentMessageId","messageRequest","limit","msgListenerId","Date","getTime","groupListenerId","callListenerId","initializeMessageRequest","Promise","resolve","categories","types","messageFilterManager","getCategories","then","categoryList","Object","keys","getTypes","typeList","FeatureRestriction","isHideDeletedMessagesEnabled","hideDeletedMessages","ACTION_TYPE","TYPE_USER","MessagesRequestBuilder","setUID","uid","setParentMessageId","setCategories","setTypes","setLimit","build","hideReplies","TYPE_GROUP","setGUID","guid","fetchPreviousMessages","fetchPrevious","attachListeners","callback","addMessageListener","MessageListener","onTextMessageReceived","textMessage","TEXT_MESSAGE_RECEIVED","onMediaMessageReceived","mediaMessage","MEDIA_MESSAGE_RECEIVED","onCustomMessageReceived","customMessage","CUSTOM_MESSAGE_RECEIVED","onMessagesDelivered","messageReceipt","MESSAGE_DELIVERED","onMessagesRead","MESSAGE_READ","onMessageDeleted","deletedMessage","MESSAGE_DELETED","onMessageEdited","editedMessage","MESSAGE_EDITED","addGroupListener","GroupListener","onGroupMemberScopeChanged","message","changedUser","newScope","oldScope","changedGroup","GROUP_MEMBER_SCOPE_CHANGED","onGroupMemberKicked","kickedUser","kickedBy","kickedFrom","GROUP_MEMBER_KICKED","onGroupMemberBanned","bannedUser","bannedBy","bannedFrom","GROUP_MEMBER_BANNED","onGroupMemberUnbanned","unbannedUser","unbannedBy","unbannedFrom","GROUP_MEMBER_UNBANNED","onMemberAddedToGroup","userAdded","userAddedBy","userAddedIn","GROUP_MEMBER_ADDED","onGroupMemberLeft","leavingUser","group","GROUP_MEMBER_LEFT","onGroupMemberJoined","joinedUser","joinedGroup","GROUP_MEMBER_JOINED","addCallListener","CallListener","onIncomingCallReceived","call","INCOMING_CALL_RECEIVED","onIncomingCallCancelled","INCOMING_CALL_CANCELLED","onOutgoingCallAccepted","OUTGOING_CALL_ACCEPTED","onOutgoingCallRejected","OUTGOING_CALL_REJECTED","removeListeners","removeMessageListener","removeGroupListener","removeCallListener"],"mappings":"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","sourcesContent":["import { CometChat } from \"@cometchat-pro/chat\";\n\nimport * as enums from \"../../../util/enums.js\";\nimport MessageFilter from \"./MessageFilter\";\n\nexport class MessageListManager {\n\n    item = {};\n    type = \"\";\n    parentMessageId = null;\n    messageRequest = null;\n    limit = 30;\n    \n    msgListenerId = \"message_\" + new Date().getTime();\n    groupListenerId = \"group_\" + new Date().getTime();\n    callListenerId = \"call_\" + new Date().getTime(); \n\n    constructor(context, item, type, parentMessageId) {\n\n        this.item = item;\n        this.type = type;\n        this.parentMessageId = parentMessageId;\n        this.context = context;\n    }\n\n    initializeMessageRequest = () => {\n\n        return new Promise(resolve => {\n\n            let categories = {};\n            let types = {};\n\n            let messageFilterManager = new MessageFilter(this.context);\n\n            messageFilterManager\n                .getCategories()\n                .then(categoryList => categories = Object.keys(categoryList))\n                .then(() => messageFilterManager.getTypes())\n                .then(typeList => types = Object.keys(typeList))\n                .then(() => this.context.FeatureRestriction.isHideDeletedMessagesEnabled())\n                .then(hideDeletedMessages => {\n                    if (this.type === CometChat.ACTION_TYPE.TYPE_USER) {\n                        if (this.parentMessageId) {\n                            this.messageRequest = new CometChat.MessagesRequestBuilder().setUID(this.item.uid).setParentMessageId(this.parentMessageId).setCategories(categories).setTypes(types).hideDeletedMessages(hideDeletedMessages).setLimit(this.limit).build();\n                        } else {\n                            this.messageRequest = new CometChat.MessagesRequestBuilder().setUID(this.item.uid).setCategories(categories).setTypes(types).hideReplies(true).hideDeletedMessages(hideDeletedMessages).setLimit(this.limit).build();\n                        }\n                        resolve(this.messageRequest);\n                    } else if (this.type === CometChat.ACTION_TYPE.TYPE_GROUP) {\n                        if (this.parentMessageId) {\n                            this.messageRequest = new CometChat.MessagesRequestBuilder().setGUID(this.item.guid).setParentMessageId(this.parentMessageId).setCategories(categories).setTypes(types).hideDeletedMessages(hideDeletedMessages).setLimit(this.limit).build();\n                        } else {\n                            this.messageRequest = new CometChat.MessagesRequestBuilder().setGUID(this.item.guid).setCategories(categories).setTypes(types).hideReplies(true).hideDeletedMessages(hideDeletedMessages).setLimit(this.limit).build();\n                        }\n                        resolve(this.messageRequest);\n                    }\n                });\n\n        });\n    }\n\n    fetchPreviousMessages() {\n        return this.messageRequest.fetchPrevious();\n    }\n\n    attachListeners(callback) {\n        \n        CometChat.addMessageListener(\n            this.msgListenerId,\n            new CometChat.MessageListener({\n                onTextMessageReceived: textMessage => {\n                    callback(enums.TEXT_MESSAGE_RECEIVED, textMessage);\n                },\n                onMediaMessageReceived: mediaMessage => {\n                    callback(enums.MEDIA_MESSAGE_RECEIVED, mediaMessage);\n                },\n                onCustomMessageReceived: customMessage => {\n                    callback(enums.CUSTOM_MESSAGE_RECEIVED, customMessage);\n                },\n                onMessagesDelivered: messageReceipt => {\n                    callback(enums.MESSAGE_DELIVERED, messageReceipt);\n                },\n                onMessagesRead: messageReceipt => {\n                    callback(enums.MESSAGE_READ, messageReceipt);\n                },\n                onMessageDeleted: deletedMessage => {\n                    callback(enums.MESSAGE_DELETED, deletedMessage);\n                },\n                onMessageEdited: editedMessage => {\n                    callback(enums.MESSAGE_EDITED, editedMessage);\n                }\n            })\n        );\n\n        CometChat.addGroupListener(\n            this.groupListenerId,\n            new CometChat.GroupListener({\n                onGroupMemberScopeChanged: (message, changedUser, newScope, oldScope, changedGroup) => {\n                    callback(enums.GROUP_MEMBER_SCOPE_CHANGED, message, changedGroup, {\"user\": changedUser, \"scope\": newScope});\n                }, \n                onGroupMemberKicked: (message, kickedUser, kickedBy, kickedFrom) => {\n                    callback(enums.GROUP_MEMBER_KICKED, message, kickedFrom, {\"user\": kickedUser, \"hasJoined\": false});\n                }, \n                onGroupMemberBanned: (message, bannedUser, bannedBy, bannedFrom) => {\n                    callback(enums.GROUP_MEMBER_BANNED, message, bannedFrom, {\"user\": bannedUser});\n                }, \n                onGroupMemberUnbanned: (message, unbannedUser, unbannedBy, unbannedFrom) => {\n                    callback(enums.GROUP_MEMBER_UNBANNED, message, unbannedFrom, {\"user\": unbannedUser});\n                }, \n                onMemberAddedToGroup: (message, userAdded, userAddedBy, userAddedIn) => {\n                    callback(enums.GROUP_MEMBER_ADDED, message, userAddedIn, {\"user\": userAdded, \"hasJoined\": true});\n                }, \n                onGroupMemberLeft: (message, leavingUser, group) => {\n                    callback(enums.GROUP_MEMBER_LEFT, message, group, {\"user\": leavingUser});\n                }, \n                onGroupMemberJoined: (message, joinedUser, joinedGroup) => {\n                    callback(enums.GROUP_MEMBER_JOINED, message, joinedGroup, {\"user\": joinedUser});\n                }\n            })\n        );\n        \n        CometChat.addCallListener(\n            this.callListenerId,\n            new CometChat.CallListener({\n                onIncomingCallReceived: call => {\n                  callback(enums.INCOMING_CALL_RECEIVED, call);\n                },\n                onIncomingCallCancelled: call => {\n                    callback(enums.INCOMING_CALL_CANCELLED, call);\n                },\n                onOutgoingCallAccepted: call => {\n                    callback(enums.OUTGOING_CALL_ACCEPTED, call);\n                },\n                onOutgoingCallRejected: call => {\n                  callback(enums.OUTGOING_CALL_REJECTED, call);\n                }\n            })\n        );\n    }\n\n    removeListeners() {\n\n        CometChat.removeMessageListener(this.msgListenerId);\n        CometChat.removeGroupListener(this.groupListenerId);\n        CometChat.removeCallListener(this.callListenerId);\n    }\n}"]},"metadata":{},"sourceType":"module"}