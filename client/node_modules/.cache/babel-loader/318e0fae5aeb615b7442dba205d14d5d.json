{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Calls/CometChatIncomingCall/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx, keyframes } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CallAlertManager } from \"./controller\";\nimport { CometChatCallScreen } from \"../CometChatCallScreen\";\nimport { CometChatAvatar } from \"../../Shared\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { SoundManager } from \"../../../util/SoundManager\";\nimport { Storage } from \"../../../util/Storage\";\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { incomingCallWrapperStyle, callContainerStyle, headerWrapperStyle, callDetailStyle, nameStyle, callTypeStyle, thumbnailStyle, headerButtonStyle, ButtonStyle, callIconStyle } from \"./style\";\nimport audioCallIcon from \"./resources/incoming-call.svg\";\nimport videoCallIcon from \"./resources/incoming-video-call.svg\";\n\nclass CometChatIncomingCall extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.adjustFontSize = () => {\n      if (this.callButtonRef && this.callButtonRef.current) {\n        let reduceFontSize = false;\n        const buttonNodeList = this.callButtonRef.current.querySelectorAll(\"button\");\n        buttonNodeList.forEach(buttonNode => {\n          const parentContainerWidth = buttonNode.clientWidth;\n          const currentTextWidth = buttonNode.scrollWidth;\n\n          if (parentContainerWidth < currentTextWidth) {\n            reduceFontSize = true;\n          }\n        });\n\n        if (reduceFontSize) {\n          buttonNodeList.forEach(buttonNode => {\n            buttonNode.style.fontSize = \"85%\";\n          });\n        }\n      }\n    };\n\n    this.callScreenUpdated = (key, call) => {\n      switch (key) {\n        case enums.INCOMING_CALL_RECEIVED:\n          //occurs at the callee end\n          this.incomingCallReceived(call);\n          break;\n\n        case enums.INCOMING_CALL_CANCELLED:\n          //occurs(call dismissed) at the callee end, caller cancels the call\n          this.incomingCallCancelled(call);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.incomingCallReceived = incomingCall => {\n      if (this._isMounted) {\n        if (this.state.incomingCall === null) {\n          var _this$loggedInUser;\n\n          if ((incomingCall === null || incomingCall === void 0 ? void 0 : incomingCall.callInitiator.uid) !== ((_this$loggedInUser = this.loggedInUser) === null || _this$loggedInUser === void 0 ? void 0 : _this$loggedInUser.uid)) {\n            SoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n            this.setState({\n              incomingCall: incomingCall\n            });\n          }\n        }\n      }\n    };\n\n    this.incomingCallCancelled = call => {\n      if (this._isMounted) {\n        //we are not marking this as read as it will done in messagelist component\n        SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n        this.setState({\n          incomingCall: null\n        });\n      }\n    };\n\n    this.rejectCall = () => {\n      SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n      let callStatus = this.isCallActive() ? CometChat.CALL_STATUS.BUSY : CometChat.CALL_STATUS.REJECTED;\n      CometChat.rejectCall(this.state.incomingCall.sessionId, callStatus).then(rejectedCall => {\n        if (this.isCallActive() === false) {\n          if (this.context) {\n            this.context.setCallInProgress(null, \"\");\n          }\n\n          Storage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], rejectedCall);\n          this.props.actionGenerated(enums.ACTIONS[\"INCOMING_CALL_REJECTED\"], rejectedCall);\n          this.setState({\n            callInProgress: null\n          });\n        }\n\n        this.setState({\n          incomingCall: null\n        });\n      }).catch(error => {\n        this.setState({\n          incomingCall: null,\n          callInProgress: null\n        });\n        const errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n        this.context.setToastMessage(\"error\", errorCode);\n      });\n    };\n\n    this.acceptCall = () => {\n      this.checkForActiveCallAndEndCall().then(response => {\n        SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n        CometChat.acceptCall(this.state.incomingCall.sessionId).then(call => {\n          if (this.context) {\n            this.context.setCallInProgress(call, enums.CONSTANTS[\"INCOMING_DEFAULT_CALLING\"]);\n          }\n\n          Storage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], call);\n          this.props.actionGenerated(enums.ACTIONS[\"INCOMING_CALL_ACCEPTED\"], call);\n          this.setState({\n            incomingCall: null,\n            callInProgress: call\n          });\n        }).catch(error => {\n          if (this.context) {\n            this.context.setCallInProgress(null, \"\");\n          }\n\n          this.setState({\n            incomingCall: null,\n            callInProgress: null\n          });\n          const errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n          this.context.setToastMessage(\"error\", errorCode);\n        });\n      }).catch(error => {\n        const errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n        this.context.setToastMessage(\"error\", errorCode);\n      });\n    };\n\n    this.isCallActive = () => {\n      if (Object.keys(this.context.callInProgress).length === 0) {\n        return false;\n      }\n\n      let sessionID = this.getActiveCallSessionID();\n\n      if (!sessionID) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.getActiveCallSessionID = () => {\n      return this.context.getActiveCallSessionID();\n    };\n\n    this.checkForActiveCallAndEndCall = () => {\n      const promise = new Promise((resolve, reject) => {\n        if (this.isCallActive() === false) {\n          return resolve({\n            success: true\n          });\n        }\n\n        let sessionID = this.getActiveCallSessionID();\n        CometChat.endCall(sessionID).then(response => {\n          return resolve(response);\n        }).catch(error => {\n          return reject(error);\n        });\n      });\n      return promise;\n    };\n\n    this.actionHandler = (action, call) => {\n      switch (action) {\n        case enums.ACTIONS[\"OUTGOING_CALL_ENDED\"]:\n          this.setState({\n            callInProgress: null\n          });\n          break;\n\n        case enums.ACTIONS[\"USER_JOINED_CALL\"]:\n        case enums.ACTIONS[\"USER_LEFT_CALL\"]:\n          this.props.actionGenerated(action, call);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.logStorageChange = event => {\n      if ((event === null || event === void 0 ? void 0 : event.key) !== enums.CONSTANTS[\"ACTIVECALL\"]) {\n        return false;\n      }\n\n      if (event.newValue || event.oldValue) {\n        var _this$state$incomingC, _call;\n\n        let call;\n\n        if (event.newValue) {\n          call = JSON.parse(event.newValue);\n        } else if (event.oldValue) {\n          call = JSON.parse(event.oldValue);\n        }\n\n        if (((_this$state$incomingC = this.state.incomingCall) === null || _this$state$incomingC === void 0 ? void 0 : _this$state$incomingC.getSessionId()) === ((_call = call) === null || _call === void 0 ? void 0 : _call.sessionId)) {\n          SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n          this.setState({\n            incomingCall: null\n          });\n        }\n      }\n    };\n\n    this._isMounted = false;\n    this.state = {\n      incomingCall: null,\n      callInProgress: null\n    };\n    this.callButtonRef = /*#__PURE__*/React.createRef();\n    CometChat.getLoggedinUser().then(user => this.loggedInUser = user).catch(error => {\n      console.error(error);\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.CallAlertManager = new CallAlertManager();\n    this.CallAlertManager.attachListeners(this.callScreenUpdated);\n    Storage.attachChangeDetection(this.logStorageChange);\n  }\n\n  componentDidUpdate() {\n    if (this.state.incomingCall) {\n      this.adjustFontSize();\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    Storage.detachChangeDetection(this.logStorageChange);\n  }\n\n  render() {\n    let callScreen = null,\n        incomingCallAlert = null;\n\n    if (this.state.incomingCall) {\n      let callType = jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 5\n        }\n      }, jsx(\"i\", {\n        css: callIconStyle(audioCallIcon, this.context),\n        title: Translator.translate(\"INCOMING_AUDIO_CALL\", this.props.lang),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 6\n        }\n      }), jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 6\n        }\n      }, Translator.translate(\"INCOMING_AUDIO_CALL\", this.props.lang)));\n\n      if (this.state.incomingCall.type === CometChat.CALL_TYPE.VIDEO) {\n        callType = jsx(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 6\n          }\n        }, jsx(\"i\", {\n          css: callIconStyle(videoCallIcon, this.context),\n          title: Translator.translate(\"INCOMING_VIDEO_CALL\", this.props.lang),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 7\n          }\n        }), jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 7\n          }\n        }, Translator.translate(\"INCOMING_VIDEO_CALL\", this.props.lang)));\n      }\n\n      incomingCallAlert = jsx(\"div\", {\n        css: incomingCallWrapperStyle(this.props, keyframes),\n        className: \"callalert__wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 5\n        }\n      }, jsx(\"div\", {\n        css: callContainerStyle(),\n        className: \"callalert__container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 6\n        }\n      }, jsx(\"div\", {\n        css: headerWrapperStyle(),\n        className: \"callalert__header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 7\n        }\n      }, jsx(\"div\", {\n        css: callDetailStyle(),\n        className: \"header__detail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 8\n        }\n      }, jsx(\"div\", {\n        css: nameStyle(),\n        className: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 9\n        }\n      }, this.state.incomingCall.sender.name), jsx(\"div\", {\n        css: callTypeStyle(this.props),\n        className: \"calltype\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 9\n        }\n      }, callType)), jsx(\"div\", {\n        css: thumbnailStyle(),\n        className: \"header__thumbnail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 8\n        }\n      }, jsx(CometChatAvatar, {\n        user: this.state.incomingCall.sender,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 9\n        }\n      }))), jsx(\"div\", {\n        css: headerButtonStyle(),\n        className: \"callalert__buttons\",\n        ref: this.callButtonRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 7\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        css: ButtonStyle(this.props, 0),\n        className: \"button button__decline\",\n        onClick: () => this.rejectCall(this.state.incomingCall, CometChat.CALL_STATUS.REJECTED),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 8\n        }\n      }, Translator.translate(\"DECLINE\", this.props.lang)), jsx(\"button\", {\n        type: \"button\",\n        css: ButtonStyle(this.props, 1),\n        className: \"button button__accept\",\n        onClick: this.acceptCall,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 8\n        }\n      }, Translator.translate(\"ACCEPT\", this.props.lang)))));\n    }\n\n    if (this.state.callInProgress) {\n      callScreen = jsx(CometChatCallScreen, {\n        loggedInUser: this.loggedInUser,\n        call: this.state.callInProgress,\n        actionGenerated: this.actionHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 17\n        }\n      });\n    }\n\n    return jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 4\n      }\n    }, incomingCallAlert, callScreen);\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatIncomingCall.contextType = CometChatContext;\nCometChatIncomingCall.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatIncomingCall.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatIncomingCall };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Calls/CometChatIncomingCall/index.js"],"names":["React","jsx","keyframes","PropTypes","CometChat","CallAlertManager","CometChatCallScreen","CometChatAvatar","CometChatContext","enums","SoundManager","Storage","theme","Translator","incomingCallWrapperStyle","callContainerStyle","headerWrapperStyle","callDetailStyle","nameStyle","callTypeStyle","thumbnailStyle","headerButtonStyle","ButtonStyle","callIconStyle","CometChatIncomingCall","PureComponent","constructor","props","adjustFontSize","callButtonRef","current","reduceFontSize","buttonNodeList","querySelectorAll","forEach","buttonNode","parentContainerWidth","clientWidth","currentTextWidth","scrollWidth","style","fontSize","callScreenUpdated","key","call","INCOMING_CALL_RECEIVED","incomingCallReceived","INCOMING_CALL_CANCELLED","incomingCallCancelled","incomingCall","_isMounted","state","callInitiator","uid","loggedInUser","play","CONSTANTS","AUDIO","context","setState","pause","rejectCall","callStatus","isCallActive","CALL_STATUS","BUSY","REJECTED","sessionId","then","rejectedCall","setCallInProgress","setItem","actionGenerated","ACTIONS","callInProgress","catch","error","errorCode","hasOwnProperty","code","setToastMessage","acceptCall","checkForActiveCallAndEndCall","response","Object","keys","length","sessionID","getActiveCallSessionID","promise","Promise","resolve","reject","success","endCall","actionHandler","action","logStorageChange","event","newValue","oldValue","JSON","parse","getSessionId","createRef","getLoggedinUser","user","console","componentDidMount","attachListeners","attachChangeDetection","componentDidUpdate","componentWillUnmount","detachChangeDetection","render","callScreen","incomingCallAlert","callType","audioCallIcon","translate","lang","type","CALL_TYPE","VIDEO","videoCallIcon","sender","name","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, keyframes } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CallAlertManager } from \"./controller\";\n\nimport { CometChatCallScreen } from \"../CometChatCallScreen\";\nimport { CometChatAvatar } from \"../../Shared\";\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { SoundManager } from \"../../../util/SoundManager\";\nimport { Storage } from \"../../../util/Storage\";\n\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\n\nimport {\n    incomingCallWrapperStyle,\n    callContainerStyle,\n    headerWrapperStyle,\n    callDetailStyle,\n    nameStyle,\n    callTypeStyle,\n    thumbnailStyle,\n    headerButtonStyle,\n    ButtonStyle,\n\tcallIconStyle\n} from \"./style\";\n\nimport audioCallIcon from \"./resources/incoming-call.svg\";\nimport videoCallIcon from \"./resources/incoming-video-call.svg\";\n\nclass CometChatIncomingCall extends React.PureComponent {\n\tstatic contextType = CometChatContext;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis._isMounted = false;\n\t\tthis.state = {\n\t\t\tincomingCall: null,\n\t\t\tcallInProgress: null,\n\t\t};\n\n\t\tthis.callButtonRef = React.createRef();\n\n\t\tCometChat.getLoggedinUser()\n\t\t\t.then(user => (this.loggedInUser = user))\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error);\n\t\t\t});\n\t}\n\n\tcomponentDidMount() {\n\t\tthis._isMounted = true;\n\n\t\tthis.CallAlertManager = new CallAlertManager();\n\t\tthis.CallAlertManager.attachListeners(this.callScreenUpdated);\n\n\t\tStorage.attachChangeDetection(this.logStorageChange);\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif (this.state.incomingCall) {\n\t\t\tthis.adjustFontSize();\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis._isMounted = false;\n\t\tStorage.detachChangeDetection(this.logStorageChange);\n\t}\n\n\tadjustFontSize = () => {\n\n\t\tif (this.callButtonRef && this.callButtonRef.current) {\n\n\t\t\tlet reduceFontSize = false;\n            const buttonNodeList = this.callButtonRef.current.querySelectorAll(\"button\");\n\n\t\t\tbuttonNodeList.forEach(buttonNode => {\n\t\t\t\tconst parentContainerWidth = buttonNode.clientWidth;\n\t\t\t\tconst currentTextWidth = buttonNode.scrollWidth;\n\n\t\t\t\tif (parentContainerWidth < currentTextWidth) {\n\t\t\t\t\treduceFontSize = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (reduceFontSize) {\n\t\t\t\tbuttonNodeList.forEach(buttonNode => {\n\t\t\t\t\tbuttonNode.style.fontSize = \"85%\";\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tcallScreenUpdated = (key, call) => {\n\t\tswitch (key) {\n\t\t\tcase enums.INCOMING_CALL_RECEIVED: //occurs at the callee end\n\t\t\t\tthis.incomingCallReceived(call);\n\t\t\t\tbreak;\n\t\t\tcase enums.INCOMING_CALL_CANCELLED: //occurs(call dismissed) at the callee end, caller cancels the call\n\t\t\t\tthis.incomingCallCancelled(call);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tincomingCallReceived = incomingCall => {\n\t\tif (this._isMounted) {\n\t\t\tif (this.state.incomingCall === null) {\n\t\t\t\tif (incomingCall?.callInitiator.uid !== this.loggedInUser?.uid) {\n\t\t\t\t\tSoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n\t\t\t\t\tthis.setState({incomingCall: incomingCall});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tincomingCallCancelled = call => {\n\t\tif (this._isMounted) {\n\t\t\t//we are not marking this as read as it will done in messagelist component\n\t\t\tSoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n\t\t\tthis.setState({incomingCall: null});\n\t\t}\n\t};\n\n\trejectCall = () => {\n\t\tSoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n\t\tlet callStatus = this.isCallActive() ? CometChat.CALL_STATUS.BUSY : CometChat.CALL_STATUS.REJECTED;\n\n\t\tCometChat.rejectCall(this.state.incomingCall.sessionId, callStatus)\n\t\t\t.then(rejectedCall => {\n\t\t\t\tif (this.isCallActive() === false) {\n\t\t\t\t\tif (this.context) {\n\t\t\t\t\t\tthis.context.setCallInProgress(null, \"\");\n\t\t\t\t\t}\n\t\t\t\t\tStorage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], rejectedCall);\n\t\t\t\t\tthis.props.actionGenerated(enums.ACTIONS[\"INCOMING_CALL_REJECTED\"], rejectedCall);\n\t\t\t\t\tthis.setState({callInProgress: null});\n\t\t\t\t}\n\n\t\t\t\tthis.setState({incomingCall: null});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.setState({incomingCall: null, callInProgress: null});\n\t\t\t\tconst errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n\t\t\t\tthis.context.setToastMessage(\"error\", errorCode);\n\t\t\t});\n\t};\n\n\tacceptCall = () => {\n\t\tthis.checkForActiveCallAndEndCall()\n\t\t\t.then(response => {\n\t\t\t\tSoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n\t\t\t\tCometChat.acceptCall(this.state.incomingCall.sessionId)\n\t\t\t\t\t.then(call => {\n\t\t\t\t\t\tif (this.context) {\n\t\t\t\t\t\t\tthis.context.setCallInProgress(call, enums.CONSTANTS[\"INCOMING_DEFAULT_CALLING\"]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tStorage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], call);\n\t\t\t\t\t\tthis.props.actionGenerated(enums.ACTIONS[\"INCOMING_CALL_ACCEPTED\"], call);\n\t\t\t\t\t\tthis.setState({incomingCall: null, callInProgress: call});\n\t\t\t\t\t})\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tif (this.context) {\n\t\t\t\t\t\t\tthis.context.setCallInProgress(null, \"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setState({incomingCall: null, callInProgress: null});\n\n\t\t\t\t\t\tconst errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n\t\t\t\t\t\tthis.context.setToastMessage(\"error\", errorCode);\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconst errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n\t\t\t\tthis.context.setToastMessage(\"error\", errorCode);\n\t\t\t});\n\t};\n\n\tisCallActive = () => {\n\t\tif (Object.keys(this.context.callInProgress).length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet sessionID = this.getActiveCallSessionID();\n\t\tif (!sessionID) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tgetActiveCallSessionID = () => {\n\t\treturn this.context.getActiveCallSessionID();\n\t};\n\n\tcheckForActiveCallAndEndCall = () => {\n\t\tconst promise = new Promise((resolve, reject) => {\n\t\t\tif (this.isCallActive() === false) {\n\t\t\t\treturn resolve({success: true});\n\t\t\t}\n\n\t\t\tlet sessionID = this.getActiveCallSessionID();\n\t\t\tCometChat.endCall(sessionID)\n\t\t\t\t.then(response => {\n\t\t\t\t\treturn resolve(response);\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\treturn reject(error);\n\t\t\t\t});\n\t\t});\n\n\t\treturn promise;\n\t};\n\n\tactionHandler = (action, call) => {\n\t\tswitch (action) {\n\t\t\tcase enums.ACTIONS[\"OUTGOING_CALL_ENDED\"]:\n\t\t\t\tthis.setState({callInProgress: null});\n\t\t\t\tbreak;\n\t\t\tcase enums.ACTIONS[\"USER_JOINED_CALL\"]:\n\t\t\tcase enums.ACTIONS[\"USER_LEFT_CALL\"]:\n\t\t\t\tthis.props.actionGenerated(action, call);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tlogStorageChange = event => {\n\t\tif (event?.key !== enums.CONSTANTS[\"ACTIVECALL\"]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (event.newValue || event.oldValue) {\n\t\t\tlet call;\n\t\t\tif (event.newValue) {\n\t\t\t\tcall = JSON.parse(event.newValue);\n\t\t\t} else if (event.oldValue) {\n\t\t\t\tcall = JSON.parse(event.oldValue);\n\t\t\t}\n\n\t\t\tif (this.state.incomingCall?.getSessionId() === call?.sessionId) {\n\t\t\t\tSoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n\t\t\t\tthis.setState({incomingCall: null});\n\t\t\t}\n\t\t}\n\t};\n\n\trender() {\n\t\tlet callScreen = null,\n\t\t\tincomingCallAlert = null;\n\t\tif (this.state.incomingCall) {\n\t\t\tlet callType = (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<i css={callIconStyle(audioCallIcon, this.context)} title={Translator.translate(\"INCOMING_AUDIO_CALL\", this.props.lang)}></i>\n\t\t\t\t\t<span>{Translator.translate(\"INCOMING_AUDIO_CALL\", this.props.lang)}</span>\n\t\t\t\t</React.Fragment>\n\t\t\t);\n\t\t\tif (this.state.incomingCall.type === CometChat.CALL_TYPE.VIDEO) {\n\t\t\t\tcallType = (\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t<i css={callIconStyle(videoCallIcon, this.context)} title={Translator.translate(\"INCOMING_VIDEO_CALL\", this.props.lang)}></i>\n\t\t\t\t\t\t<span>{Translator.translate(\"INCOMING_VIDEO_CALL\", this.props.lang)}</span>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tincomingCallAlert = (\n\t\t\t\t<div css={incomingCallWrapperStyle(this.props, keyframes)} className=\"callalert__wrapper\">\n\t\t\t\t\t<div css={callContainerStyle()} className=\"callalert__container\">\n\t\t\t\t\t\t<div css={headerWrapperStyle()} className=\"callalert__header\">\n\t\t\t\t\t\t\t<div css={callDetailStyle()} className=\"header__detail\">\n\t\t\t\t\t\t\t\t<div css={nameStyle()} className=\"name\">\n\t\t\t\t\t\t\t\t\t{this.state.incomingCall.sender.name}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div css={callTypeStyle(this.props)} className=\"calltype\">\n\t\t\t\t\t\t\t\t\t{callType}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div css={thumbnailStyle()} className=\"header__thumbnail\">\n\t\t\t\t\t\t\t\t<CometChatAvatar user={this.state.incomingCall.sender} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div css={headerButtonStyle()} className=\"callalert__buttons\" ref={this.callButtonRef}>\n\t\t\t\t\t\t\t<button type=\"button\" css={ButtonStyle(this.props, 0)} className=\"button button__decline\" onClick={() => this.rejectCall(this.state.incomingCall, CometChat.CALL_STATUS.REJECTED)}>\n\t\t\t\t\t\t\t\t{Translator.translate(\"DECLINE\", this.props.lang)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button type=\"button\" css={ButtonStyle(this.props, 1)} className=\"button button__accept\" onClick={this.acceptCall}>\n\t\t\t\t\t\t\t\t{Translator.translate(\"ACCEPT\", this.props.lang)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\tif (this.state.callInProgress) {\n\t\t\tcallScreen = <CometChatCallScreen loggedInUser={this.loggedInUser} call={this.state.callInProgress} actionGenerated={this.actionHandler} />;\n\t\t}\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t{incomingCallAlert}\n\t\t\t\t{callScreen}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\n// Specifies the default values for props:\nCometChatIncomingCall.defaultProps = {\n    lang: Translator.getDefaultLanguage(),\n    theme: theme\n};\n\nCometChatIncomingCall.propTypes = {\n    lang: PropTypes.string,\n    theme: PropTypes.object\n}\n\nexport { CometChatIncomingCall };"]},"metadata":{},"sourceType":"module"}