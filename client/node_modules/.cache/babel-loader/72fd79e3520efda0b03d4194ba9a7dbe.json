{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Shared/CometChatSharedMediaView/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport { SharedMediaManager } from \"./controller\";\nimport * as enums from \"../../../util/enums.js\";\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { sectionStyle, sectionHeaderStyle, sectionContentStyle, mediaBtnStyle, buttonStyle, mediaItemStyle, itemStyle } from \"./style\";\nimport fileIcon from \"./resources/file-upload.svg\";\n\nclass CometChatSharedMediaView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.messageUpdated = (key, message) => {\n      switch (key) {\n        case enums.MESSAGE_DELETED:\n          this.messageDeleted(message);\n          break;\n\n        case enums.MEDIA_MESSAGE_RECEIVED:\n          this.messageReceived(message);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.messageDeleted = deletedMessage => {\n      const messageType = deletedMessage.data.type;\n\n      if (this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP && deletedMessage.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP && deletedMessage.getReceiver().guid === this.context.item.guid && messageType === this.state.messagetype) {\n        const messageList = [...this.state.messageList];\n        const filteredMessages = messageList.filter(message => message.id !== deletedMessage.id);\n        this.setState({\n          messageList: filteredMessages,\n          scrollToBottom: false\n        });\n      }\n    };\n\n    this.messageReceived = message => {\n      const messageType = message.data.type;\n\n      if (this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP && message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP && message.getReceiver().guid === this.context.item.guid && messageType === this.state.messagetype) {\n        let messages = [...this.state.messageList];\n        messages = messages.concat(message);\n        this.setState({\n          messageList: messages,\n          scrollToBottom: true\n        });\n      }\n    };\n\n    this.getMessages = (scrollToBottom = false) => {\n      this.SharedMediaManager.fetchPreviousMessages().then(messages => {\n        const messageList = [...messages, ...this.state.messageList];\n\n        if (this._isMounted) {\n          this.setState({\n            messageList: messageList\n          });\n\n          if (scrollToBottom) {\n            this.scrollToBottom();\n          }\n        }\n      }).catch(error => {\n        const errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n        this.context.setToastMessage(\"error\", errorCode);\n      });\n    };\n\n    this.scrollToBottom = () => {\n      if (this.messageContainer) {\n        this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n      }\n    };\n\n    this.handleScroll = e => {\n      const top = Math.round(e.currentTarget.scrollTop) === 0;\n\n      if (top && this.state.messageList.length) {\n        this.getMessages();\n      }\n    };\n\n    this.mediaClickHandler = type => {\n      this.setState({\n        messagetype: type,\n        messageList: []\n      });\n    };\n\n    this._isMounted = false;\n    this.state = {\n      messagetype: \"image\",\n      messageList: []\n    };\n    this.messageContainer = /*#__PURE__*/React.createRef();\n    CometChat.getLoggedinUser().then(user => this.loggedInUser = user).catch(error => {\n      console.error(error);\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.SharedMediaManager = new SharedMediaManager(this.context.item, this.context.type, this.state.messagetype);\n    this.getMessages(true);\n    this.SharedMediaManager.attachListeners(this.messageUpdated);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.messagetype !== this.state.messagetype) {\n      this.SharedMediaManager = null;\n      this.SharedMediaManager = new SharedMediaManager(this.context.item, this.context.type, this.state.messagetype);\n      this.getMessages(true);\n      this.SharedMediaManager.attachListeners(this.messageUpdated);\n    }\n  }\n\n  componentWillUnmount() {\n    this.SharedMediaManager.removeListeners();\n    this.SharedMediaManager = null;\n    this._isMounted = false;\n  } //callback for listener functions\n\n\n  render() {\n    const template = (message, key) => {\n      if (this.state.messagetype === \"image\" && message.data.url) {\n        return jsx(\"div\", {\n          id: message.id,\n          key: key,\n          css: itemStyle(this.state, this.props, fileIcon, this.context),\n          className: \"item item__image\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 21\n          }\n        }, jsx(\"img\", {\n          src: message.data.url,\n          alt: Translator.translate(\"SHARED_MEDIA\", this.props.lang),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }\n        }));\n      } else if (this.state.messagetype === \"video\" && message.data.url) {\n        return jsx(\"div\", {\n          id: message.id,\n          key: key,\n          css: itemStyle(this.state, this.props, fileIcon, this.context),\n          className: \"item item__video\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 21\n          }\n        }, jsx(\"video\", {\n          src: message.data.url,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }\n        }));\n      } else if (this.state.messagetype === \"file\" && message.data.attachments) {\n        return jsx(\"div\", {\n          id: message.id,\n          key: key,\n          css: itemStyle(this.state, this.props, fileIcon, this.context),\n          className: \"item item__file\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 21\n          }\n        }, jsx(\"a\", {\n          href: message.data.attachments[0].url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }\n        }, jsx(\"i\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }\n        }), jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 28\n          }\n        }, message.data.attachments[0].name)));\n      }\n    };\n\n    const messages = [...this.state.messageList];\n    const messageList = messages.map((message, key) => {\n      return template(message, key);\n    });\n    return jsx(\"div\", {\n      css: sectionStyle(this.props),\n      className: \"section section__sharedmedia\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }\n    }, jsx(\"h6\", {\n      css: sectionHeaderStyle(this.props),\n      className: \"section__header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }, Translator.translate(\"SHARED_MEDIA\", this.props.lang)), jsx(\"div\", {\n      css: sectionContentStyle(this.props),\n      \"data-id\": \"sharedmedia\",\n      className: \"section__content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }\n    }, jsx(\"div\", {\n      css: mediaBtnStyle(),\n      className: \"media__button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }\n    }, jsx(\"span\", {\n      css: buttonStyle(this.state, \"image\"),\n      onClick: () => this.mediaClickHandler(\"image\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }\n    }, Translator.translate(\"PHOTOS\", this.props.lang)), jsx(\"span\", {\n      css: buttonStyle(this.state, \"video\"),\n      onClick: () => this.mediaClickHandler(\"video\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }\n    }, Translator.translate(\"VIDEOS\", this.props.lang)), jsx(\"span\", {\n      css: buttonStyle(this.state, \"file\"),\n      onClick: () => this.mediaClickHandler(\"file\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 25\n      }\n    }, Translator.translate(\"DOCS\", this.props.lang))), jsx(\"div\", {\n      css: mediaItemStyle(),\n      className: \"media_items\",\n      ref: el => this.messageContainer = el,\n      onScroll: this.handleScroll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 21\n      }\n    }, messageList.length ? messageList : Translator.translate(\"NO_RECORDS_FOUND\", this.props.lang))));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatSharedMediaView.contextType = CometChatContext;\nCometChatSharedMediaView.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatSharedMediaView.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatSharedMediaView };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Shared/CometChatSharedMediaView/index.js"],"names":["React","jsx","PropTypes","CometChat","CometChatContext","SharedMediaManager","enums","theme","Translator","sectionStyle","sectionHeaderStyle","sectionContentStyle","mediaBtnStyle","buttonStyle","mediaItemStyle","itemStyle","CometChatSharedMediaView","Component","constructor","props","messageUpdated","key","message","MESSAGE_DELETED","messageDeleted","MEDIA_MESSAGE_RECEIVED","messageReceived","deletedMessage","messageType","data","type","context","ACTION_TYPE","TYPE_GROUP","getReceiverType","RECEIVER_TYPE","GROUP","getReceiver","guid","item","state","messagetype","messageList","filteredMessages","filter","id","setState","scrollToBottom","messages","concat","getMessages","fetchPreviousMessages","then","_isMounted","catch","error","errorCode","hasOwnProperty","code","setToastMessage","messageContainer","scrollTop","scrollHeight","handleScroll","e","top","Math","round","currentTarget","length","mediaClickHandler","createRef","getLoggedinUser","user","loggedInUser","console","componentDidMount","attachListeners","componentDidUpdate","prevProps","prevState","componentWillUnmount","removeListeners","render","template","url","fileIcon","translate","lang","attachments","name","map","el","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA;;AACA;;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AAGA,SAASC,gBAAT,QAAiC,gCAAjC;AAEA,SAASC,kBAAT,QAAmC,cAAnC;AACA,OAAO,KAAKC,KAAZ,MAAuB,wBAAvB;AAEA,SAASC,KAAT,QAAsB,0BAAtB;AACA,OAAOC,UAAP,MAAuB,4CAAvB;AAEA,SACIC,YADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIC,aAJJ,EAKIC,WALJ,EAMIC,cANJ,EAOIC,SAPJ,QASO,SATP;;;AAaA,MAAMC,wBAAN,SAAuChB,KAAK,CAACiB,SAA7C,CAAuD;AAInDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAyCnBC,cAzCmB,GAyCF,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAE/B,cAAOD,GAAP;AAEI,aAAKf,KAAK,CAACiB,eAAX;AACE,eAAKC,cAAL,CAAoBF,OAApB;AACA;;AACF,aAAKhB,KAAK,CAACmB,sBAAX;AACE,eAAKC,eAAL,CAAqBJ,OAArB;AACA;;AACF;AACE;AATN;AAWH,KAtDkB;;AAAA,SAwDnBE,cAxDmB,GAwDDG,cAAD,IAAoB;AAEjC,YAAMC,WAAW,GAAGD,cAAc,CAACE,IAAf,CAAoBC,IAAxC;;AACA,UAAI,KAAKC,OAAL,CAAaD,IAAb,KAAsB3B,SAAS,CAAC6B,WAAV,CAAsBC,UAA5C,IACDN,cAAc,CAACO,eAAf,OAAqC/B,SAAS,CAACgC,aAAV,CAAwBC,KAD5D,IAEDT,cAAc,CAACU,WAAf,GAA6BC,IAA7B,KAAsC,KAAKP,OAAL,CAAaQ,IAAb,CAAkBD,IAFvD,IAGDV,WAAW,KAAK,KAAKY,KAAL,CAAWC,WAH9B,EAG2C;AAEvC,cAAMC,WAAW,GAAG,CAAC,GAAG,KAAKF,KAAL,CAAWE,WAAf,CAApB;AACA,cAAMC,gBAAgB,GAAGD,WAAW,CAACE,MAAZ,CAAmBtB,OAAO,IAAIA,OAAO,CAACuB,EAAR,KAAelB,cAAc,CAACkB,EAA5D,CAAzB;AACA,aAAKC,QAAL,CAAc;AAAEJ,UAAAA,WAAW,EAAEC,gBAAf;AAAiCI,UAAAA,cAAc,EAAE;AAAjD,SAAd;AACH;AACJ,KApEkB;;AAAA,SAuEnBrB,eAvEmB,GAuEAJ,OAAD,IAAa;AAE3B,YAAMM,WAAW,GAAGN,OAAO,CAACO,IAAR,CAAaC,IAAjC;;AACA,UAAI,KAAKC,OAAL,CAAaD,IAAb,KAAsB3B,SAAS,CAAC6B,WAAV,CAAsBC,UAA5C,IACDX,OAAO,CAACY,eAAR,OAA8B/B,SAAS,CAACgC,aAAV,CAAwBC,KADrD,IAEDd,OAAO,CAACe,WAAR,GAAsBC,IAAtB,KAA+B,KAAKP,OAAL,CAAaQ,IAAb,CAAkBD,IAFhD,IAGDV,WAAW,KAAK,KAAKY,KAAL,CAAWC,WAH9B,EAG2C;AAEvC,YAAIO,QAAQ,GAAG,CAAC,GAAG,KAAKR,KAAL,CAAWE,WAAf,CAAf;AACAM,QAAAA,QAAQ,GAAGA,QAAQ,CAACC,MAAT,CAAgB3B,OAAhB,CAAX;AACA,aAAKwB,QAAL,CAAc;AAAEJ,UAAAA,WAAW,EAAEM,QAAf;AAAyBD,UAAAA,cAAc,EAAE;AAAzC,SAAd;AACH;AACJ,KAnFkB;;AAAA,SAqFnBG,WArFmB,GAqFL,CAACH,cAAc,GAAG,KAAlB,KAA4B;AAEtC,WAAK1C,kBAAL,CAAwB8C,qBAAxB,GAAgDC,IAAhD,CAAqDJ,QAAQ,IAAI;AAE7D,cAAMN,WAAW,GAAG,CAAC,GAAGM,QAAJ,EAAc,GAAG,KAAKR,KAAL,CAAWE,WAA5B,CAApB;;AACA,YAAI,KAAKW,UAAT,EAAqB;AAEjB,eAAKP,QAAL,CAAc;AAACJ,YAAAA,WAAW,EAAEA;AAAd,WAAd;;AACA,cAAGK,cAAH,EAAmB;AACf,iBAAKA,cAAL;AACH;AACJ;AAEJ,OAXD,EAWGO,KAXH,CAWSC,KAAK,IAAI;AAEd,cAAMC,SAAS,GAAID,KAAK,IAAIA,KAAK,CAACE,cAAN,CAAqB,MAArB,CAAV,GAA0CF,KAAK,CAACG,IAAhD,GAAuD,OAAzE;AACA,aAAK3B,OAAL,CAAa4B,eAAb,CAA6B,OAA7B,EAAsCH,SAAtC;AACH,OAfD;AAgBH,KAvGkB;;AAAA,SAyGnBT,cAzGmB,GAyGF,MAAM;AAEnB,UAAI,KAAKa,gBAAT,EAA2B;AACvB,aAAKA,gBAAL,CAAsBC,SAAtB,GAAkC,KAAKD,gBAAL,CAAsBE,YAAxD;AACH;AACJ,KA9GkB;;AAAA,SAgHnBC,YAhHmB,GAgHHC,CAAD,IAAO;AAElB,YAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,aAAF,CAAgBP,SAA3B,MAA0C,CAAtD;;AACA,UAAII,GAAG,IAAI,KAAKzB,KAAL,CAAWE,WAAX,CAAuB2B,MAAlC,EAA0C;AACtC,aAAKnB,WAAL;AACH;AACJ,KAtHkB;;AAAA,SAwHnBoB,iBAxHmB,GAwHExC,IAAD,IAAU;AAC1B,WAAKgB,QAAL,CAAc;AAACL,QAAAA,WAAW,EAAEX,IAAd;AAAoBY,QAAAA,WAAW,EAAE;AAAjC,OAAd;AACH,KA1HkB;;AAEf,SAAKW,UAAL,GAAkB,KAAlB;AACA,SAAKb,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE,OADJ;AAETC,MAAAA,WAAW,EAAE;AAFJ,KAAb;AAKA,SAAKkB,gBAAL,gBAAwB5D,KAAK,CAACuE,SAAN,EAAxB;AAEApE,IAAAA,SAAS,CAACqE,eAAV,GAA4BpB,IAA5B,CAAiCqB,IAAI,IAAI,KAAKC,YAAL,GAAoBD,IAA7D,EAAmEnB,KAAnE,CAAyEC,KAAK,IAAI;AAC9EoB,MAAAA,OAAO,CAACpB,KAAR,CAAcA,KAAd;AACH,KAFD;AAGH;;AAEDqB,EAAAA,iBAAiB,GAAG;AAEhB,SAAKvB,UAAL,GAAkB,IAAlB;AACA,SAAKhD,kBAAL,GAA0B,IAAIA,kBAAJ,CAAuB,KAAK0B,OAAL,CAAaQ,IAApC,EAA0C,KAAKR,OAAL,CAAaD,IAAvD,EAA6D,KAAKU,KAAL,CAAWC,WAAxE,CAA1B;AACA,SAAKS,WAAL,CAAiB,IAAjB;AACA,SAAK7C,kBAAL,CAAwBwE,eAAxB,CAAwC,KAAKzD,cAA7C;AACH;;AAED0D,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAErC,QAAGA,SAAS,CAACvC,WAAV,KAA0B,KAAKD,KAAL,CAAWC,WAAxC,EAAqD;AAEjD,WAAKpC,kBAAL,GAA0B,IAA1B;AACA,WAAKA,kBAAL,GAA0B,IAAIA,kBAAJ,CAAuB,KAAK0B,OAAL,CAAaQ,IAApC,EAA0C,KAAKR,OAAL,CAAaD,IAAvD,EAA6D,KAAKU,KAAL,CAAWC,WAAxE,CAA1B;AACA,WAAKS,WAAL,CAAiB,IAAjB;AACA,WAAK7C,kBAAL,CAAwBwE,eAAxB,CAAwC,KAAKzD,cAA7C;AACH;AACJ;;AAED6D,EAAAA,oBAAoB,GAAG;AACnB,SAAK5E,kBAAL,CAAwB6E,eAAxB;AACA,SAAK7E,kBAAL,GAA0B,IAA1B;AACA,SAAKgD,UAAL,GAAkB,KAAlB;AACH,GA1CkD,CA4CnD;;;AAoFA8B,EAAAA,MAAM,GAAG;AAEL,UAAMC,QAAQ,GAAG,CAAC9D,OAAD,EAAUD,GAAV,KAAkB;AAE/B,UAAG,KAAKmB,KAAL,CAAWC,WAAX,KAA2B,OAA3B,IAAsCnB,OAAO,CAACO,IAAR,CAAawD,GAAtD,EAA2D;AAEvD,eACI;AAAK,UAAA,EAAE,EAAE/D,OAAO,CAACuB,EAAjB;AAAqB,UAAA,GAAG,EAAExB,GAA1B;AAA+B,UAAA,GAAG,EAAEN,SAAS,CAAC,KAAKyB,KAAN,EAAa,KAAKrB,KAAlB,EAAyBmE,QAAzB,EAAmC,KAAKvD,OAAxC,CAA7C;AAA+F,UAAA,SAAS,EAAC,kBAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,GAAG,EAAET,OAAO,CAACO,IAAR,CAAawD,GAAvB;AAA4B,UAAA,GAAG,EAAE7E,UAAU,CAAC+E,SAAX,CAAqB,cAArB,EAAqC,KAAKpE,KAAL,CAAWqE,IAAhD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ;AAMH,OARD,MAQO,IAAI,KAAKhD,KAAL,CAAWC,WAAX,KAA2B,OAA3B,IAAsCnB,OAAO,CAACO,IAAR,CAAawD,GAAvD,EAA4D;AAE/D,eACI;AAAK,UAAA,EAAE,EAAE/D,OAAO,CAACuB,EAAjB;AAAqB,UAAA,GAAG,EAAExB,GAA1B;AAA+B,UAAA,GAAG,EAAEN,SAAS,CAAC,KAAKyB,KAAN,EAAa,KAAKrB,KAAlB,EAAyBmE,QAAzB,EAAmC,KAAKvD,OAAxC,CAA7C;AAA+F,UAAA,SAAS,EAAC,kBAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAO,UAAA,GAAG,EAAET,OAAO,CAACO,IAAR,CAAawD,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ;AAMH,OARM,MAQA,IAAI,KAAK7C,KAAL,CAAWC,WAAX,KAA2B,MAA3B,IAAqCnB,OAAO,CAACO,IAAR,CAAa4D,WAAtD,EAAmE;AAEtE,eACI;AAAK,UAAA,EAAE,EAAEnE,OAAO,CAACuB,EAAjB;AAAqB,UAAA,GAAG,EAAExB,GAA1B;AAA+B,UAAA,GAAG,EAAEN,SAAS,CAAC,KAAKyB,KAAN,EAAa,KAAKrB,KAAlB,EAAyBmE,QAAzB,EAAmC,KAAKvD,OAAxC,CAA7C;AAA+F,UAAA,SAAS,EAAC,iBAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAG,UAAA,IAAI,EAAET,OAAO,CAACO,IAAR,CAAa4D,WAAb,CAAyB,CAAzB,EAA4BJ,GAArC;AACA,UAAA,MAAM,EAAC,QADP;AAEA,UAAA,GAAG,EAAC,qBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHJ,EAIG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAO/D,OAAO,CAACO,IAAR,CAAa4D,WAAb,CAAyB,CAAzB,EAA4BC,IAAnC,CAJH,CADJ,CADJ;AAUH;AACJ,KA/BD;;AAiCA,UAAM1C,QAAQ,GAAG,CAAC,GAAG,KAAKR,KAAL,CAAWE,WAAf,CAAjB;AACA,UAAMA,WAAW,GAAGM,QAAQ,CAAC2C,GAAT,CAAa,CAACrE,OAAD,EAAUD,GAAV,KAAkB;AAC/C,aAAQ+D,QAAQ,CAAC9D,OAAD,EAAUD,GAAV,CAAhB;AACH,KAFmB,CAApB;AAIA,WACI;AAAK,MAAA,GAAG,EAAEZ,YAAY,CAAC,KAAKU,KAAN,CAAtB;AAAoC,MAAA,SAAS,EAAC,8BAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,GAAG,EAAET,kBAAkB,CAAC,KAAKS,KAAN,CAA3B;AAAyC,MAAA,SAAS,EAAC,iBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsEX,UAAU,CAAC+E,SAAX,CAAqB,cAArB,EAAqC,KAAKpE,KAAL,CAAWqE,IAAhD,CAAtE,CADJ,EAEI;AAAK,MAAA,GAAG,EAAE7E,mBAAmB,CAAC,KAAKQ,KAAN,CAA7B;AAA2C,iBAAQ,aAAnD;AAAiE,MAAA,SAAS,EAAC,kBAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,GAAG,EAAEP,aAAa,EAAvB;AAA2B,MAAA,SAAS,EAAC,eAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,GAAG,EAAEC,WAAW,CAAC,KAAK2B,KAAN,EAAa,OAAb,CAAtB;AAA6C,MAAA,OAAO,EAAE,MAAM,KAAK8B,iBAAL,CAAuB,OAAvB,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8F9D,UAAU,CAAC+E,SAAX,CAAqB,QAArB,EAA+B,KAAKpE,KAAL,CAAWqE,IAA1C,CAA9F,CADJ,EAEI;AAAM,MAAA,GAAG,EAAE3E,WAAW,CAAC,KAAK2B,KAAN,EAAa,OAAb,CAAtB;AAA6C,MAAA,OAAO,EAAE,MAAM,KAAK8B,iBAAL,CAAuB,OAAvB,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8F9D,UAAU,CAAC+E,SAAX,CAAqB,QAArB,EAA+B,KAAKpE,KAAL,CAAWqE,IAA1C,CAA9F,CAFJ,EAGI;AAAM,MAAA,GAAG,EAAE3E,WAAW,CAAC,KAAK2B,KAAN,EAAa,MAAb,CAAtB;AAA4C,MAAA,OAAO,EAAE,MAAM,KAAK8B,iBAAL,CAAuB,MAAvB,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4F9D,UAAU,CAAC+E,SAAX,CAAqB,MAArB,EAA6B,KAAKpE,KAAL,CAAWqE,IAAxC,CAA5F,CAHJ,CADJ,EAMI;AAAK,MAAA,GAAG,EAAE1E,cAAc,EAAxB;AAA4B,MAAA,SAAS,EAAC,aAAtC;AACA,MAAA,GAAG,EAAE8E,EAAE,IAAI,KAAKhC,gBAAL,GAAwBgC,EADnC;AAEA,MAAA,QAAQ,EAAE,KAAK7B,YAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAE+BrB,WAAW,CAAC2B,MAAb,GAAuB3B,WAAvB,GAAqClC,UAAU,CAAC+E,SAAX,CAAqB,kBAArB,EAAyC,KAAKpE,KAAL,CAAWqE,IAApD,CAFnE,CANJ,CAFJ,CADJ;AAgBH;;AAxLkD,C,CA2LvD;;;AA3LMxE,wB,CAEK6E,W,GAAczF,gB;AA0LzBY,wBAAwB,CAAC8E,YAAzB,GAAwC;AACpCN,EAAAA,IAAI,EAAEhF,UAAU,CAACuF,kBAAX,EAD8B;AAEpCxF,EAAAA,KAAK,EAAEA;AAF6B,CAAxC;AAKAS,wBAAwB,CAACgF,SAAzB,GAAqC;AACjCR,EAAAA,IAAI,EAAEtF,SAAS,CAAC+F,MADiB;AAEjC1F,EAAAA,KAAK,EAAEL,SAAS,CAACgG;AAFgB,CAArC;AAKA,SAASlF,wBAAT","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\n\nimport { SharedMediaManager } from \"./controller\";\nimport * as enums from \"../../../util/enums.js\";\n\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\n\nimport {\n    sectionStyle,\n    sectionHeaderStyle,\n    sectionContentStyle,\n    mediaBtnStyle,\n    buttonStyle,\n    mediaItemStyle,\n    itemStyle,\n\n} from \"./style\";\n\nimport fileIcon from \"./resources/file-upload.svg\";\n\nclass CometChatSharedMediaView extends React.Component {\n\n    static contextType = CometChatContext;\n\n    constructor(props) {\n        super(props);\n        this._isMounted = false;\n        this.state = {\n            messagetype: \"image\",\n            messageList: []\n        }\n\n        this.messageContainer = React.createRef();\n\n        CometChat.getLoggedinUser().then(user => this.loggedInUser = user).catch(error => {\n            console.error(error);\n        });\n    }\n\n    componentDidMount() {\n\n        this._isMounted = true;\n        this.SharedMediaManager = new SharedMediaManager(this.context.item, this.context.type, this.state.messagetype);\n        this.getMessages(true);\n        this.SharedMediaManager.attachListeners(this.messageUpdated);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        if(prevState.messagetype !== this.state.messagetype) {\n\n            this.SharedMediaManager = null;\n            this.SharedMediaManager = new SharedMediaManager(this.context.item, this.context.type, this.state.messagetype);\n            this.getMessages(true);\n            this.SharedMediaManager.attachListeners(this.messageUpdated);\n        }\n    }\n\n    componentWillUnmount() {\n        this.SharedMediaManager.removeListeners();\n        this.SharedMediaManager = null;\n        this._isMounted = false;\n    }\n\n    //callback for listener functions\n    messageUpdated = (key, message) => {\n\n        switch(key) {\n\n            case enums.MESSAGE_DELETED:\n              this.messageDeleted(message);\n              break;\n            case enums.MEDIA_MESSAGE_RECEIVED:\n              this.messageReceived(message);\n              break;\n            default:\n              break;\n        }\n    }\n\n    messageDeleted = (deletedMessage) => {\n  \n        const messageType = deletedMessage.data.type;\n        if (this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP\n        && deletedMessage.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP\n        && deletedMessage.getReceiver().guid === this.context.item.guid\n        && messageType === this.state.messagetype) {\n\n            const messageList = [...this.state.messageList];\n            const filteredMessages = messageList.filter(message => message.id !== deletedMessage.id);\n            this.setState({ messageList: filteredMessages, scrollToBottom: false });\n        }\n    }\n    \n    //message is received or composed & sent\n    messageReceived = (message) => {\n\n        const messageType = message.data.type;\n        if (this.context.type === CometChat.ACTION_TYPE.TYPE_GROUP\n        && message.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP\n        && message.getReceiver().guid === this.context.item.guid\n        && messageType === this.state.messagetype) {\n\n            let messages = [...this.state.messageList];\n            messages = messages.concat(message);\n            this.setState({ messageList: messages, scrollToBottom: true });\n        }\n    }\n\n    getMessages = (scrollToBottom = false) => {\n        \n        this.SharedMediaManager.fetchPreviousMessages().then(messages => {\n    \n            const messageList = [...messages, ...this.state.messageList];\n            if (this._isMounted) {\n\n                this.setState({messageList: messageList});\n                if(scrollToBottom) {\n                    this.scrollToBottom();\n                }\n            } \n    \n        }).catch(error => {\n\n            const errorCode = (error && error.hasOwnProperty(\"code\")) ? error.code : \"ERROR\";\n            this.context.setToastMessage(\"error\", errorCode);\n        });\n    }\n\n    scrollToBottom = () => {\n      \n        if (this.messageContainer) {\n            this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n        }\n    }\n\n    handleScroll = (e) => {\n\n        const top = Math.round(e.currentTarget.scrollTop) === 0;\n        if (top && this.state.messageList.length) {\n            this.getMessages();\n        }\n    }\n\n    mediaClickHandler = (type) => {\n        this.setState({messagetype: type, messageList: []});\n    }\n\n    render() {\n\n        const template = (message, key) => {\n\n            if(this.state.messagetype === \"image\" && message.data.url) {\n\n                return (\n                    <div id={message.id} key={key} css={itemStyle(this.state, this.props, fileIcon, this.context)} className=\"item item__image\">\n                        <img src={message.data.url} alt={Translator.translate(\"SHARED_MEDIA\", this.props.lang)} />\n                    </div>\n                );\n\n            } else if (this.state.messagetype === \"video\" && message.data.url) {\n\n                return (\n                    <div id={message.id} key={key} css={itemStyle(this.state, this.props, fileIcon, this.context)} className=\"item item__video\">\n                        <video src={message.data.url} />\n                    </div>\n                );\n\n            } else if (this.state.messagetype === \"file\" && message.data.attachments) {\n\n                return (\n                    <div id={message.id} key={key} css={itemStyle(this.state, this.props, fileIcon, this.context)} className=\"item item__file\">\n                        <a href={message.data.attachments[0].url} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\">\n                            <i></i>\n                           <span>{message.data.attachments[0].name}</span>\n                        </a>\n                    </div>\n                );\n            }\n        }\n\n        const messages = [...this.state.messageList];\n        const messageList = messages.map((message, key) => {\n            return (template(message, key));\n        });\n\n        return (\n            <div css={sectionStyle(this.props)} className=\"section section__sharedmedia\">\n                <h6 css={sectionHeaderStyle(this.props)} className=\"section__header\">{Translator.translate(\"SHARED_MEDIA\", this.props.lang)}</h6>\n                <div css={sectionContentStyle(this.props)} data-id=\"sharedmedia\" className=\"section__content\">\n                    <div css={mediaBtnStyle()} className=\"media__button\">\n                        <span css={buttonStyle(this.state, \"image\")} onClick={() => this.mediaClickHandler(\"image\")}>{Translator.translate(\"PHOTOS\", this.props.lang)}</span>\n                        <span css={buttonStyle(this.state, \"video\")} onClick={() => this.mediaClickHandler(\"video\")}>{Translator.translate(\"VIDEOS\", this.props.lang)}</span>\n                        <span css={buttonStyle(this.state, \"file\")} onClick={() => this.mediaClickHandler(\"file\")}>{Translator.translate(\"DOCS\", this.props.lang)}</span>\n                    </div>\n                    <div css={mediaItemStyle()} className=\"media_items\" \n                    ref={el => this.messageContainer = el}\n                    onScroll={this.handleScroll}>{(messageList.length) ? messageList : Translator.translate(\"NO_RECORDS_FOUND\", this.props.lang)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// Specifies the default values for props:\nCometChatSharedMediaView.defaultProps = {\n    lang: Translator.getDefaultLanguage(),\n    theme: theme\n};\n\nCometChatSharedMediaView.propTypes = {\n    lang: PropTypes.string,\n    theme: PropTypes.object\n}\n\nexport { CometChatSharedMediaView };"]},"metadata":{},"sourceType":"module"}