{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ConvorsationProvider.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport API from \"./API\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst conversationContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(conversationContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function Provider({\n  children\n}) {\n  _s2();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadingMessages, setLoadingMessages] = useState(false);\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState({});\n  const [messages, setMessages] = useState([]);\n  const [mobileView, setMobileView] = useState({\n    conversations: true,\n    messages: false\n  });\n\n  function sendMessage(text) {\n    // Yet another place where I ran into id issues.. this is going to be a mess to fix later\n    const convo_id = conversations[selectedConversationIndex].id; // const convo_id = selectedConversation._id;\n\n    API.sendMessage(convo_id, user._id, text).then(data => {\n      console.log(data);\n      setMessages([...messages, data]);\n    }).catch(e => console.error(e));\n  }\n\n  useEffect(() => {\n    API.init(([convos, topMessages]) => {\n      setConversations(convos);\n      setMessages(topMessages);\n      setIsLoading(false);\n    }).catch(e => console.error(e));\n  }, []);\n  const value = {\n    loadingState: [isLoading, setIsLoading],\n    conversationState: [conversations, setConversations],\n    selectedConversation: conversations[selectedConversationIndex],\n    messageState: [messages, setMessages],\n    mobileViewState: [mobileView, setMobileView],\n    loadingMessagesState: [loadingMessages, setLoadingMessages],\n    sendMessage\n  };\n  return /*#__PURE__*/_jsxDEV(conversationContext.Provider, {\n    value: value,\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n      id: \"spinner\",\n      animation: \"border\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 20\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Provider, \"R/blooHXtUrORLKpU0IkiUxRLX8=\");\n\n_c = Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ConvorsationProvider.jsx"],"names":["React","useContext","useEffect","useState","Spinner","API","conversationContext","createContext","useConversations","Provider","children","isLoading","setIsLoading","loadingMessages","setLoadingMessages","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","messages","setMessages","mobileView","setMobileView","sendMessage","text","convo_id","id","user","_id","then","data","console","log","catch","e","error","init","convos","topMessages","value","loadingState","conversationState","selectedConversation","messageState","mobileViewState","loadingMessagesState"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport API from \"./API\";\n\nconst conversationContext = React.createContext();\n\nexport function useConversations() {\n  return useContext(conversationContext);\n}\n\nexport function Provider({ children }) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadingMessages, setLoadingMessages] = useState(false);\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(\n    {}\n  );\n  const [messages, setMessages] = useState([]);\n  const [mobileView, setMobileView] = useState({\n    conversations: true,\n    messages: false,\n  });\n\n  function sendMessage(text) {\n    // Yet another place where I ran into id issues.. this is going to be a mess to fix later\n    const convo_id = conversations[selectedConversationIndex].id;\n    // const convo_id = selectedConversation._id;\n    API.sendMessage(convo_id, user._id, text)\n      .then((data) => {\n        console.log(data);\n        setMessages([...messages, data]);\n      })\n      .catch((e) => console.error(e));\n  }\n\n  useEffect(() => {\n    API.init(([convos, topMessages]) => {\n      setConversations(convos);\n      setMessages(topMessages);\n      setIsLoading(false);\n    }).catch((e) => console.error(e));\n  }, []);\n\n  const value = {\n    loadingState: [isLoading, setIsLoading],\n    conversationState: [conversations, setConversations],\n    selectedConversation: conversations[selectedConversationIndex],\n    messageState: [messages, setMessages],\n    mobileViewState: [mobileView, setMobileView],\n    loadingMessagesState: [loadingMessages, setLoadingMessages],\n    sendMessage,\n  };\n  return (\n    <conversationContext.Provider value={value}>\n      {isLoading ? <Spinner id=\"spinner\" animation=\"border\" /> : children}\n    </conversationContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}