{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/Comps/MainContent/Messaging/ConversationInfoScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Spinner, ListGroup } from \"react-bootstrap\";\nimport { useConversations } from \"../../../utils/ConversationProvider\";\nimport UserCard from \"../../UserCard\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ConversationInfoScreen({\n  containerRef\n}) {\n  _s();\n\n  const [convoInfo, setConvoInfo] = useState();\n  const {\n    selectedConversation\n  } = useConversations();\n  const [loading, setLoading] = useState(true);\n  const [mounted, setMounted] = useState(true);\n\n  function trimMessages(conversation) {\n    const mutatedConversation = { ...conversation\n    };\n    mutatedConversation.messages = [];\n    return mutatedConversation;\n  }\n\n  async function getConversationInformation() {\n    const filteredConversation = trimMessages(selectedConversation);\n    const conversationInformation = await axios.get(`api/conversations/getInfo/${JSON.stringify(filteredConversation)}`);\n    setConvoInfo(conversationInformation.data);\n    if (mounted) setLoading(false);\n  }\n\n  useEffect(() => {\n    getConversationInformation();\n    return () => {\n      setMounted(false);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\",\n      className: \"spinner\",\n      role: \"status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversationInfoScreen\",\n      children: /*#__PURE__*/_jsxDEV(ListGroup, {\n        variant: \"flush\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Members\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), convoInfo.members.map((member, index) => {\n          return /*#__PURE__*/_jsxDEV(UserCard, {\n            member: member\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 22\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(ConversationInfoScreen, \"Z31IylD3DarVryyoi8i2va8hlnM=\", false, function () {\n  return [useConversations];\n});\n\n_c = ConversationInfoScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationInfoScreen\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/Comps/MainContent/Messaging/ConversationInfoScreen.jsx"],"names":["useState","useEffect","Spinner","ListGroup","useConversations","UserCard","axios","ConversationInfoScreen","containerRef","convoInfo","setConvoInfo","selectedConversation","loading","setLoading","mounted","setMounted","trimMessages","conversation","mutatedConversation","messages","getConversationInformation","filteredConversation","conversationInformation","get","JSON","stringify","data","members","map","member","index"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,iBAAnC;AACA,SAASC,gBAAT,QAAiC,qCAAjC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,eAAe,SAASC,sBAAT,CAAgC;AAAEC,EAAAA;AAAF,CAAhC,EAAkD;AAAA;;AAC/D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,EAA1C;AACA,QAAM;AAAEW,IAAAA;AAAF,MAA2BP,gBAAgB,EAAjD;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,IAAD,CAAtC;;AAEA,WAASgB,YAAT,CAAsBC,YAAtB,EAAoC;AAClC,UAAMC,mBAAmB,GAAG,EAAE,GAAGD;AAAL,KAA5B;AACAC,IAAAA,mBAAmB,CAACC,QAApB,GAA+B,EAA/B;AACA,WAAOD,mBAAP;AACD;;AAED,iBAAeE,0BAAf,GAA4C;AAC1C,UAAMC,oBAAoB,GAAGL,YAAY,CAACL,oBAAD,CAAzC;AACA,UAAMW,uBAAuB,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CACnC,6BAA4BC,IAAI,CAACC,SAAL,CAAeJ,oBAAf,CAAqC,EAD9B,CAAtC;AAGAX,IAAAA,YAAY,CAACY,uBAAuB,CAACI,IAAzB,CAAZ;AACA,QAAIZ,OAAJ,EAAaD,UAAU,CAAC,KAAD,CAAV;AACd;;AAEDZ,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,0BAA0B;AAE1B,WAAO,MAAM;AACXL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAFD,CAHc,CAMd;AACD,GAPQ,EAON,EAPM,CAAT;AASA,sBACE;AAAA,cACGH,OAAO,gBACN,QAAC,OAAD;AAAS,MAAA,SAAS,EAAC,QAAnB;AAA4B,MAAA,SAAS,EAAC,SAAtC;AAAgD,MAAA,IAAI,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA,YADM,gBAGN;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,6BACE,QAAC,SAAD;AAAW,QAAA,OAAO,EAAC,OAAnB;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,SAAD,CAAW,IAAX;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGGH,SAAS,CAACkB,OAAV,CAAkBC,GAAlB,CAAsB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACxC,8BAAO,QAAC,QAAD;AAAU,YAAA,MAAM,EAAED;AAAlB,aAA+BC,KAA/B;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,SAFA,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJJ,mBADF;AAiBD;;GA/CuBvB,sB;UAEWH,gB;;;KAFXG,sB","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Spinner, ListGroup } from \"react-bootstrap\";\nimport { useConversations } from \"../../../utils/ConversationProvider\";\nimport UserCard from \"../../UserCard\";\nimport axios from \"axios\";\n\nexport default function ConversationInfoScreen({ containerRef }) {\n  const [convoInfo, setConvoInfo] = useState();\n  const { selectedConversation } = useConversations();\n  const [loading, setLoading] = useState(true);\n  const [mounted, setMounted] = useState(true);\n\n  function trimMessages(conversation) {\n    const mutatedConversation = { ...conversation };\n    mutatedConversation.messages = [];\n    return mutatedConversation;\n  }\n\n  async function getConversationInformation() {\n    const filteredConversation = trimMessages(selectedConversation);\n    const conversationInformation = await axios.get(\n      `api/conversations/getInfo/${JSON.stringify(filteredConversation)}`\n    );\n    setConvoInfo(conversationInformation.data);\n    if (mounted) setLoading(false);\n  }\n\n  useEffect(() => {\n    getConversationInformation();\n\n    return () => {\n      setMounted(false);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <Spinner animation=\"border\" className=\"spinner\" role=\"status\" />\n      ) : (\n        <div className=\"conversationInfoScreen\">\n          <ListGroup variant=\"flush\">\n            <h4>Members</h4>\n            <ListGroup.Item />\n            {convoInfo.members.map((member, index) => {\n              return <UserCard member={member} key={index} />;\n            })}\n          </ListGroup>\n        </div>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}