{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ViewportProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect, createContext, useContext, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst viewportContext = /*#__PURE__*/createContext();\nexport function useViewport() {\n  _s();\n\n  return useContext(viewportContext);\n}\n\n_s(useViewport, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default function ViewportProvider({\n  children\n}) {\n  _s2();\n\n  console.log(window.orientation);\n  const [width, setWidth] = useState(window.innerWidth);\n  const [height, setHeight] = useState(window.innerHeight);\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 680 || window.innerHeight < 680);\n  const [mobileDisplay, setMobileDisplay] = useState(() => {\n    if (isMobile) return {\n      menu: true,\n      mainContent: false\n    };\n    return {\n      menu: true,\n      mainContent: true\n    };\n  });\n  const bottomOfMessages = useRef(); // Setting up this function in the vieport provider\n  // So that we can call it from other events\n\n  function scrollToBottomMessages() {\n    var _bottomOfMessages$cur;\n\n    (_bottomOfMessages$cur = bottomOfMessages.current) === null || _bottomOfMessages$cur === void 0 ? void 0 : _bottomOfMessages$cur.scrollIntoView();\n  }\n\n  function getOrientation() {\n    // if window.orientation is available...\n    if (window.orientation && typeof window.orientation === \"number\") {\n      // ... and if the absolute value of orientation is 90...\n      if (Math.abs(window.orientation) == 90) {\n        // ... then it's landscape\n        return \"landscape\";\n      } else {\n        // ... otherwise it's portrait\n        return \"portrait\";\n      }\n    } else {\n      return false; // window.orientation not available\n    }\n  } // This is just the hook that sets width on window resize\n\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      setWidth(window.innerWidth);\n      setHeight(window.innerHeight);\n    };\n\n    window.addEventListener(\"resize\", handleWindowResize);\n    return () => window.removeEventListener(\"resize\", handleWindowResize);\n  }, []); // This handles the changes between mobile layout and desktop layout\n\n  useEffect(() => {\n    const {\n      menu,\n      mainContent\n    } = mobileDisplay;\n    setIsMobile(width < 680 || height < 680);\n    if (isMobile && (!menu && mainContent || menu && !mainContent)) return;\n\n    if (!isMobile && (!menu || !mainContent)) {\n      return setMobileDisplay({\n        menu: true,\n        mainContent: true\n      });\n    }\n\n    if (isMobile && menu && mainContent) {\n      return setMobileDisplay({\n        menu: true,\n        mainContent: false\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [width, height]);\n  const value = {\n    width,\n    isMobile,\n    mobileDisplay,\n    setMobileDisplay,\n    bottomOfMessages,\n    scrollToBottomMessages\n  };\n  return /*#__PURE__*/_jsxDEV(viewportContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ViewportProvider, \"vfRwBGskFOQU6+ti+gzVf5uHkck=\");\n\n_c = ViewportProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewportProvider\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ViewportProvider.js"],"names":["useState","useEffect","createContext","useContext","useRef","viewportContext","useViewport","ViewportProvider","children","console","log","window","orientation","width","setWidth","innerWidth","height","setHeight","innerHeight","isMobile","setIsMobile","mobileDisplay","setMobileDisplay","menu","mainContent","bottomOfMessages","scrollToBottomMessages","current","scrollIntoView","getOrientation","Math","abs","handleWindowResize","addEventListener","removeEventListener","value"],"mappings":"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","sourcesContent":["import { useState, useEffect, createContext, useContext, useRef } from \"react\";\n\nconst viewportContext = createContext();\n\nexport function useViewport() {\n  return useContext(viewportContext);\n}\n\nexport default function ViewportProvider({ children }) {\n  console.log(window.orientation);\n\n  const [width, setWidth] = useState(window.innerWidth);\n  const [height, setHeight] = useState(window.innerHeight);\n  const [isMobile, setIsMobile] = useState(\n    window.innerWidth < 680 || window.innerHeight < 680\n  );\n  const [mobileDisplay, setMobileDisplay] = useState(() => {\n    if (isMobile) return { menu: true, mainContent: false };\n    return { menu: true, mainContent: true };\n  });\n  const bottomOfMessages = useRef();\n\n  // Setting up this function in the vieport provider\n  // So that we can call it from other events\n  function scrollToBottomMessages() {\n    bottomOfMessages.current?.scrollIntoView();\n  }\n\n  function getOrientation() {\n    // if window.orientation is available...\n    if (window.orientation && typeof window.orientation === \"number\") {\n      // ... and if the absolute value of orientation is 90...\n      if (Math.abs(window.orientation) == 90) {\n        // ... then it's landscape\n        return \"landscape\";\n      } else {\n        // ... otherwise it's portrait\n        return \"portrait\";\n      }\n    } else {\n      return false; // window.orientation not available\n    }\n  }\n\n  // This is just the hook that sets width on window resize\n  useEffect(() => {\n    const handleWindowResize = () => {\n      setWidth(window.innerWidth);\n      setHeight(window.innerHeight);\n    };\n    window.addEventListener(\"resize\", handleWindowResize);\n    return () => window.removeEventListener(\"resize\", handleWindowResize);\n  }, []);\n\n  // This handles the changes between mobile layout and desktop layout\n  useEffect(() => {\n    const { menu, mainContent } = mobileDisplay;\n    setIsMobile(width < 680 || height < 680);\n\n    if (isMobile && ((!menu && mainContent) || (menu && !mainContent))) return;\n\n    if (!isMobile && (!menu || !mainContent)) {\n      return setMobileDisplay({\n        menu: true,\n        mainContent: true,\n      });\n    }\n    if (isMobile && menu && mainContent) {\n      return setMobileDisplay({\n        menu: true,\n        mainContent: false,\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [width, height]);\n\n  const value = {\n    width,\n    isMobile,\n    mobileDisplay,\n    setMobileDisplay,\n    bottomOfMessages,\n    scrollToBottomMessages,\n  };\n\n  return (\n    <viewportContext.Provider value={value}>\n      {children}\n    </viewportContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}