{"ast":null,"code":"import { CometChat } from \"@cometchat-pro/chat\";\nimport { UIKitSettings } from \"../../../util/UIKitSettings\";\nexport class UserListManager {\n  constructor(context, searchKey) {\n    this.userRequest = null;\n    this.userListenerId = \"userlist_\" + new Date().getTime();\n\n    this.initializeUsersRequest = () => {\n      const userListMode = this.context.UIKitSettings.userListMode;\n      const userListModeOptions = UIKitSettings.userListFilterOptions;\n      return new Promise((resolve, reject) => {\n        if (userListMode === userListModeOptions[\"ALL\"]) {\n          if (this.searchKey) {\n            this.usersRequest = new CometChat.UsersRequestBuilder().setLimit(30).setSearchKeyword(this.searchKey).build();\n          } else {\n            this.usersRequest = new CometChat.UsersRequestBuilder().setLimit(30).build();\n          }\n\n          return resolve(this.usersRequest);\n        } else if (userListMode === userListModeOptions[\"FRIENDS\"]) {\n          if (this.searchKey) {\n            this.usersRequest = new CometChat.UsersRequestBuilder().setLimit(30).friendsOnly(true).setSearchKeyword(this.searchKey).build();\n          } else {\n            this.usersRequest = new CometChat.UsersRequestBuilder().setLimit(30).friendsOnly(true).build();\n          }\n\n          return resolve(this.usersRequest);\n        } else {\n          return reject({\n            message: \"Invalid filter for userlist\"\n          });\n        }\n      });\n    };\n\n    this.context = context;\n    this.searchKey = searchKey;\n  }\n\n  fetchNextUsers() {\n    return this.usersRequest.fetchNext();\n  }\n\n  attachListeners(callback) {\n    CometChat.addUserListener(this.userListenerId, new CometChat.UserListener({\n      onUserOnline: onlineUser => {\n        /* when someuser/friend comes online, user will be received here */\n        callback(onlineUser);\n      },\n      onUserOffline: offlineUser => {\n        /* when someuser/friend went offline, user will be received here */\n        callback(offlineUser);\n      }\n    }));\n  }\n\n  removeListeners() {\n    CometChat.removeUserListener(this.userListenerId);\n  }\n\n}","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Users/CometChatUserList/controller.js"],"names":["CometChat","UIKitSettings","UserListManager","constructor","context","searchKey","userRequest","userListenerId","Date","getTime","initializeUsersRequest","userListMode","userListModeOptions","userListFilterOptions","Promise","resolve","reject","usersRequest","UsersRequestBuilder","setLimit","setSearchKeyword","build","friendsOnly","message","fetchNextUsers","fetchNext","attachListeners","callback","addUserListener","UserListener","onUserOnline","onlineUser","onUserOffline","offlineUser","removeListeners","removeUserListener"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AAEA,SAAQC,aAAR,QAA4B,6BAA5B;AAEA,OAAO,MAAMC,eAAN,CAAsB;AAKzBC,EAAAA,WAAW,CAACC,OAAD,EAAUC,SAAV,EAAqB;AAAA,SAHhCC,WAGgC,GAHlB,IAGkB;AAAA,SAFhCC,cAEgC,GAFf,cAAc,IAAIC,IAAJ,GAAWC,OAAX,EAEC;;AAAA,SAMhCC,sBANgC,GAMP,MAAM;AAE3B,YAAMC,YAAY,GAAG,KAAKP,OAAL,CAAaH,aAAb,CAA2BU,YAAhD;AACN,YAAMC,mBAAmB,GAAGX,aAAa,CAACY,qBAA1C;AAEM,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,YAAIL,YAAY,KAAKC,mBAAmB,CAAC,KAAD,CAAxC,EAAiD;AAC7C,cAAI,KAAKP,SAAT,EAAoB;AAChB,iBAAKY,YAAL,GAAoB,IAAIjB,SAAS,CAACkB,mBAAd,GAAoCC,QAApC,CAA6C,EAA7C,EAAiDC,gBAAjD,CAAkE,KAAKf,SAAvE,EAAkFgB,KAAlF,EAApB;AACH,WAFD,MAEO;AACH,iBAAKJ,YAAL,GAAoB,IAAIjB,SAAS,CAACkB,mBAAd,GAAoCC,QAApC,CAA6C,EAA7C,EAAiDE,KAAjD,EAApB;AACH;;AAED,iBAAON,OAAO,CAAC,KAAKE,YAAN,CAAd;AACH,SARD,MAQO,IAAIN,YAAY,KAAKC,mBAAmB,CAAC,SAAD,CAAxC,EAAqD;AACxD,cAAI,KAAKP,SAAT,EAAoB;AAChB,iBAAKY,YAAL,GAAoB,IAAIjB,SAAS,CAACkB,mBAAd,GAAoCC,QAApC,CAA6C,EAA7C,EAAiDG,WAAjD,CAA6D,IAA7D,EAAmEF,gBAAnE,CAAoF,KAAKf,SAAzF,EAAoGgB,KAApG,EAApB;AACH,WAFD,MAEO;AACH,iBAAKJ,YAAL,GAAoB,IAAIjB,SAAS,CAACkB,mBAAd,GAAoCC,QAApC,CAA6C,EAA7C,EAAiDG,WAAjD,CAA6D,IAA7D,EAAmED,KAAnE,EAApB;AACH;;AAED,iBAAON,OAAO,CAAC,KAAKE,YAAN,CAAd;AACH,SARM,MAQA;AACH,iBAAOD,MAAM,CAAC;AAACO,YAAAA,OAAO,EAAE;AAAV,WAAD,CAAb;AACH;AACJ,OApBM,CAAP;AAqBH,KAhC+B;;AAE5B,SAAKnB,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;AA8BDmB,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKP,YAAL,CAAkBQ,SAAlB,EAAP;AACH;;AAEDC,EAAAA,eAAe,CAACC,QAAD,EAAW;AAEtB3B,IAAAA,SAAS,CAAC4B,eAAV,CACI,KAAKrB,cADT,EAEI,IAAIP,SAAS,CAAC6B,YAAd,CAA2B;AACvBC,MAAAA,YAAY,EAAEC,UAAU,IAAI;AACxB;AACAJ,QAAAA,QAAQ,CAACI,UAAD,CAAR;AACH,OAJsB;AAKvBC,MAAAA,aAAa,EAAEC,WAAW,IAAI;AAC1B;AACAN,QAAAA,QAAQ,CAACM,WAAD,CAAR;AACH;AARsB,KAA3B,CAFJ;AAaH;;AAEDC,EAAAA,eAAe,GAAG;AAEdlC,IAAAA,SAAS,CAACmC,kBAAV,CAA6B,KAAK5B,cAAlC;AACH;;AA/DwB","sourcesContent":["import { CometChat } from \"@cometchat-pro/chat\";\n\nimport {UIKitSettings} from \"../../../util/UIKitSettings\";\n\nexport class UserListManager {\n\n    userRequest = null;\n    userListenerId = \"userlist_\" + new Date().getTime();\n\n    constructor(context, searchKey) {\n\n        this.context = context;\n        this.searchKey = searchKey;\n    }\n\n    initializeUsersRequest = () => {\n\n        const userListMode = this.context.UIKitSettings.userListMode;\n\t\tconst userListModeOptions = UIKitSettings.userListFilterOptions;\n\n        return new Promise((resolve, reject) => {\n            if (userListMode === userListModeOptions[\"ALL\"]) {\n                if (this.searchKey) {\n                    this.usersRequest = new CometChat.UsersRequestBuilder().setLimit(30).setSearchKeyword(this.searchKey).build();\n                } else {\n                    this.usersRequest = new CometChat.UsersRequestBuilder().setLimit(30).build();\n                }\n\n                return resolve(this.usersRequest);\n            } else if (userListMode === userListModeOptions[\"FRIENDS\"]) {\n                if (this.searchKey) {\n                    this.usersRequest = new CometChat.UsersRequestBuilder().setLimit(30).friendsOnly(true).setSearchKeyword(this.searchKey).build();\n                } else {\n                    this.usersRequest = new CometChat.UsersRequestBuilder().setLimit(30).friendsOnly(true).build();\n                }\n\n                return resolve(this.usersRequest);\n            } else {\n                return reject({message: \"Invalid filter for userlist\"});\n            }\n        });\n    }\n\n    fetchNextUsers() {\n        return this.usersRequest.fetchNext();\n    }\n\n    attachListeners(callback) {\n        \n        CometChat.addUserListener(\n            this.userListenerId,\n            new CometChat.UserListener({\n                onUserOnline: onlineUser => {\n                    /* when someuser/friend comes online, user will be received here */\n                    callback(onlineUser);\n                },\n                onUserOffline: offlineUser => {\n                    /* when someuser/friend went offline, user will be received here */\n                    callback(offlineUser);\n                }\n            })\n        );\n    }\n\n    removeListeners() {\n\n        CometChat.removeUserListener(this.userListenerId);\n    }\n}"]},"metadata":{},"sourceType":"module"}