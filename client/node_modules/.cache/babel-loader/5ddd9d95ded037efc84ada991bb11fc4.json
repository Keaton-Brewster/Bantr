{"ast":null,"code":"import _extends from \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatSenderPollMessageBubble/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChatMessageActions, CometChatThreadedMessageReplyCount, CometChatReadReceipt } from \"../../\";\nimport { CometChatMessageReactions } from \"../\";\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport { checkMessageForExtensionsData } from \"../../../../util/common\";\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\nimport { messageContainerStyle, messageWrapperStyle, messageTxtWrapperStyle, pollQuestionStyle, pollAnswerStyle, pollTotalStyle, pollPercentStyle, answerWrapperStyle, messageInfoWrapperStyle, messageReactionsWrapperStyle } from \"./style\";\n\nclass CometChatSenderPollMessageBubble extends React.Component {\n  constructor(props) {\n    super(props);\n    this.requestInProgress = null;\n    this.messageFrom = \"sender\";\n\n    this.handleMouseHover = () => {\n      this.setState(this.toggleHoverState);\n    };\n\n    this.toggleHoverState = state => {\n      return {\n        isHovering: !state.isHovering\n      };\n    };\n\n    const message = Object.assign({}, props.message, {\n      messageFrom: this.messageFrom\n    });\n    this.state = {\n      message: message,\n      isHovering: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const previousMessageStr = JSON.stringify(prevProps.message);\n    const currentMessageStr = JSON.stringify(this.props.message);\n\n    if (previousMessageStr !== currentMessageStr) {\n      const message = Object.assign({}, this.props.message, {\n        messageFrom: this.messageFrom\n      });\n      this.setState({\n        message: message\n      });\n    }\n  }\n\n  render() {\n    if (!this.props.message.hasOwnProperty(\"metadata\")) {\n      return null;\n    }\n\n    if (!this.props.message.metadata.hasOwnProperty(\"@injected\")) {\n      return null;\n    }\n\n    if (!this.props.message.metadata[\"@injected\"].hasOwnProperty(\"extensions\")) {\n      return null;\n    }\n\n    if (!this.props.message.metadata[\"@injected\"][\"extensions\"].hasOwnProperty(\"polls\")) {\n      return null;\n    }\n\n    const pollOptions = [];\n    const pollExtensionData = this.props.message.metadata[\"@injected\"][\"extensions\"][\"polls\"];\n    this.pollId = pollExtensionData.id;\n    const total = pollExtensionData.results.total;\n    let totalText = Translator.translate(\"NO_VOTE\", this.props.lang);\n\n    if (total === 1) {\n      totalText = `${total} ${Translator.translate(\"VOTE\", this.props.lang)}`;\n    } else if (total > 1) {\n      totalText = `${total} ${Translator.translate(\"VOTES\", this.props.lang)}`;\n    }\n\n    for (const option in pollExtensionData.results.options) {\n      const optionData = pollExtensionData.results.options[option];\n      const vote = optionData[\"count\"];\n      let width = \"0%\";\n\n      if (total) {\n        const fraction = vote / total;\n        width = fraction.toLocaleString(\"en\", {\n          style: 'percent'\n        });\n      }\n\n      const template = jsx(\"li\", {\n        key: option,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }\n      }, jsx(\"div\", {\n        css: pollPercentStyle(this.context, width),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }\n      }, \" \"), jsx(\"div\", {\n        css: answerWrapperStyle(this.context, width),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }\n      }, jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }\n      }, width), jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }\n      }, optionData.text)));\n      pollOptions.push(template);\n    }\n\n    let messageReactions = null;\n    const reactionsData = checkMessageForExtensionsData(this.state.message, \"reactions\");\n\n    if (reactionsData) {\n      if (Object.keys(reactionsData).length) {\n        messageReactions = jsx(\"div\", {\n          css: messageReactionsWrapperStyle(),\n          className: \"message__reaction__wrapper\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 21\n          }\n        }, jsx(CometChatMessageReactions, _extends({}, this.props, {\n          message: this.state.message,\n          reaction: reactionsData,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }\n        })));\n      }\n    }\n\n    let toolTipView = null;\n\n    if (this.state.isHovering) {\n      toolTipView = jsx(CometChatMessageActions, _extends({}, this.props, {\n        message: this.state.message,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 28\n        }\n      }));\n    }\n\n    return jsx(\"div\", {\n      css: messageContainerStyle(),\n      className: \"sender__message__container message__poll\",\n      onMouseEnter: this.handleMouseHover,\n      onMouseLeave: this.handleMouseHover,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, toolTipView, jsx(\"div\", {\n      css: messageWrapperStyle(),\n      className: \"message__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, jsx(\"div\", {\n      css: messageTxtWrapperStyle(this.context),\n      className: \"message__poll__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }\n    }, jsx(\"p\", {\n      css: pollQuestionStyle(),\n      className: \"poll__question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 25\n      }\n    }, pollExtensionData.question), jsx(\"ul\", {\n      css: pollAnswerStyle(this.context),\n      className: \"poll__options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 25\n      }\n    }, pollOptions), jsx(\"p\", {\n      css: pollTotalStyle(),\n      className: \"poll__votes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    }, totalText))), messageReactions, jsx(\"div\", {\n      css: messageInfoWrapperStyle(),\n      className: \"message__info__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }\n    }, jsx(CometChatThreadedMessageReplyCount, _extends({}, this.props, {\n      message: this.state.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }\n    })), jsx(CometChatReadReceipt, _extends({}, this.props, {\n      message: this.state.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }\n    }))));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatSenderPollMessageBubble.contextType = CometChatContext;\nCometChatSenderPollMessageBubble.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatSenderPollMessageBubble.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatSenderPollMessageBubble };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatSenderPollMessageBubble/index.js"],"names":["React","jsx","PropTypes","CometChatMessageActions","CometChatThreadedMessageReplyCount","CometChatReadReceipt","CometChatMessageReactions","CometChatContext","checkMessageForExtensionsData","theme","Translator","messageContainerStyle","messageWrapperStyle","messageTxtWrapperStyle","pollQuestionStyle","pollAnswerStyle","pollTotalStyle","pollPercentStyle","answerWrapperStyle","messageInfoWrapperStyle","messageReactionsWrapperStyle","CometChatSenderPollMessageBubble","Component","constructor","props","requestInProgress","messageFrom","handleMouseHover","setState","toggleHoverState","state","isHovering","message","Object","assign","componentDidUpdate","prevProps","previousMessageStr","JSON","stringify","currentMessageStr","render","hasOwnProperty","metadata","pollOptions","pollExtensionData","pollId","id","total","results","totalText","translate","lang","option","options","optionData","vote","width","fraction","toLocaleString","style","template","context","text","push","messageReactions","reactionsData","keys","length","toolTipView","question","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\n\nimport { CometChatMessageActions, CometChatThreadedMessageReplyCount, CometChatReadReceipt } from \"../../\";\nimport { CometChatMessageReactions } from \"../\";\n\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport { checkMessageForExtensionsData } from \"../../../../util/common\";\n\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\n\nimport {\n    messageContainerStyle,\n    messageWrapperStyle,\n    messageTxtWrapperStyle,\n    pollQuestionStyle,\n    pollAnswerStyle,\n    pollTotalStyle,\n    pollPercentStyle,\n    answerWrapperStyle,\n    messageInfoWrapperStyle,\n    messageReactionsWrapperStyle,\n} from \"./style\";\n\nclass CometChatSenderPollMessageBubble extends React.Component {\n    pollId;\n    requestInProgress = null;\n    messageFrom = \"sender\";\n    static contextType = CometChatContext;\n\n    constructor(props) {\n        \n        super(props);\n        const message = Object.assign({}, props.message, { messageFrom: this.messageFrom });\n\n        this.state = {\n            message: message,\n            isHovering: false\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n\n        const previousMessageStr = JSON.stringify(prevProps.message);\n        const currentMessageStr = JSON.stringify(this.props.message);\n\n        if (previousMessageStr !== currentMessageStr) {\n\n            const message = Object.assign({}, this.props.message, { messageFrom: this.messageFrom });\n            this.setState({ message: message })\n        }\n    }\n\n    handleMouseHover = () => {\n        this.setState(this.toggleHoverState);\n    }\n\n    toggleHoverState = (state) => {\n\n        return {\n            isHovering: !state.isHovering,\n        };\n    }\n\n    render() {\n\n        if (!this.props.message.hasOwnProperty(\"metadata\")) {\n            return null;\n        }\n        \n        if (!this.props.message.metadata.hasOwnProperty(\"@injected\")) {\n            return null;\n        }\n\n        if (!this.props.message.metadata[\"@injected\"].hasOwnProperty(\"extensions\")) {\n            return null;\n        }\n\n        if (!this.props.message.metadata[\"@injected\"][\"extensions\"].hasOwnProperty(\"polls\")) {\n            return null;\n        }\n\n        const pollOptions = [];\n        const pollExtensionData = this.props.message.metadata[\"@injected\"][\"extensions\"][\"polls\"]; \n\n        this.pollId = pollExtensionData.id;\n        const total = pollExtensionData.results.total;\n        let totalText = Translator.translate(\"NO_VOTE\", this.props.lang);\n\n        if (total === 1) {\n\n            totalText = `${total} ${Translator.translate(\"VOTE\", this.props.lang)}`;\n\n        } else if (total > 1) {\n\n            totalText = `${total} ${Translator.translate(\"VOTES\", this.props.lang)}`;\n        }\n\n        for (const option in pollExtensionData.results.options) {\n\n            const optionData = pollExtensionData.results.options[option];\n            const vote = optionData[\"count\"];\n\n            let width = \"0%\";\n            if(total) {\n\n                const fraction = (vote / total);\n                width = fraction.toLocaleString(\"en\", { style: 'percent' }); \n            }\n\n            const template = (\n                <li key={option}>\n                    <div css={pollPercentStyle(this.context, width)}> </div>\n                    <div css={answerWrapperStyle(this.context, width)}>\n                        <span>{width}</span>\n                        <p>{optionData.text}</p>\n                    </div>\n                </li>\n            );\n            pollOptions.push(template);\n        }\n\n        let messageReactions = null;\n        const reactionsData = checkMessageForExtensionsData(this.state.message, \"reactions\");\n        if (reactionsData) {\n\n            if (Object.keys(reactionsData).length) {\n                messageReactions = (\n                    <div css={messageReactionsWrapperStyle()} className=\"message__reaction__wrapper\">\n                        <CometChatMessageReactions {...this.props} message={this.state.message} reaction={reactionsData} />\n                    </div>\n                );\n            }\n        }\n\n        let toolTipView = null;\n        if (this.state.isHovering) {\n            toolTipView = (<CometChatMessageActions {...this.props} message={this.state.message} />);\n        }\n\n        return (\n            <div \n            css={messageContainerStyle()} \n            className=\"sender__message__container message__poll\"\n            onMouseEnter={this.handleMouseHover}\n            onMouseLeave={this.handleMouseHover}>\n                \n                {toolTipView}\n                    \n                <div css={messageWrapperStyle()} className=\"message__wrapper\">\n                    <div css={messageTxtWrapperStyle(this.context)} className=\"message__poll__wrapper\">\n                        <p css={pollQuestionStyle()} className=\"poll__question\">{pollExtensionData.question}</p>\n                        <ul css={pollAnswerStyle(this.context)} className=\"poll__options\">\n                            {pollOptions}\n                        </ul>\n                        <p css={pollTotalStyle()} className=\"poll__votes\">{totalText}</p>\n                    </div>\n                </div>\n\n                {messageReactions}\n\n                <div css={messageInfoWrapperStyle()} className=\"message__info__wrapper\">\n                    <CometChatThreadedMessageReplyCount {...this.props} message={this.state.message} />\n                    <CometChatReadReceipt {...this.props} message={this.state.message} />\n                </div>\n            </div>\n        );\n    }\n}\n\n// Specifies the default values for props:\nCometChatSenderPollMessageBubble.defaultProps = {\n    lang: Translator.getDefaultLanguage(),\n    theme: theme\n};\n\nCometChatSenderPollMessageBubble.propTypes = {\n    lang: PropTypes.string,\n    theme: PropTypes.object\n}\n\nexport { CometChatSenderPollMessageBubble };"]},"metadata":{},"sourceType":"module"}