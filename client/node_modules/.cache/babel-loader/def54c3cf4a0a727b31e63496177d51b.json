{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/Comps/Menu/Conversations.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { AiFillPlusCircle } from \"react-icons/ai\";\nimport { useConversations } from \"../../utils/ConversationProvider\";\nimport { useMainContent } from \"../../utils/MainContentProvider\";\nimport { useViewport } from \"../../utils/ViewportProvider\";\nimport NewConversationModal from \"../Modals/NewConversationModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Conversations() {\n  _s();\n\n  const {\n    setActiveContent\n  } = useMainContent();\n  const {\n    conversations,\n    selectedConversation,\n    selectConversationIndex\n  } = useConversations();\n  const [newConvoModal, setNewConvoModal] = useState(false);\n  const {\n    mobileScreen,\n    show,\n    setShow\n  } = useViewport();\n\n  function createConversation(event) {}\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListGroup, {\n      variant: \"flush\",\n      children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n        className: \"convoBox\",\n        onClick: e => {\n          e.preventDefault();\n          setNewConvoModal(true);\n        },\n        children: [\"New Conversation \", /*#__PURE__*/_jsxDEV(AiFillPlusCircle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), conversations === null || conversations === void 0 ? void 0 : conversations.map((convo, index) => {\n        return /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          className: `convoBox ${convo._id === selectedConversation._id && !mobileScreen ? \"activeConvo\" : \"\"}`,\n          onClick: event => {\n            event.preventDefault();\n            selectConversationIndex(index);\n\n            if (mobileScreen) {\n              setShow({\n                menu: false,\n                mainContent: true\n              });\n            } else {\n              setActiveContent(\"messaging\");\n            }\n          },\n          children: convo.name || \"Untitled Conversation\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewConversationModal, {\n      show: newConvoModal,\n      hide: () => setNewConvoModal(false),\n      createConversation: createConversation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Conversations, \"1Ifn4kA+s+MecP5oDf5ycbmiyFE=\", false, function () {\n  return [useMainContent, useConversations, useViewport];\n});\n\n_c = Conversations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Conversations\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/Comps/Menu/Conversations.jsx"],"names":["useState","ListGroup","AiFillPlusCircle","useConversations","useMainContent","useViewport","NewConversationModal","Conversations","setActiveContent","conversations","selectedConversation","selectConversationIndex","newConvoModal","setNewConvoModal","mobileScreen","show","setShow","createConversation","event","e","preventDefault","map","convo","index","_id","menu","mainContent","name"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,gBAAT,QAAiC,gBAAjC;AACA,SAASC,gBAAT,QAAiC,kCAAjC;AACA,SAASC,cAAT,QAA+B,iCAA/B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAOC,oBAAP,MAAiC,gCAAjC;;;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAuBJ,cAAc,EAA3C;AACA,QAAM;AAAEK,IAAAA,aAAF;AAAiBC,IAAAA,oBAAjB;AAAuCC,IAAAA;AAAvC,MACJR,gBAAgB,EADlB;AAEA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,KAAD,CAAlD;AAEA,QAAM;AAAEc,IAAAA,YAAF;AAAgBC,IAAAA,IAAhB;AAAsBC,IAAAA;AAAtB,MAAkCX,WAAW,EAAnD;;AAEA,WAASY,kBAAT,CAA4BC,KAA5B,EAAmC,CAAE;;AAErC,sBACE;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAC,OAAnB;AAAA,8BACE,QAAC,SAAD,CAAW,IAAX;AACE,QAAA,SAAS,EAAC,UADZ;AAEE,QAAA,OAAO,EAAGC,CAAD,IAAO;AACdA,UAAAA,CAAC,CAACC,cAAF;AACAP,UAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,SALH;AAAA,qDAOmB,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,gBAPnB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAUGJ,aAVH,aAUGA,aAVH,uBAUGA,aAAa,CAAEY,GAAf,CAAmB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACpC,4BACE,QAAC,SAAD,CAAW,IAAX;AAEE,UAAA,SAAS,EAAG,YACVD,KAAK,CAACE,GAAN,KAAcd,oBAAoB,CAACc,GAAnC,IAA0C,CAACV,YAA3C,GACI,aADJ,GAEI,EACL,EANH;AAOE,UAAA,OAAO,EAAGI,KAAD,IAAW;AAClBA,YAAAA,KAAK,CAACE,cAAN;AACAT,YAAAA,uBAAuB,CAACY,KAAD,CAAvB;;AACA,gBAAIT,YAAJ,EAAkB;AAChBE,cAAAA,OAAO,CAAC;AACNS,gBAAAA,IAAI,EAAE,KADA;AAENC,gBAAAA,WAAW,EAAE;AAFP,eAAD,CAAP;AAID,aALD,MAKO;AACLlB,cAAAA,gBAAgB,CAAC,WAAD,CAAhB;AACD;AACF,WAlBH;AAAA,oBAoBGc,KAAK,CAACK,IAAN,IAAc;AApBjB,WACOJ,KADP;AAAA;AAAA;AAAA;AAAA,gBADF;AAwBD,OAzBA,CAVH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAuCE,QAAC,oBAAD;AACE,MAAA,IAAI,EAAEX,aADR;AAEE,MAAA,IAAI,EAAE,MAAMC,gBAAgB,CAAC,KAAD,CAF9B;AAGE,MAAA,kBAAkB,EAAEI;AAHtB;AAAA;AAAA;AAAA;AAAA,YAvCF;AAAA,kBADF;AA+CD;;GAzDuBV,a;UACOH,c,EAE3BD,gB,EAGsCE,W;;;KANlBE,a","sourcesContent":["import { useState } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { AiFillPlusCircle } from \"react-icons/ai\";\nimport { useConversations } from \"../../utils/ConversationProvider\";\nimport { useMainContent } from \"../../utils/MainContentProvider\";\nimport { useViewport } from \"../../utils/ViewportProvider\";\nimport NewConversationModal from \"../Modals/NewConversationModal\";\n\nexport default function Conversations() {\n  const { setActiveContent } = useMainContent();\n  const { conversations, selectedConversation, selectConversationIndex } =\n    useConversations();\n  const [newConvoModal, setNewConvoModal] = useState(false);\n\n  const { mobileScreen, show, setShow } = useViewport();\n\n  function createConversation(event) {}\n\n  return (\n    <>\n      <ListGroup variant=\"flush\">\n        <ListGroup.Item\n          className=\"convoBox\"\n          onClick={(e) => {\n            e.preventDefault();\n            setNewConvoModal(true);\n          }}\n        >\n          New Conversation <AiFillPlusCircle />\n        </ListGroup.Item>\n        {conversations?.map((convo, index) => {\n          return (\n            <ListGroup.Item\n              key={index}\n              className={`convoBox ${\n                convo._id === selectedConversation._id && !mobileScreen\n                  ? \"activeConvo\"\n                  : \"\"\n              }`}\n              onClick={(event) => {\n                event.preventDefault();\n                selectConversationIndex(index);\n                if (mobileScreen) {\n                  setShow({\n                    menu: false,\n                    mainContent: true,\n                  });\n                } else {\n                  setActiveContent(\"messaging\");\n                }\n              }}\n            >\n              {convo.name || \"Untitled Conversation\"}\n            </ListGroup.Item>\n          );\n        })}\n      </ListGroup>\n\n      <NewConversationModal\n        show={newConvoModal}\n        hide={() => setNewConvoModal(false)}\n        createConversation={createConversation}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}