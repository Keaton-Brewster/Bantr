{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Calls/CometChatIncomingDirectCall/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx, keyframes } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { messageAlertManager } from \"./controller\";\nimport { CometChatAvatar } from \"../../Shared\";\nimport { CometChatCallScreen } from \"../CometChatCallScreen\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { SoundManager } from \"../../../util/SoundManager\";\nimport { Storage } from \"../../../util/Storage\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\nimport { incomingCallWrapperStyle, callContainerStyle, headerWrapperStyle, callDetailStyle, nameStyle, callTypeStyle, thumbnailStyle, headerButtonStyle, ButtonStyle, callIconStyle } from \"./style\";\nimport videoCallIcon from \"./resources/incoming-video-call.svg\";\n\nclass CometChatIncomingDirectCall extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.adjustFontSize = () => {\n      if (this.callButtonRef && this.callButtonRef.current) {\n        let reduceFontSize = false;\n        const buttonNodeList = this.callButtonRef.current.querySelectorAll(\"button\");\n        buttonNodeList.forEach(buttonNode => {\n          const parentContainerWidth = buttonNode.clientWidth;\n          const currentTextWidth = buttonNode.scrollWidth;\n\n          if (parentContainerWidth < currentTextWidth) {\n            reduceFontSize = true;\n          }\n        });\n\n        if (reduceFontSize) {\n          buttonNodeList.forEach(buttonNode => {\n            buttonNode.style.fontSize = \"85%\";\n          });\n        }\n      }\n    };\n\n    this.messageListenerCallback = (key, message) => {\n      switch (key) {\n        case enums.CUSTOM_MESSAGE_RECEIVED:\n          //occurs at the callee end\n          this.incomingCallReceived(message);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.incomingCallReceived = message => {\n      if (this._isMounted) {\n        var _this$loggedInUser;\n\n        if (message.type !== enums.CUSTOM_TYPE_MEETING) {\n          return false;\n        }\n\n        if (Object.keys(this.context.callInProgress).length) {\n          if (this.context.checkIfDirectCallIsOngoing() && this.context.getActiveCallSessionID() === message.data.customData.sessionID) {\n            return false;\n          }\n        }\n\n        if ((message === null || message === void 0 ? void 0 : message.sender.uid) !== ((_this$loggedInUser = this.loggedInUser) === null || _this$loggedInUser === void 0 ? void 0 : _this$loggedInUser.uid)) {\n          SoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n          this.setState({\n            incomingCall: message\n          });\n        }\n      }\n    };\n\n    this.joinCall = () => {\n      this.checkForActiveCallAndEndCall().then(response => {\n        SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n        this.props.actionGenerated(enums.ACTIONS[\"ACCEPT_DIRECT_CALL\"], true);\n\n        if (this.context) {\n          this.context.setCallInProgress(this.state.incomingCall, enums.CONSTANTS[\"INCOMING_DIRECT_CALLING\"]);\n        }\n\n        Storage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], this.state.incomingCall);\n        this.setState({\n          incomingCall: null,\n          callInProgress: this.state.incomingCall\n        });\n      }).catch(error => {\n        const errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n        this.context.setToastMessage(\"error\", errorCode);\n      });\n    };\n\n    this.ignoreCall = () => {\n      SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n      Storage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], this.state.incomingCall);\n      this.setState({\n        incomingCall: null\n      });\n    };\n\n    this.checkForActiveCallAndEndCall = () => {\n      const promise = new Promise((resolve, reject) => {\n        if (this.isCallActive() === false) {\n          return resolve({\n            success: true\n          });\n        }\n\n        let sessionID = this.getActiveCallSessionID();\n        CometChat.endCall(sessionID).then(response => {\n          return resolve(response);\n        }).catch(error => {\n          return reject(error);\n        });\n      });\n      return promise;\n    };\n\n    this.isCallActive = () => {\n      if (Object.keys(this.context.callInProgress).length === 0) {\n        return false;\n      }\n\n      let sessionID = this.getActiveCallSessionID();\n\n      if (!sessionID) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.getActiveCallSessionID = () => {\n      return this.context.getActiveCallSessionID();\n    };\n\n    this.actionHandler = action => {\n      switch (action) {\n        case enums.ACTIONS[\"DIRECT_CALL_ENDED\"]:\n        case enums.ACTIONS[\"DIRECT_CALL_ERROR\"]:\n          this.setState({\n            callInProgress: null\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.logStorageChange = event => {\n      if ((event === null || event === void 0 ? void 0 : event.key) !== enums.CONSTANTS[\"ACTIVECALL\"]) {\n        return false;\n      }\n\n      if (event.newValue || event.oldValue) {\n        var _this$state$incomingC, _call;\n\n        let call;\n\n        if (event.newValue) {\n          call = JSON.parse(event.newValue);\n        } else if (event.oldValue) {\n          call = JSON.parse(event.oldValue);\n        }\n\n        if (((_this$state$incomingC = this.state.incomingCall) === null || _this$state$incomingC === void 0 ? void 0 : _this$state$incomingC.sessionId) === ((_call = call) === null || _call === void 0 ? void 0 : _call.sessionId)) {\n          SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n          this.setState({\n            incomingCall: null\n          });\n        }\n      }\n    };\n\n    this._isMounted = false;\n    this.state = {\n      incomingCall: null,\n      callInProgress: null,\n      maximize: true\n    };\n    this.callButtonRef = /*#__PURE__*/React.createRef();\n    CometChat.getLoggedinUser().then(user => this.loggedInUser = user).catch(error => {\n      console.error(error);\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.MessageAlertManager = new messageAlertManager();\n    this.MessageAlertManager.attachListeners(this.messageListenerCallback);\n    Storage.attachChangeDetection(this.logStorageChange);\n  }\n\n  componentDidUpdate() {\n    if (this.state.incomingCall) {\n      this.adjustFontSize();\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    Storage.detachChangeDetection(this.logStorageChange);\n  }\n\n  render() {\n    let callScreen = null,\n        incomingCallAlert = null;\n\n    if (this.state.incomingCall) {\n      let avatar = jsx(\"div\", {\n        css: thumbnailStyle(),\n        className: \"header__thumbnail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 5\n        }\n      }, jsx(CometChatAvatar, {\n        cornerRadius: \"50%\",\n        image: this.state.incomingCall.sender.avatar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 6\n        }\n      }));\n      const callType = jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 5\n        }\n      }, jsx(\"i\", {\n        css: callIconStyle(videoCallIcon, this.context),\n        title: Translator.translate(\"INCOMING_VIDEO_CALL\", this.props.lang),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 6\n        }\n      }), jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 6\n        }\n      }, Translator.translate(\"INCOMING_VIDEO_CALL\", this.props.lang)));\n      incomingCallAlert = jsx(\"div\", {\n        css: incomingCallWrapperStyle(this.props, keyframes),\n        className: \"callalert__wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 5\n        }\n      }, jsx(\"div\", {\n        css: callContainerStyle(),\n        className: \"callalert__container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 6\n        }\n      }, jsx(\"div\", {\n        css: headerWrapperStyle(),\n        className: \"callalert__header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 7\n        }\n      }, jsx(\"div\", {\n        css: callDetailStyle(),\n        className: \"header__detail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 8\n        }\n      }, jsx(\"div\", {\n        css: nameStyle(),\n        className: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 9\n        }\n      }, this.state.incomingCall.sender.name), jsx(\"div\", {\n        css: callTypeStyle(this.props),\n        className: \"calltype\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 9\n        }\n      }, callType)), avatar), jsx(\"div\", {\n        css: headerButtonStyle(),\n        className: \"callalert__buttons\",\n        ref: this.callButtonRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 7\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        css: ButtonStyle(this.props, 0),\n        className: \"button button__ignore\",\n        onClick: this.ignoreCall,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 8\n        }\n      }, Translator.translate(\"IGNORE\", this.props.lang)), jsx(\"button\", {\n        type: \"button\",\n        css: ButtonStyle(this.props, 1),\n        className: \"button button__join\",\n        onClick: this.joinCall,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 8\n        }\n      }, Translator.translate(\"JOIN\", this.props.lang)))));\n    }\n\n    if (this.state.callInProgress) {\n      callScreen = jsx(CometChatCallScreen, {\n        loggedInUser: this.loggedInUser,\n        call: this.state.callInProgress,\n        actionGenerated: this.actionHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 17\n        }\n      });\n    }\n\n    return jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 4\n      }\n    }, incomingCallAlert, callScreen);\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatIncomingDirectCall.contextType = CometChatContext;\nCometChatIncomingDirectCall.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatIncomingDirectCall.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatIncomingDirectCall };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Calls/CometChatIncomingDirectCall/index.js"],"names":["React","jsx","keyframes","PropTypes","CometChat","messageAlertManager","CometChatAvatar","CometChatCallScreen","CometChatContext","enums","SoundManager","Storage","Translator","theme","incomingCallWrapperStyle","callContainerStyle","headerWrapperStyle","callDetailStyle","nameStyle","callTypeStyle","thumbnailStyle","headerButtonStyle","ButtonStyle","callIconStyle","CometChatIncomingDirectCall","PureComponent","constructor","props","adjustFontSize","callButtonRef","current","reduceFontSize","buttonNodeList","querySelectorAll","forEach","buttonNode","parentContainerWidth","clientWidth","currentTextWidth","scrollWidth","style","fontSize","messageListenerCallback","key","message","CUSTOM_MESSAGE_RECEIVED","incomingCallReceived","_isMounted","type","CUSTOM_TYPE_MEETING","Object","keys","context","callInProgress","length","checkIfDirectCallIsOngoing","getActiveCallSessionID","data","customData","sessionID","sender","uid","loggedInUser","play","CONSTANTS","AUDIO","setState","incomingCall","joinCall","checkForActiveCallAndEndCall","then","response","pause","actionGenerated","ACTIONS","setCallInProgress","state","setItem","catch","error","errorCode","hasOwnProperty","code","setToastMessage","ignoreCall","promise","Promise","resolve","reject","isCallActive","success","endCall","actionHandler","action","logStorageChange","event","newValue","oldValue","call","JSON","parse","sessionId","maximize","createRef","getLoggedinUser","user","console","componentDidMount","MessageAlertManager","attachListeners","attachChangeDetection","componentDidUpdate","componentWillUnmount","detachChangeDetection","render","callScreen","incomingCallAlert","avatar","callType","videoCallIcon","translate","lang","name","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, keyframes } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { messageAlertManager } from \"./controller\";\n\nimport { CometChatAvatar } from \"../../Shared\";\nimport { CometChatCallScreen } from \"../CometChatCallScreen\";\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { SoundManager } from \"../../../util/SoundManager\";\nimport { Storage } from \"../../../util/Storage\";\n\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\n\nimport {\n    incomingCallWrapperStyle,\n    callContainerStyle,\n    headerWrapperStyle,\n    callDetailStyle,\n    nameStyle,\n    callTypeStyle,\n    thumbnailStyle,\n    headerButtonStyle,\n    ButtonStyle,\n\tcallIconStyle\n} from \"./style\";\n\nimport videoCallIcon from \"./resources/incoming-video-call.svg\";\n\nclass CometChatIncomingDirectCall extends React.PureComponent {\n\tstatic contextType = CometChatContext;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis._isMounted = false;\n\t\tthis.state = {\n\t\t\tincomingCall: null,\n\t\t\tcallInProgress: null,\n\t\t\tmaximize: true,\n\t\t};\n\n\t\tthis.callButtonRef = React.createRef();\n\n\t\tCometChat.getLoggedinUser()\n\t\t\t.then(user => (this.loggedInUser = user))\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error);\n\t\t\t});\n\t}\n\n\tcomponentDidMount() {\n\t\tthis._isMounted = true;\n\n\t\tthis.MessageAlertManager = new messageAlertManager();\n\t\tthis.MessageAlertManager.attachListeners(this.messageListenerCallback);\n\n\t\tStorage.attachChangeDetection(this.logStorageChange);\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif (this.state.incomingCall) {\n\t\t\tthis.adjustFontSize();\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis._isMounted = false;\n\t\tStorage.detachChangeDetection(this.logStorageChange);\n\t}\n\n\tadjustFontSize = () => {\n\t\tif (this.callButtonRef && this.callButtonRef.current) {\n\t\t\tlet reduceFontSize = false;\n\t\t\tconst buttonNodeList = this.callButtonRef.current.querySelectorAll(\"button\");\n\n\t\t\tbuttonNodeList.forEach(buttonNode => {\n\t\t\t\tconst parentContainerWidth = buttonNode.clientWidth;\n\t\t\t\tconst currentTextWidth = buttonNode.scrollWidth;\n\n\t\t\t\tif (parentContainerWidth < currentTextWidth) {\n\t\t\t\t\treduceFontSize = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (reduceFontSize) {\n\t\t\t\tbuttonNodeList.forEach(buttonNode => {\n\t\t\t\t\tbuttonNode.style.fontSize = \"85%\";\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tmessageListenerCallback = (key, message) => {\n\t\tswitch (key) {\n\t\t\tcase enums.CUSTOM_MESSAGE_RECEIVED: //occurs at the callee end\n\t\t\t\tthis.incomingCallReceived(message);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tincomingCallReceived = message => {\n\t\tif (this._isMounted) {\n\t\t\tif (message.type !== enums.CUSTOM_TYPE_MEETING) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (Object.keys(this.context.callInProgress).length) {\n\t\t\t\tif (this.context.checkIfDirectCallIsOngoing() && this.context.getActiveCallSessionID() === message.data.customData.sessionID) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (message?.sender.uid !== this.loggedInUser?.uid) {\n\t\t\t\tSoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n\t\t\t\tthis.setState({incomingCall: message});\n\t\t\t}\n\t\t}\n\t};\n\n\tjoinCall = () => {\n\t\tthis.checkForActiveCallAndEndCall()\n\t\t\t.then(response => {\n\t\t\t\tSoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n\t\t\t\tthis.props.actionGenerated(enums.ACTIONS[\"ACCEPT_DIRECT_CALL\"], true);\n\n\t\t\t\tif (this.context) {\n\t\t\t\t\tthis.context.setCallInProgress(this.state.incomingCall, enums.CONSTANTS[\"INCOMING_DIRECT_CALLING\"]);\n\t\t\t\t}\n\t\t\t\tStorage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], this.state.incomingCall);\n\t\t\t\tthis.setState({incomingCall: null, callInProgress: this.state.incomingCall});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconst errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n\t\t\t\tthis.context.setToastMessage(\"error\", errorCode);\n\t\t\t});\n\t};\n\n\tignoreCall = () => {\n\t\tSoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n\t\tStorage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], this.state.incomingCall);\n\t\tthis.setState({incomingCall: null});\n\t};\n\n\tcheckForActiveCallAndEndCall = () => {\n\t\tconst promise = new Promise((resolve, reject) => {\n\t\t\tif (this.isCallActive() === false) {\n\t\t\t\treturn resolve({success: true});\n\t\t\t}\n\n\t\t\tlet sessionID = this.getActiveCallSessionID();\n\t\t\tCometChat.endCall(sessionID)\n\t\t\t\t.then(response => {\n\t\t\t\t\treturn resolve(response);\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\treturn reject(error);\n\t\t\t\t});\n\t\t});\n\n\t\treturn promise;\n\t};\n\n\tisCallActive = () => {\n\t\tif (Object.keys(this.context.callInProgress).length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet sessionID = this.getActiveCallSessionID();\n\t\tif (!sessionID) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tgetActiveCallSessionID = () => {\n\t\treturn this.context.getActiveCallSessionID();\n\t};\n\n\tactionHandler = action => {\n\t\tswitch (action) {\n\t\t\tcase enums.ACTIONS[\"DIRECT_CALL_ENDED\"]:\n\t\t\tcase enums.ACTIONS[\"DIRECT_CALL_ERROR\"]:\n\t\t\t\tthis.setState({callInProgress: null});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tlogStorageChange = event => {\n\t\tif (event?.key !== enums.CONSTANTS[\"ACTIVECALL\"]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (event.newValue || event.oldValue) {\n\t\t\tlet call;\n\t\t\tif (event.newValue) {\n\t\t\t\tcall = JSON.parse(event.newValue);\n\t\t\t} else if (event.oldValue) {\n\t\t\t\tcall = JSON.parse(event.oldValue);\n\t\t\t}\n\n\t\t\tif (this.state.incomingCall?.sessionId === call?.sessionId) {\n\t\t\t\tSoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n\t\t\t\tthis.setState({incomingCall: null});\n\t\t\t}\n\t\t}\n\t};\n\n\trender() {\n\t\tlet callScreen = null,\n\t\t\tincomingCallAlert = null;\n\t\tif (this.state.incomingCall) {\n\t\t\tlet avatar = (\n\t\t\t\t<div css={thumbnailStyle()} className=\"header__thumbnail\">\n\t\t\t\t\t<CometChatAvatar cornerRadius=\"50%\" image={this.state.incomingCall.sender.avatar} />\n\t\t\t\t</div>\n\t\t\t);\n\n\t\t\tconst callType = (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<i css={callIconStyle(videoCallIcon, this.context)} title={Translator.translate(\"INCOMING_VIDEO_CALL\", this.props.lang)}></i>\n\t\t\t\t\t<span>{Translator.translate(\"INCOMING_VIDEO_CALL\", this.props.lang)}</span>\n\t\t\t\t</React.Fragment>\n\t\t\t);\n\n\t\t\tincomingCallAlert = (\n\t\t\t\t<div css={incomingCallWrapperStyle(this.props, keyframes)} className=\"callalert__wrapper\">\n\t\t\t\t\t<div css={callContainerStyle()} className=\"callalert__container\">\n\t\t\t\t\t\t<div css={headerWrapperStyle()} className=\"callalert__header\">\n\t\t\t\t\t\t\t<div css={callDetailStyle()} className=\"header__detail\">\n\t\t\t\t\t\t\t\t<div css={nameStyle()} className=\"name\">\n\t\t\t\t\t\t\t\t\t{this.state.incomingCall.sender.name}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div css={callTypeStyle(this.props)} className=\"calltype\">\n\t\t\t\t\t\t\t\t\t{callType}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{avatar}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div css={headerButtonStyle()} className=\"callalert__buttons\" ref={this.callButtonRef}>\n\t\t\t\t\t\t\t<button type=\"button\" css={ButtonStyle(this.props, 0)} className=\"button button__ignore\" onClick={this.ignoreCall}>\n\t\t\t\t\t\t\t\t{Translator.translate(\"IGNORE\", this.props.lang)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button type=\"button\" css={ButtonStyle(this.props, 1)} className=\"button button__join\" onClick={this.joinCall}>\n\t\t\t\t\t\t\t\t{Translator.translate(\"JOIN\", this.props.lang)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\tif (this.state.callInProgress) {\n\t\t\tcallScreen = <CometChatCallScreen loggedInUser={this.loggedInUser} call={this.state.callInProgress} actionGenerated={this.actionHandler} />;\n\t\t}\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t{incomingCallAlert}\n\t\t\t\t{callScreen}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\n// Specifies the default values for props:\nCometChatIncomingDirectCall.defaultProps = {\n    lang: Translator.getDefaultLanguage(),\n    theme: theme,\n};\n\nCometChatIncomingDirectCall.propTypes = {\n    lang: PropTypes.string,\n    theme: PropTypes.object,\n}\n\nexport { CometChatIncomingDirectCall };"]},"metadata":{},"sourceType":"module"}