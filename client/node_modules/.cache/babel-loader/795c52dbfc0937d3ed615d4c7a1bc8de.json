{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatCreatePoll/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatBackdrop } from \"../../../Shared\";\nimport { CometChatCreatePollOptions } from \"../\";\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport * as enums from \"../../../../util/enums.js\";\nimport Translator from \"../../../../resources/localization/translator\";\nimport { modalWrapperStyle, modalCloseStyle, modalBodyStyle, modalErrorStyle, modalTableStyle, tableCaptionStyle, tableBodyStyle, tableFootStyle, iconWrapperStyle, addOptionIconStyle } from \"./style\";\nimport creatingIcon from \"./resources/creating.svg\";\nimport addIcon from \"./resources/add-circle-filled.svg\";\nimport clearIcon from \"./resources/close.svg\";\n\nclass CometChatCreatePoll extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loggedInUser = null;\n\n    this.addPollOption = () => {\n      const options = [...this.state.options];\n      options.push({\n        value: \"\",\n        id: new Date().getTime()\n      });\n      this.setState({\n        options: options\n      });\n    };\n\n    this.removePollOption = option => {\n      const options = [...this.state.options];\n      const optionKey = options.findIndex(opt => opt.id === option.id);\n\n      if (optionKey > -1) {\n        options.splice(optionKey, 1);\n        this.setState({\n          options: options\n        });\n      }\n    };\n\n    this.optionChangeHandler = (event, option) => {\n      const options = [...this.state.options];\n      const optionKey = options.findIndex(opt => opt.id === option.id);\n\n      if (optionKey > -1) {\n        const newOption = { ...option,\n          value: event.target.value\n        };\n        options.splice(optionKey, 1, newOption);\n        this.setState({\n          options: options\n        });\n      }\n    };\n\n    this.createPoll = () => {\n      const question = this.questionRef.current.value.trim();\n      const firstOption = this.optionOneRef.current.value.trim();\n      const secondOption = this.optionTwoRef.current.value.trim();\n      const optionItems = [firstOption, secondOption];\n\n      if (question.length === 0) {\n        this.setState({\n          errorMessage: Translator.translate(\"INVALID_POLL_QUESTION\", this.props.lang)\n        });\n        return false;\n      }\n\n      if (firstOption.length === 0 || secondOption.length === 0) {\n        this.setState({\n          errorMessage: Translator.translate(\"INVALID_POLL_OPTION\", this.props.lang)\n        });\n        return false;\n      }\n\n      this.state.options.forEach(function (option) {\n        optionItems.push(option.value);\n      });\n      let receiverId;\n      let receiverType = this.context.type;\n\n      if (this.context.type === CometChat.RECEIVER_TYPE.USER) {\n        receiverId = this.context.item.uid;\n      } else if (this.context.type === CometChat.RECEIVER_TYPE.GROUP) {\n        receiverId = this.context.item.guid;\n      }\n\n      this.setState({\n        creatingPoll: true,\n        errorMessage: \"\"\n      });\n      CometChat.callExtension(\"polls\", \"POST\", \"v2/create\", {\n        question: question,\n        options: optionItems,\n        receiver: receiverId,\n        receiverType: receiverType\n      }).then(response => {\n        if (response && response.hasOwnProperty(\"success\") && response[\"success\"] === true) {\n          this.setState({\n            creatingPoll: false\n          });\n          this.props.actionGenerated(enums.ACTIONS[\"POLL_CREATED\"]);\n        } else {\n          this.setState({\n            errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          creatingPoll: false\n        });\n        this.setState({\n          errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n        });\n      });\n    };\n\n    this.state = {\n      errorMessage: \"\",\n      options: [],\n      creatingPoll: false\n    };\n    this.questionRef = /*#__PURE__*/React.createRef();\n    this.optionOneRef = /*#__PURE__*/React.createRef();\n    this.optionTwoRef = /*#__PURE__*/React.createRef();\n    this.optionRef = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    const optionList = [...this.state.options];\n    const pollOptionView = optionList.map((option, index) => {\n      return jsx(CometChatCreatePollOptions, {\n        key: index,\n        option: option,\n        tabIndex: index + 4,\n        lang: this.props.lang,\n        optionChangeHandler: this.optionChangeHandler,\n        removePollOption: this.removePollOption,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }\n      });\n    });\n    const createText = this.state.creatingPoll ? Translator.translate(\"CREATING\", this.props.lang) : Translator.translate(\"CREATE\", this.props.lang);\n    return jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }\n    }, jsx(CometChatBackdrop, {\n      show: true,\n      clicked: this.props.close,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }), jsx(\"div\", {\n      css: modalWrapperStyle(this.context),\n      className: \"modal__createpoll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }, jsx(\"span\", {\n      css: modalCloseStyle(clearIcon, this.context),\n      className: \"modal__close\",\n      onClick: this.props.close,\n      title: Translator.translate(\"CLOSE\", this.props.lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    }), jsx(\"div\", {\n      css: modalBodyStyle(),\n      className: \"modal__body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }\n    }, jsx(\"table\", {\n      css: modalTableStyle(this.context),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, jsx(\"caption\", {\n      css: tableCaptionStyle(),\n      className: \"modal__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 15\n      }\n    }, Translator.translate(\"CREATE_POLL\", this.props.lang)), jsx(\"tbody\", {\n      css: tableBodyStyle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 15\n      }\n    }, jsx(\"tr\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }\n    }, jsx(\"td\", {\n      colSpan: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 19\n      }\n    }, jsx(\"div\", {\n      css: modalErrorStyle(this.context),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }\n    }, this.state.errorMessage))), jsx(\"tr\", {\n      className: \"poll__question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }\n    }, jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 19\n      }\n    }, jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }\n    }, Translator.translate(\"QUESTION\", this.props.lang))), jsx(\"td\", {\n      colSpan: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 19\n      }\n    }, jsx(\"input\", {\n      type: \"text\",\n      autoFocus: true,\n      tabIndex: \"1\",\n      placeholder: Translator.translate(\"ENTER_YOUR_QUESTION\", this.props.lang),\n      ref: this.questionRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }\n    }))), jsx(\"tr\", {\n      className: \"poll__options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }, jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 19\n      }\n    }, jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }\n    }, Translator.translate(\"OPTIONS\", this.props.lang))), jsx(\"td\", {\n      colSpan: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 19\n      }\n    }, jsx(\"input\", {\n      type: \"text\",\n      tabIndex: \"2\",\n      placeholder: Translator.translate(\"ENTER_YOUR_OPTION\", this.props.lang),\n      ref: this.optionOneRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }\n    }))), jsx(\"tr\", {\n      ref: this.optionRef,\n      className: \"poll__options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }\n    }, jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 19\n      }\n    }, \"\\xA0\"), jsx(\"td\", {\n      colSpan: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 19\n      }\n    }, jsx(\"input\", {\n      type: \"text\",\n      tabIndex: \"3\",\n      placeholder: Translator.translate(\"ENTER_YOUR_OPTION\", this.props.lang),\n      ref: this.optionTwoRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }\n    }))), pollOptionView, jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }\n    }, jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 19\n      }\n    }, \"\\xA0\"), jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 19\n      }\n    }, jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }\n    }, Translator.translate(\"ADD_NEW_OPTION\", this.props.lang))), jsx(\"td\", {\n      css: iconWrapperStyle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 19\n      }\n    }, jsx(\"i\", {\n      tabIndex: \"100\",\n      css: addOptionIconStyle(addIcon, this.context),\n      className: \"option__add\",\n      onClick: this.addPollOption,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 21\n      }\n    })))), jsx(\"tfoot\", {\n      css: tableFootStyle(this.context, this.state, creatingIcon),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 15\n      }\n    }, jsx(\"tr\", {\n      className: \"createpoll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }\n    }, jsx(\"td\", {\n      colSpan: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 19\n      }\n    }, jsx(\"button\", {\n      type: \"button\",\n      onClick: this.createPoll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 21\n      }\n    }, jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 23\n      }\n    }, createText)))))))));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatCreatePoll.contextType = CometChatContext;\nCometChatCreatePoll.defaultProps = {\n  lang: Translator.getDefaultLanguage()\n};\nCometChatCreatePoll.propTypes = {\n  lang: PropTypes.string\n};\nexport { CometChatCreatePoll };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatCreatePoll/index.js"],"names":["React","jsx","PropTypes","CometChat","CometChatBackdrop","CometChatCreatePollOptions","CometChatContext","enums","Translator","modalWrapperStyle","modalCloseStyle","modalBodyStyle","modalErrorStyle","modalTableStyle","tableCaptionStyle","tableBodyStyle","tableFootStyle","iconWrapperStyle","addOptionIconStyle","CometChatCreatePoll","Component","constructor","props","loggedInUser","addPollOption","options","state","push","value","id","Date","getTime","setState","removePollOption","option","optionKey","findIndex","opt","splice","optionChangeHandler","event","newOption","target","createPoll","question","questionRef","current","trim","firstOption","optionOneRef","secondOption","optionTwoRef","optionItems","length","errorMessage","translate","lang","forEach","receiverId","receiverType","context","type","RECEIVER_TYPE","USER","item","uid","GROUP","guid","creatingPoll","callExtension","receiver","then","response","hasOwnProperty","actionGenerated","ACTIONS","catch","error","createRef","optionRef","render","optionList","pollOptionView","map","index","createText","close","clearIcon","addIcon","creatingIcon","contextType","defaultProps","getDefaultLanguage","propTypes","string"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CometChatBackdrop } from \"../../../Shared\";\nimport { CometChatCreatePollOptions } from \"../\";\n\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport * as enums from \"../../../../util/enums.js\";\nimport Translator from \"../../../../resources/localization/translator\";\n\nimport {\n  modalWrapperStyle,\n  modalCloseStyle,\n  modalBodyStyle,\n  modalErrorStyle,\n  modalTableStyle,\n  tableCaptionStyle,\n  tableBodyStyle,\n  tableFootStyle,\n  iconWrapperStyle,\n  addOptionIconStyle,\n} from \"./style\";\n\nimport creatingIcon from \"./resources/creating.svg\";\nimport addIcon from \"./resources/add-circle-filled.svg\";\nimport clearIcon from \"./resources/close.svg\";\n\nclass CometChatCreatePoll extends React.Component {\n  loggedInUser = null;\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      errorMessage: \"\",\n      options: [],\n      creatingPoll: false,\n    };\n\n    this.questionRef = React.createRef();\n    this.optionOneRef = React.createRef();\n    this.optionTwoRef = React.createRef();\n    this.optionRef = React.createRef();\n  }\n\n  addPollOption = () => {\n    const options = [...this.state.options];\n    options.push({ value: \"\", id: new Date().getTime() });\n    this.setState({ options: options });\n  };\n\n  removePollOption = (option) => {\n    const options = [...this.state.options];\n    const optionKey = options.findIndex((opt) => opt.id === option.id);\n    if (optionKey > -1) {\n      options.splice(optionKey, 1);\n      this.setState({ options: options });\n    }\n  };\n\n  optionChangeHandler = (event, option) => {\n    const options = [...this.state.options];\n    const optionKey = options.findIndex((opt) => opt.id === option.id);\n    if (optionKey > -1) {\n      const newOption = { ...option, value: event.target.value };\n      options.splice(optionKey, 1, newOption);\n      this.setState({ options: options });\n    }\n  };\n\n  createPoll = () => {\n    const question = this.questionRef.current.value.trim();\n    const firstOption = this.optionOneRef.current.value.trim();\n    const secondOption = this.optionTwoRef.current.value.trim();\n    const optionItems = [firstOption, secondOption];\n\n    if (question.length === 0) {\n      this.setState({\n        errorMessage: Translator.translate(\n          \"INVALID_POLL_QUESTION\",\n          this.props.lang\n        ),\n      });\n      return false;\n    }\n\n    if (firstOption.length === 0 || secondOption.length === 0) {\n      this.setState({\n        errorMessage: Translator.translate(\n          \"INVALID_POLL_OPTION\",\n          this.props.lang\n        ),\n      });\n      return false;\n    }\n\n    this.state.options.forEach(function (option) {\n      optionItems.push(option.value);\n    });\n\n    let receiverId;\n    let receiverType = this.context.type;\n    if (this.context.type === CometChat.RECEIVER_TYPE.USER) {\n      receiverId = this.context.item.uid;\n    } else if (this.context.type === CometChat.RECEIVER_TYPE.GROUP) {\n      receiverId = this.context.item.guid;\n    }\n\n    this.setState({ creatingPoll: true, errorMessage: \"\" });\n\n    CometChat.callExtension(\"polls\", \"POST\", \"v2/create\", {\n      question: question,\n      options: optionItems,\n      receiver: receiverId,\n      receiverType: receiverType,\n    })\n      .then((response) => {\n        if (\n          response &&\n          response.hasOwnProperty(\"success\") &&\n          response[\"success\"] === true\n        ) {\n          this.setState({ creatingPoll: false });\n          this.props.actionGenerated(enums.ACTIONS[\"POLL_CREATED\"]);\n        } else {\n          this.setState({\n            errorMessage: Translator.translate(\n              \"SOMETHING_WRONG\",\n              this.props.lang\n            ),\n          });\n        }\n      })\n      .catch((error) => {\n        this.setState({ creatingPoll: false });\n        this.setState({\n          errorMessage: Translator.translate(\n            \"SOMETHING_WRONG\",\n            this.props.lang\n          ),\n        });\n      });\n  };\n\n  render() {\n    const optionList = [...this.state.options];\n    const pollOptionView = optionList.map((option, index) => {\n      return (\n        <CometChatCreatePollOptions\n          key={index}\n          option={option}\n          tabIndex={index + 4}\n          lang={this.props.lang}\n          optionChangeHandler={this.optionChangeHandler}\n          removePollOption={this.removePollOption}\n        />\n      );\n    });\n\n    const createText = this.state.creatingPoll\n      ? Translator.translate(\"CREATING\", this.props.lang)\n      : Translator.translate(\"CREATE\", this.props.lang);\n    return (\n      <React.Fragment>\n        <CometChatBackdrop show={true} clicked={this.props.close} />\n        <div\n          css={modalWrapperStyle(this.context)}\n          className=\"modal__createpoll\"\n        >\n          <span\n            css={modalCloseStyle(clearIcon, this.context)}\n            className=\"modal__close\"\n            onClick={this.props.close}\n            title={Translator.translate(\"CLOSE\", this.props.lang)}\n          ></span>\n          <div css={modalBodyStyle()} className=\"modal__body\">\n            <table css={modalTableStyle(this.context)}>\n              <caption css={tableCaptionStyle()} className=\"modal__title\">\n                {Translator.translate(\"CREATE_POLL\", this.props.lang)}\n              </caption>\n              <tbody css={tableBodyStyle()}>\n                <tr className=\"error\">\n                  <td colSpan=\"3\">\n                    <div css={modalErrorStyle(this.context)}>\n                      {this.state.errorMessage}\n                    </div>\n                  </td>\n                </tr>\n                <tr className=\"poll__question\">\n                  <td>\n                    <label>\n                      {Translator.translate(\"QUESTION\", this.props.lang)}\n                    </label>\n                  </td>\n                  <td colSpan=\"2\">\n                    <input\n                      type=\"text\"\n                      autoFocus\n                      tabIndex=\"1\"\n                      placeholder={Translator.translate(\n                        \"ENTER_YOUR_QUESTION\",\n                        this.props.lang\n                      )}\n                      ref={this.questionRef}\n                    />\n                  </td>\n                </tr>\n                <tr className=\"poll__options\">\n                  <td>\n                    <label>\n                      {Translator.translate(\"OPTIONS\", this.props.lang)}\n                    </label>\n                  </td>\n                  <td colSpan=\"2\">\n                    <input\n                      type=\"text\"\n                      tabIndex=\"2\"\n                      placeholder={Translator.translate(\n                        \"ENTER_YOUR_OPTION\",\n                        this.props.lang\n                      )}\n                      ref={this.optionOneRef}\n                    />\n                  </td>\n                </tr>\n                <tr ref={this.optionRef} className=\"poll__options\">\n                  <td>&nbsp;</td>\n                  <td colSpan=\"2\">\n                    <input\n                      type=\"text\"\n                      tabIndex=\"3\"\n                      placeholder={Translator.translate(\n                        \"ENTER_YOUR_OPTION\",\n                        this.props.lang\n                      )}\n                      ref={this.optionTwoRef}\n                    />\n                  </td>\n                </tr>\n                {pollOptionView}\n                <tr>\n                  <td>&nbsp;</td>\n                  <td>\n                    <label>\n                      {Translator.translate(\"ADD_NEW_OPTION\", this.props.lang)}\n                    </label>\n                  </td>\n                  <td css={iconWrapperStyle()}>\n                    <i\n                      tabIndex=\"100\"\n                      css={addOptionIconStyle(addIcon, this.context)}\n                      className=\"option__add\"\n                      onClick={this.addPollOption}\n                    ></i>\n                  </td>\n                </tr>\n              </tbody>\n              <tfoot\n                css={tableFootStyle(this.context, this.state, creatingIcon)}\n              >\n                <tr className=\"createpoll\">\n                  <td colSpan=\"2\">\n                    <button type=\"button\" onClick={this.createPoll}>\n                      <span>{createText}</span>\n                    </button>\n                  </td>\n                </tr>\n              </tfoot>\n            </table>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n// Specifies the default values for props:\nCometChatCreatePoll.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n};\n\nCometChatCreatePoll.propTypes = {\n  lang: PropTypes.string,\n};\n\nexport { CometChatCreatePoll };\n"]},"metadata":{},"sourceType":"module"}