{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Calls/CometChatIncomingCall/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx, keyframes } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CallAlertManager } from \"./controller\";\nimport { CometChatCallScreen } from \"../CometChatCallScreen\";\nimport { CometChatAvatar } from \"../../Shared\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { SoundManager } from \"../../../util/SoundManager\";\nimport { Storage } from \"../../../util/Storage\";\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { incomingCallWrapperStyle, callContainerStyle, headerWrapperStyle, callDetailStyle, nameStyle, callTypeStyle, thumbnailStyle, headerButtonStyle, ButtonStyle, callIconStyle } from \"./style\";\nimport audioCallIcon from \"./resources/incoming-call.svg\";\nimport videoCallIcon from \"./resources/incoming-video-call.svg\";\n\nclass CometChatIncomingCall extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.adjustFontSize = () => {\n      if (this.callButtonRef && this.callButtonRef.current) {\n        let reduceFontSize = false;\n        const buttonNodeList = this.callButtonRef.current.querySelectorAll(\"button\");\n        buttonNodeList.forEach(buttonNode => {\n          const parentContainerWidth = buttonNode.clientWidth;\n          const currentTextWidth = buttonNode.scrollWidth;\n\n          if (parentContainerWidth < currentTextWidth) {\n            reduceFontSize = true;\n          }\n        });\n\n        if (reduceFontSize) {\n          buttonNodeList.forEach(buttonNode => {\n            buttonNode.style.fontSize = \"85%\";\n          });\n        }\n      }\n    };\n\n    this.callScreenUpdated = (key, call) => {\n      switch (key) {\n        case enums.INCOMING_CALL_RECEIVED:\n          //occurs at the callee end\n          this.incomingCallReceived(call);\n          break;\n\n        case enums.INCOMING_CALL_CANCELLED:\n          //occurs(call dismissed) at the callee end, caller cancels the call\n          this.incomingCallCancelled(call);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.incomingCallReceived = incomingCall => {\n      if (this._isMounted) {\n        if (this.state.incomingCall === null) {\n          var _this$loggedInUser;\n\n          if ((incomingCall === null || incomingCall === void 0 ? void 0 : incomingCall.callInitiator.uid) !== ((_this$loggedInUser = this.loggedInUser) === null || _this$loggedInUser === void 0 ? void 0 : _this$loggedInUser.uid)) {\n            SoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n            this.setState({\n              incomingCall: incomingCall\n            });\n          }\n        }\n      }\n    };\n\n    this.incomingCallCancelled = call => {\n      if (this._isMounted) {\n        //we are not marking this as read as it will done in messagelist component\n        SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n        this.setState({\n          incomingCall: null\n        });\n      }\n    };\n\n    this.rejectCall = () => {\n      SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n      let callStatus = this.isCallActive() ? CometChat.CALL_STATUS.BUSY : CometChat.CALL_STATUS.REJECTED;\n      CometChat.rejectCall(this.state.incomingCall.sessionId, callStatus).then(rejectedCall => {\n        if (this.isCallActive() === false) {\n          if (this.context) {\n            this.context.setCallInProgress(null, \"\");\n          }\n\n          Storage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], rejectedCall);\n          this.props.actionGenerated(enums.ACTIONS[\"INCOMING_CALL_REJECTED\"], rejectedCall);\n          this.setState({\n            callInProgress: null\n          });\n        }\n\n        this.setState({\n          incomingCall: null\n        });\n      }).catch(error => {\n        this.setState({\n          incomingCall: null,\n          callInProgress: null\n        });\n        const errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n        this.context.setToastMessage(\"error\", errorCode);\n      });\n    };\n\n    this.acceptCall = () => {\n      this.checkForActiveCallAndEndCall().then(response => {\n        SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n        CometChat.acceptCall(this.state.incomingCall.sessionId).then(call => {\n          if (this.context) {\n            this.context.setCallInProgress(call, enums.CONSTANTS[\"INCOMING_DEFAULT_CALLING\"]);\n          }\n\n          Storage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], call);\n          this.props.actionGenerated(enums.ACTIONS[\"INCOMING_CALL_ACCEPTED\"], call);\n          this.setState({\n            incomingCall: null,\n            callInProgress: call\n          });\n        }).catch(error => {\n          if (this.context) {\n            this.context.setCallInProgress(null, \"\");\n          }\n\n          this.setState({\n            incomingCall: null,\n            callInProgress: null\n          });\n          const errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n          this.context.setToastMessage(\"error\", errorCode);\n        });\n      }).catch(error => {\n        const errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n        this.context.setToastMessage(\"error\", errorCode);\n      });\n    };\n\n    this.isCallActive = () => {\n      if (Object.keys(this.context.callInProgress).length === 0) {\n        return false;\n      }\n\n      let sessionID = this.getActiveCallSessionID();\n\n      if (!sessionID) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.getActiveCallSessionID = () => {\n      return this.context.getActiveCallSessionID();\n    };\n\n    this.checkForActiveCallAndEndCall = () => {\n      const promise = new Promise((resolve, reject) => {\n        if (this.isCallActive() === false) {\n          return resolve({\n            success: true\n          });\n        }\n\n        let sessionID = this.getActiveCallSessionID();\n        CometChat.endCall(sessionID).then(response => {\n          return resolve(response);\n        }).catch(error => {\n          return reject(error);\n        });\n      });\n      return promise;\n    };\n\n    this.actionHandler = (action, call) => {\n      switch (action) {\n        case enums.ACTIONS[\"OUTGOING_CALL_ENDED\"]:\n          this.setState({\n            callInProgress: null\n          });\n          break;\n\n        case enums.ACTIONS[\"USER_JOINED_CALL\"]:\n        case enums.ACTIONS[\"USER_LEFT_CALL\"]:\n          this.props.actionGenerated(action, call);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.logStorageChange = event => {\n      if ((event === null || event === void 0 ? void 0 : event.key) !== enums.CONSTANTS[\"ACTIVECALL\"]) {\n        return false;\n      }\n\n      if (event.newValue || event.oldValue) {\n        var _this$state$incomingC, _call;\n\n        let call;\n\n        if (event.newValue) {\n          call = JSON.parse(event.newValue);\n        } else if (event.oldValue) {\n          call = JSON.parse(event.oldValue);\n        }\n\n        if (((_this$state$incomingC = this.state.incomingCall) === null || _this$state$incomingC === void 0 ? void 0 : _this$state$incomingC.getSessionId()) === ((_call = call) === null || _call === void 0 ? void 0 : _call.sessionId)) {\n          SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n          this.setState({\n            incomingCall: null\n          });\n        }\n      }\n    };\n\n    this._isMounted = false;\n    this.state = {\n      incomingCall: null,\n      callInProgress: null\n    };\n    this.callButtonRef = /*#__PURE__*/React.createRef();\n    CometChat.getLoggedinUser().then(user => this.loggedInUser = user).catch(error => {\n      console.error(error);\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.CallAlertManager = new CallAlertManager();\n    this.CallAlertManager.attachListeners(this.callScreenUpdated);\n    Storage.attachChangeDetection(this.logStorageChange);\n  }\n\n  componentDidUpdate() {\n    if (this.state.incomingCall) {\n      this.adjustFontSize();\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    Storage.detachChangeDetection(this.logStorageChange);\n  }\n\n  render() {\n    let callScreen = null,\n        incomingCallAlert = null;\n\n    if (this.state.incomingCall) {\n      let callType = jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 9\n        }\n      }, jsx(\"i\", {\n        css: callIconStyle(audioCallIcon, this.context),\n        title: Translator.translate(\"INCOMING_AUDIO_CALL\", this.props.lang),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }\n      }), jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }\n      }, Translator.translate(\"INCOMING_AUDIO_CALL\", this.props.lang)));\n\n      if (this.state.incomingCall.type === CometChat.CALL_TYPE.VIDEO) {\n        callType = jsx(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 11\n          }\n        }, jsx(\"i\", {\n          css: callIconStyle(videoCallIcon, this.context),\n          title: Translator.translate(\"INCOMING_VIDEO_CALL\", this.props.lang),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }\n        }), jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }\n        }, Translator.translate(\"INCOMING_VIDEO_CALL\", this.props.lang)));\n      }\n\n      incomingCallAlert = jsx(\"div\", {\n        css: incomingCallWrapperStyle(this.props, keyframes),\n        className: \"callalert__wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 9\n        }\n      }, jsx(\"div\", {\n        css: callContainerStyle(),\n        className: \"callalert__container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }\n      }, jsx(\"div\", {\n        css: headerWrapperStyle(),\n        className: \"callalert__header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }\n      }, jsx(\"div\", {\n        css: callDetailStyle(),\n        className: \"header__detail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 15\n        }\n      }, jsx(\"div\", {\n        css: nameStyle(),\n        className: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 17\n        }\n      }, this.state.incomingCall.sender.name), jsx(\"div\", {\n        css: callTypeStyle(this.props),\n        className: \"calltype\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 17\n        }\n      }, callType)), jsx(\"div\", {\n        css: thumbnailStyle(),\n        className: \"header__thumbnail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 15\n        }\n      }, jsx(CometChatAvatar, {\n        user: this.state.incomingCall.sender,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 17\n        }\n      }))), jsx(\"div\", {\n        css: headerButtonStyle(),\n        className: \"callalert__buttons\",\n        ref: this.callButtonRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 13\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        css: ButtonStyle(this.props, 0),\n        className: \"button button__decline\",\n        onClick: () => this.rejectCall(this.state.incomingCall, CometChat.CALL_STATUS.REJECTED),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 15\n        }\n      }, Translator.translate(\"DECLINE\", this.props.lang)), jsx(\"button\", {\n        type: \"button\",\n        css: ButtonStyle(this.props, 1),\n        className: \"button button__accept\",\n        onClick: this.acceptCall,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 15\n        }\n      }, Translator.translate(\"ACCEPT\", this.props.lang)))));\n    }\n\n    if (this.state.callInProgress) {\n      callScreen = jsx(CometChatCallScreen, {\n        loggedInUser: this.loggedInUser,\n        call: this.state.callInProgress,\n        actionGenerated: this.actionHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 7\n      }\n    }, incomingCallAlert, callScreen);\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatIncomingCall.contextType = CometChatContext;\nCometChatIncomingCall.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatIncomingCall.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatIncomingCall };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Calls/CometChatIncomingCall/index.js"],"names":["React","jsx","keyframes","PropTypes","CometChat","CallAlertManager","CometChatCallScreen","CometChatAvatar","CometChatContext","enums","SoundManager","Storage","theme","Translator","incomingCallWrapperStyle","callContainerStyle","headerWrapperStyle","callDetailStyle","nameStyle","callTypeStyle","thumbnailStyle","headerButtonStyle","ButtonStyle","callIconStyle","CometChatIncomingCall","PureComponent","constructor","props","adjustFontSize","callButtonRef","current","reduceFontSize","buttonNodeList","querySelectorAll","forEach","buttonNode","parentContainerWidth","clientWidth","currentTextWidth","scrollWidth","style","fontSize","callScreenUpdated","key","call","INCOMING_CALL_RECEIVED","incomingCallReceived","INCOMING_CALL_CANCELLED","incomingCallCancelled","incomingCall","_isMounted","state","callInitiator","uid","loggedInUser","play","CONSTANTS","AUDIO","context","setState","pause","rejectCall","callStatus","isCallActive","CALL_STATUS","BUSY","REJECTED","sessionId","then","rejectedCall","setCallInProgress","setItem","actionGenerated","ACTIONS","callInProgress","catch","error","errorCode","hasOwnProperty","code","setToastMessage","acceptCall","checkForActiveCallAndEndCall","response","Object","keys","length","sessionID","getActiveCallSessionID","promise","Promise","resolve","reject","success","endCall","actionHandler","action","logStorageChange","event","newValue","oldValue","JSON","parse","getSessionId","createRef","getLoggedinUser","user","console","componentDidMount","attachListeners","attachChangeDetection","componentDidUpdate","componentWillUnmount","detachChangeDetection","render","callScreen","incomingCallAlert","callType","audioCallIcon","translate","lang","type","CALL_TYPE","VIDEO","videoCallIcon","sender","name","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, keyframes } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CallAlertManager } from \"./controller\";\n\nimport { CometChatCallScreen } from \"../CometChatCallScreen\";\nimport { CometChatAvatar } from \"../../Shared\";\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { SoundManager } from \"../../../util/SoundManager\";\nimport { Storage } from \"../../../util/Storage\";\n\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\n\nimport {\n  incomingCallWrapperStyle,\n  callContainerStyle,\n  headerWrapperStyle,\n  callDetailStyle,\n  nameStyle,\n  callTypeStyle,\n  thumbnailStyle,\n  headerButtonStyle,\n  ButtonStyle,\n  callIconStyle,\n} from \"./style\";\n\nimport audioCallIcon from \"./resources/incoming-call.svg\";\nimport videoCallIcon from \"./resources/incoming-video-call.svg\";\n\nclass CometChatIncomingCall extends React.PureComponent {\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.state = {\n      incomingCall: null,\n      callInProgress: null,\n    };\n\n    this.callButtonRef = React.createRef();\n\n    CometChat.getLoggedinUser()\n      .then((user) => (this.loggedInUser = user))\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    this.CallAlertManager = new CallAlertManager();\n    this.CallAlertManager.attachListeners(this.callScreenUpdated);\n\n    Storage.attachChangeDetection(this.logStorageChange);\n  }\n\n  componentDidUpdate() {\n    if (this.state.incomingCall) {\n      this.adjustFontSize();\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    Storage.detachChangeDetection(this.logStorageChange);\n  }\n\n  adjustFontSize = () => {\n    if (this.callButtonRef && this.callButtonRef.current) {\n      let reduceFontSize = false;\n      const buttonNodeList =\n        this.callButtonRef.current.querySelectorAll(\"button\");\n\n      buttonNodeList.forEach((buttonNode) => {\n        const parentContainerWidth = buttonNode.clientWidth;\n        const currentTextWidth = buttonNode.scrollWidth;\n\n        if (parentContainerWidth < currentTextWidth) {\n          reduceFontSize = true;\n        }\n      });\n\n      if (reduceFontSize) {\n        buttonNodeList.forEach((buttonNode) => {\n          buttonNode.style.fontSize = \"85%\";\n        });\n      }\n    }\n  };\n\n  callScreenUpdated = (key, call) => {\n    switch (key) {\n      case enums.INCOMING_CALL_RECEIVED: //occurs at the callee end\n        this.incomingCallReceived(call);\n        break;\n      case enums.INCOMING_CALL_CANCELLED: //occurs(call dismissed) at the callee end, caller cancels the call\n        this.incomingCallCancelled(call);\n        break;\n      default:\n        break;\n    }\n  };\n\n  incomingCallReceived = (incomingCall) => {\n    if (this._isMounted) {\n      if (this.state.incomingCall === null) {\n        if (incomingCall?.callInitiator.uid !== this.loggedInUser?.uid) {\n          SoundManager.play(\n            enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"],\n            this.context\n          );\n          this.setState({ incomingCall: incomingCall });\n        }\n      }\n    }\n  };\n\n  incomingCallCancelled = (call) => {\n    if (this._isMounted) {\n      //we are not marking this as read as it will done in messagelist component\n      SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n      this.setState({ incomingCall: null });\n    }\n  };\n\n  rejectCall = () => {\n    SoundManager.pause(enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"], this.context);\n    let callStatus = this.isCallActive()\n      ? CometChat.CALL_STATUS.BUSY\n      : CometChat.CALL_STATUS.REJECTED;\n\n    CometChat.rejectCall(this.state.incomingCall.sessionId, callStatus)\n      .then((rejectedCall) => {\n        if (this.isCallActive() === false) {\n          if (this.context) {\n            this.context.setCallInProgress(null, \"\");\n          }\n          Storage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], rejectedCall);\n          this.props.actionGenerated(\n            enums.ACTIONS[\"INCOMING_CALL_REJECTED\"],\n            rejectedCall\n          );\n          this.setState({ callInProgress: null });\n        }\n\n        this.setState({ incomingCall: null });\n      })\n      .catch((error) => {\n        this.setState({ incomingCall: null, callInProgress: null });\n        const errorCode =\n          error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n        this.context.setToastMessage(\"error\", errorCode);\n      });\n  };\n\n  acceptCall = () => {\n    this.checkForActiveCallAndEndCall()\n      .then((response) => {\n        SoundManager.pause(\n          enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"],\n          this.context\n        );\n        CometChat.acceptCall(this.state.incomingCall.sessionId)\n          .then((call) => {\n            if (this.context) {\n              this.context.setCallInProgress(\n                call,\n                enums.CONSTANTS[\"INCOMING_DEFAULT_CALLING\"]\n              );\n            }\n            Storage.setItem(enums.CONSTANTS[\"ACTIVECALL\"], call);\n            this.props.actionGenerated(\n              enums.ACTIONS[\"INCOMING_CALL_ACCEPTED\"],\n              call\n            );\n            this.setState({ incomingCall: null, callInProgress: call });\n          })\n          .catch((error) => {\n            if (this.context) {\n              this.context.setCallInProgress(null, \"\");\n            }\n            this.setState({ incomingCall: null, callInProgress: null });\n\n            const errorCode =\n              error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n            this.context.setToastMessage(\"error\", errorCode);\n          });\n      })\n      .catch((error) => {\n        const errorCode =\n          error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n        this.context.setToastMessage(\"error\", errorCode);\n      });\n  };\n\n  isCallActive = () => {\n    if (Object.keys(this.context.callInProgress).length === 0) {\n      return false;\n    }\n\n    let sessionID = this.getActiveCallSessionID();\n    if (!sessionID) {\n      return false;\n    }\n\n    return true;\n  };\n\n  getActiveCallSessionID = () => {\n    return this.context.getActiveCallSessionID();\n  };\n\n  checkForActiveCallAndEndCall = () => {\n    const promise = new Promise((resolve, reject) => {\n      if (this.isCallActive() === false) {\n        return resolve({ success: true });\n      }\n\n      let sessionID = this.getActiveCallSessionID();\n      CometChat.endCall(sessionID)\n        .then((response) => {\n          return resolve(response);\n        })\n        .catch((error) => {\n          return reject(error);\n        });\n    });\n\n    return promise;\n  };\n\n  actionHandler = (action, call) => {\n    switch (action) {\n      case enums.ACTIONS[\"OUTGOING_CALL_ENDED\"]:\n        this.setState({ callInProgress: null });\n        break;\n      case enums.ACTIONS[\"USER_JOINED_CALL\"]:\n      case enums.ACTIONS[\"USER_LEFT_CALL\"]:\n        this.props.actionGenerated(action, call);\n        break;\n      default:\n        break;\n    }\n  };\n\n  logStorageChange = (event) => {\n    if (event?.key !== enums.CONSTANTS[\"ACTIVECALL\"]) {\n      return false;\n    }\n\n    if (event.newValue || event.oldValue) {\n      let call;\n      if (event.newValue) {\n        call = JSON.parse(event.newValue);\n      } else if (event.oldValue) {\n        call = JSON.parse(event.oldValue);\n      }\n\n      if (this.state.incomingCall?.getSessionId() === call?.sessionId) {\n        SoundManager.pause(\n          enums.CONSTANTS.AUDIO[\"INCOMING_CALL\"],\n          this.context\n        );\n        this.setState({ incomingCall: null });\n      }\n    }\n  };\n\n  render() {\n    let callScreen = null,\n      incomingCallAlert = null;\n    if (this.state.incomingCall) {\n      let callType = (\n        <React.Fragment>\n          <i\n            css={callIconStyle(audioCallIcon, this.context)}\n            title={Translator.translate(\"INCOMING_AUDIO_CALL\", this.props.lang)}\n          ></i>\n          <span>\n            {Translator.translate(\"INCOMING_AUDIO_CALL\", this.props.lang)}\n          </span>\n        </React.Fragment>\n      );\n      if (this.state.incomingCall.type === CometChat.CALL_TYPE.VIDEO) {\n        callType = (\n          <React.Fragment>\n            <i\n              css={callIconStyle(videoCallIcon, this.context)}\n              title={Translator.translate(\n                \"INCOMING_VIDEO_CALL\",\n                this.props.lang\n              )}\n            ></i>\n            <span>\n              {Translator.translate(\"INCOMING_VIDEO_CALL\", this.props.lang)}\n            </span>\n          </React.Fragment>\n        );\n      }\n\n      incomingCallAlert = (\n        <div\n          css={incomingCallWrapperStyle(this.props, keyframes)}\n          className=\"callalert__wrapper\"\n        >\n          <div css={callContainerStyle()} className=\"callalert__container\">\n            <div css={headerWrapperStyle()} className=\"callalert__header\">\n              <div css={callDetailStyle()} className=\"header__detail\">\n                <div css={nameStyle()} className=\"name\">\n                  {this.state.incomingCall.sender.name}\n                </div>\n                <div css={callTypeStyle(this.props)} className=\"calltype\">\n                  {callType}\n                </div>\n              </div>\n              <div css={thumbnailStyle()} className=\"header__thumbnail\">\n                <CometChatAvatar user={this.state.incomingCall.sender} />\n              </div>\n            </div>\n            <div\n              css={headerButtonStyle()}\n              className=\"callalert__buttons\"\n              ref={this.callButtonRef}\n            >\n              <button\n                type=\"button\"\n                css={ButtonStyle(this.props, 0)}\n                className=\"button button__decline\"\n                onClick={() =>\n                  this.rejectCall(\n                    this.state.incomingCall,\n                    CometChat.CALL_STATUS.REJECTED\n                  )\n                }\n              >\n                {Translator.translate(\"DECLINE\", this.props.lang)}\n              </button>\n              <button\n                type=\"button\"\n                css={ButtonStyle(this.props, 1)}\n                className=\"button button__accept\"\n                onClick={this.acceptCall}\n              >\n                {Translator.translate(\"ACCEPT\", this.props.lang)}\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (this.state.callInProgress) {\n      callScreen = (\n        <CometChatCallScreen\n          loggedInUser={this.loggedInUser}\n          call={this.state.callInProgress}\n          actionGenerated={this.actionHandler}\n        />\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {incomingCallAlert}\n        {callScreen}\n      </React.Fragment>\n    );\n  }\n}\n\n// Specifies the default values for props:\nCometChatIncomingCall.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n};\n\nCometChatIncomingCall.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport { CometChatIncomingCall };\n"]},"metadata":{},"sourceType":"module"}