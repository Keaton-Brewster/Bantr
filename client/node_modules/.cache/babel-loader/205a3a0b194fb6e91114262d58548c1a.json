{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/CometChatReadReceipt/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { getMessageSentTime } from \"../../../util/common\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\nimport { msgTimestampStyle, iconStyle } from \"./style\";\nimport blueDoubleTick from \"./resources/message-read.svg\";\nimport greyDoubleTick from \"./resources/message-delivered.svg\";\nimport greyTick from \"./resources/message-sent.svg\";\nimport sendingTick from \"./resources/wait.svg\";\nimport errorTick from \"./resources/warning-small.svg\";\n\nclass CometChatReadReceipt extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.toggleReadReceipts = () => {\n      /**\n       * if delivery receipts feature is disabled\n       */\n      this.context.FeatureRestriction.isDeliveryReceiptsEnabled().then(response => {\n        if (response !== this.state.receipts) {\n          this.setState({\n            receipts: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.receipts !== false) {\n          this.setState({\n            receipts: false\n          });\n        }\n      });\n    };\n\n    this.state = {\n      message: props.message,\n      receipts: false\n    };\n  }\n\n  componentDidMount() {\n    this.toggleReadReceipts();\n  }\n\n  componentDidUpdate(prevProps) {\n    const previousMessageStr = JSON.stringify(prevProps.message);\n    const currentMessageStr = JSON.stringify(this.props.message);\n\n    if (previousMessageStr !== currentMessageStr) {\n      this.setState({\n        message: this.props.message\n      });\n    }\n\n    this.toggleReadReceipts();\n  }\n\n  render() {\n    var _this$state$message, _this$state$message$s, _this$props, _this$props$loggedInU;\n\n    let ticks,\n        receiptText = null,\n        dateField = null,\n        color = null;\n\n    if (((_this$state$message = this.state.message) === null || _this$state$message === void 0 ? void 0 : (_this$state$message$s = _this$state$message.sender) === null || _this$state$message$s === void 0 ? void 0 : _this$state$message$s.uid) === ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$loggedInU = _this$props.loggedInUser) === null || _this$props$loggedInU === void 0 ? void 0 : _this$props$loggedInU.uid)) {\n      if (this.state.message.receiverType === CometChat.RECEIVER_TYPE.GROUP) {\n        if (this.state.message.hasOwnProperty(\"error\")) {\n          ticks = errorTick;\n          receiptText = \"ERROR\";\n          dateField = this.state.message._composedAt;\n          color = this.context.theme.color.red;\n        } else {\n          ticks = sendingTick;\n          receiptText = \"SENDING\";\n          dateField = this.state.message._composedAt;\n          color = this.context.theme.secondaryTextColor;\n\n          if (this.state.message.hasOwnProperty(\"sentAt\")) {\n            ticks = greyTick;\n            receiptText = \"SENT\";\n            dateField = this.state.message.sentAt;\n          }\n        }\n      } else {\n        if (this.state.message.hasOwnProperty(\"error\")) {\n          ticks = errorTick;\n          receiptText = \"ERROR\";\n          dateField = this.state.message._composedAt;\n          color = this.context.theme.color.red;\n        } else {\n          ticks = sendingTick;\n          receiptText = \"SENDING\";\n          dateField = this.state.message._composedAt;\n          color = this.context.theme.secondaryTextColor;\n\n          if (this.state.message.hasOwnProperty(\"sentAt\")) {\n            ticks = greyTick;\n            receiptText = \"SENT\";\n            dateField = this.state.message.sentAt;\n\n            if (this.state.message.hasOwnProperty(\"deliveredAt\")) {\n              ticks = greyDoubleTick;\n              receiptText = \"DELIVERED\";\n\n              if (this.state.message.hasOwnProperty(\"readAt\")) {\n                ticks = blueDoubleTick;\n                receiptText = \"SEEN\";\n                color = this.context.theme.primaryColor;\n              }\n            }\n          }\n        }\n      }\n    } else {\n      dateField = this.state.message.sentAt;\n    } //if delivery receipts are disabled\n\n\n    if (this.state.receipts === false) {\n      ticks = null;\n    }\n\n    const receipt = ticks ? jsx(\"i\", {\n      css: iconStyle(ticks, color),\n      title: Translator.translate(receiptText, this.props.lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 28\n      }\n    }) : null;\n    const timestamp = getMessageSentTime(dateField, this.props.lang);\n    return jsx(React.Fragment, null, jsx(\"span\", {\n      css: msgTimestampStyle(this.context, this.state),\n      className: \"message__timestamp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 4\n      }\n    }, timestamp), receipt);\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatReadReceipt.contextType = CometChatContext;\nCometChatReadReceipt.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatReadReceipt.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatReadReceipt };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/CometChatReadReceipt/index.js"],"names":["React","jsx","PropTypes","CometChat","getMessageSentTime","CometChatContext","Translator","theme","msgTimestampStyle","iconStyle","CometChatReadReceipt","PureComponent","constructor","props","toggleReadReceipts","context","FeatureRestriction","isDeliveryReceiptsEnabled","then","response","state","receipts","setState","catch","error","message","componentDidMount","componentDidUpdate","prevProps","previousMessageStr","JSON","stringify","currentMessageStr","render","ticks","receiptText","dateField","color","sender","uid","loggedInUser","receiverType","RECEIVER_TYPE","GROUP","hasOwnProperty","errorTick","_composedAt","red","sendingTick","secondaryTextColor","greyTick","sentAt","greyDoubleTick","blueDoubleTick","primaryColor","receipt","translate","lang","timestamp","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { getMessageSentTime } from \"../../../util/common\";\nimport { CometChatContext } from \"../../../util/CometChatContext\"\n\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\n\nimport { msgTimestampStyle, iconStyle } from \"./style\";\n\nimport blueDoubleTick from \"./resources/message-read.svg\";\nimport greyDoubleTick from \"./resources/message-delivered.svg\";\nimport greyTick from \"./resources/message-sent.svg\";\nimport sendingTick from \"./resources/wait.svg\";\nimport errorTick from \"./resources/warning-small.svg\";\n\nclass CometChatReadReceipt extends React.PureComponent {\n\n\tstatic contextType = CometChatContext;\n\n\tconstructor(props) {\n\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tmessage: props.message,\n\t\t\treceipts: false,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.toggleReadReceipts();\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\n\t\tconst previousMessageStr = JSON.stringify(prevProps.message)\n\t\tconst currentMessageStr = JSON.stringify(this.props.message)\n\n\t\tif (previousMessageStr !== currentMessageStr) {\n\t\t\tthis.setState({ message: this.props.message })\n\t\t}\n\n    \tthis.toggleReadReceipts();\n\t}\n\n  \ttoggleReadReceipts = () => {\n\n\t\t/**\n\t\t * if delivery receipts feature is disabled\n\t\t */\n\t\tthis.context.FeatureRestriction.isDeliveryReceiptsEnabled().then(response => {\n\n\t\t\tif (response !== this.state.receipts) {\n\t\t\t\tthis.setState({receipts: response});\n\t\t\t}\n\n\t\t}).catch(error => {\n\n\t\t\tif (this.state.receipts !== false) {\n\t\t\t\tthis.setState({ receipts: false })\n\t\t\t}\n\n\t\t});\n\t}\n\n\trender() {\n\n\t\tlet ticks, receiptText = null, dateField = null, color = null;\n    \n\t\tif (this.state.message?.sender?.uid === this.props?.loggedInUser?.uid) {\n\n\t\t\tif (this.state.message.receiverType === CometChat.RECEIVER_TYPE.GROUP) {\n\t\t\t\tif (this.state.message.hasOwnProperty(\"error\")) {\n\t\t\t\t\tticks = errorTick\n\t\t\t\t\treceiptText = \"ERROR\"\n\t\t\t\t\tdateField = this.state.message._composedAt;\n\t\t\t\t\tcolor = this.context.theme.color.red;\n\t\t\t\t} else {\n\t\t\t\t\tticks = sendingTick\n\t\t\t\t\treceiptText = \"SENDING\"\n\t\t\t\t\tdateField = this.state.message._composedAt\n\t\t\t\t\tcolor = this.context.theme.secondaryTextColor;\n\t\t\t\t\tif (this.state.message.hasOwnProperty(\"sentAt\")) {\n\t\t\t\t\t\tticks = greyTick\n\t\t\t\t\t\treceiptText = \"SENT\"\n\t\t\t\t\t\tdateField = this.state.message.sentAt\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this.state.message.hasOwnProperty(\"error\")) {\n\t\t\t\t\tticks = errorTick\n\t\t\t\t\treceiptText = \"ERROR\"\n\t\t\t\t\tdateField = this.state.message._composedAt;\n\t\t\t\t\tcolor = this.context.theme.color.red;\n\t\t\t\t} else {\n\t\t\t\t\tticks = sendingTick\n\t\t\t\t\treceiptText = \"SENDING\"\n\t\t\t\t\tdateField = this.state.message._composedAt\n\t\t\t\t\tcolor = this.context.theme.secondaryTextColor;\n\t\t\t\t\tif (this.state.message.hasOwnProperty(\"sentAt\")) {\n\t\t\t\t\t\tticks = greyTick\n\t\t\t\t\t\treceiptText = \"SENT\"\n\t\t\t\t\t\tdateField = this.state.message.sentAt\n\t\t\t\t\t\tif (this.state.message.hasOwnProperty(\"deliveredAt\")) {\n\t\t\t\t\t\t\tticks = greyDoubleTick\n\t\t\t\t\t\t\treceiptText = \"DELIVERED\"\n\t\t\t\t\t\t\tif (this.state.message.hasOwnProperty(\"readAt\")) {\n\t\t\t\t\t\t\t\tticks = blueDoubleTick\n\t\t\t\t\t\t\t\treceiptText = \"SEEN\"\n\t\t\t\t\t\t\t\tcolor = this.context.theme.primaryColor;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\tdateField = this.state.message.sentAt\n\t\t}\n\n\t\t//if delivery receipts are disabled\n\t\tif (this.state.receipts === false) {\n\t\t\tticks = null\n\t\t}\n\n\t\tconst receipt = ticks ? (<i css={iconStyle(ticks, color)} title={Translator.translate(receiptText, this.props.lang)}></i>) : null\n\n\t\tconst timestamp = getMessageSentTime(dateField, this.props.lang)\n\n\t\treturn (\n\t\t\t<>\n\t\t\t<span css={msgTimestampStyle(this.context, this.state)} className=\"message__timestamp\">{timestamp}</span>\n\t\t\t{receipt}\n\t\t\t</>\n\t\t)\n\t}\n}\n\n// Specifies the default values for props:\nCometChatReadReceipt.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n};\n\nCometChatReadReceipt.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n}\n\nexport { CometChatReadReceipt };"]},"metadata":{},"sourceType":"module"}