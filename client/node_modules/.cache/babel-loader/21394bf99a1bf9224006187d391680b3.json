{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ConvorsationProvider.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport API from \"./API\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst conversationContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(conversationContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function Provider({\n  children\n}) {\n  _s2();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [conversations, setConversations] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [user, setUser] = useState({\n    _id: \"User1\"\n  });\n  const value = {\n    isLoading: [isLoading, setIsLoading],\n    conversations: [conversations, setConversations],\n    messages: [messages, setMessages],\n    user: [user, setUser]\n  };\n  useEffect(() => {\n    API.init(([convos, topMessages]) => {\n      setConversations(convos);\n      setMessages(topMessages);\n      setIsLoading(false);\n    }).catch(e => console.error(e));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(conversationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Provider, \"CNh2NGYi3K//CmarX8y21fQhYYY=\");\n\n_c = Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/utils/ConvorsationProvider.jsx"],"names":["React","useContext","useEffect","useState","API","conversationContext","createContext","useConversations","Provider","children","isLoading","setIsLoading","conversations","setConversations","messages","setMessages","user","setUser","_id","value","init","convos","topMessages","catch","e","console","error"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,MAAMC,mBAAmB,gBAAGL,KAAK,CAACM,aAAN,EAA5B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AACjC,SAAON,UAAU,CAACI,mBAAD,CAAjB;AACD;;GAFeE,gB;;AAIhB,OAAO,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAAA;;AACrC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC;AAC/Be,IAAAA,GAAG,EAAE;AAD0B,GAAD,CAAhC;AAIA,QAAMC,KAAK,GAAG;AACZT,IAAAA,SAAS,EAAE,CAACA,SAAD,EAAYC,YAAZ,CADC;AAEZC,IAAAA,aAAa,EAAE,CAACA,aAAD,EAAgBC,gBAAhB,CAFH;AAGZC,IAAAA,QAAQ,EAAE,CAACA,QAAD,EAAWC,WAAX,CAHE;AAIZC,IAAAA,IAAI,EAAE,CAACA,IAAD,EAAOC,OAAP;AAJM,GAAd;AAOAf,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,GAAG,CAACgB,IAAJ,CAAS,CAAC,CAACC,MAAD,EAASC,WAAT,CAAD,KAA2B;AAClCT,MAAAA,gBAAgB,CAACQ,MAAD,CAAhB;AACAN,MAAAA,WAAW,CAACO,WAAD,CAAX;AACAX,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAJD,EAIGY,KAJH,CAIUC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CAJhB;AAKD,GANQ,EAMN,EANM,CAAT;AAQA,sBACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAEL,KAArC;AAAA,cACGV;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IA5BeD,Q;;KAAAA,Q","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport API from \"./API\";\n\nconst conversationContext = React.createContext();\n\nexport function useConversations() {\n  return useContext(conversationContext);\n}\n\nexport function Provider({ children }) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [conversations, setConversations] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [user, setUser] = useState({\n    _id: \"User1\",\n  });\n\n  const value = {\n    isLoading: [isLoading, setIsLoading],\n    conversations: [conversations, setConversations],\n    messages: [messages, setMessages],\n    user: [user, setUser],\n  };\n\n  useEffect(() => {\n    API.init(([convos, topMessages]) => {\n      setConversations(convos);\n      setMessages(topMessages);\n      setIsLoading(false);\n    }).catch((e) => console.error(e));\n  }, []);\n\n  return (\n    <conversationContext.Provider value={value}>\n      {children}\n    </conversationContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}