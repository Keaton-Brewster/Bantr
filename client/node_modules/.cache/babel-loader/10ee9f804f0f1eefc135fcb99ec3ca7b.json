{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Calls/CometChatOutgoingDirectCall/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatCallScreen } from \"../CometChatCallScreen\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport { ID, getUnixTimestamp } from \"../../../util/common\";\nimport * as enums from \"../../../util/enums.js\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\n\nclass CometChatOutgoingDirectCall extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.actionHandler = action => {\n      switch (action) {\n        case enums.ACTIONS[\"DIRECT_CALL_ENDED\"]:\n        case enums.ACTIONS[\"DIRECT_CALL_ERROR\"]:\n          this.setState({\n            callInProgress: null\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.startCall = sessionID => {\n      this.sessionID = sessionID;\n\n      if (!this.sessionID) {\n        const errorCode = \"ERR_EMPTY_CALL_SESSION_ID\";\n        this.context.setToastMessage(\"error\", errorCode);\n        return false;\n      }\n\n      const customMessage = this.prepareCustomMessageData();\n      this.setState({\n        callInProgress: customMessage\n      });\n\n      if (this.context) {\n        this.context.setCallInProgress(customMessage, enums.CONSTANTS[\"OUTGOING_DIRECT_CALLING\"]);\n      }\n\n      setTimeout(() => {\n        this.sendCustomMessage();\n      }, 5);\n    };\n\n    this.joinCall = sessionID => {\n      this.sessionID = sessionID;\n\n      if (this.sessionID === null) {\n        const errorCode = \"ERR_EMPTY_CALL_SESSION_ID\";\n        this.context.setToastMessage(\"error\", errorCode);\n        return false;\n      }\n\n      const customMessage = this.prepareCustomMessageData();\n      this.setState({\n        callInProgress: customMessage\n      });\n\n      if (this.context) {\n        this.context.setCallInProgress(customMessage, enums.CONSTANTS[\"OUTGOING_DIRECT_CALLING\"]);\n      }\n    };\n\n    this.prepareCustomMessageData = () => {\n      const receiverType = CometChat.RECEIVER_TYPE.GROUP;\n      const customData = {\n        \"sessionID\": this.sessionID,\n        \"sessionId\": this.sessionID,\n        \"callType\": CometChat.CALL_TYPE.VIDEO\n      };\n      const customType = enums.CUSTOM_TYPE_MEETING;\n      const conversationId = `group_${this.sessionID}`;\n      const customMessage = new CometChat.CustomMessage(this.sessionID, receiverType, customType, customData);\n      customMessage.setSender(this.loggedInUser);\n      customMessage.setReceiver(receiverType);\n      customMessage.setConversationId(conversationId);\n      customMessage._composedAt = getUnixTimestamp();\n      customMessage._id = ID();\n      return customMessage;\n    };\n\n    this.sendCustomMessage = () => {\n      const customMessage = this.prepareCustomMessageData();\n      this.props.actionGenerated(enums.ACTIONS[\"MESSAGE_COMPOSED\"], [customMessage]);\n      CometChat.sendCustomMessage(customMessage).then(message => {\n        const newMessageObj = { ...message,\n          \"_id\": customMessage._id\n        };\n        this.props.actionGenerated(enums.ACTIONS[\"MESSAGE_SENT\"], [newMessageObj]);\n      }).catch(error => {\n        const newMessageObj = { ...customMessage,\n          \"error\": error\n        };\n        this.props.actionGenerated(enums.ACTIONS[\"ERROR_IN_SENDING_MESSAGE\"], [newMessageObj]);\n        const errorCode = error && error.hasOwnProperty(\"code\") ? error.code : \"ERROR\";\n        this.context.setToastMessage(\"error\", errorCode);\n      });\n    };\n\n    this.state = {\n      callInProgress: null\n    };\n    this.callScreenRef = /*#__PURE__*/React.createRef();\n    CometChat.getLoggedinUser().then(user => this.loggedInUser = user).catch(error => {\n      console.error(error);\n    });\n  }\n\n  render() {\n    let callScreen = null;\n\n    if (this.state.callInProgress) {\n      callScreen = jsx(CometChatCallScreen, {\n        ref: el => this.callScreenRef = el,\n        loggedInUser: this.loggedInUser,\n        call: this.state.callInProgress,\n        actionGenerated: this.actionHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }\n      });\n    }\n\n    return callScreen;\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatOutgoingDirectCall.contextType = CometChatContext;\nCometChatOutgoingDirectCall.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatOutgoingDirectCall.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatOutgoingDirectCall };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChat/src/components/Calls/CometChatOutgoingDirectCall/index.js"],"names":["React","jsx","PropTypes","CometChat","CometChatCallScreen","CometChatContext","ID","getUnixTimestamp","enums","Translator","theme","CometChatOutgoingDirectCall","Component","constructor","props","actionHandler","action","ACTIONS","setState","callInProgress","startCall","sessionID","errorCode","context","setToastMessage","customMessage","prepareCustomMessageData","setCallInProgress","CONSTANTS","setTimeout","sendCustomMessage","joinCall","receiverType","RECEIVER_TYPE","GROUP","customData","CALL_TYPE","VIDEO","customType","CUSTOM_TYPE_MEETING","conversationId","CustomMessage","setSender","loggedInUser","setReceiver","setConversationId","_composedAt","_id","actionGenerated","then","message","newMessageObj","catch","error","hasOwnProperty","code","state","callScreenRef","createRef","getLoggedinUser","user","console","render","callScreen","el","contextType","defaultProps","lang","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CometChatCallScreen } from \"../CometChatCallScreen\";\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport { ID, getUnixTimestamp } from \"../../../util/common\";\nimport * as enums from \"../../../util/enums.js\";\n\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\n\nclass CometChatOutgoingDirectCall extends React.Component {\n\n    sessionID;\n    static contextType = CometChatContext;\n    \n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n            callInProgress: null,\n        }\n\n        this.callScreenRef = React.createRef();\n        \n        CometChat.getLoggedinUser().then(user => this.loggedInUser = user).catch(error => {\n            console.error(error);\n        });\n    }\n\n    actionHandler = (action) => {\n\n        switch(action) {\n\n            case enums.ACTIONS[\"DIRECT_CALL_ENDED\"]:\n            case enums.ACTIONS[\"DIRECT_CALL_ERROR\"]:\n                this.setState({ callInProgress: null });\n            break;\n            default:\n            break;\n        }\n    }\n\n    startCall = (sessionID) => {\n\n        this.sessionID = sessionID;\n        if (!this.sessionID) {\n            const errorCode = \"ERR_EMPTY_CALL_SESSION_ID\";\n            this.context.setToastMessage(\"error\", errorCode);\n            return false;\n        }\n\n        const customMessage = this.prepareCustomMessageData();\n        this.setState({ callInProgress: customMessage });\n        if(this.context) {\n            this.context.setCallInProgress(customMessage, enums.CONSTANTS[\"OUTGOING_DIRECT_CALLING\"]);\n        }\n\n        setTimeout(() => {\n            this.sendCustomMessage();\n        }, 5);\n    }\n\n    joinCall = (sessionID) => {\n\n        this.sessionID = sessionID;\n        if (this.sessionID === null) {\n            const errorCode = \"ERR_EMPTY_CALL_SESSION_ID\";\n            this.context.setToastMessage(\"error\", errorCode);\n            return false;\n        }\n\n        const customMessage = this.prepareCustomMessageData();\n        this.setState({ callInProgress: customMessage });\n        if (this.context) {\n            this.context.setCallInProgress(customMessage, enums.CONSTANTS[\"OUTGOING_DIRECT_CALLING\"]);\n        }\n    }\n\n    prepareCustomMessageData = () => {\n\n        const receiverType = CometChat.RECEIVER_TYPE.GROUP;\n        const customData = { \"sessionID\": this.sessionID, \"sessionId\": this.sessionID, \"callType\": CometChat.CALL_TYPE.VIDEO };\n        const customType = enums.CUSTOM_TYPE_MEETING;\n        const conversationId = `group_${this.sessionID}`;\n\n        const customMessage = new CometChat.CustomMessage(this.sessionID, receiverType, customType, customData);\n        customMessage.setSender(this.loggedInUser);\n        customMessage.setReceiver(receiverType);\n        customMessage.setConversationId(conversationId);\n        customMessage._composedAt = getUnixTimestamp();\n        customMessage._id = ID();\n\n        return customMessage;\n    }\n\n    sendCustomMessage = () => {\n\n        const customMessage = this.prepareCustomMessageData();\n        this.props.actionGenerated(enums.ACTIONS[\"MESSAGE_COMPOSED\"], [customMessage]);\n\n        CometChat.sendCustomMessage(customMessage).then(message => {\n\n            const newMessageObj = { ...message, \"_id\": customMessage._id };\n            this.props.actionGenerated(enums.ACTIONS[\"MESSAGE_SENT\"], [newMessageObj]);\n\n        }).catch(error => {\n\n            const newMessageObj = { ...customMessage, \"error\": error };\n            this.props.actionGenerated(enums.ACTIONS[\"ERROR_IN_SENDING_MESSAGE\"], [newMessageObj]);\n\n            const errorCode = (error && error.hasOwnProperty(\"code\")) ? error.code : \"ERROR\";\n            this.context.setToastMessage(\"error\", errorCode);\n        });\n    }\n\n    render() {\n\n        let callScreen = null;\n        if(this.state.callInProgress) {\n\n            callScreen = (\n                <CometChatCallScreen ref={el => this.callScreenRef = el} loggedInUser={this.loggedInUser} call={this.state.callInProgress} actionGenerated={this.actionHandler} />\n            );\n        }\n        return callScreen;\n    }\n}\n\n// Specifies the default values for props:\nCometChatOutgoingDirectCall.defaultProps = {\n    lang: Translator.getDefaultLanguage(),\n    theme: theme,\n};\n\nCometChatOutgoingDirectCall.propTypes = {\n    lang: PropTypes.string,\n    theme: PropTypes.object,\n}\n\nexport { CometChatOutgoingDirectCall };"]},"metadata":{},"sourceType":"module"}