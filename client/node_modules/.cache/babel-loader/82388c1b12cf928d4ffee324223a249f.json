{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/CometChatMessages/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatMessageHeader, CometChatMessageList, CometChatMessageComposer, CometChatLiveReactions, CometChatMessageThread, CometChatImageViewer } from \"../\";\nimport { CometChatIncomingCall, CometChatOutgoingCall, CometChatOutgoingDirectCall, CometChatIncomingDirectCall } from \"../../Calls\";\nimport { CometChatUserDetails } from \"../../Users\";\nimport { CometChatGroupDetails } from \"../../Groups\";\nimport { CometChatToastNotification } from \"../../Shared\";\nimport { CometChatContextProvider, CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { checkMessageForExtensionsData } from \"../../../util/common\";\nimport { SoundManager } from \"../../../util/SoundManager\";\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { chatWrapperStyle, chatSecondaryStyle, reactionsWrapperStyle, messagePaneTopStyle, messagePaneBannerStyle, messagePaneUnreadBannerStyle, messagePaneUnreadBannerMessageStyle, iconArrowDownStyle, chatContainerStyle } from \"./style\";\n\nclass CometChatMessages extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.enableGroupActionMessages = () => {\n      this.getContext().FeatureRestriction.isGroupActionMessagesEnabled().then(response => {\n        /**\n         * Don't update state if the response has the same value\n         */\n        if (response !== this.state.enableGroupActionMessages) {\n          this.setState({\n            enableGroupActionMessages: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.enableGroupActionMessages !== false) {\n          this.setState({\n            enableGroupActionMessages: false\n          });\n        }\n      });\n    };\n\n    this.enableCallActionMessages = () => {\n      this.getContext().FeatureRestriction.isCallActionMessagesEnabled().then(response => {\n        /**\n         * Don't update state if the response has the same value\n         */\n        if (response !== this.state.enableCallActionMessages) {\n          this.setState({\n            enableCallActionMessages: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.enableCallActionMessages !== false) {\n          this.setState({\n            enableCallActionMessages: false\n          });\n        }\n      });\n    };\n\n    this.enableSendingOneOnOneMessage = () => {\n      this.getContext().FeatureRestriction.isOneOnOneChatEnabled().then(response => {\n        if (response !== this.state.enableSendingOneOnOneMessage) {\n          this.setState({\n            enableSendingOneOnOneMessage: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.enableSendingOneOnOneMessage !== false) {\n          this.setState({\n            enableSendingOneOnOneMessage: false\n          });\n        }\n      });\n    };\n\n    this.enableSendingGroupMessage = () => {\n      this.getContext().FeatureRestriction.isGroupChatEnabled().then(response => {\n        if (response !== this.state.enableSendingGroupMessage) {\n          this.setState({\n            enableSendingGroupMessage: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.enableSendingGroupMessage !== false) {\n          this.setState({\n            enableSendingGroupMessage: false\n          });\n        }\n      });\n    };\n\n    this.enableHideDeletedMessages = () => {\n      this.getContext().FeatureRestriction.isHideDeletedMessagesEnabled().then(response => {\n        if (response !== this.state.enableHideDeletedMessages) {\n          this.setState({\n            enableHideDeletedMessages: response\n          });\n        }\n      }).catch(error => {\n        if (this.state.enableHideDeletedMessages !== false) {\n          this.setState({\n            enableHideDeletedMessages: false\n          });\n        }\n      });\n    };\n\n    this.getContext = () => {\n      if (this.props._parent.length) {\n        return this.context;\n      } else {\n        return this.contextProviderRef.state;\n      }\n    };\n\n    this.actionHandler = (action, messages, key, group, options) => {\n      switch (action) {\n        case enums.ACTIONS[\"CUSTOM_MESSAGE_RECEIVED\"]:\n        case enums.ACTIONS[\"MESSAGE_RECEIVED\"]:\n          {\n            const message = messages[0];\n\n            if (message.parentMessageId) {\n              this.updateReplyCount(messages);\n            } else {\n              this.smartReplyPreview(messages);\n              this.appendMessage(messages);\n            }\n\n            SoundManager.play(enums.CONSTANTS.AUDIO[\"INCOMING_MESSAGE\"], this.getContext());\n          }\n          break;\n\n        case enums.ACTIONS[\"MESSAGE_READ\"]:\n          {\n            var _this$props;\n\n            if ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : _this$props.actionGenerated) {\n              var _this$props2;\n\n              (_this$props2 = this.props) === null || _this$props2 === void 0 ? void 0 : _this$props2.actionGenerated(action, messages);\n            }\n\n            break;\n          }\n\n        case enums.ACTIONS[\"MESSAGE_COMPOSED\"]:\n          {\n            this.appendMessage(messages);\n            break;\n          }\n\n        case enums.ACTIONS[\"MESSAGE_SENT\"]:\n          this.messageSent(messages);\n          this.getContext().setLastMessage(messages[0]);\n          break;\n\n        case enums.ACTIONS[\"ERROR_IN_SENDING_MESSAGE\"]:\n          this.messageSent(messages);\n          break;\n\n        case enums.ACTIONS[\"ON_MESSAGE_READ_DELIVERED\"]:\n          this.updateMessages(messages);\n          break;\n\n        case enums.ACTIONS[\"ON_MESSAGE_EDITED\"]:\n          {\n            this.updateMessages(messages); //update the parent message of thread message\n\n            this.updateParentThreadedMessage(key, \"edit\");\n            break;\n          }\n\n        case enums.ACTIONS[\"ON_MESSAGE_DELETED\"]:\n          {\n            this.removeMessages(messages); //remove the thread message\n\n            this.updateParentThreadedMessage(messages[0], \"delete\");\n            break;\n          }\n\n        case enums.ACTIONS[\"MESSAGES_FETCHED\"]:\n          this.prependMessages(messages);\n          break;\n\n        case enums.ACTIONS[\"REFRESHING_MESSAGES\"]:\n          this.refreshingMessages();\n          break;\n\n        case enums.ACTIONS[\"MESSAGES_REFRESHED\"]:\n          this.messageRefreshed(messages);\n          break;\n\n        case enums.ACTIONS[\"NEW_MESSAGES\"]:\n          this.newMessagesArrived(messages);\n          break;\n\n        case enums.ACTIONS[\"CLEAR_UNREAD_MESSAGES\"]:\n          this.jumpToMessages(true);\n          break;\n\n        case enums.ACTIONS[\"DELETE_MESSAGE\"]:\n          this.deleteMessage(messages);\n          break;\n\n        case enums.ACTIONS[\"EDIT_MESSAGE\"]:\n          this.editMessage(messages);\n          break;\n\n        case enums.ACTIONS[\"MESSAGE_EDITED\"]:\n          this.messageEdited(messages);\n          break;\n\n        case enums.ACTIONS[\"CLEAR_EDIT_PREVIEW\"]:\n          this.clearEditPreview();\n          break;\n\n        case enums.GROUP_MEMBER_SCOPE_CHANGED:\n        case enums.GROUP_MEMBER_KICKED:\n        case enums.GROUP_MEMBER_BANNED:\n        case enums.GROUP_MEMBER_UNBANNED:\n        case enums.GROUP_MEMBER_ADDED:\n        case enums.GROUP_MEMBER_LEFT:\n        case enums.GROUP_MEMBER_JOINED:\n          this.groupUpdated(action, messages, group, options);\n          break;\n\n        case enums.INCOMING_CALL_RECEIVED:\n        case enums.INCOMING_CALL_CANCELLED:\n        case enums.OUTGOING_CALL_ACCEPTED:\n        case enums.OUTGOING_CALL_REJECTED:\n          this.appendCallMessage(messages);\n          break;\n\n        case enums.ACTIONS[\"VIEW_ORIGINAL_IMAGE\"]:\n          this.toggleOriginalImageView(messages);\n          break;\n\n        case enums.ACTIONS[\"INITIATE_AUDIO_CALL\"]:\n          this.audioCall();\n          break;\n\n        case enums.ACTIONS[\"INITIATE_VIDEO_CALL\"]:\n          this.videoCall();\n          break;\n\n        case enums.ACTIONS[\"VIEW_DETAIL\"]:\n        case enums.ACTIONS[\"CLOSE_GROUP_DETAIL\"]:\n        case enums.ACTIONS[\"CLOSE_USER_DETAIL\"]:\n          this.toggleDetailView();\n          break;\n\n        case enums.ACTIONS[\"TOGGLE_SIDEBAR\"]:\n          this.toggleDetailView();\n          this.props.actionGenerated(action);\n          break;\n\n        case enums.ACTIONS[\"SEND_LIVE_REACTION\"]:\n          this.toggleReaction(true);\n          break;\n\n        case enums.ACTIONS[\"SHOW_LIVE_REACTION\"]:\n          this.showReaction(messages);\n          break;\n\n        case enums.ACTIONS[\"STOP_LIVE_REACTION\"]:\n          this.toggleReaction(false);\n          break;\n\n        case enums.ACTIONS[\"REACT_TO_MESSAGE\"]:\n          this.reactToMessage(messages);\n          break;\n\n        case enums.ACTIONS[\"OUTGOING_CALL_ACCEPTED\"]:\n        case enums.ACTIONS[\"USER_JOINED_CALL\"]:\n        case enums.ACTIONS[\"USER_LEFT_CALL\"]:\n        case enums.ACTIONS[\"OUTGOING_CALL_ENDED\"]:\n        case enums.ACTIONS[\"OUTGOING_CALL_REJECTED\"]:\n        case enums.ACTIONS[\"OUTGOING_CALL_CANCELLED\"]:\n        case enums.ACTIONS[\"INCOMING_CALL_ACCEPTED\"]:\n        case enums.ACTIONS[\"INCOMING_CALL_ENDED\"]:\n        case enums.ACTIONS[\"INCOMING_CALL_REJECTED\"]:\n        case enums.ACTIONS[\"DIRECT_CALL_ENDED\"]:\n        case enums.ACTIONS[\"DIRECT_CALL_ERROR\"]:\n          break;\n\n        case enums.ACTIONS[\"JOIN_DIRECT_CALL\"]:\n          {\n            //if used in a chat widget, trigger the event to the app component as directcall component is included outside of iframe\n            if (Object.keys(this.props.widgetsettings).length) {\n              this.props.actionGenerated(action, messages);\n            } else {\n              const sessionID = this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP ? this.getContext().item.guid : null;\n              this.outgoingDirectCallRef.joinCall(sessionID);\n            }\n\n            break;\n          }\n\n        case enums.ACTIONS[\"VIEW_THREADED_MESSAGE\"]:\n          this.viewThreadedMessage(messages);\n          break;\n\n        case enums.ACTIONS[\"THREAD_MESSAGE_COMPOSED\"]:\n          this.threadMessageComposed(messages);\n          break;\n\n        case enums.ACTIONS[\"CLOSE_THREADED_MESSAGE\"]:\n          this.closeThreadedMessage();\n          break;\n\n        case enums.ACTIONS[\"ADD_GROUP_MEMBER_SUCCESS\"]:\n          this.appendMemberAddedMessage(messages);\n          break;\n\n        case enums.ACTIONS[\"UNBAN_GROUP_MEMBER_SUCCESS\"]:\n          this.appendMemberUnbannedMessage(messages);\n          break;\n\n        case enums.ACTIONS[\"SCOPECHANGE_GROUPMEMBER_SUCCESS\"]:\n          this.appendMemberScopeChangedMessage(messages);\n          break;\n\n        case enums.ACTIONS[\"ERROR\"]:\n          this.errorHandler(key);\n          break;\n\n        case enums.ACTIONS[\"INFO\"]:\n          this.infoMessageHandler(key);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.errorHandler = errorCode => {\n      if (typeof this.toastRef.setError === \"function\") {\n        var _this$toastRef;\n\n        (_this$toastRef = this.toastRef) === null || _this$toastRef === void 0 ? void 0 : _this$toastRef.setError(errorCode);\n      }\n    };\n\n    this.infoMessageHandler = infoCode => {\n      if (typeof this.toastRef.setInfo === \"function\") {\n        var _this$toastRef2;\n\n        (_this$toastRef2 = this.toastRef) === null || _this$toastRef2 === void 0 ? void 0 : _this$toastRef2.setInfo(infoCode);\n      }\n    };\n\n    this.appendMemberAddedMessage = messages => {\n      //if group action messages are disabled\n      if (this.state.enableGroupActionMessages === false) {\n        return false;\n      }\n\n      const messageList = [];\n      messages.forEach(eachMember => {\n        const sentAt = new Date() / 1000 | 0;\n        const messageObj = {\n          receiver: { ...this.context.item\n          },\n          receiverId: this.context.item.guid,\n          receiverType: CometChat.RECEIVER_TYPE.GROUP,\n          sender: { ...this.loggedInUser\n          },\n          category: CometChat.CATEGORY_ACTION,\n          type: CometChat.ACTION_TYPE.TYPE_GROUP_MEMBER,\n          sentAt: sentAt,\n          action: CometChat.ACTION_TYPE.MEMBER_ADDED,\n          actionBy: { ...this.loggedInUser\n          },\n          actionOn: { ...eachMember\n          },\n          actionFor: { ...this.context.item\n          }\n        };\n        messageList.push(messageObj);\n      });\n      this.appendMessage(messageList);\n    };\n\n    this.appendMemberUnbannedMessage = messages => {\n      //if group action messages are disabled\n      if (this.state.enableGroupActionMessages === false) {\n        return false;\n      }\n\n      const messageList = [];\n      messages.forEach(eachMember => {\n        const sentAt = new Date() / 1000 | 0;\n        const messageObj = {\n          receiver: { ...this.context.item\n          },\n          receiverId: this.context.item.guid,\n          receiverType: CometChat.RECEIVER_TYPE.GROUP,\n          sender: { ...this.loggedInUser\n          },\n          category: CometChat.CATEGORY_ACTION,\n          type: CometChat.ACTION_TYPE.TYPE_GROUP_MEMBER,\n          sentAt: sentAt,\n          action: CometChat.ACTION_TYPE.MEMBER_UNBANNED,\n          actionBy: { ...this.loggedInUser\n          },\n          actionOn: { ...eachMember\n          }\n        };\n        messageList.push(messageObj);\n      });\n      this.appendMessage(messageList);\n    };\n\n    this.appendMemberScopeChangedMessage = messages => {\n      //if group action messages are disabled\n      if (this.state.enableGroupActionMessages === false) {\n        return false;\n      }\n\n      const messageList = [];\n      messages.forEach(eachMember => {\n        const newScope = Translator.translate(eachMember.scope, this.state.lang);\n        const sentAt = new Date() / 1000 | 0;\n        const messageObj = {\n          receiver: { ...this.context.item\n          },\n          receiverId: this.context.item.guid,\n          receiverType: CometChat.RECEIVER_TYPE.GROUP,\n          sender: { ...this.loggedInUser\n          },\n          category: CometChat.CATEGORY_ACTION,\n          type: CometChat.ACTION_TYPE.TYPE_GROUP_MEMBER,\n          sentAt: sentAt,\n          action: CometChat.ACTION_TYPE.MEMBER_SCOPE_CHANGED,\n          actionBy: { ...this.loggedInUser\n          },\n          actionOn: { ...eachMember\n          },\n          newScope: newScope\n        };\n        messageList.push(messageObj);\n      });\n      this.appendMessage(messageList);\n    };\n\n    this.toggleOriginalImageView = message => {\n      this.setState({\n        viewOriginalImage: message\n      });\n    };\n\n    this.toggleDetailView = () => {\n      let viewdetail = !this.state.viewdetailscreen;\n      this.setState({\n        viewdetailscreen: viewdetail,\n        threadmessageview: false\n      });\n    };\n\n    this.viewThreadedMessage = parentMessage => {\n      const message = { ...parentMessage\n      };\n      const threaditem = { ...this.getContext().item\n      };\n      this.setState({\n        threadmessageview: true,\n        threadmessageparent: message,\n        threadmessageitem: threaditem,\n        threadmessagetype: this.getContext().type,\n        viewdetailscreen: false\n      });\n    };\n\n    this.threadMessageComposed = messages => {\n      if (this.getContext().type !== this.state.threadmessagetype) {\n        return false;\n      }\n\n      if (this.state.threadmessagetype === CometChat.ACTION_TYPE.TYPE_GROUP && this.getContext().item.guid !== this.state.threadmessageitem.guid || this.state.threadmessagetype === CometChat.ACTION_TYPE.TYPE_USER && this.getContext().item.uid !== this.state.threadmessageitem.uid) {\n        return false;\n      }\n\n      this.updateReplyCount(messages);\n    };\n\n    this.closeThreadedMessage = () => {\n      this.setState({\n        threadmessageview: false,\n        viewdetailscreen: false\n      });\n    };\n\n    this.updateParentThreadedMessage = (message, action) => {\n      if (this.state.threadmessageview === false || message.id !== this.state.threadmessageparent.id) {\n        return false;\n      }\n\n      if (action === \"delete\") {\n        this.setState({\n          threadmessageparent: { ...message\n          },\n          threadmessageview: false\n        });\n      } else {\n        this.setState({\n          threadmessageparent: { ...message\n          }\n        });\n      }\n    };\n\n    this.getReceiverDetails = () => {\n      let receiverId;\n      let receiverType;\n\n      if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER) {\n        receiverId = this.getContext().item.uid;\n        receiverType = CometChat.RECEIVER_TYPE.USER;\n      } else if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP) {\n        receiverId = this.getContext().item.guid;\n        receiverType = CometChat.RECEIVER_TYPE.GROUP;\n      }\n\n      return {\n        receiverId: receiverId,\n        receiverType: receiverType\n      };\n    };\n\n    this.audioCall = () => {\n      const {\n        receiverId,\n        receiverType\n      } = this.getReceiverDetails();\n      const call = new CometChat.Call(receiverId, CometChat.CALL_TYPE.AUDIO, receiverType);\n      CometChat.initiateCall(call).then(outgoingCall => {\n        //when this component is part of chat widget trigger an event.. (outgoingcall component is used separately in chat widget)\n        if (Object.keys(this.props.widgetsettings).length) {\n          this.props.actionGenerated(enums.ACTIONS[\"START_AUDIO_CALL\"], outgoingCall);\n        } else {\n          this.outgoingCallRef.startCall(outgoingCall);\n          this.appendCallMessage(outgoingCall);\n        }\n      }).catch(error => this.errorHandler(\"SOMETHING_WRONG\"));\n    };\n\n    this.videoCall = () => {\n      /*\n      Direct calling for groups\n      */\n      if (this.getContext().type === CometChat.RECEIVER_TYPE.GROUP) {\n        if (Object.keys(this.props.widgetsettings).length) {\n          this.props.actionGenerated(enums.ACTIONS[\"START_DIRECT_CALL\"]);\n        } else {\n          const sessionID = this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP ? this.getContext().item.guid : null;\n          this.outgoingDirectCallRef.startCall(sessionID);\n        }\n\n        return;\n      }\n      /*\n      Default calling for one-on-one\n      */\n\n\n      const {\n        receiverId,\n        receiverType\n      } = this.getReceiverDetails();\n      const call = new CometChat.Call(receiverId, CometChat.CALL_TYPE.VIDEO, receiverType);\n      CometChat.initiateCall(call).then(outgoingCall => {\n        //when this component is part of chat widget trigger an event.. (outgoingcall component is used separately in chat widget)\n        if (Object.keys(this.props.widgetsettings).length) {\n          this.props.actionGenerated(enums.ACTIONS[\"START_VIDEO_CALL\"], outgoingCall);\n        } else {\n          this.outgoingCallRef.startCall(outgoingCall);\n        }\n      }).catch(error => this.errorHandler(\"SOMETHING_WRONG\"));\n    };\n\n    this.toggleReaction = flag => {\n      this.setState({\n        liveReaction: flag\n      });\n    };\n\n    this.showReaction = reaction => {\n      if (reaction.metadata.type === enums.CONSTANTS[\"METADATA_TYPE_LIVEREACTION\"]) {\n        this.reactionName = reaction.metadata.reaction;\n        this.setState({\n          liveReaction: true\n        });\n      }\n    };\n\n    this.deleteMessage = message => {\n      const messageId = message.id;\n      CometChat.deleteMessage(messageId).then(deletedMessage => {\n        //remove edit preview when message is deleted\n        if (deletedMessage.id === this.state.messageToBeEdited.id) {\n          this.setState({\n            messageToBeEdited: \"\"\n          });\n        }\n\n        const messageList = [...this.state.messageList];\n        let messageKey = messageList.findIndex(m => m.id === message.id);\n\n        if (messageList.length - messageKey === 1 && !message.replyCount) {\n          this.getContext().setLastMessage(deletedMessage);\n        }\n\n        this.removeMessages([deletedMessage]);\n        this.updateParentThreadedMessage(deletedMessage, \"delete\");\n      }).catch(error => this.errorHandler(\"SOMETHING_WRONG\"));\n    };\n\n    this.editMessage = message => {\n      this.setState({\n        messageToBeEdited: message,\n        replyPreview: null\n      });\n    };\n\n    this.messageEdited = message => {\n      const messageList = [...this.state.messageList];\n      let messageKey = messageList.findIndex(m => m.id === message.id);\n\n      if (messageKey > -1) {\n        const messageObj = messageList[messageKey];\n        const newMessageObj = Object.assign({}, messageObj, message);\n        messageList.splice(messageKey, 1, newMessageObj);\n        this.updateMessages(messageList);\n        this.updateParentThreadedMessage(newMessageObj, \"edit\");\n\n        if (messageList.length - messageKey === 1 && !message.replyCount) {\n          this.getContext().setLastMessage(newMessageObj);\n        }\n      }\n    };\n\n    this.messageSent = messages => {\n      const message = messages[0];\n      const messageList = [...this.state.messageList];\n      let messageKey = messageList.findIndex(m => m._id === message._id);\n\n      if (messageKey > -1) {\n        const newMessageObj = { ...message\n        };\n        messageList.splice(messageKey, 1, newMessageObj);\n        messageList.sort((a, b) => a.id - b.id);\n        this.setState({\n          messageList: messageList,\n          scrollToBottom: true\n        });\n      }\n    };\n\n    this.refreshingMessages = () => {\n      this.setState({\n        messageList: [],\n        messageToBeEdited: \"\",\n        replyPreview: null,\n        liveReaction: false,\n        messageToReact: null\n      });\n      this.getContext().clearUnreadMessages();\n    };\n\n    this.messageRefreshed = messages => {\n      const messageList = [...messages];\n      this.setState({\n        messageList: messageList,\n        scrollToBottom: true\n      });\n    };\n\n    this.newMessagesArrived = newMessage => {\n      this.getContext().setUnreadMessages(newMessage);\n    };\n\n    this.markMessagesAsRead = scrollToBottom => {\n      if (this.getContext().unreadMessages.length === 0) {\n        return false;\n      }\n\n      let unreadMessages = [...this.getContext().unreadMessages];\n      let messageList = [...this.state.messageList];\n      unreadMessages.forEach(unreadMessage => {\n        if (unreadMessage.getReceiverType() === CometChat.RECEIVER_TYPE.USER) {\n          if (this.messageListRef) {\n            messageList.push(unreadMessage);\n            this.messageListRef.markMessageAsRead(unreadMessage, CometChat.ACTION_TYPE.TYPE_USER);\n          }\n        } else if (unreadMessage.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP) {\n          if (this.messageListRef) {\n            messageList.push(unreadMessage);\n            this.messageListRef.markMessageAsRead(unreadMessage, CometChat.ACTION_TYPE.TYPE_GROUP);\n          }\n        }\n      });\n      this.getContext().clearUnreadMessages(); //this.props.actionGenerated(\"unreadMessages\", []);\n\n      this.setState({\n        messageList: messageList,\n        scrollToBottom: scrollToBottom\n      });\n    };\n\n    this.jumpToMessages = () => {\n      if (this.getContext().unreadMessages.length === 0) {\n        return false;\n      }\n\n      let unreadMessages = [...this.getContext().unreadMessages];\n      let messageList = [...this.state.messageList];\n      messageList = messageList.concat(unreadMessages);\n      this.getContext().clearUnreadMessages();\n      this.getContext().setClearedUnreadMessages(true);\n\n      if (messageList.length > enums.CONSTANTS[\"MAX_MESSAGE_COUNT\"]) {\n        if (this.messageListRef) {\n          this.messageListRef.reInitializeMessageBuilder();\n        }\n      } else {\n        this.markMessagesAsRead(true);\n      }\n    };\n\n    this.removeMessages = messages => {\n      const deletedMessage = messages[0];\n      const messagelist = [...this.state.messageList];\n      let messageKey = messagelist.findIndex(message => message.id === deletedMessage.id);\n\n      if (messageKey > -1) {\n        if (this.state.enableHideDeletedMessages) {\n          messagelist.splice(messageKey, 1);\n        } else {\n          let messageObj = { ...messagelist[messageKey]\n          };\n          let newMessageObj = Object.assign({}, messageObj, deletedMessage);\n          messagelist.splice(messageKey, 1, newMessageObj);\n        }\n\n        this.setState({\n          messageList: messagelist,\n          scrollToBottom: false\n        });\n      }\n    };\n\n    this.prependMessages = messages => {\n      const messageList = [...messages, ...this.state.messageList];\n      this.setState({\n        messageList: messageList,\n        scrollToBottom: false\n      });\n    };\n\n    this.appendMessage = message => {\n      let messages = [...this.state.messageList, ...message];\n      this.setState({\n        messageList: messages,\n        scrollToBottom: true\n      });\n    };\n\n    this.updateMessages = messages => {\n      this.setState({\n        messageList: messages,\n        scrollToBottom: false\n      });\n    };\n\n    this.groupUpdated = (action, message, group, options) => {\n      //if group action messages are disabled\n      if (this.state.enableGroupActionMessages === true) {\n        this.appendMessage([message]);\n      }\n\n      this.props.actionGenerated(action, message, group, options);\n    };\n\n    this.appendCallMessage = message => {\n      //if call action messages are disabled\n      if (this.state.enableCallActionMessages === false) {\n        return false;\n      }\n\n      this.appendMessage([message]);\n    };\n\n    this.updateReplyCount = messages => {\n      const receivedMessage = messages[0];\n      let messageList = [...this.state.messageList];\n      let messageKey = messageList.findIndex(m => m.id === receivedMessage.parentMessageId);\n\n      if (messageKey > -1) {\n        const messageObj = messageList[messageKey];\n        let replyCount = messageObj.hasOwnProperty(\"replyCount\") ? messageObj.replyCount : 0;\n        replyCount = replyCount + 1;\n        const newMessageObj = Object.assign({}, messageObj, {\n          replyCount: replyCount\n        });\n        messageList.splice(messageKey, 1, newMessageObj);\n        this.setState({\n          messageList: messageList,\n          scrollToBottom: false\n        });\n      }\n    };\n\n    this.smartReplyPreview = messages => {\n      const message = messages[0];\n\n      if (message.sender.uid === this.loggedInUser.uid || message.category === CometChat.CATEGORY_CUSTOM) {\n        return false;\n      }\n      /**\n       * If smart-replies feature is enabled\n       */\n\n\n      this.getContext().FeatureRestriction.isSmartRepliesEnabled().then(response => {\n        if (response === true) {\n          const smartReplyData = checkMessageForExtensionsData(message, \"smart-reply\");\n\n          if (smartReplyData && smartReplyData.hasOwnProperty(\"error\") === false) {\n            this.setState({\n              replyPreview: message\n            });\n          } else {\n            this.setState({\n              replyPreview: null\n            });\n          }\n        }\n      });\n    };\n\n    this.clearEditPreview = () => {\n      this.setState({\n        messageToBeEdited: \"\"\n      });\n    };\n\n    this.reactToMessage = message => {\n      this.setState({\n        messageToReact: message\n      });\n\n      if (this.composerRef) {\n        this.composerRef.toggleEmojiPicker();\n      }\n    };\n\n    this.state = {\n      messageList: [],\n      scrollToBottom: true,\n      messageToBeEdited: \"\",\n      replyPreview: null,\n      liveReaction: false,\n      messageToReact: null,\n      lang: props.lang,\n      unreadMessages: [],\n      viewdetailscreen: false,\n      threadmessageview: false,\n      threadmessagetype: null,\n      threadmessageitem: {},\n      threadmessageparent: {},\n      viewOriginalImage: false,\n      enableGroupActionMessages: false,\n      enableCallActionMessages: false,\n      enableSendingOneOnOneMessage: false,\n      enableSendingGroupMessage: false,\n      enableHideDeletedMessages: false\n    };\n    this.contextProviderRef = /*#__PURE__*/React.createRef();\n    this.composerRef = /*#__PURE__*/React.createRef();\n    this.messageListRef = /*#__PURE__*/React.createRef();\n    this.outgoingCallRef = /*#__PURE__*/React.createRef();\n    this.outgoingDirectCallRef = /*#__PURE__*/React.createRef();\n    this.toastRef = /*#__PURE__*/React.createRef();\n    this.reactionName = \"heart\";\n  }\n\n  componentDidMount() {\n    CometChat.getLoggedinUser().then(user => this.loggedInUser = user).catch(error => this.errorHandler(\"SOMETHING_WRONG\"));\n    this.type = this.getContext().type;\n    this.item = this.getContext().item;\n    this.enableGroupActionMessages();\n    this.enableCallActionMessages();\n    this.enableSendingOneOnOneMessage();\n    this.enableSendingGroupMessage();\n    this.enableHideDeletedMessages();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (Object.keys(this.item).length) {\n      const ifChatWindowChanged = () => {\n        let output = false;\n\n        if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER && this.getContext().item.uid !== this.item.uid) {\n          output = true;\n        } else if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP && this.getContext().item.guid !== this.item.guid) {\n          output = true;\n        } else if (this.type !== this.getContext().type) {\n          output = true;\n        }\n\n        return output;\n      };\n\n      if (ifChatWindowChanged() === true) {\n        this.setState({\n          messageList: [],\n          scrollToBottom: true,\n          messageToBeEdited: \"\",\n          threadmessageview: false,\n          viewdetailscreen: false\n        });\n      }\n    }\n\n    this.type = this.getContext().type;\n    this.item = this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER || CometChat.ACTION_TYPE.TYPE_GROUP ? this.getContext().item : {};\n    this.enableGroupActionMessages();\n    this.enableCallActionMessages();\n    this.enableSendingOneOnOneMessage();\n    this.enableSendingGroupMessage();\n    this.enableHideDeletedMessages();\n\n    if (prevProps.lang !== this.props.lang) {\n      this.setState({\n        lang: this.props.lang\n      });\n    }\n    /**\n     * Custom message to be appended or updated for direct calling\n     */\n\n\n    if (Object.keys(this.props.widgetsettings).length) {\n      if (Object.keys(this.getContext().directCallCustomMessage).length && this.getContext().directCallCustomMessageAction.trim().length && (this.getContext().directCallCustomMessage !== this.directCallCustomMessage || this.getContext().directCallCustomMessageAction !== this.directCallCustomMessageAction)) {\n        const customMessage = this.getContext().directCallCustomMessage;\n        const messageAction = this.getContext().directCallCustomMessageAction.trim();\n\n        switch (messageAction) {\n          case enums.ACTIONS[\"MESSAGE_COMPOSED\"]:\n            this.appendMessage(customMessage);\n            break;\n\n          case enums.ACTIONS[\"MESSAGE_SENT\"]:\n          case enums.ACTIONS[\"ERROR_IN_SENDING_MESSAGE\"]:\n            {\n              this.messageSent(customMessage);\n              this.getContext().setLastMessage(customMessage[0]);\n              setTimeout(() => {\n                this.getContext().setDirectCallCustomMessage({}, \"\");\n              }, 1000);\n              break;\n            }\n\n          default:\n            break;\n        }\n      }\n\n      this.directCallCustomMessage = this.getContext().directCallCustomMessage;\n      this.directCallCustomMessageAction = this.getContext().directCallCustomMessageAction.trim();\n    }\n  }\n\n  render() {\n    var _this$getContext;\n\n    /**\n     * If used as standalone component\n     */\n    if (this.props._parent.trim().length === 0 && this.props.chatWithUser.trim().length === 0 && this.props.chatWithGroup.trim().length === 0) {\n      return jsx(CometChatContextProvider, {\n        ref: el => this.contextProviderRef = el,\n        _component: enums.CONSTANTS[\"MESSAGES_COMPONENT\"],\n        user: this.props.chatWithUser,\n        group: this.props.chatWithGroup,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 987,\n          columnNumber: 9\n        }\n      }, jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 993,\n          columnNumber: 11\n        }\n      }));\n    } else if (this.props._parent.trim().length && Object.keys(this.getContext().item).length === 0) {\n      return null;\n    }\n\n    let messageComposer = jsx(CometChatMessageComposer, {\n      ref: el => {\n        this.composerRef = el;\n      },\n      theme: this.props.theme,\n      lang: this.state.lang,\n      widgetsettings: this.props.widgetsettings,\n      messageToBeEdited: this.state.messageToBeEdited,\n      replyPreview: this.state.replyPreview,\n      reaction: this.reactionName,\n      messageToReact: this.state.messageToReact,\n      actionGenerated: this.actionHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1004,\n        columnNumber: 7\n      }\n    });\n    let newMessageIndicator = null;\n\n    if ((_this$getContext = this.getContext()) === null || _this$getContext === void 0 ? void 0 : _this$getContext.unreadMessages.length) {\n      const unreadMessageCount = this.getContext().unreadMessages.length;\n      const messageText = unreadMessageCount > 1 ? `${unreadMessageCount} ${Translator.translate(\"NEW_MESSAGES\", this.state.lang)}` : `${unreadMessageCount} ${Translator.translate(\"NEW_MESSAGE\", this.state.lang)}`;\n      newMessageIndicator = jsx(\"div\", {\n        css: messagePaneTopStyle(),\n        className: \"message_pane__top\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1033,\n          columnNumber: 9\n        }\n      }, jsx(\"div\", {\n        css: messagePaneBannerStyle(this.context),\n        className: \"message_pane__banner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1034,\n          columnNumber: 11\n        }\n      }, jsx(\"div\", {\n        css: messagePaneUnreadBannerStyle(),\n        className: \"message_pane__unread_banner__banner\",\n        title: Translator.translate(\"JUMP\", this.state.lang),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1038,\n          columnNumber: 13\n        }\n      }, jsx(\"button\", {\n        type: \"button\",\n        css: messagePaneUnreadBannerMessageStyle(this.context),\n        className: \"message_pane__unread_banner__msg\",\n        onClick: this.jumpToMessages,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1043,\n          columnNumber: 15\n        }\n      }, jsx(\"span\", {\n        css: iconArrowDownStyle(),\n        className: \"icon--arrow-down\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1049,\n          columnNumber: 17\n        }\n      }, \"\\u2193\", \" \"), messageText))));\n    } //if sending messages are disabled for chat wigdet in dashboard\n\n\n    if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER && this.state.enableSendingOneOnOneMessage === false || this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP && this.state.enableSendingGroupMessage === false) {\n      messageComposer = null;\n    }\n\n    let liveReactionView = null;\n\n    if (this.state.liveReaction) {\n      liveReactionView = jsx(\"div\", {\n        css: reactionsWrapperStyle(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1073,\n          columnNumber: 9\n        }\n      }, jsx(CometChatLiveReactions, {\n        reaction: this.reactionName,\n        theme: this.props.theme,\n        lang: this.state.lang,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1074,\n          columnNumber: 11\n        }\n      }));\n    }\n    /*\n    If used as a standalone component\n    */\n\n\n    let incomingCallView = null;\n    let incomingDirectCallView = null;\n\n    if (this.props._parent.trim().length === 0) {\n      incomingCallView = jsx(CometChatIncomingCall, {\n        theme: this.props.theme,\n        lang: this.state.lang,\n        actionGenerated: this.actionHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1090,\n          columnNumber: 9\n        }\n      });\n      incomingDirectCallView = jsx(CometChatIncomingDirectCall, {\n        theme: this.props.theme,\n        lang: this.state.lang,\n        actionGenerated: this.actionHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1098,\n          columnNumber: 9\n        }\n      });\n    } //don't include it when opened in chat widget\n\n\n    let outgoingDirectCallView = null;\n    let outgoingCallView = null;\n\n    if (Object.keys(this.props.widgetsettings).length === 0) {\n      outgoingCallView = jsx(CometChatOutgoingCall, {\n        ref: el => this.outgoingCallRef = el,\n        theme: this.props.theme,\n        lang: this.state.lang,\n        actionGenerated: this.actionHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1111,\n          columnNumber: 9\n        }\n      });\n      outgoingDirectCallView = jsx(CometChatOutgoingDirectCall, {\n        ref: el => this.outgoingDirectCallRef = el,\n        theme: this.props.theme,\n        lang: this.state.lang,\n        actionGenerated: this.actionHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1119,\n          columnNumber: 9\n        }\n      });\n    }\n\n    let detailScreen = null;\n\n    if (this.state.viewdetailscreen) {\n      if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER) {\n        detailScreen = jsx(\"div\", {\n          css: chatSecondaryStyle(this.props, this.context),\n          className: \"chat__secondary-view\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1132,\n            columnNumber: 11\n          }\n        }, jsx(CometChatUserDetails, {\n          theme: this.props.theme,\n          lang: this.state.lang,\n          actionGenerated: this.actionHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1136,\n            columnNumber: 13\n          }\n        }));\n      } else if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP) {\n        detailScreen = jsx(\"div\", {\n          css: chatSecondaryStyle(this.props, this.context),\n          className: \"chat__secondary-view\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1145,\n            columnNumber: 11\n          }\n        }, jsx(CometChatGroupDetails, {\n          theme: this.props.theme,\n          lang: this.state.lang,\n          actionGenerated: this.actionHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1149,\n            columnNumber: 13\n          }\n        }));\n      }\n    }\n\n    let threadMessageView = null;\n\n    if (this.state.threadmessageview) {\n      threadMessageView = jsx(\"div\", {\n        css: chatSecondaryStyle(this.props, this.context),\n        className: \"chat__secondary-view\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1162,\n          columnNumber: 9\n        }\n      }, jsx(CometChatMessageThread, {\n        theme: this.props.theme,\n        activeTab: this.state.activeTab,\n        threadItem: this.state.threadmessageitem,\n        threadType: this.state.threadmessagetype,\n        parentMessage: this.state.threadmessageparent,\n        loggedInUser: this.loggedInUser,\n        lang: this.state.lang,\n        widgetsettings: this.props.widgetsettings,\n        actionGenerated: this.actionHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1166,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    let originalImageView = null;\n\n    if (this.state.viewOriginalImage) {\n      originalImageView = jsx(CometChatImageViewer, {\n        close: () => this.toggleOriginalImageView(false),\n        message: this.state.viewOriginalImage,\n        lang: this.state.lang,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1184,\n          columnNumber: 9\n        }\n      });\n    }\n\n    let messageComponent = jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1193,\n        columnNumber: 7\n      }\n    }, jsx(\"div\", {\n      css: chatWrapperStyle(this.props, this.state, this.context),\n      className: \"main__chat\",\n      dir: Translator.getDirection(this.state.lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1194,\n        columnNumber: 9\n      }\n    }, jsx(CometChatMessageHeader, {\n      sidebar: this.props.sidebar,\n      theme: this.props.theme,\n      lang: this.state.lang,\n      viewdetail: this.props.viewdetail === false ? false : true,\n      widgetsettings: this.props.widgetsettings,\n      actionGenerated: this.actionHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1199,\n        columnNumber: 11\n      }\n    }), jsx(CometChatMessageList, {\n      ref: el => {\n        this.messageListRef = el;\n      },\n      theme: this.props.theme,\n      messages: this.state.messageList,\n      lang: this.state.lang,\n      scrollToBottom: this.state.scrollToBottom,\n      messageconfig: this.props.messageconfig,\n      widgetsettings: this.props.widgetsettings,\n      widgetconfig: this.props.widgetconfig,\n      actionGenerated: this.actionHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1207,\n        columnNumber: 11\n      }\n    }), liveReactionView, messageComposer, newMessageIndicator), jsx(CometChatToastNotification, {\n      ref: el => this.toastRef = el,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1224,\n        columnNumber: 9\n      }\n    }), originalImageView, detailScreen, threadMessageView, incomingCallView, outgoingCallView, incomingDirectCallView, outgoingDirectCallView);\n    let messageWrapper = messageComponent;\n    /*\n    If used as a standalone component\n    **/\n\n    if (this.props._parent.trim().length === 0) {\n      messageWrapper = jsx(CometChatContextProvider, {\n        ref: el => this.contextProviderRef = el,\n        user: this.props.chatWithUser,\n        group: this.props.chatWithGroup,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1241,\n          columnNumber: 9\n        }\n      }, jsx(\"div\", {\n        css: chatContainerStyle(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1246,\n          columnNumber: 11\n        }\n      }, messageComponent));\n    }\n\n    return messageWrapper;\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatMessages.contextType = CometChatContext;\nCometChatMessages.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n  _parent: \"\",\n  widgetsettings: {},\n  chatWithUser: \"\",\n  chatWithGroup: \"\"\n};\nCometChatMessages.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n  _parent: PropTypes.string,\n  widgetsettings: PropTypes.object,\n  chatWithUser: PropTypes.string,\n  chatWithGroup: PropTypes.string\n};\nexport { CometChatMessages };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/CometChatMessages/index.js"],"names":["React","jsx","PropTypes","CometChat","CometChatMessageHeader","CometChatMessageList","CometChatMessageComposer","CometChatLiveReactions","CometChatMessageThread","CometChatImageViewer","CometChatIncomingCall","CometChatOutgoingCall","CometChatOutgoingDirectCall","CometChatIncomingDirectCall","CometChatUserDetails","CometChatGroupDetails","CometChatToastNotification","CometChatContextProvider","CometChatContext","enums","checkMessageForExtensionsData","SoundManager","theme","Translator","chatWrapperStyle","chatSecondaryStyle","reactionsWrapperStyle","messagePaneTopStyle","messagePaneBannerStyle","messagePaneUnreadBannerStyle","messagePaneUnreadBannerMessageStyle","iconArrowDownStyle","chatContainerStyle","CometChatMessages","PureComponent","constructor","props","enableGroupActionMessages","getContext","FeatureRestriction","isGroupActionMessagesEnabled","then","response","state","setState","catch","error","enableCallActionMessages","isCallActionMessagesEnabled","enableSendingOneOnOneMessage","isOneOnOneChatEnabled","enableSendingGroupMessage","isGroupChatEnabled","enableHideDeletedMessages","isHideDeletedMessagesEnabled","_parent","length","context","contextProviderRef","actionHandler","action","messages","key","group","options","ACTIONS","message","parentMessageId","updateReplyCount","smartReplyPreview","appendMessage","play","CONSTANTS","AUDIO","actionGenerated","messageSent","setLastMessage","updateMessages","updateParentThreadedMessage","removeMessages","prependMessages","refreshingMessages","messageRefreshed","newMessagesArrived","jumpToMessages","deleteMessage","editMessage","messageEdited","clearEditPreview","GROUP_MEMBER_SCOPE_CHANGED","GROUP_MEMBER_KICKED","GROUP_MEMBER_BANNED","GROUP_MEMBER_UNBANNED","GROUP_MEMBER_ADDED","GROUP_MEMBER_LEFT","GROUP_MEMBER_JOINED","groupUpdated","INCOMING_CALL_RECEIVED","INCOMING_CALL_CANCELLED","OUTGOING_CALL_ACCEPTED","OUTGOING_CALL_REJECTED","appendCallMessage","toggleOriginalImageView","audioCall","videoCall","toggleDetailView","toggleReaction","showReaction","reactToMessage","Object","keys","widgetsettings","sessionID","type","ACTION_TYPE","TYPE_GROUP","item","guid","outgoingDirectCallRef","joinCall","viewThreadedMessage","threadMessageComposed","closeThreadedMessage","appendMemberAddedMessage","appendMemberUnbannedMessage","appendMemberScopeChangedMessage","errorHandler","infoMessageHandler","errorCode","toastRef","setError","infoCode","setInfo","messageList","forEach","eachMember","sentAt","Date","messageObj","receiver","receiverId","receiverType","RECEIVER_TYPE","GROUP","sender","loggedInUser","category","CATEGORY_ACTION","TYPE_GROUP_MEMBER","MEMBER_ADDED","actionBy","actionOn","actionFor","push","MEMBER_UNBANNED","newScope","translate","scope","lang","MEMBER_SCOPE_CHANGED","viewOriginalImage","viewdetail","viewdetailscreen","threadmessageview","parentMessage","threaditem","threadmessageparent","threadmessageitem","threadmessagetype","TYPE_USER","uid","id","getReceiverDetails","USER","call","Call","CALL_TYPE","initiateCall","outgoingCall","outgoingCallRef","startCall","VIDEO","flag","liveReaction","reaction","metadata","reactionName","messageId","deletedMessage","messageToBeEdited","messageKey","findIndex","m","replyCount","replyPreview","newMessageObj","assign","splice","_id","sort","a","b","scrollToBottom","messageToReact","clearUnreadMessages","newMessage","setUnreadMessages","markMessagesAsRead","unreadMessages","unreadMessage","getReceiverType","messageListRef","markMessageAsRead","concat","setClearedUnreadMessages","reInitializeMessageBuilder","messagelist","receivedMessage","hasOwnProperty","CATEGORY_CUSTOM","isSmartRepliesEnabled","smartReplyData","composerRef","toggleEmojiPicker","createRef","componentDidMount","getLoggedinUser","user","componentDidUpdate","prevProps","prevState","ifChatWindowChanged","output","directCallCustomMessage","directCallCustomMessageAction","trim","customMessage","messageAction","setTimeout","setDirectCallCustomMessage","render","chatWithUser","chatWithGroup","el","messageComposer","newMessageIndicator","unreadMessageCount","messageText","liveReactionView","incomingCallView","incomingDirectCallView","outgoingDirectCallView","outgoingCallView","detailScreen","threadMessageView","activeTab","originalImageView","messageComponent","getDirection","sidebar","messageconfig","widgetconfig","messageWrapper","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA;;AACA;;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AAEA,SACEC,sBADF,EAEEC,oBAFF,EAGEC,wBAHF,EAIEC,sBAJF,EAKEC,sBALF,EAMEC,oBANF,QAOO,KAPP;AASA,SACEC,qBADF,EAEEC,qBAFF,EAGEC,2BAHF,EAIEC,2BAJF,QAKO,aALP;AAOA,SAASC,oBAAT,QAAqC,aAArC;AACA,SAASC,qBAAT,QAAsC,cAAtC;AACA,SAASC,0BAAT,QAA2C,cAA3C;AAEA,SACEC,wBADF,EAEEC,gBAFF,QAGO,gCAHP;AAIA,OAAO,KAAKC,KAAZ,MAAuB,wBAAvB;AACA,SAASC,6BAAT,QAA8C,sBAA9C;AACA,SAASC,YAAT,QAA6B,4BAA7B;AAEA,SAASC,KAAT,QAAsB,0BAAtB;AACA,OAAOC,UAAP,MAAuB,4CAAvB;AAEA,SACEC,gBADF,EAEEC,kBAFF,EAGEC,qBAHF,EAIEC,mBAJF,EAKEC,sBALF,EAMEC,4BANF,EAOEC,mCAPF,EAQEC,kBARF,EASEC,kBATF,QAUO,SAVP;;AAYA,MAAMC,iBAAN,SAAgCjC,KAAK,CAACkC,aAAtC,CAAoD;AAGlDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA6InBC,yBA7ImB,GA6IS,MAAM;AAChC,WAAKC,UAAL,GACGC,kBADH,CACsBC,4BADtB,GAEGC,IAFH,CAESC,QAAD,IAAc;AAClB;AACR;AACA;AACQ,YAAIA,QAAQ,KAAK,KAAKC,KAAL,CAAWN,yBAA5B,EAAuD;AACrD,eAAKO,QAAL,CAAc;AAAEP,YAAAA,yBAAyB,EAAEK;AAA7B,WAAd;AACD;AACF,OATH,EAUGG,KAVH,CAUUC,KAAD,IAAW;AAChB,YAAI,KAAKH,KAAL,CAAWN,yBAAX,KAAyC,KAA7C,EAAoD;AAClD,eAAKO,QAAL,CAAc;AAAEP,YAAAA,yBAAyB,EAAE;AAA7B,WAAd;AACD;AACF,OAdH;AAeD,KA7JkB;;AAAA,SA+JnBU,wBA/JmB,GA+JQ,MAAM;AAC/B,WAAKT,UAAL,GACGC,kBADH,CACsBS,2BADtB,GAEGP,IAFH,CAESC,QAAD,IAAc;AAClB;AACR;AACA;AACQ,YAAIA,QAAQ,KAAK,KAAKC,KAAL,CAAWI,wBAA5B,EAAsD;AACpD,eAAKH,QAAL,CAAc;AAAEG,YAAAA,wBAAwB,EAAEL;AAA5B,WAAd;AACD;AACF,OATH,EAUGG,KAVH,CAUUC,KAAD,IAAW;AAChB,YAAI,KAAKH,KAAL,CAAWI,wBAAX,KAAwC,KAA5C,EAAmD;AACjD,eAAKH,QAAL,CAAc;AAAEG,YAAAA,wBAAwB,EAAE;AAA5B,WAAd;AACD;AACF,OAdH;AAeD,KA/KkB;;AAAA,SAiLnBE,4BAjLmB,GAiLY,MAAM;AACnC,WAAKX,UAAL,GACGC,kBADH,CACsBW,qBADtB,GAEGT,IAFH,CAESC,QAAD,IAAc;AAClB,YAAIA,QAAQ,KAAK,KAAKC,KAAL,CAAWM,4BAA5B,EAA0D;AACxD,eAAKL,QAAL,CAAc;AAAEK,YAAAA,4BAA4B,EAAEP;AAAhC,WAAd;AACD;AACF,OANH,EAOGG,KAPH,CAOUC,KAAD,IAAW;AAChB,YAAI,KAAKH,KAAL,CAAWM,4BAAX,KAA4C,KAAhD,EAAuD;AACrD,eAAKL,QAAL,CAAc;AAAEK,YAAAA,4BAA4B,EAAE;AAAhC,WAAd;AACD;AACF,OAXH;AAYD,KA9LkB;;AAAA,SAgMnBE,yBAhMmB,GAgMS,MAAM;AAChC,WAAKb,UAAL,GACGC,kBADH,CACsBa,kBADtB,GAEGX,IAFH,CAESC,QAAD,IAAc;AAClB,YAAIA,QAAQ,KAAK,KAAKC,KAAL,CAAWQ,yBAA5B,EAAuD;AACrD,eAAKP,QAAL,CAAc;AAAEO,YAAAA,yBAAyB,EAAET;AAA7B,WAAd;AACD;AACF,OANH,EAOGG,KAPH,CAOUC,KAAD,IAAW;AAChB,YAAI,KAAKH,KAAL,CAAWQ,yBAAX,KAAyC,KAA7C,EAAoD;AAClD,eAAKP,QAAL,CAAc;AAAEO,YAAAA,yBAAyB,EAAE;AAA7B,WAAd;AACD;AACF,OAXH;AAYD,KA7MkB;;AAAA,SA+MnBE,yBA/MmB,GA+MS,MAAM;AAChC,WAAKf,UAAL,GACGC,kBADH,CACsBe,4BADtB,GAEGb,IAFH,CAESC,QAAD,IAAc;AAClB,YAAIA,QAAQ,KAAK,KAAKC,KAAL,CAAWU,yBAA5B,EAAuD;AACrD,eAAKT,QAAL,CAAc;AAAES,YAAAA,yBAAyB,EAAEX;AAA7B,WAAd;AACD;AACF,OANH,EAOGG,KAPH,CAOUC,KAAD,IAAW;AAChB,YAAI,KAAKH,KAAL,CAAWU,yBAAX,KAAyC,KAA7C,EAAoD;AAClD,eAAKT,QAAL,CAAc;AAAES,YAAAA,yBAAyB,EAAE;AAA7B,WAAd;AACD;AACF,OAXH;AAYD,KA5NkB;;AAAA,SA8NnBf,UA9NmB,GA8NN,MAAM;AACjB,UAAI,KAAKF,KAAL,CAAWmB,OAAX,CAAmBC,MAAvB,EAA+B;AAC7B,eAAO,KAAKC,OAAZ;AACD,OAFD,MAEO;AACL,eAAO,KAAKC,kBAAL,CAAwBf,KAA/B;AACD;AACF,KApOkB;;AAAA,SAsOnBgB,aAtOmB,GAsOH,CAACC,MAAD,EAASC,QAAT,EAAmBC,GAAnB,EAAwBC,KAAxB,EAA+BC,OAA/B,KAA2C;AACzD,cAAQJ,MAAR;AACE,aAAKzC,KAAK,CAAC8C,OAAN,CAAc,yBAAd,CAAL;AACA,aAAK9C,KAAK,CAAC8C,OAAN,CAAc,kBAAd,CAAL;AACE;AACE,kBAAMC,OAAO,GAAGL,QAAQ,CAAC,CAAD,CAAxB;;AACA,gBAAIK,OAAO,CAACC,eAAZ,EAA6B;AAC3B,mBAAKC,gBAAL,CAAsBP,QAAtB;AACD,aAFD,MAEO;AACL,mBAAKQ,iBAAL,CAAuBR,QAAvB;AACA,mBAAKS,aAAL,CAAmBT,QAAnB;AACD;;AAEDxC,YAAAA,YAAY,CAACkD,IAAb,CACEpD,KAAK,CAACqD,SAAN,CAAgBC,KAAhB,CAAsB,kBAAtB,CADF,EAEE,KAAKnC,UAAL,EAFF;AAID;AACD;;AACF,aAAKnB,KAAK,CAAC8C,OAAN,CAAc,cAAd,CAAL;AAAoC;AAAA;;AAClC,+BAAI,KAAK7B,KAAT,gDAAI,YAAYsC,eAAhB,EAAiC;AAAA;;AAC/B,mCAAKtC,KAAL,8DAAYsC,eAAZ,CAA4Bd,MAA5B,EAAoCC,QAApC;AACD;;AAED;AACD;;AACD,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,kBAAd,CAAL;AAAwC;AACtC,iBAAKK,aAAL,CAAmBT,QAAnB;AACA;AACD;;AACD,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,cAAd,CAAL;AACE,eAAKU,WAAL,CAAiBd,QAAjB;AACA,eAAKvB,UAAL,GAAkBsC,cAAlB,CAAiCf,QAAQ,CAAC,CAAD,CAAzC;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,0BAAd,CAAL;AACE,eAAKU,WAAL,CAAiBd,QAAjB;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,2BAAd,CAAL;AACE,eAAKY,cAAL,CAAoBhB,QAApB;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,mBAAd,CAAL;AAAyC;AACvC,iBAAKY,cAAL,CAAoBhB,QAApB,EADuC,CAEvC;;AACA,iBAAKiB,2BAAL,CAAiChB,GAAjC,EAAsC,MAAtC;AACA;AACD;;AACD,aAAK3C,KAAK,CAAC8C,OAAN,CAAc,oBAAd,CAAL;AAA0C;AACxC,iBAAKc,cAAL,CAAoBlB,QAApB,EADwC,CAExC;;AACA,iBAAKiB,2BAAL,CAAiCjB,QAAQ,CAAC,CAAD,CAAzC,EAA8C,QAA9C;AACA;AACD;;AACD,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,kBAAd,CAAL;AACE,eAAKe,eAAL,CAAqBnB,QAArB;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,qBAAd,CAAL;AACE,eAAKgB,kBAAL;AACA;;AACF,aAAK9D,KAAK,CAAC8C,OAAN,CAAc,oBAAd,CAAL;AACE,eAAKiB,gBAAL,CAAsBrB,QAAtB;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,cAAd,CAAL;AACE,eAAKkB,kBAAL,CAAwBtB,QAAxB;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,uBAAd,CAAL;AACE,eAAKmB,cAAL,CAAoB,IAApB;AACA;;AACF,aAAKjE,KAAK,CAAC8C,OAAN,CAAc,gBAAd,CAAL;AACE,eAAKoB,aAAL,CAAmBxB,QAAnB;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,cAAd,CAAL;AACE,eAAKqB,WAAL,CAAiBzB,QAAjB;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,gBAAd,CAAL;AACE,eAAKsB,aAAL,CAAmB1B,QAAnB;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,oBAAd,CAAL;AACE,eAAKuB,gBAAL;AACA;;AACF,aAAKrE,KAAK,CAACsE,0BAAX;AACA,aAAKtE,KAAK,CAACuE,mBAAX;AACA,aAAKvE,KAAK,CAACwE,mBAAX;AACA,aAAKxE,KAAK,CAACyE,qBAAX;AACA,aAAKzE,KAAK,CAAC0E,kBAAX;AACA,aAAK1E,KAAK,CAAC2E,iBAAX;AACA,aAAK3E,KAAK,CAAC4E,mBAAX;AACE,eAAKC,YAAL,CAAkBpC,MAAlB,EAA0BC,QAA1B,EAAoCE,KAApC,EAA2CC,OAA3C;AACA;;AACF,aAAK7C,KAAK,CAAC8E,sBAAX;AACA,aAAK9E,KAAK,CAAC+E,uBAAX;AACA,aAAK/E,KAAK,CAACgF,sBAAX;AACA,aAAKhF,KAAK,CAACiF,sBAAX;AACE,eAAKC,iBAAL,CAAuBxC,QAAvB;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,qBAAd,CAAL;AACE,eAAKqC,uBAAL,CAA6BzC,QAA7B;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,qBAAd,CAAL;AACE,eAAKsC,SAAL;AACA;;AACF,aAAKpF,KAAK,CAAC8C,OAAN,CAAc,qBAAd,CAAL;AACE,eAAKuC,SAAL;AACA;;AACF,aAAKrF,KAAK,CAAC8C,OAAN,CAAc,aAAd,CAAL;AACA,aAAK9C,KAAK,CAAC8C,OAAN,CAAc,oBAAd,CAAL;AACA,aAAK9C,KAAK,CAAC8C,OAAN,CAAc,mBAAd,CAAL;AACE,eAAKwC,gBAAL;AACA;;AACF,aAAKtF,KAAK,CAAC8C,OAAN,CAAc,gBAAd,CAAL;AACE,eAAKwC,gBAAL;AACA,eAAKrE,KAAL,CAAWsC,eAAX,CAA2Bd,MAA3B;AACA;;AACF,aAAKzC,KAAK,CAAC8C,OAAN,CAAc,oBAAd,CAAL;AACE,eAAKyC,cAAL,CAAoB,IAApB;AACA;;AACF,aAAKvF,KAAK,CAAC8C,OAAN,CAAc,oBAAd,CAAL;AACE,eAAK0C,YAAL,CAAkB9C,QAAlB;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,oBAAd,CAAL;AACE,eAAKyC,cAAL,CAAoB,KAApB;AACA;;AACF,aAAKvF,KAAK,CAAC8C,OAAN,CAAc,kBAAd,CAAL;AACE,eAAK2C,cAAL,CAAoB/C,QAApB;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,wBAAd,CAAL;AACA,aAAK9C,KAAK,CAAC8C,OAAN,CAAc,kBAAd,CAAL;AACA,aAAK9C,KAAK,CAAC8C,OAAN,CAAc,gBAAd,CAAL;AACA,aAAK9C,KAAK,CAAC8C,OAAN,CAAc,qBAAd,CAAL;AACA,aAAK9C,KAAK,CAAC8C,OAAN,CAAc,wBAAd,CAAL;AACA,aAAK9C,KAAK,CAAC8C,OAAN,CAAc,yBAAd,CAAL;AACA,aAAK9C,KAAK,CAAC8C,OAAN,CAAc,wBAAd,CAAL;AACA,aAAK9C,KAAK,CAAC8C,OAAN,CAAc,qBAAd,CAAL;AACA,aAAK9C,KAAK,CAAC8C,OAAN,CAAc,wBAAd,CAAL;AACA,aAAK9C,KAAK,CAAC8C,OAAN,CAAc,mBAAd,CAAL;AACA,aAAK9C,KAAK,CAAC8C,OAAN,CAAc,mBAAd,CAAL;AACE;;AACF,aAAK9C,KAAK,CAAC8C,OAAN,CAAc,kBAAd,CAAL;AAAwC;AACtC;AACA,gBAAI4C,MAAM,CAACC,IAAP,CAAY,KAAK1E,KAAL,CAAW2E,cAAvB,EAAuCvD,MAA3C,EAAmD;AACjD,mBAAKpB,KAAL,CAAWsC,eAAX,CAA2Bd,MAA3B,EAAmCC,QAAnC;AACD,aAFD,MAEO;AACL,oBAAMmD,SAAS,GACb,KAAK1E,UAAL,GAAkB2E,IAAlB,KAA2B9G,SAAS,CAAC+G,WAAV,CAAsBC,UAAjD,GACI,KAAK7E,UAAL,GAAkB8E,IAAlB,CAAuBC,IAD3B,GAEI,IAHN;AAIA,mBAAKC,qBAAL,CAA2BC,QAA3B,CAAoCP,SAApC;AACD;;AAED;AACD;;AACD,aAAK7F,KAAK,CAAC8C,OAAN,CAAc,uBAAd,CAAL;AACE,eAAKuD,mBAAL,CAAyB3D,QAAzB;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,yBAAd,CAAL;AACE,eAAKwD,qBAAL,CAA2B5D,QAA3B;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,wBAAd,CAAL;AACE,eAAKyD,oBAAL;AACA;;AACF,aAAKvG,KAAK,CAAC8C,OAAN,CAAc,0BAAd,CAAL;AACE,eAAK0D,wBAAL,CAA8B9D,QAA9B;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,4BAAd,CAAL;AACE,eAAK2D,2BAAL,CAAiC/D,QAAjC;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,iCAAd,CAAL;AACE,eAAK4D,+BAAL,CAAqChE,QAArC;AACA;;AACF,aAAK1C,KAAK,CAAC8C,OAAN,CAAc,OAAd,CAAL;AACE,eAAK6D,YAAL,CAAkBhE,GAAlB;AACA;;AACF,aAAK3C,KAAK,CAAC8C,OAAN,CAAc,MAAd,CAAL;AACE,eAAK8D,kBAAL,CAAwBjE,GAAxB;AACA;;AACF;AACE;AA9KJ;AAgLD,KAvZkB;;AAAA,SAyZnBgE,YAzZmB,GAyZHE,SAAD,IAAe;AAC5B,UAAI,OAAO,KAAKC,QAAL,CAAcC,QAArB,KAAkC,UAAtC,EAAkD;AAAA;;AAChD,+BAAKD,QAAL,kEAAeC,QAAf,CAAwBF,SAAxB;AACD;AACF,KA7ZkB;;AAAA,SA+ZnBD,kBA/ZmB,GA+ZGI,QAAD,IAAc;AACjC,UAAI,OAAO,KAAKF,QAAL,CAAcG,OAArB,KAAiC,UAArC,EAAiD;AAAA;;AAC/C,gCAAKH,QAAL,oEAAeG,OAAf,CAAuBD,QAAvB;AACD;AACF,KAnakB;;AAAA,SAqanBR,wBAramB,GAqaS9D,QAAD,IAAc;AACvC;AACA,UAAI,KAAKlB,KAAL,CAAWN,yBAAX,KAAyC,KAA7C,EAAoD;AAClD,eAAO,KAAP;AACD;;AAED,YAAMgG,WAAW,GAAG,EAApB;AACAxE,MAAAA,QAAQ,CAACyE,OAAT,CAAkBC,UAAD,IAAgB;AAC/B,cAAMC,MAAM,GAAI,IAAIC,IAAJ,KAAa,IAAd,GAAsB,CAArC;AACA,cAAMC,UAAU,GAAG;AACjBC,UAAAA,QAAQ,EAAE,EAAE,GAAG,KAAKlF,OAAL,CAAa2D;AAAlB,WADO;AAEjBwB,UAAAA,UAAU,EAAE,KAAKnF,OAAL,CAAa2D,IAAb,CAAkBC,IAFb;AAGjBwB,UAAAA,YAAY,EAAE1I,SAAS,CAAC2I,aAAV,CAAwBC,KAHrB;AAIjBC,UAAAA,MAAM,EAAE,EAAE,GAAG,KAAKC;AAAV,WAJS;AAKjBC,UAAAA,QAAQ,EAAE/I,SAAS,CAACgJ,eALH;AAMjBlC,UAAAA,IAAI,EAAE9G,SAAS,CAAC+G,WAAV,CAAsBkC,iBANX;AAOjBZ,UAAAA,MAAM,EAAEA,MAPS;AAQjB5E,UAAAA,MAAM,EAAEzD,SAAS,CAAC+G,WAAV,CAAsBmC,YARb;AASjBC,UAAAA,QAAQ,EAAE,EAAE,GAAG,KAAKL;AAAV,WATO;AAUjBM,UAAAA,QAAQ,EAAE,EAAE,GAAGhB;AAAL,WAVO;AAWjBiB,UAAAA,SAAS,EAAE,EAAE,GAAG,KAAK/F,OAAL,CAAa2D;AAAlB;AAXM,SAAnB;AAcAiB,QAAAA,WAAW,CAACoB,IAAZ,CAAiBf,UAAjB;AACD,OAjBD;AAmBA,WAAKpE,aAAL,CAAmB+D,WAAnB;AACD,KAhckB;;AAAA,SAkcnBT,2BAlcmB,GAkcY/D,QAAD,IAAc;AAC1C;AACA,UAAI,KAAKlB,KAAL,CAAWN,yBAAX,KAAyC,KAA7C,EAAoD;AAClD,eAAO,KAAP;AACD;;AAED,YAAMgG,WAAW,GAAG,EAApB;AACAxE,MAAAA,QAAQ,CAACyE,OAAT,CAAkBC,UAAD,IAAgB;AAC/B,cAAMC,MAAM,GAAI,IAAIC,IAAJ,KAAa,IAAd,GAAsB,CAArC;AACA,cAAMC,UAAU,GAAG;AACjBC,UAAAA,QAAQ,EAAE,EAAE,GAAG,KAAKlF,OAAL,CAAa2D;AAAlB,WADO;AAEjBwB,UAAAA,UAAU,EAAE,KAAKnF,OAAL,CAAa2D,IAAb,CAAkBC,IAFb;AAGjBwB,UAAAA,YAAY,EAAE1I,SAAS,CAAC2I,aAAV,CAAwBC,KAHrB;AAIjBC,UAAAA,MAAM,EAAE,EAAE,GAAG,KAAKC;AAAV,WAJS;AAKjBC,UAAAA,QAAQ,EAAE/I,SAAS,CAACgJ,eALH;AAMjBlC,UAAAA,IAAI,EAAE9G,SAAS,CAAC+G,WAAV,CAAsBkC,iBANX;AAOjBZ,UAAAA,MAAM,EAAEA,MAPS;AAQjB5E,UAAAA,MAAM,EAAEzD,SAAS,CAAC+G,WAAV,CAAsBwC,eARb;AASjBJ,UAAAA,QAAQ,EAAE,EAAE,GAAG,KAAKL;AAAV,WATO;AAUjBM,UAAAA,QAAQ,EAAE,EAAE,GAAGhB;AAAL;AAVO,SAAnB;AAaAF,QAAAA,WAAW,CAACoB,IAAZ,CAAiBf,UAAjB;AACD,OAhBD;AAkBA,WAAKpE,aAAL,CAAmB+D,WAAnB;AACD,KA5dkB;;AAAA,SA8dnBR,+BA9dmB,GA8dgBhE,QAAD,IAAc;AAC9C;AACA,UAAI,KAAKlB,KAAL,CAAWN,yBAAX,KAAyC,KAA7C,EAAoD;AAClD,eAAO,KAAP;AACD;;AAED,YAAMgG,WAAW,GAAG,EAApB;AAEAxE,MAAAA,QAAQ,CAACyE,OAAT,CAAkBC,UAAD,IAAgB;AAC/B,cAAMoB,QAAQ,GAAGpI,UAAU,CAACqI,SAAX,CAAqBrB,UAAU,CAACsB,KAAhC,EAAuC,KAAKlH,KAAL,CAAWmH,IAAlD,CAAjB;AAEA,cAAMtB,MAAM,GAAI,IAAIC,IAAJ,KAAa,IAAd,GAAsB,CAArC;AACA,cAAMC,UAAU,GAAG;AACjBC,UAAAA,QAAQ,EAAE,EAAE,GAAG,KAAKlF,OAAL,CAAa2D;AAAlB,WADO;AAEjBwB,UAAAA,UAAU,EAAE,KAAKnF,OAAL,CAAa2D,IAAb,CAAkBC,IAFb;AAGjBwB,UAAAA,YAAY,EAAE1I,SAAS,CAAC2I,aAAV,CAAwBC,KAHrB;AAIjBC,UAAAA,MAAM,EAAE,EAAE,GAAG,KAAKC;AAAV,WAJS;AAKjBC,UAAAA,QAAQ,EAAE/I,SAAS,CAACgJ,eALH;AAMjBlC,UAAAA,IAAI,EAAE9G,SAAS,CAAC+G,WAAV,CAAsBkC,iBANX;AAOjBZ,UAAAA,MAAM,EAAEA,MAPS;AAQjB5E,UAAAA,MAAM,EAAEzD,SAAS,CAAC+G,WAAV,CAAsB6C,oBARb;AASjBT,UAAAA,QAAQ,EAAE,EAAE,GAAG,KAAKL;AAAV,WATO;AAUjBM,UAAAA,QAAQ,EAAE,EAAE,GAAGhB;AAAL,WAVO;AAWjBoB,UAAAA,QAAQ,EAAEA;AAXO,SAAnB;AAaAtB,QAAAA,WAAW,CAACoB,IAAZ,CAAiBf,UAAjB;AACD,OAlBD;AAoBA,WAAKpE,aAAL,CAAmB+D,WAAnB;AACD,KA3fkB;;AAAA,SA6fnB/B,uBA7fmB,GA6fQpC,OAAD,IAAa;AACrC,WAAKtB,QAAL,CAAc;AAAEoH,QAAAA,iBAAiB,EAAE9F;AAArB,OAAd;AACD,KA/fkB;;AAAA,SAigBnBuC,gBAjgBmB,GAigBA,MAAM;AACvB,UAAIwD,UAAU,GAAG,CAAC,KAAKtH,KAAL,CAAWuH,gBAA7B;AACA,WAAKtH,QAAL,CAAc;AAAEsH,QAAAA,gBAAgB,EAAED,UAApB;AAAgCE,QAAAA,iBAAiB,EAAE;AAAnD,OAAd;AACD,KApgBkB;;AAAA,SAsgBnB3C,mBAtgBmB,GAsgBI4C,aAAD,IAAmB;AACvC,YAAMlG,OAAO,GAAG,EAAE,GAAGkG;AAAL,OAAhB;AACA,YAAMC,UAAU,GAAG,EAAE,GAAG,KAAK/H,UAAL,GAAkB8E;AAAvB,OAAnB;AACA,WAAKxE,QAAL,CAAc;AACZuH,QAAAA,iBAAiB,EAAE,IADP;AAEZG,QAAAA,mBAAmB,EAAEpG,OAFT;AAGZqG,QAAAA,iBAAiB,EAAEF,UAHP;AAIZG,QAAAA,iBAAiB,EAAE,KAAKlI,UAAL,GAAkB2E,IAJzB;AAKZiD,QAAAA,gBAAgB,EAAE;AALN,OAAd;AAOD,KAhhBkB;;AAAA,SAkhBnBzC,qBAlhBmB,GAkhBM5D,QAAD,IAAc;AACpC,UAAI,KAAKvB,UAAL,GAAkB2E,IAAlB,KAA2B,KAAKtE,KAAL,CAAW6H,iBAA1C,EAA6D;AAC3D,eAAO,KAAP;AACD;;AAED,UACG,KAAK7H,KAAL,CAAW6H,iBAAX,KAAiCrK,SAAS,CAAC+G,WAAV,CAAsBC,UAAvD,IACC,KAAK7E,UAAL,GAAkB8E,IAAlB,CAAuBC,IAAvB,KAAgC,KAAK1E,KAAL,CAAW4H,iBAAX,CAA6BlD,IAD/D,IAEC,KAAK1E,KAAL,CAAW6H,iBAAX,KAAiCrK,SAAS,CAAC+G,WAAV,CAAsBuD,SAAvD,IACC,KAAKnI,UAAL,GAAkB8E,IAAlB,CAAuBsD,GAAvB,KAA+B,KAAK/H,KAAL,CAAW4H,iBAAX,CAA6BG,GAJhE,EAKE;AACA,eAAO,KAAP;AACD;;AAED,WAAKtG,gBAAL,CAAsBP,QAAtB;AACD,KAjiBkB;;AAAA,SAmiBnB6D,oBAniBmB,GAmiBI,MAAM;AAC3B,WAAK9E,QAAL,CAAc;AAAEuH,QAAAA,iBAAiB,EAAE,KAArB;AAA4BD,QAAAA,gBAAgB,EAAE;AAA9C,OAAd;AACD,KAriBkB;;AAAA,SA0iBnBpF,2BA1iBmB,GA0iBW,CAACZ,OAAD,EAAUN,MAAV,KAAqB;AACjD,UACE,KAAKjB,KAAL,CAAWwH,iBAAX,KAAiC,KAAjC,IACAjG,OAAO,CAACyG,EAAR,KAAe,KAAKhI,KAAL,CAAW2H,mBAAX,CAA+BK,EAFhD,EAGE;AACA,eAAO,KAAP;AACD;;AAED,UAAI/G,MAAM,KAAK,QAAf,EAAyB;AACvB,aAAKhB,QAAL,CAAc;AACZ0H,UAAAA,mBAAmB,EAAE,EAAE,GAAGpG;AAAL,WADT;AAEZiG,UAAAA,iBAAiB,EAAE;AAFP,SAAd;AAID,OALD,MAKO;AACL,aAAKvH,QAAL,CAAc;AAAE0H,UAAAA,mBAAmB,EAAE,EAAE,GAAGpG;AAAL;AAAvB,SAAd;AACD;AACF,KA1jBkB;;AAAA,SA4jBnB0G,kBA5jBmB,GA4jBE,MAAM;AACzB,UAAIhC,UAAJ;AACA,UAAIC,YAAJ;;AAEA,UAAI,KAAKvG,UAAL,GAAkB2E,IAAlB,KAA2B9G,SAAS,CAAC+G,WAAV,CAAsBuD,SAArD,EAAgE;AAC9D7B,QAAAA,UAAU,GAAG,KAAKtG,UAAL,GAAkB8E,IAAlB,CAAuBsD,GAApC;AACA7B,QAAAA,YAAY,GAAG1I,SAAS,CAAC2I,aAAV,CAAwB+B,IAAvC;AACD,OAHD,MAGO,IAAI,KAAKvI,UAAL,GAAkB2E,IAAlB,KAA2B9G,SAAS,CAAC+G,WAAV,CAAsBC,UAArD,EAAiE;AACtEyB,QAAAA,UAAU,GAAG,KAAKtG,UAAL,GAAkB8E,IAAlB,CAAuBC,IAApC;AACAwB,QAAAA,YAAY,GAAG1I,SAAS,CAAC2I,aAAV,CAAwBC,KAAvC;AACD;;AAED,aAAO;AAAEH,QAAAA,UAAU,EAAEA,UAAd;AAA0BC,QAAAA,YAAY,EAAEA;AAAxC,OAAP;AACD,KAzkBkB;;AAAA,SA2kBnBtC,SA3kBmB,GA2kBP,MAAM;AAChB,YAAM;AAAEqC,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAA+B,KAAK+B,kBAAL,EAArC;AACA,YAAME,IAAI,GAAG,IAAI3K,SAAS,CAAC4K,IAAd,CACXnC,UADW,EAEXzI,SAAS,CAAC6K,SAAV,CAAoBvG,KAFT,EAGXoE,YAHW,CAAb;AAKA1I,MAAAA,SAAS,CAAC8K,YAAV,CAAuBH,IAAvB,EACGrI,IADH,CACSyI,YAAD,IAAkB;AACtB;AACA,YAAIrE,MAAM,CAACC,IAAP,CAAY,KAAK1E,KAAL,CAAW2E,cAAvB,EAAuCvD,MAA3C,EAAmD;AACjD,eAAKpB,KAAL,CAAWsC,eAAX,CACEvD,KAAK,CAAC8C,OAAN,CAAc,kBAAd,CADF,EAEEiH,YAFF;AAID,SALD,MAKO;AACL,eAAKC,eAAL,CAAqBC,SAArB,CAA+BF,YAA/B;AACA,eAAK7E,iBAAL,CAAuB6E,YAAvB;AACD;AACF,OAZH,EAaGrI,KAbH,CAaUC,KAAD,IAAW,KAAKgF,YAAL,CAAkB,iBAAlB,CAbpB;AAcD,KAhmBkB;;AAAA,SAkmBnBtB,SAlmBmB,GAkmBP,MAAM;AAChB;AACJ;AACA;AACI,UAAI,KAAKlE,UAAL,GAAkB2E,IAAlB,KAA2B9G,SAAS,CAAC2I,aAAV,CAAwBC,KAAvD,EAA8D;AAC5D,YAAIlC,MAAM,CAACC,IAAP,CAAY,KAAK1E,KAAL,CAAW2E,cAAvB,EAAuCvD,MAA3C,EAAmD;AACjD,eAAKpB,KAAL,CAAWsC,eAAX,CAA2BvD,KAAK,CAAC8C,OAAN,CAAc,mBAAd,CAA3B;AACD,SAFD,MAEO;AACL,gBAAM+C,SAAS,GACb,KAAK1E,UAAL,GAAkB2E,IAAlB,KAA2B9G,SAAS,CAAC+G,WAAV,CAAsBC,UAAjD,GACI,KAAK7E,UAAL,GAAkB8E,IAAlB,CAAuBC,IAD3B,GAEI,IAHN;AAIA,eAAKC,qBAAL,CAA2B8D,SAA3B,CAAqCpE,SAArC;AACD;;AACD;AACD;AAED;AACJ;AACA;;;AACI,YAAM;AAAE4B,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAA+B,KAAK+B,kBAAL,EAArC;AACA,YAAME,IAAI,GAAG,IAAI3K,SAAS,CAAC4K,IAAd,CACXnC,UADW,EAEXzI,SAAS,CAAC6K,SAAV,CAAoBK,KAFT,EAGXxC,YAHW,CAAb;AAKA1I,MAAAA,SAAS,CAAC8K,YAAV,CAAuBH,IAAvB,EACGrI,IADH,CACSyI,YAAD,IAAkB;AACtB;AACA,YAAIrE,MAAM,CAACC,IAAP,CAAY,KAAK1E,KAAL,CAAW2E,cAAvB,EAAuCvD,MAA3C,EAAmD;AACjD,eAAKpB,KAAL,CAAWsC,eAAX,CACEvD,KAAK,CAAC8C,OAAN,CAAc,kBAAd,CADF,EAEEiH,YAFF;AAID,SALD,MAKO;AACL,eAAKC,eAAL,CAAqBC,SAArB,CAA+BF,YAA/B;AACD;AACF,OAXH,EAYGrI,KAZH,CAYUC,KAAD,IAAW,KAAKgF,YAAL,CAAkB,iBAAlB,CAZpB;AAaD,KAzoBkB;;AAAA,SA2oBnBpB,cA3oBmB,GA2oBD4E,IAAD,IAAU;AACzB,WAAK1I,QAAL,CAAc;AAAE2I,QAAAA,YAAY,EAAED;AAAhB,OAAd;AACD,KA7oBkB;;AAAA,SA+oBnB3E,YA/oBmB,GA+oBH6E,QAAD,IAAc;AAC3B,UACEA,QAAQ,CAACC,QAAT,CAAkBxE,IAAlB,KAA2B9F,KAAK,CAACqD,SAAN,CAAgB,4BAAhB,CAD7B,EAEE;AACA,aAAKkH,YAAL,GAAoBF,QAAQ,CAACC,QAAT,CAAkBD,QAAtC;AACA,aAAK5I,QAAL,CAAc;AAAE2I,UAAAA,YAAY,EAAE;AAAhB,SAAd;AACD;AACF,KAtpBkB;;AAAA,SAwpBnBlG,aAxpBmB,GAwpBFnB,OAAD,IAAa;AAC3B,YAAMyH,SAAS,GAAGzH,OAAO,CAACyG,EAA1B;AACAxK,MAAAA,SAAS,CAACkF,aAAV,CAAwBsG,SAAxB,EACGlJ,IADH,CACSmJ,cAAD,IAAoB;AACxB;AACA,YAAIA,cAAc,CAACjB,EAAf,KAAsB,KAAKhI,KAAL,CAAWkJ,iBAAX,CAA6BlB,EAAvD,EAA2D;AACzD,eAAK/H,QAAL,CAAc;AAAEiJ,YAAAA,iBAAiB,EAAE;AAArB,WAAd;AACD;;AAED,cAAMxD,WAAW,GAAG,CAAC,GAAG,KAAK1F,KAAL,CAAW0F,WAAf,CAApB;AACA,YAAIyD,UAAU,GAAGzD,WAAW,CAAC0D,SAAZ,CAAuBC,CAAD,IAAOA,CAAC,CAACrB,EAAF,KAASzG,OAAO,CAACyG,EAA9C,CAAjB;;AAEA,YAAItC,WAAW,CAAC7E,MAAZ,GAAqBsI,UAArB,KAAoC,CAApC,IAAyC,CAAC5H,OAAO,CAAC+H,UAAtD,EAAkE;AAChE,eAAK3J,UAAL,GAAkBsC,cAAlB,CAAiCgH,cAAjC;AACD;;AAED,aAAK7G,cAAL,CAAoB,CAAC6G,cAAD,CAApB;AACA,aAAK9G,2BAAL,CAAiC8G,cAAjC,EAAiD,QAAjD;AACD,OAhBH,EAiBG/I,KAjBH,CAiBUC,KAAD,IAAW,KAAKgF,YAAL,CAAkB,iBAAlB,CAjBpB;AAkBD,KA5qBkB;;AAAA,SA8qBnBxC,WA9qBmB,GA8qBJpB,OAAD,IAAa;AACzB,WAAKtB,QAAL,CAAc;AAAEiJ,QAAAA,iBAAiB,EAAE3H,OAArB;AAA8BgI,QAAAA,YAAY,EAAE;AAA5C,OAAd;AACD,KAhrBkB;;AAAA,SAkrBnB3G,aAlrBmB,GAkrBFrB,OAAD,IAAa;AAC3B,YAAMmE,WAAW,GAAG,CAAC,GAAG,KAAK1F,KAAL,CAAW0F,WAAf,CAApB;AACA,UAAIyD,UAAU,GAAGzD,WAAW,CAAC0D,SAAZ,CAAuBC,CAAD,IAAOA,CAAC,CAACrB,EAAF,KAASzG,OAAO,CAACyG,EAA9C,CAAjB;;AACA,UAAImB,UAAU,GAAG,CAAC,CAAlB,EAAqB;AACnB,cAAMpD,UAAU,GAAGL,WAAW,CAACyD,UAAD,CAA9B;AAEA,cAAMK,aAAa,GAAGtF,MAAM,CAACuF,MAAP,CAAc,EAAd,EAAkB1D,UAAlB,EAA8BxE,OAA9B,CAAtB;AAEAmE,QAAAA,WAAW,CAACgE,MAAZ,CAAmBP,UAAnB,EAA+B,CAA/B,EAAkCK,aAAlC;AACA,aAAKtH,cAAL,CAAoBwD,WAApB;AAEA,aAAKvD,2BAAL,CAAiCqH,aAAjC,EAAgD,MAAhD;;AAEA,YAAI9D,WAAW,CAAC7E,MAAZ,GAAqBsI,UAArB,KAAoC,CAApC,IAAyC,CAAC5H,OAAO,CAAC+H,UAAtD,EAAkE;AAChE,eAAK3J,UAAL,GAAkBsC,cAAlB,CAAiCuH,aAAjC;AACD;AACF;AACF,KAnsBkB;;AAAA,SAqsBnBxH,WArsBmB,GAqsBJd,QAAD,IAAc;AAC1B,YAAMK,OAAO,GAAGL,QAAQ,CAAC,CAAD,CAAxB;AACA,YAAMwE,WAAW,GAAG,CAAC,GAAG,KAAK1F,KAAL,CAAW0F,WAAf,CAApB;AAEA,UAAIyD,UAAU,GAAGzD,WAAW,CAAC0D,SAAZ,CAAuBC,CAAD,IAAOA,CAAC,CAACM,GAAF,KAAUpI,OAAO,CAACoI,GAA/C,CAAjB;;AACA,UAAIR,UAAU,GAAG,CAAC,CAAlB,EAAqB;AACnB,cAAMK,aAAa,GAAG,EAAE,GAAGjI;AAAL,SAAtB;AAEAmE,QAAAA,WAAW,CAACgE,MAAZ,CAAmBP,UAAnB,EAA+B,CAA/B,EAAkCK,aAAlC;AACA9D,QAAAA,WAAW,CAACkE,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC7B,EAAF,GAAO8B,CAAC,CAAC9B,EAApC;AACA,aAAK/H,QAAL,CAAc;AAAEyF,UAAAA,WAAW,EAAEA,WAAf;AAA4BqE,UAAAA,cAAc,EAAE;AAA5C,SAAd;AACD;AACF,KAjtBkB;;AAAA,SAmtBnBzH,kBAntBmB,GAmtBE,MAAM;AACzB,WAAKrC,QAAL,CAAc;AACZyF,QAAAA,WAAW,EAAE,EADD;AAEZwD,QAAAA,iBAAiB,EAAE,EAFP;AAGZK,QAAAA,YAAY,EAAE,IAHF;AAIZX,QAAAA,YAAY,EAAE,KAJF;AAKZoB,QAAAA,cAAc,EAAE;AALJ,OAAd;AAOA,WAAKrK,UAAL,GAAkBsK,mBAAlB;AACD,KA5tBkB;;AAAA,SA8tBnB1H,gBA9tBmB,GA8tBCrB,QAAD,IAAc;AAC/B,YAAMwE,WAAW,GAAG,CAAC,GAAGxE,QAAJ,CAApB;AACA,WAAKjB,QAAL,CAAc;AAAEyF,QAAAA,WAAW,EAAEA,WAAf;AAA4BqE,QAAAA,cAAc,EAAE;AAA5C,OAAd;AACD,KAjuBkB;;AAAA,SAmuBnBvH,kBAnuBmB,GAmuBG0H,UAAD,IAAgB;AACnC,WAAKvK,UAAL,GAAkBwK,iBAAlB,CAAoCD,UAApC;AACD,KAruBkB;;AAAA,SAuuBnBE,kBAvuBmB,GAuuBGL,cAAD,IAAoB;AACvC,UAAI,KAAKpK,UAAL,GAAkB0K,cAAlB,CAAiCxJ,MAAjC,KAA4C,CAAhD,EAAmD;AACjD,eAAO,KAAP;AACD;;AAED,UAAIwJ,cAAc,GAAG,CAAC,GAAG,KAAK1K,UAAL,GAAkB0K,cAAtB,CAArB;AACA,UAAI3E,WAAW,GAAG,CAAC,GAAG,KAAK1F,KAAL,CAAW0F,WAAf,CAAlB;AAEA2E,MAAAA,cAAc,CAAC1E,OAAf,CAAwB2E,aAAD,IAAmB;AACxC,YAAIA,aAAa,CAACC,eAAd,OAAoC/M,SAAS,CAAC2I,aAAV,CAAwB+B,IAAhE,EAAsE;AACpE,cAAI,KAAKsC,cAAT,EAAyB;AACvB9E,YAAAA,WAAW,CAACoB,IAAZ,CAAiBwD,aAAjB;AACA,iBAAKE,cAAL,CAAoBC,iBAApB,CACEH,aADF,EAEE9M,SAAS,CAAC+G,WAAV,CAAsBuD,SAFxB;AAID;AACF,SARD,MAQO,IACLwC,aAAa,CAACC,eAAd,OAAoC/M,SAAS,CAAC2I,aAAV,CAAwBC,KADvD,EAEL;AACA,cAAI,KAAKoE,cAAT,EAAyB;AACvB9E,YAAAA,WAAW,CAACoB,IAAZ,CAAiBwD,aAAjB;AACA,iBAAKE,cAAL,CAAoBC,iBAApB,CACEH,aADF,EAEE9M,SAAS,CAAC+G,WAAV,CAAsBC,UAFxB;AAID;AACF;AACF,OApBD;AAsBA,WAAK7E,UAAL,GAAkBsK,mBAAlB,GA9BuC,CA+BvC;;AAEA,WAAKhK,QAAL,CAAc;AAAEyF,QAAAA,WAAW,EAAEA,WAAf;AAA4BqE,QAAAA,cAAc,EAAEA;AAA5C,OAAd;AACD,KAzwBkB;;AAAA,SA2wBnBtH,cA3wBmB,GA2wBF,MAAM;AACrB,UAAI,KAAK9C,UAAL,GAAkB0K,cAAlB,CAAiCxJ,MAAjC,KAA4C,CAAhD,EAAmD;AACjD,eAAO,KAAP;AACD;;AAED,UAAIwJ,cAAc,GAAG,CAAC,GAAG,KAAK1K,UAAL,GAAkB0K,cAAtB,CAArB;AACA,UAAI3E,WAAW,GAAG,CAAC,GAAG,KAAK1F,KAAL,CAAW0F,WAAf,CAAlB;AACAA,MAAAA,WAAW,GAAGA,WAAW,CAACgF,MAAZ,CAAmBL,cAAnB,CAAd;AAEA,WAAK1K,UAAL,GAAkBsK,mBAAlB;AACA,WAAKtK,UAAL,GAAkBgL,wBAAlB,CAA2C,IAA3C;;AAEA,UAAIjF,WAAW,CAAC7E,MAAZ,GAAqBrC,KAAK,CAACqD,SAAN,CAAgB,mBAAhB,CAAzB,EAA+D;AAC7D,YAAI,KAAK2I,cAAT,EAAyB;AACvB,eAAKA,cAAL,CAAoBI,0BAApB;AACD;AACF,OAJD,MAIO;AACL,aAAKR,kBAAL,CAAwB,IAAxB;AACD;AACF,KA9xBkB;;AAAA,SAiyBnBhI,cAjyBmB,GAiyBDlB,QAAD,IAAc;AAC7B,YAAM+H,cAAc,GAAG/H,QAAQ,CAAC,CAAD,CAA/B;AACA,YAAM2J,WAAW,GAAG,CAAC,GAAG,KAAK7K,KAAL,CAAW0F,WAAf,CAApB;AAEA,UAAIyD,UAAU,GAAG0B,WAAW,CAACzB,SAAZ,CACd7H,OAAD,IAAaA,OAAO,CAACyG,EAAR,KAAeiB,cAAc,CAACjB,EAD5B,CAAjB;;AAGA,UAAImB,UAAU,GAAG,CAAC,CAAlB,EAAqB;AACnB,YAAI,KAAKnJ,KAAL,CAAWU,yBAAf,EAA0C;AACxCmK,UAAAA,WAAW,CAACnB,MAAZ,CAAmBP,UAAnB,EAA+B,CAA/B;AACD,SAFD,MAEO;AACL,cAAIpD,UAAU,GAAG,EAAE,GAAG8E,WAAW,CAAC1B,UAAD;AAAhB,WAAjB;AACA,cAAIK,aAAa,GAAGtF,MAAM,CAACuF,MAAP,CAAc,EAAd,EAAkB1D,UAAlB,EAA8BkD,cAA9B,CAApB;AAEA4B,UAAAA,WAAW,CAACnB,MAAZ,CAAmBP,UAAnB,EAA+B,CAA/B,EAAkCK,aAAlC;AACD;;AAED,aAAKvJ,QAAL,CAAc;AAAEyF,UAAAA,WAAW,EAAEmF,WAAf;AAA4Bd,UAAAA,cAAc,EAAE;AAA5C,SAAd;AACD;AACF,KApzBkB;;AAAA,SAuzBnB1H,eAvzBmB,GAuzBAnB,QAAD,IAAc;AAC9B,YAAMwE,WAAW,GAAG,CAAC,GAAGxE,QAAJ,EAAc,GAAG,KAAKlB,KAAL,CAAW0F,WAA5B,CAApB;AACA,WAAKzF,QAAL,CAAc;AAAEyF,QAAAA,WAAW,EAAEA,WAAf;AAA4BqE,QAAAA,cAAc,EAAE;AAA5C,OAAd;AACD,KA1zBkB;;AAAA,SA6zBnBpI,aA7zBmB,GA6zBFJ,OAAD,IAAa;AAC3B,UAAIL,QAAQ,GAAG,CAAC,GAAG,KAAKlB,KAAL,CAAW0F,WAAf,EAA4B,GAAGnE,OAA/B,CAAf;AACA,WAAKtB,QAAL,CAAc;AAAEyF,QAAAA,WAAW,EAAExE,QAAf;AAAyB6I,QAAAA,cAAc,EAAE;AAAzC,OAAd;AACD,KAh0BkB;;AAAA,SAm0BnB7H,cAn0BmB,GAm0BDhB,QAAD,IAAc;AAC7B,WAAKjB,QAAL,CAAc;AAAEyF,QAAAA,WAAW,EAAExE,QAAf;AAAyB6I,QAAAA,cAAc,EAAE;AAAzC,OAAd;AACD,KAr0BkB;;AAAA,SAu0BnB1G,YAv0BmB,GAu0BJ,CAACpC,MAAD,EAASM,OAAT,EAAkBH,KAAlB,EAAyBC,OAAzB,KAAqC;AAClD;AACA,UAAI,KAAKrB,KAAL,CAAWN,yBAAX,KAAyC,IAA7C,EAAmD;AACjD,aAAKiC,aAAL,CAAmB,CAACJ,OAAD,CAAnB;AACD;;AAED,WAAK9B,KAAL,CAAWsC,eAAX,CAA2Bd,MAA3B,EAAmCM,OAAnC,EAA4CH,KAA5C,EAAmDC,OAAnD;AACD,KA90BkB;;AAAA,SAg1BnBqC,iBAh1BmB,GAg1BEnC,OAAD,IAAa;AAC/B;AACA,UAAI,KAAKvB,KAAL,CAAWI,wBAAX,KAAwC,KAA5C,EAAmD;AACjD,eAAO,KAAP;AACD;;AAED,WAAKuB,aAAL,CAAmB,CAACJ,OAAD,CAAnB;AACD,KAv1BkB;;AAAA,SAy1BnBE,gBAz1BmB,GAy1BCP,QAAD,IAAc;AAC/B,YAAM4J,eAAe,GAAG5J,QAAQ,CAAC,CAAD,CAAhC;AAEA,UAAIwE,WAAW,GAAG,CAAC,GAAG,KAAK1F,KAAL,CAAW0F,WAAf,CAAlB;AACA,UAAIyD,UAAU,GAAGzD,WAAW,CAAC0D,SAAZ,CACdC,CAAD,IAAOA,CAAC,CAACrB,EAAF,KAAS8C,eAAe,CAACtJ,eADjB,CAAjB;;AAGA,UAAI2H,UAAU,GAAG,CAAC,CAAlB,EAAqB;AACnB,cAAMpD,UAAU,GAAGL,WAAW,CAACyD,UAAD,CAA9B;AACA,YAAIG,UAAU,GAAGvD,UAAU,CAACgF,cAAX,CAA0B,YAA1B,IACbhF,UAAU,CAACuD,UADE,GAEb,CAFJ;AAGAA,QAAAA,UAAU,GAAGA,UAAU,GAAG,CAA1B;AACA,cAAME,aAAa,GAAGtF,MAAM,CAACuF,MAAP,CAAc,EAAd,EAAkB1D,UAAlB,EAA8B;AAClDuD,UAAAA,UAAU,EAAEA;AADsC,SAA9B,CAAtB;AAIA5D,QAAAA,WAAW,CAACgE,MAAZ,CAAmBP,UAAnB,EAA+B,CAA/B,EAAkCK,aAAlC;AACA,aAAKvJ,QAAL,CAAc;AAAEyF,UAAAA,WAAW,EAAEA,WAAf;AAA4BqE,UAAAA,cAAc,EAAE;AAA5C,SAAd;AACD;AACF,KA72BkB;;AAAA,SA+2BnBrI,iBA/2BmB,GA+2BER,QAAD,IAAc;AAChC,YAAMK,OAAO,GAAGL,QAAQ,CAAC,CAAD,CAAxB;;AACA,UACEK,OAAO,CAAC8E,MAAR,CAAe0B,GAAf,KAAuB,KAAKzB,YAAL,CAAkByB,GAAzC,IACAxG,OAAO,CAACgF,QAAR,KAAqB/I,SAAS,CAACwN,eAFjC,EAGE;AACA,eAAO,KAAP;AACD;AAED;AACJ;AACA;;;AACI,WAAKrL,UAAL,GACGC,kBADH,CACsBqL,qBADtB,GAEGnL,IAFH,CAESC,QAAD,IAAc;AAClB,YAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrB,gBAAMmL,cAAc,GAAGzM,6BAA6B,CAClD8C,OADkD,EAElD,aAFkD,CAApD;;AAIA,cACE2J,cAAc,IACdA,cAAc,CAACH,cAAf,CAA8B,OAA9B,MAA2C,KAF7C,EAGE;AACA,iBAAK9K,QAAL,CAAc;AAAEsJ,cAAAA,YAAY,EAAEhI;AAAhB,aAAd;AACD,WALD,MAKO;AACL,iBAAKtB,QAAL,CAAc;AAAEsJ,cAAAA,YAAY,EAAE;AAAhB,aAAd;AACD;AACF;AACF,OAjBH;AAkBD,KA74BkB;;AAAA,SA+4BnB1G,gBA/4BmB,GA+4BA,MAAM;AACvB,WAAK5C,QAAL,CAAc;AAAEiJ,QAAAA,iBAAiB,EAAE;AAArB,OAAd;AACD,KAj5BkB;;AAAA,SAm5BnBjF,cAn5BmB,GAm5BD1C,OAAD,IAAa;AAC5B,WAAKtB,QAAL,CAAc;AAAE+J,QAAAA,cAAc,EAAEzI;AAAlB,OAAd;;AAEA,UAAI,KAAK4J,WAAT,EAAsB;AACpB,aAAKA,WAAL,CAAiBC,iBAAjB;AACD;AACF,KAz5BkB;;AAGjB,SAAKpL,KAAL,GAAa;AACX0F,MAAAA,WAAW,EAAE,EADF;AAEXqE,MAAAA,cAAc,EAAE,IAFL;AAGXb,MAAAA,iBAAiB,EAAE,EAHR;AAIXK,MAAAA,YAAY,EAAE,IAJH;AAKXX,MAAAA,YAAY,EAAE,KALH;AAMXoB,MAAAA,cAAc,EAAE,IANL;AAOX7C,MAAAA,IAAI,EAAE1H,KAAK,CAAC0H,IAPD;AAQXkD,MAAAA,cAAc,EAAE,EARL;AASX9C,MAAAA,gBAAgB,EAAE,KATP;AAUXC,MAAAA,iBAAiB,EAAE,KAVR;AAWXK,MAAAA,iBAAiB,EAAE,IAXR;AAYXD,MAAAA,iBAAiB,EAAE,EAZR;AAaXD,MAAAA,mBAAmB,EAAE,EAbV;AAcXN,MAAAA,iBAAiB,EAAE,KAdR;AAeX3H,MAAAA,yBAAyB,EAAE,KAfhB;AAgBXU,MAAAA,wBAAwB,EAAE,KAhBf;AAiBXE,MAAAA,4BAA4B,EAAE,KAjBnB;AAkBXE,MAAAA,yBAAyB,EAAE,KAlBhB;AAmBXE,MAAAA,yBAAyB,EAAE;AAnBhB,KAAb;AAsBA,SAAKK,kBAAL,gBAA0B1D,KAAK,CAACgO,SAAN,EAA1B;AACA,SAAKF,WAAL,gBAAmB9N,KAAK,CAACgO,SAAN,EAAnB;AACA,SAAKb,cAAL,gBAAsBnN,KAAK,CAACgO,SAAN,EAAtB;AACA,SAAK7C,eAAL,gBAAuBnL,KAAK,CAACgO,SAAN,EAAvB;AACA,SAAK1G,qBAAL,gBAA6BtH,KAAK,CAACgO,SAAN,EAA7B;AACA,SAAK/F,QAAL,gBAAgBjI,KAAK,CAACgO,SAAN,EAAhB;AAEA,SAAKtC,YAAL,GAAoB,OAApB;AACD;;AAEDuC,EAAAA,iBAAiB,GAAG;AAClB9N,IAAAA,SAAS,CAAC+N,eAAV,GACGzL,IADH,CACS0L,IAAD,IAAW,KAAKlF,YAAL,GAAoBkF,IADvC,EAEGtL,KAFH,CAEUC,KAAD,IAAW,KAAKgF,YAAL,CAAkB,iBAAlB,CAFpB;AAIA,SAAKb,IAAL,GAAY,KAAK3E,UAAL,GAAkB2E,IAA9B;AACA,SAAKG,IAAL,GAAY,KAAK9E,UAAL,GAAkB8E,IAA9B;AAEA,SAAK/E,yBAAL;AACA,SAAKU,wBAAL;AACA,SAAKE,4BAAL;AACA,SAAKE,yBAAL;AACA,SAAKE,yBAAL;AACD;;AAED+K,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvC,QAAIzH,MAAM,CAACC,IAAP,CAAY,KAAKM,IAAjB,EAAuB5D,MAA3B,EAAmC;AACjC,YAAM+K,mBAAmB,GAAG,MAAM;AAChC,YAAIC,MAAM,GAAG,KAAb;;AAEA,YACE,KAAKlM,UAAL,GAAkB2E,IAAlB,KAA2B9G,SAAS,CAAC+G,WAAV,CAAsBuD,SAAjD,IACA,KAAKnI,UAAL,GAAkB8E,IAAlB,CAAuBsD,GAAvB,KAA+B,KAAKtD,IAAL,CAAUsD,GAF3C,EAGE;AACA8D,UAAAA,MAAM,GAAG,IAAT;AACD,SALD,MAKO,IACL,KAAKlM,UAAL,GAAkB2E,IAAlB,KAA2B9G,SAAS,CAAC+G,WAAV,CAAsBC,UAAjD,IACA,KAAK7E,UAAL,GAAkB8E,IAAlB,CAAuBC,IAAvB,KAAgC,KAAKD,IAAL,CAAUC,IAFrC,EAGL;AACAmH,UAAAA,MAAM,GAAG,IAAT;AACD,SALM,MAKA,IAAI,KAAKvH,IAAL,KAAc,KAAK3E,UAAL,GAAkB2E,IAApC,EAA0C;AAC/CuH,UAAAA,MAAM,GAAG,IAAT;AACD;;AAED,eAAOA,MAAP;AACD,OAlBD;;AAoBA,UAAID,mBAAmB,OAAO,IAA9B,EAAoC;AAClC,aAAK3L,QAAL,CAAc;AACZyF,UAAAA,WAAW,EAAE,EADD;AAEZqE,UAAAA,cAAc,EAAE,IAFJ;AAGZb,UAAAA,iBAAiB,EAAE,EAHP;AAIZ1B,UAAAA,iBAAiB,EAAE,KAJP;AAKZD,UAAAA,gBAAgB,EAAE;AALN,SAAd;AAOD;AACF;;AAED,SAAKjD,IAAL,GAAY,KAAK3E,UAAL,GAAkB2E,IAA9B;AACA,SAAKG,IAAL,GACE,KAAK9E,UAAL,GAAkB2E,IAAlB,KAA2B9G,SAAS,CAAC+G,WAAV,CAAsBuD,SAAjD,IACAtK,SAAS,CAAC+G,WAAV,CAAsBC,UADtB,GAEI,KAAK7E,UAAL,GAAkB8E,IAFtB,GAGI,EAJN;AAMA,SAAK/E,yBAAL;AACA,SAAKU,wBAAL;AACA,SAAKE,4BAAL;AACA,SAAKE,yBAAL;AACA,SAAKE,yBAAL;;AAEA,QAAIgL,SAAS,CAACvE,IAAV,KAAmB,KAAK1H,KAAL,CAAW0H,IAAlC,EAAwC;AACtC,WAAKlH,QAAL,CAAc;AAAEkH,QAAAA,IAAI,EAAE,KAAK1H,KAAL,CAAW0H;AAAnB,OAAd;AACD;AAED;AACJ;AACA;;;AACI,QAAIjD,MAAM,CAACC,IAAP,CAAY,KAAK1E,KAAL,CAAW2E,cAAvB,EAAuCvD,MAA3C,EAAmD;AACjD,UACEqD,MAAM,CAACC,IAAP,CAAY,KAAKxE,UAAL,GAAkBmM,uBAA9B,EAAuDjL,MAAvD,IACA,KAAKlB,UAAL,GAAkBoM,6BAAlB,CAAgDC,IAAhD,GAAuDnL,MADvD,KAEC,KAAKlB,UAAL,GAAkBmM,uBAAlB,KACC,KAAKA,uBADN,IAEC,KAAKnM,UAAL,GAAkBoM,6BAAlB,KACE,KAAKA,6BALT,CADF,EAOE;AACA,cAAME,aAAa,GAAG,KAAKtM,UAAL,GAAkBmM,uBAAxC;AACA,cAAMI,aAAa,GACjB,KAAKvM,UAAL,GAAkBoM,6BAAlB,CAAgDC,IAAhD,EADF;;AAGA,gBAAQE,aAAR;AACE,eAAK1N,KAAK,CAAC8C,OAAN,CAAc,kBAAd,CAAL;AACE,iBAAKK,aAAL,CAAmBsK,aAAnB;AACA;;AACF,eAAKzN,KAAK,CAAC8C,OAAN,CAAc,cAAd,CAAL;AACA,eAAK9C,KAAK,CAAC8C,OAAN,CAAc,0BAAd,CAAL;AAAgD;AAC9C,mBAAKU,WAAL,CAAiBiK,aAAjB;AACA,mBAAKtM,UAAL,GAAkBsC,cAAlB,CAAiCgK,aAAa,CAAC,CAAD,CAA9C;AACAE,cAAAA,UAAU,CAAC,MAAM;AACf,qBAAKxM,UAAL,GAAkByM,0BAAlB,CAA6C,EAA7C,EAAiD,EAAjD;AACD,eAFS,EAEP,IAFO,CAAV;AAIA;AACD;;AACD;AACE;AAfJ;AAiBD;;AAED,WAAKN,uBAAL,GAA+B,KAAKnM,UAAL,GAAkBmM,uBAAjD;AACA,WAAKC,6BAAL,GACE,KAAKpM,UAAL,GAAkBoM,6BAAlB,CAAgDC,IAAhD,EADF;AAED;AACF;;AAgxBDK,EAAAA,MAAM,GAAG;AAAA;;AACP;AACJ;AACA;AACI,QACE,KAAK5M,KAAL,CAAWmB,OAAX,CAAmBoL,IAAnB,GAA0BnL,MAA1B,KAAqC,CAArC,IACA,KAAKpB,KAAL,CAAW6M,YAAX,CAAwBN,IAAxB,GAA+BnL,MAA/B,KAA0C,CAD1C,IAEA,KAAKpB,KAAL,CAAW8M,aAAX,CAAyBP,IAAzB,GAAgCnL,MAAhC,KAA2C,CAH7C,EAIE;AACA,aACE,IAAC,wBAAD;AACE,QAAA,GAAG,EAAG2L,EAAD,IAAS,KAAKzL,kBAAL,GAA0ByL,EAD1C;AAEE,QAAA,UAAU,EAAEhO,KAAK,CAACqD,SAAN,CAAgB,oBAAhB,CAFd;AAGE,QAAA,IAAI,EAAE,KAAKpC,KAAL,CAAW6M,YAHnB;AAIE,QAAA,KAAK,EAAE,KAAK7M,KAAL,CAAW8M,aAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CADF;AAUD,KAfD,MAeO,IACL,KAAK9M,KAAL,CAAWmB,OAAX,CAAmBoL,IAAnB,GAA0BnL,MAA1B,IACAqD,MAAM,CAACC,IAAP,CAAY,KAAKxE,UAAL,GAAkB8E,IAA9B,EAAoC5D,MAApC,KAA+C,CAF1C,EAGL;AACA,aAAO,IAAP;AACD;;AAED,QAAI4L,eAAe,GACjB,IAAC,wBAAD;AACE,MAAA,GAAG,EAAGD,EAAD,IAAQ;AACX,aAAKrB,WAAL,GAAmBqB,EAAnB;AACD,OAHH;AAIE,MAAA,KAAK,EAAE,KAAK/M,KAAL,CAAWd,KAJpB;AAKE,MAAA,IAAI,EAAE,KAAKqB,KAAL,CAAWmH,IALnB;AAME,MAAA,cAAc,EAAE,KAAK1H,KAAL,CAAW2E,cAN7B;AAOE,MAAA,iBAAiB,EAAE,KAAKpE,KAAL,CAAWkJ,iBAPhC;AAQE,MAAA,YAAY,EAAE,KAAKlJ,KAAL,CAAWuJ,YAR3B;AASE,MAAA,QAAQ,EAAE,KAAKR,YATjB;AAUE,MAAA,cAAc,EAAE,KAAK/I,KAAL,CAAWgK,cAV7B;AAWE,MAAA,eAAe,EAAE,KAAKhJ,aAXxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAgBA,QAAI0L,mBAAmB,GAAG,IAA1B;;AACA,4BAAI,KAAK/M,UAAL,EAAJ,qDAAI,iBAAmB0K,cAAnB,CAAkCxJ,MAAtC,EAA8C;AAC5C,YAAM8L,kBAAkB,GAAG,KAAKhN,UAAL,GAAkB0K,cAAlB,CAAiCxJ,MAA5D;AACA,YAAM+L,WAAW,GACfD,kBAAkB,GAAG,CAArB,GACK,GAAEA,kBAAmB,IAAG/N,UAAU,CAACqI,SAAX,CACvB,cADuB,EAEvB,KAAKjH,KAAL,CAAWmH,IAFY,CAGvB,EAJN,GAKK,GAAEwF,kBAAmB,IAAG/N,UAAU,CAACqI,SAAX,CACvB,aADuB,EAEvB,KAAKjH,KAAL,CAAWmH,IAFY,CAGvB,EATR;AAUAuF,MAAAA,mBAAmB,GACjB;AAAK,QAAA,GAAG,EAAE1N,mBAAmB,EAA7B;AAAiC,QAAA,SAAS,EAAC,mBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,GAAG,EAAEC,sBAAsB,CAAC,KAAK6B,OAAN,CAD7B;AAEE,QAAA,SAAS,EAAC,sBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE;AACE,QAAA,GAAG,EAAE5B,4BAA4B,EADnC;AAEE,QAAA,SAAS,EAAC,qCAFZ;AAGE,QAAA,KAAK,EAAEN,UAAU,CAACqI,SAAX,CAAqB,MAArB,EAA6B,KAAKjH,KAAL,CAAWmH,IAAxC,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,GAAG,EAAEhI,mCAAmC,CAAC,KAAK2B,OAAN,CAF1C;AAGE,QAAA,SAAS,EAAC,kCAHZ;AAIE,QAAA,OAAO,EAAE,KAAK2B,cAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAME;AAAM,QAAA,GAAG,EAAErD,kBAAkB,EAA7B;AAAiC,QAAA,SAAS,EAAC,kBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACW,GADX,CANF,EASGwN,WATH,CALF,CAJF,CADF,CADF;AA0BD,KAjFM,CAmFP;;;AACA,QACG,KAAKjN,UAAL,GAAkB2E,IAAlB,KAA2B9G,SAAS,CAAC+G,WAAV,CAAsBuD,SAAjD,IACC,KAAK9H,KAAL,CAAWM,4BAAX,KAA4C,KAD9C,IAEC,KAAKX,UAAL,GAAkB2E,IAAlB,KAA2B9G,SAAS,CAAC+G,WAAV,CAAsBC,UAAjD,IACC,KAAKxE,KAAL,CAAWQ,yBAAX,KAAyC,KAJ7C,EAKE;AACAiM,MAAAA,eAAe,GAAG,IAAlB;AACD;;AAED,QAAII,gBAAgB,GAAG,IAAvB;;AACA,QAAI,KAAK7M,KAAL,CAAW4I,YAAf,EAA6B;AAC3BiE,MAAAA,gBAAgB,GACd;AAAK,QAAA,GAAG,EAAE9N,qBAAqB,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,IAAC,sBAAD;AACE,QAAA,QAAQ,EAAE,KAAKgK,YADjB;AAEE,QAAA,KAAK,EAAE,KAAKtJ,KAAL,CAAWd,KAFpB;AAGE,QAAA,IAAI,EAAE,KAAKqB,KAAL,CAAWmH,IAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AASD;AAED;AACJ;AACA;;;AACI,QAAI2F,gBAAgB,GAAG,IAAvB;AACA,QAAIC,sBAAsB,GAAG,IAA7B;;AACA,QAAI,KAAKtN,KAAL,CAAWmB,OAAX,CAAmBoL,IAAnB,GAA0BnL,MAA1B,KAAqC,CAAzC,EAA4C;AAC1CiM,MAAAA,gBAAgB,GACd,IAAC,qBAAD;AACE,QAAA,KAAK,EAAE,KAAKrN,KAAL,CAAWd,KADpB;AAEE,QAAA,IAAI,EAAE,KAAKqB,KAAL,CAAWmH,IAFnB;AAGE,QAAA,eAAe,EAAE,KAAKnG,aAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQA+L,MAAAA,sBAAsB,GACpB,IAAC,2BAAD;AACE,QAAA,KAAK,EAAE,KAAKtN,KAAL,CAAWd,KADpB;AAEE,QAAA,IAAI,EAAE,KAAKqB,KAAL,CAAWmH,IAFnB;AAGE,QAAA,eAAe,EAAE,KAAKnG,aAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD,KA/HM,CAiIP;;;AACA,QAAIgM,sBAAsB,GAAG,IAA7B;AACA,QAAIC,gBAAgB,GAAG,IAAvB;;AACA,QAAI/I,MAAM,CAACC,IAAP,CAAY,KAAK1E,KAAL,CAAW2E,cAAvB,EAAuCvD,MAAvC,KAAkD,CAAtD,EAAyD;AACvDoM,MAAAA,gBAAgB,GACd,IAAC,qBAAD;AACE,QAAA,GAAG,EAAGT,EAAD,IAAS,KAAKhE,eAAL,GAAuBgE,EADvC;AAEE,QAAA,KAAK,EAAE,KAAK/M,KAAL,CAAWd,KAFpB;AAGE,QAAA,IAAI,EAAE,KAAKqB,KAAL,CAAWmH,IAHnB;AAIE,QAAA,eAAe,EAAE,KAAKnG,aAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQAgM,MAAAA,sBAAsB,GACpB,IAAC,2BAAD;AACE,QAAA,GAAG,EAAGR,EAAD,IAAS,KAAK7H,qBAAL,GAA6B6H,EAD7C;AAEE,QAAA,KAAK,EAAE,KAAK/M,KAAL,CAAWd,KAFpB;AAGE,QAAA,IAAI,EAAE,KAAKqB,KAAL,CAAWmH,IAHnB;AAIE,QAAA,eAAe,EAAE,KAAKnG,aAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD;;AAED,QAAIkM,YAAY,GAAG,IAAnB;;AACA,QAAI,KAAKlN,KAAL,CAAWuH,gBAAf,EAAiC;AAC/B,UAAI,KAAK5H,UAAL,GAAkB2E,IAAlB,KAA2B9G,SAAS,CAAC+G,WAAV,CAAsBuD,SAArD,EAAgE;AAC9DoF,QAAAA,YAAY,GACV;AACE,UAAA,GAAG,EAAEpO,kBAAkB,CAAC,KAAKW,KAAN,EAAa,KAAKqB,OAAlB,CADzB;AAEE,UAAA,SAAS,EAAC,sBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIE,IAAC,oBAAD;AACE,UAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWd,KADpB;AAEE,UAAA,IAAI,EAAE,KAAKqB,KAAL,CAAWmH,IAFnB;AAGE,UAAA,eAAe,EAAE,KAAKnG,aAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJF,CADF;AAYD,OAbD,MAaO,IAAI,KAAKrB,UAAL,GAAkB2E,IAAlB,KAA2B9G,SAAS,CAAC+G,WAAV,CAAsBC,UAArD,EAAiE;AACtE0I,QAAAA,YAAY,GACV;AACE,UAAA,GAAG,EAAEpO,kBAAkB,CAAC,KAAKW,KAAN,EAAa,KAAKqB,OAAlB,CADzB;AAEE,UAAA,SAAS,EAAC,sBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIE,IAAC,qBAAD;AACE,UAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWd,KADpB;AAEE,UAAA,IAAI,EAAE,KAAKqB,KAAL,CAAWmH,IAFnB;AAGE,UAAA,eAAe,EAAE,KAAKnG,aAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJF,CADF;AAYD;AACF;;AAED,QAAImM,iBAAiB,GAAG,IAAxB;;AACA,QAAI,KAAKnN,KAAL,CAAWwH,iBAAf,EAAkC;AAChC2F,MAAAA,iBAAiB,GACf;AACE,QAAA,GAAG,EAAErO,kBAAkB,CAAC,KAAKW,KAAN,EAAa,KAAKqB,OAAlB,CADzB;AAEE,QAAA,SAAS,EAAC,sBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,IAAC,sBAAD;AACE,QAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWd,KADpB;AAEE,QAAA,SAAS,EAAE,KAAKqB,KAAL,CAAWoN,SAFxB;AAGE,QAAA,UAAU,EAAE,KAAKpN,KAAL,CAAW4H,iBAHzB;AAIE,QAAA,UAAU,EAAE,KAAK5H,KAAL,CAAW6H,iBAJzB;AAKE,QAAA,aAAa,EAAE,KAAK7H,KAAL,CAAW2H,mBAL5B;AAME,QAAA,YAAY,EAAE,KAAKrB,YANrB;AAOE,QAAA,IAAI,EAAE,KAAKtG,KAAL,CAAWmH,IAPnB;AAQE,QAAA,cAAc,EAAE,KAAK1H,KAAL,CAAW2E,cAR7B;AASE,QAAA,eAAe,EAAE,KAAKpD,aATxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CADF;AAkBD;;AAED,QAAIqM,iBAAiB,GAAG,IAAxB;;AACA,QAAI,KAAKrN,KAAL,CAAWqH,iBAAf,EAAkC;AAChCgG,MAAAA,iBAAiB,GACf,IAAC,oBAAD;AACE,QAAA,KAAK,EAAE,MAAM,KAAK1J,uBAAL,CAA6B,KAA7B,CADf;AAEE,QAAA,OAAO,EAAE,KAAK3D,KAAL,CAAWqH,iBAFtB;AAGE,QAAA,IAAI,EAAE,KAAKrH,KAAL,CAAWmH,IAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD;;AAED,QAAImG,gBAAgB,GAClB,IAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,GAAG,EAAEzO,gBAAgB,CAAC,KAAKY,KAAN,EAAa,KAAKO,KAAlB,EAAyB,KAAKc,OAA9B,CADvB;AAEE,MAAA,SAAS,EAAC,YAFZ;AAGE,MAAA,GAAG,EAAElC,UAAU,CAAC2O,YAAX,CAAwB,KAAKvN,KAAL,CAAWmH,IAAnC,CAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,IAAC,sBAAD;AACE,MAAA,OAAO,EAAE,KAAK1H,KAAL,CAAW+N,OADtB;AAEE,MAAA,KAAK,EAAE,KAAK/N,KAAL,CAAWd,KAFpB;AAGE,MAAA,IAAI,EAAE,KAAKqB,KAAL,CAAWmH,IAHnB;AAIE,MAAA,UAAU,EAAE,KAAK1H,KAAL,CAAW6H,UAAX,KAA0B,KAA1B,GAAkC,KAAlC,GAA0C,IAJxD;AAKE,MAAA,cAAc,EAAE,KAAK7H,KAAL,CAAW2E,cAL7B;AAME,MAAA,eAAe,EAAE,KAAKpD,aANxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAaE,IAAC,oBAAD;AACE,MAAA,GAAG,EAAGwL,EAAD,IAAQ;AACX,aAAKhC,cAAL,GAAsBgC,EAAtB;AACD,OAHH;AAIE,MAAA,KAAK,EAAE,KAAK/M,KAAL,CAAWd,KAJpB;AAKE,MAAA,QAAQ,EAAE,KAAKqB,KAAL,CAAW0F,WALvB;AAME,MAAA,IAAI,EAAE,KAAK1F,KAAL,CAAWmH,IANnB;AAOE,MAAA,cAAc,EAAE,KAAKnH,KAAL,CAAW+J,cAP7B;AAQE,MAAA,aAAa,EAAE,KAAKtK,KAAL,CAAWgO,aAR5B;AASE,MAAA,cAAc,EAAE,KAAKhO,KAAL,CAAW2E,cAT7B;AAUE,MAAA,YAAY,EAAE,KAAK3E,KAAL,CAAWiO,YAV3B;AAWE,MAAA,eAAe,EAAE,KAAK1M,aAXxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,EA0BG6L,gBA1BH,EA2BGJ,eA3BH,EA4BGC,mBA5BH,CADF,EA+BE,IAAC,0BAAD;AAA4B,MAAA,GAAG,EAAGF,EAAD,IAAS,KAAKlH,QAAL,GAAgBkH,EAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/BF,EAgCGa,iBAhCH,EAiCGH,YAjCH,EAkCGC,iBAlCH,EAmCGL,gBAnCH,EAoCGG,gBApCH,EAqCGF,sBArCH,EAsCGC,sBAtCH,CADF;AA2CA,QAAIW,cAAc,GAAGL,gBAArB;AACA;AACJ;AACA;;AACI,QAAI,KAAK7N,KAAL,CAAWmB,OAAX,CAAmBoL,IAAnB,GAA0BnL,MAA1B,KAAqC,CAAzC,EAA4C;AAC1C8M,MAAAA,cAAc,GACZ,IAAC,wBAAD;AACE,QAAA,GAAG,EAAGnB,EAAD,IAAS,KAAKzL,kBAAL,GAA0ByL,EAD1C;AAEE,QAAA,IAAI,EAAE,KAAK/M,KAAL,CAAW6M,YAFnB;AAGE,QAAA,KAAK,EAAE,KAAK7M,KAAL,CAAW8M,aAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE;AAAK,QAAA,GAAG,EAAElN,kBAAkB,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiCiO,gBAAjC,CALF,CADF;AASD;;AAED,WAAOK,cAAP;AACD;;AAjrCiD,C,CAorCpD;;;AAprCMrO,iB,CACGsO,W,GAAcrP,gB;AAorCvBe,iBAAiB,CAACuO,YAAlB,GAAiC;AAC/B1G,EAAAA,IAAI,EAAEvI,UAAU,CAACkP,kBAAX,EADyB;AAE/BnP,EAAAA,KAAK,EAAEA,KAFwB;AAG/BiC,EAAAA,OAAO,EAAE,EAHsB;AAI/BwD,EAAAA,cAAc,EAAE,EAJe;AAK/BkI,EAAAA,YAAY,EAAE,EALiB;AAM/BC,EAAAA,aAAa,EAAE;AANgB,CAAjC;AASAjN,iBAAiB,CAACyO,SAAlB,GAA8B;AAC5B5G,EAAAA,IAAI,EAAE5J,SAAS,CAACyQ,MADY;AAE5BrP,EAAAA,KAAK,EAAEpB,SAAS,CAAC0Q,MAFW;AAG5BrN,EAAAA,OAAO,EAAErD,SAAS,CAACyQ,MAHS;AAI5B5J,EAAAA,cAAc,EAAE7G,SAAS,CAAC0Q,MAJE;AAK5B3B,EAAAA,YAAY,EAAE/O,SAAS,CAACyQ,MALI;AAM5BzB,EAAAA,aAAa,EAAEhP,SAAS,CAACyQ;AANG,CAA9B;AASA,SAAS1O,iBAAT","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport {\n  CometChatMessageHeader,\n  CometChatMessageList,\n  CometChatMessageComposer,\n  CometChatLiveReactions,\n  CometChatMessageThread,\n  CometChatImageViewer,\n} from \"../\";\n\nimport {\n  CometChatIncomingCall,\n  CometChatOutgoingCall,\n  CometChatOutgoingDirectCall,\n  CometChatIncomingDirectCall,\n} from \"../../Calls\";\n\nimport { CometChatUserDetails } from \"../../Users\";\nimport { CometChatGroupDetails } from \"../../Groups\";\nimport { CometChatToastNotification } from \"../../Shared\";\n\nimport {\n  CometChatContextProvider,\n  CometChatContext,\n} from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport { checkMessageForExtensionsData } from \"../../../util/common\";\nimport { SoundManager } from \"../../../util/SoundManager\";\n\nimport { theme } from \"../../../resources/theme\";\nimport Translator from \"../../../resources/localization/translator\";\n\nimport {\n  chatWrapperStyle,\n  chatSecondaryStyle,\n  reactionsWrapperStyle,\n  messagePaneTopStyle,\n  messagePaneBannerStyle,\n  messagePaneUnreadBannerStyle,\n  messagePaneUnreadBannerMessageStyle,\n  iconArrowDownStyle,\n  chatContainerStyle,\n} from \"./style\";\n\nclass CometChatMessages extends React.PureComponent {\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      messageList: [],\n      scrollToBottom: true,\n      messageToBeEdited: \"\",\n      replyPreview: null,\n      liveReaction: false,\n      messageToReact: null,\n      lang: props.lang,\n      unreadMessages: [],\n      viewdetailscreen: false,\n      threadmessageview: false,\n      threadmessagetype: null,\n      threadmessageitem: {},\n      threadmessageparent: {},\n      viewOriginalImage: false,\n      enableGroupActionMessages: false,\n      enableCallActionMessages: false,\n      enableSendingOneOnOneMessage: false,\n      enableSendingGroupMessage: false,\n      enableHideDeletedMessages: false,\n    };\n\n    this.contextProviderRef = React.createRef();\n    this.composerRef = React.createRef();\n    this.messageListRef = React.createRef();\n    this.outgoingCallRef = React.createRef();\n    this.outgoingDirectCallRef = React.createRef();\n    this.toastRef = React.createRef();\n\n    this.reactionName = \"heart\";\n  }\n\n  componentDidMount() {\n    CometChat.getLoggedinUser()\n      .then((user) => (this.loggedInUser = user))\n      .catch((error) => this.errorHandler(\"SOMETHING_WRONG\"));\n\n    this.type = this.getContext().type;\n    this.item = this.getContext().item;\n\n    this.enableGroupActionMessages();\n    this.enableCallActionMessages();\n    this.enableSendingOneOnOneMessage();\n    this.enableSendingGroupMessage();\n    this.enableHideDeletedMessages();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (Object.keys(this.item).length) {\n      const ifChatWindowChanged = () => {\n        let output = false;\n\n        if (\n          this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER &&\n          this.getContext().item.uid !== this.item.uid\n        ) {\n          output = true;\n        } else if (\n          this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP &&\n          this.getContext().item.guid !== this.item.guid\n        ) {\n          output = true;\n        } else if (this.type !== this.getContext().type) {\n          output = true;\n        }\n\n        return output;\n      };\n\n      if (ifChatWindowChanged() === true) {\n        this.setState({\n          messageList: [],\n          scrollToBottom: true,\n          messageToBeEdited: \"\",\n          threadmessageview: false,\n          viewdetailscreen: false,\n        });\n      }\n    }\n\n    this.type = this.getContext().type;\n    this.item =\n      this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER ||\n      CometChat.ACTION_TYPE.TYPE_GROUP\n        ? this.getContext().item\n        : {};\n\n    this.enableGroupActionMessages();\n    this.enableCallActionMessages();\n    this.enableSendingOneOnOneMessage();\n    this.enableSendingGroupMessage();\n    this.enableHideDeletedMessages();\n\n    if (prevProps.lang !== this.props.lang) {\n      this.setState({ lang: this.props.lang });\n    }\n\n    /**\n     * Custom message to be appended or updated for direct calling\n     */\n    if (Object.keys(this.props.widgetsettings).length) {\n      if (\n        Object.keys(this.getContext().directCallCustomMessage).length &&\n        this.getContext().directCallCustomMessageAction.trim().length &&\n        (this.getContext().directCallCustomMessage !==\n          this.directCallCustomMessage ||\n          this.getContext().directCallCustomMessageAction !==\n            this.directCallCustomMessageAction)\n      ) {\n        const customMessage = this.getContext().directCallCustomMessage;\n        const messageAction =\n          this.getContext().directCallCustomMessageAction.trim();\n\n        switch (messageAction) {\n          case enums.ACTIONS[\"MESSAGE_COMPOSED\"]:\n            this.appendMessage(customMessage);\n            break;\n          case enums.ACTIONS[\"MESSAGE_SENT\"]:\n          case enums.ACTIONS[\"ERROR_IN_SENDING_MESSAGE\"]: {\n            this.messageSent(customMessage);\n            this.getContext().setLastMessage(customMessage[0]);\n            setTimeout(() => {\n              this.getContext().setDirectCallCustomMessage({}, \"\");\n            }, 1000);\n\n            break;\n          }\n          default:\n            break;\n        }\n      }\n\n      this.directCallCustomMessage = this.getContext().directCallCustomMessage;\n      this.directCallCustomMessageAction =\n        this.getContext().directCallCustomMessageAction.trim();\n    }\n  }\n\n  enableGroupActionMessages = () => {\n    this.getContext()\n      .FeatureRestriction.isGroupActionMessagesEnabled()\n      .then((response) => {\n        /**\n         * Don't update state if the response has the same value\n         */\n        if (response !== this.state.enableGroupActionMessages) {\n          this.setState({ enableGroupActionMessages: response });\n        }\n      })\n      .catch((error) => {\n        if (this.state.enableGroupActionMessages !== false) {\n          this.setState({ enableGroupActionMessages: false });\n        }\n      });\n  };\n\n  enableCallActionMessages = () => {\n    this.getContext()\n      .FeatureRestriction.isCallActionMessagesEnabled()\n      .then((response) => {\n        /**\n         * Don't update state if the response has the same value\n         */\n        if (response !== this.state.enableCallActionMessages) {\n          this.setState({ enableCallActionMessages: response });\n        }\n      })\n      .catch((error) => {\n        if (this.state.enableCallActionMessages !== false) {\n          this.setState({ enableCallActionMessages: false });\n        }\n      });\n  };\n\n  enableSendingOneOnOneMessage = () => {\n    this.getContext()\n      .FeatureRestriction.isOneOnOneChatEnabled()\n      .then((response) => {\n        if (response !== this.state.enableSendingOneOnOneMessage) {\n          this.setState({ enableSendingOneOnOneMessage: response });\n        }\n      })\n      .catch((error) => {\n        if (this.state.enableSendingOneOnOneMessage !== false) {\n          this.setState({ enableSendingOneOnOneMessage: false });\n        }\n      });\n  };\n\n  enableSendingGroupMessage = () => {\n    this.getContext()\n      .FeatureRestriction.isGroupChatEnabled()\n      .then((response) => {\n        if (response !== this.state.enableSendingGroupMessage) {\n          this.setState({ enableSendingGroupMessage: response });\n        }\n      })\n      .catch((error) => {\n        if (this.state.enableSendingGroupMessage !== false) {\n          this.setState({ enableSendingGroupMessage: false });\n        }\n      });\n  };\n\n  enableHideDeletedMessages = () => {\n    this.getContext()\n      .FeatureRestriction.isHideDeletedMessagesEnabled()\n      .then((response) => {\n        if (response !== this.state.enableHideDeletedMessages) {\n          this.setState({ enableHideDeletedMessages: response });\n        }\n      })\n      .catch((error) => {\n        if (this.state.enableHideDeletedMessages !== false) {\n          this.setState({ enableHideDeletedMessages: false });\n        }\n      });\n  };\n\n  getContext = () => {\n    if (this.props._parent.length) {\n      return this.context;\n    } else {\n      return this.contextProviderRef.state;\n    }\n  };\n\n  actionHandler = (action, messages, key, group, options) => {\n    switch (action) {\n      case enums.ACTIONS[\"CUSTOM_MESSAGE_RECEIVED\"]:\n      case enums.ACTIONS[\"MESSAGE_RECEIVED\"]:\n        {\n          const message = messages[0];\n          if (message.parentMessageId) {\n            this.updateReplyCount(messages);\n          } else {\n            this.smartReplyPreview(messages);\n            this.appendMessage(messages);\n          }\n\n          SoundManager.play(\n            enums.CONSTANTS.AUDIO[\"INCOMING_MESSAGE\"],\n            this.getContext()\n          );\n        }\n        break;\n      case enums.ACTIONS[\"MESSAGE_READ\"]: {\n        if (this.props?.actionGenerated) {\n          this.props?.actionGenerated(action, messages);\n        }\n\n        break;\n      }\n      case enums.ACTIONS[\"MESSAGE_COMPOSED\"]: {\n        this.appendMessage(messages);\n        break;\n      }\n      case enums.ACTIONS[\"MESSAGE_SENT\"]:\n        this.messageSent(messages);\n        this.getContext().setLastMessage(messages[0]);\n        break;\n      case enums.ACTIONS[\"ERROR_IN_SENDING_MESSAGE\"]:\n        this.messageSent(messages);\n        break;\n      case enums.ACTIONS[\"ON_MESSAGE_READ_DELIVERED\"]:\n        this.updateMessages(messages);\n        break;\n      case enums.ACTIONS[\"ON_MESSAGE_EDITED\"]: {\n        this.updateMessages(messages);\n        //update the parent message of thread message\n        this.updateParentThreadedMessage(key, \"edit\");\n        break;\n      }\n      case enums.ACTIONS[\"ON_MESSAGE_DELETED\"]: {\n        this.removeMessages(messages);\n        //remove the thread message\n        this.updateParentThreadedMessage(messages[0], \"delete\");\n        break;\n      }\n      case enums.ACTIONS[\"MESSAGES_FETCHED\"]:\n        this.prependMessages(messages);\n        break;\n      case enums.ACTIONS[\"REFRESHING_MESSAGES\"]:\n        this.refreshingMessages();\n        break;\n      case enums.ACTIONS[\"MESSAGES_REFRESHED\"]:\n        this.messageRefreshed(messages);\n        break;\n      case enums.ACTIONS[\"NEW_MESSAGES\"]:\n        this.newMessagesArrived(messages);\n        break;\n      case enums.ACTIONS[\"CLEAR_UNREAD_MESSAGES\"]:\n        this.jumpToMessages(true);\n        break;\n      case enums.ACTIONS[\"DELETE_MESSAGE\"]:\n        this.deleteMessage(messages);\n        break;\n      case enums.ACTIONS[\"EDIT_MESSAGE\"]:\n        this.editMessage(messages);\n        break;\n      case enums.ACTIONS[\"MESSAGE_EDITED\"]:\n        this.messageEdited(messages);\n        break;\n      case enums.ACTIONS[\"CLEAR_EDIT_PREVIEW\"]:\n        this.clearEditPreview();\n        break;\n      case enums.GROUP_MEMBER_SCOPE_CHANGED:\n      case enums.GROUP_MEMBER_KICKED:\n      case enums.GROUP_MEMBER_BANNED:\n      case enums.GROUP_MEMBER_UNBANNED:\n      case enums.GROUP_MEMBER_ADDED:\n      case enums.GROUP_MEMBER_LEFT:\n      case enums.GROUP_MEMBER_JOINED:\n        this.groupUpdated(action, messages, group, options);\n        break;\n      case enums.INCOMING_CALL_RECEIVED:\n      case enums.INCOMING_CALL_CANCELLED:\n      case enums.OUTGOING_CALL_ACCEPTED:\n      case enums.OUTGOING_CALL_REJECTED:\n        this.appendCallMessage(messages);\n        break;\n      case enums.ACTIONS[\"VIEW_ORIGINAL_IMAGE\"]:\n        this.toggleOriginalImageView(messages);\n        break;\n      case enums.ACTIONS[\"INITIATE_AUDIO_CALL\"]:\n        this.audioCall();\n        break;\n      case enums.ACTIONS[\"INITIATE_VIDEO_CALL\"]:\n        this.videoCall();\n        break;\n      case enums.ACTIONS[\"VIEW_DETAIL\"]:\n      case enums.ACTIONS[\"CLOSE_GROUP_DETAIL\"]:\n      case enums.ACTIONS[\"CLOSE_USER_DETAIL\"]:\n        this.toggleDetailView();\n        break;\n      case enums.ACTIONS[\"TOGGLE_SIDEBAR\"]:\n        this.toggleDetailView();\n        this.props.actionGenerated(action);\n        break;\n      case enums.ACTIONS[\"SEND_LIVE_REACTION\"]:\n        this.toggleReaction(true);\n        break;\n      case enums.ACTIONS[\"SHOW_LIVE_REACTION\"]:\n        this.showReaction(messages);\n        break;\n      case enums.ACTIONS[\"STOP_LIVE_REACTION\"]:\n        this.toggleReaction(false);\n        break;\n      case enums.ACTIONS[\"REACT_TO_MESSAGE\"]:\n        this.reactToMessage(messages);\n        break;\n      case enums.ACTIONS[\"OUTGOING_CALL_ACCEPTED\"]:\n      case enums.ACTIONS[\"USER_JOINED_CALL\"]:\n      case enums.ACTIONS[\"USER_LEFT_CALL\"]:\n      case enums.ACTIONS[\"OUTGOING_CALL_ENDED\"]:\n      case enums.ACTIONS[\"OUTGOING_CALL_REJECTED\"]:\n      case enums.ACTIONS[\"OUTGOING_CALL_CANCELLED\"]:\n      case enums.ACTIONS[\"INCOMING_CALL_ACCEPTED\"]:\n      case enums.ACTIONS[\"INCOMING_CALL_ENDED\"]:\n      case enums.ACTIONS[\"INCOMING_CALL_REJECTED\"]:\n      case enums.ACTIONS[\"DIRECT_CALL_ENDED\"]:\n      case enums.ACTIONS[\"DIRECT_CALL_ERROR\"]:\n        break;\n      case enums.ACTIONS[\"JOIN_DIRECT_CALL\"]: {\n        //if used in a chat widget, trigger the event to the app component as directcall component is included outside of iframe\n        if (Object.keys(this.props.widgetsettings).length) {\n          this.props.actionGenerated(action, messages);\n        } else {\n          const sessionID =\n            this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP\n              ? this.getContext().item.guid\n              : null;\n          this.outgoingDirectCallRef.joinCall(sessionID);\n        }\n\n        break;\n      }\n      case enums.ACTIONS[\"VIEW_THREADED_MESSAGE\"]:\n        this.viewThreadedMessage(messages);\n        break;\n      case enums.ACTIONS[\"THREAD_MESSAGE_COMPOSED\"]:\n        this.threadMessageComposed(messages);\n        break;\n      case enums.ACTIONS[\"CLOSE_THREADED_MESSAGE\"]:\n        this.closeThreadedMessage();\n        break;\n      case enums.ACTIONS[\"ADD_GROUP_MEMBER_SUCCESS\"]:\n        this.appendMemberAddedMessage(messages);\n        break;\n      case enums.ACTIONS[\"UNBAN_GROUP_MEMBER_SUCCESS\"]:\n        this.appendMemberUnbannedMessage(messages);\n        break;\n      case enums.ACTIONS[\"SCOPECHANGE_GROUPMEMBER_SUCCESS\"]:\n        this.appendMemberScopeChangedMessage(messages);\n        break;\n      case enums.ACTIONS[\"ERROR\"]:\n        this.errorHandler(key);\n        break;\n      case enums.ACTIONS[\"INFO\"]:\n        this.infoMessageHandler(key);\n        break;\n      default:\n        break;\n    }\n  };\n\n  errorHandler = (errorCode) => {\n    if (typeof this.toastRef.setError === \"function\") {\n      this.toastRef?.setError(errorCode);\n    }\n  };\n\n  infoMessageHandler = (infoCode) => {\n    if (typeof this.toastRef.setInfo === \"function\") {\n      this.toastRef?.setInfo(infoCode);\n    }\n  };\n\n  appendMemberAddedMessage = (messages) => {\n    //if group action messages are disabled\n    if (this.state.enableGroupActionMessages === false) {\n      return false;\n    }\n\n    const messageList = [];\n    messages.forEach((eachMember) => {\n      const sentAt = (new Date() / 1000) | 0;\n      const messageObj = {\n        receiver: { ...this.context.item },\n        receiverId: this.context.item.guid,\n        receiverType: CometChat.RECEIVER_TYPE.GROUP,\n        sender: { ...this.loggedInUser },\n        category: CometChat.CATEGORY_ACTION,\n        type: CometChat.ACTION_TYPE.TYPE_GROUP_MEMBER,\n        sentAt: sentAt,\n        action: CometChat.ACTION_TYPE.MEMBER_ADDED,\n        actionBy: { ...this.loggedInUser },\n        actionOn: { ...eachMember },\n        actionFor: { ...this.context.item },\n      };\n\n      messageList.push(messageObj);\n    });\n\n    this.appendMessage(messageList);\n  };\n\n  appendMemberUnbannedMessage = (messages) => {\n    //if group action messages are disabled\n    if (this.state.enableGroupActionMessages === false) {\n      return false;\n    }\n\n    const messageList = [];\n    messages.forEach((eachMember) => {\n      const sentAt = (new Date() / 1000) | 0;\n      const messageObj = {\n        receiver: { ...this.context.item },\n        receiverId: this.context.item.guid,\n        receiverType: CometChat.RECEIVER_TYPE.GROUP,\n        sender: { ...this.loggedInUser },\n        category: CometChat.CATEGORY_ACTION,\n        type: CometChat.ACTION_TYPE.TYPE_GROUP_MEMBER,\n        sentAt: sentAt,\n        action: CometChat.ACTION_TYPE.MEMBER_UNBANNED,\n        actionBy: { ...this.loggedInUser },\n        actionOn: { ...eachMember },\n      };\n\n      messageList.push(messageObj);\n    });\n\n    this.appendMessage(messageList);\n  };\n\n  appendMemberScopeChangedMessage = (messages) => {\n    //if group action messages are disabled\n    if (this.state.enableGroupActionMessages === false) {\n      return false;\n    }\n\n    const messageList = [];\n\n    messages.forEach((eachMember) => {\n      const newScope = Translator.translate(eachMember.scope, this.state.lang);\n\n      const sentAt = (new Date() / 1000) | 0;\n      const messageObj = {\n        receiver: { ...this.context.item },\n        receiverId: this.context.item.guid,\n        receiverType: CometChat.RECEIVER_TYPE.GROUP,\n        sender: { ...this.loggedInUser },\n        category: CometChat.CATEGORY_ACTION,\n        type: CometChat.ACTION_TYPE.TYPE_GROUP_MEMBER,\n        sentAt: sentAt,\n        action: CometChat.ACTION_TYPE.MEMBER_SCOPE_CHANGED,\n        actionBy: { ...this.loggedInUser },\n        actionOn: { ...eachMember },\n        newScope: newScope,\n      };\n      messageList.push(messageObj);\n    });\n\n    this.appendMessage(messageList);\n  };\n\n  toggleOriginalImageView = (message) => {\n    this.setState({ viewOriginalImage: message });\n  };\n\n  toggleDetailView = () => {\n    let viewdetail = !this.state.viewdetailscreen;\n    this.setState({ viewdetailscreen: viewdetail, threadmessageview: false });\n  };\n\n  viewThreadedMessage = (parentMessage) => {\n    const message = { ...parentMessage };\n    const threaditem = { ...this.getContext().item };\n    this.setState({\n      threadmessageview: true,\n      threadmessageparent: message,\n      threadmessageitem: threaditem,\n      threadmessagetype: this.getContext().type,\n      viewdetailscreen: false,\n    });\n  };\n\n  threadMessageComposed = (messages) => {\n    if (this.getContext().type !== this.state.threadmessagetype) {\n      return false;\n    }\n\n    if (\n      (this.state.threadmessagetype === CometChat.ACTION_TYPE.TYPE_GROUP &&\n        this.getContext().item.guid !== this.state.threadmessageitem.guid) ||\n      (this.state.threadmessagetype === CometChat.ACTION_TYPE.TYPE_USER &&\n        this.getContext().item.uid !== this.state.threadmessageitem.uid)\n    ) {\n      return false;\n    }\n\n    this.updateReplyCount(messages);\n  };\n\n  closeThreadedMessage = () => {\n    this.setState({ threadmessageview: false, viewdetailscreen: false });\n  };\n\n  /*\n\tUpdating parent message of threaded conversation, when the message is edited or deleted\n\t*/\n  updateParentThreadedMessage = (message, action) => {\n    if (\n      this.state.threadmessageview === false ||\n      message.id !== this.state.threadmessageparent.id\n    ) {\n      return false;\n    }\n\n    if (action === \"delete\") {\n      this.setState({\n        threadmessageparent: { ...message },\n        threadmessageview: false,\n      });\n    } else {\n      this.setState({ threadmessageparent: { ...message } });\n    }\n  };\n\n  getReceiverDetails = () => {\n    let receiverId;\n    let receiverType;\n\n    if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER) {\n      receiverId = this.getContext().item.uid;\n      receiverType = CometChat.RECEIVER_TYPE.USER;\n    } else if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP) {\n      receiverId = this.getContext().item.guid;\n      receiverType = CometChat.RECEIVER_TYPE.GROUP;\n    }\n\n    return { receiverId: receiverId, receiverType: receiverType };\n  };\n\n  audioCall = () => {\n    const { receiverId, receiverType } = this.getReceiverDetails();\n    const call = new CometChat.Call(\n      receiverId,\n      CometChat.CALL_TYPE.AUDIO,\n      receiverType\n    );\n    CometChat.initiateCall(call)\n      .then((outgoingCall) => {\n        //when this component is part of chat widget trigger an event.. (outgoingcall component is used separately in chat widget)\n        if (Object.keys(this.props.widgetsettings).length) {\n          this.props.actionGenerated(\n            enums.ACTIONS[\"START_AUDIO_CALL\"],\n            outgoingCall\n          );\n        } else {\n          this.outgoingCallRef.startCall(outgoingCall);\n          this.appendCallMessage(outgoingCall);\n        }\n      })\n      .catch((error) => this.errorHandler(\"SOMETHING_WRONG\"));\n  };\n\n  videoCall = () => {\n    /*\n\t\tDirect calling for groups\n\t\t*/\n    if (this.getContext().type === CometChat.RECEIVER_TYPE.GROUP) {\n      if (Object.keys(this.props.widgetsettings).length) {\n        this.props.actionGenerated(enums.ACTIONS[\"START_DIRECT_CALL\"]);\n      } else {\n        const sessionID =\n          this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP\n            ? this.getContext().item.guid\n            : null;\n        this.outgoingDirectCallRef.startCall(sessionID);\n      }\n      return;\n    }\n\n    /*\n\t\tDefault calling for one-on-one\n\t\t*/\n    const { receiverId, receiverType } = this.getReceiverDetails();\n    const call = new CometChat.Call(\n      receiverId,\n      CometChat.CALL_TYPE.VIDEO,\n      receiverType\n    );\n    CometChat.initiateCall(call)\n      .then((outgoingCall) => {\n        //when this component is part of chat widget trigger an event.. (outgoingcall component is used separately in chat widget)\n        if (Object.keys(this.props.widgetsettings).length) {\n          this.props.actionGenerated(\n            enums.ACTIONS[\"START_VIDEO_CALL\"],\n            outgoingCall\n          );\n        } else {\n          this.outgoingCallRef.startCall(outgoingCall);\n        }\n      })\n      .catch((error) => this.errorHandler(\"SOMETHING_WRONG\"));\n  };\n\n  toggleReaction = (flag) => {\n    this.setState({ liveReaction: flag });\n  };\n\n  showReaction = (reaction) => {\n    if (\n      reaction.metadata.type === enums.CONSTANTS[\"METADATA_TYPE_LIVEREACTION\"]\n    ) {\n      this.reactionName = reaction.metadata.reaction;\n      this.setState({ liveReaction: true });\n    }\n  };\n\n  deleteMessage = (message) => {\n    const messageId = message.id;\n    CometChat.deleteMessage(messageId)\n      .then((deletedMessage) => {\n        //remove edit preview when message is deleted\n        if (deletedMessage.id === this.state.messageToBeEdited.id) {\n          this.setState({ messageToBeEdited: \"\" });\n        }\n\n        const messageList = [...this.state.messageList];\n        let messageKey = messageList.findIndex((m) => m.id === message.id);\n\n        if (messageList.length - messageKey === 1 && !message.replyCount) {\n          this.getContext().setLastMessage(deletedMessage);\n        }\n\n        this.removeMessages([deletedMessage]);\n        this.updateParentThreadedMessage(deletedMessage, \"delete\");\n      })\n      .catch((error) => this.errorHandler(\"SOMETHING_WRONG\"));\n  };\n\n  editMessage = (message) => {\n    this.setState({ messageToBeEdited: message, replyPreview: null });\n  };\n\n  messageEdited = (message) => {\n    const messageList = [...this.state.messageList];\n    let messageKey = messageList.findIndex((m) => m.id === message.id);\n    if (messageKey > -1) {\n      const messageObj = messageList[messageKey];\n\n      const newMessageObj = Object.assign({}, messageObj, message);\n\n      messageList.splice(messageKey, 1, newMessageObj);\n      this.updateMessages(messageList);\n\n      this.updateParentThreadedMessage(newMessageObj, \"edit\");\n\n      if (messageList.length - messageKey === 1 && !message.replyCount) {\n        this.getContext().setLastMessage(newMessageObj);\n      }\n    }\n  };\n\n  messageSent = (messages) => {\n    const message = messages[0];\n    const messageList = [...this.state.messageList];\n\n    let messageKey = messageList.findIndex((m) => m._id === message._id);\n    if (messageKey > -1) {\n      const newMessageObj = { ...message };\n\n      messageList.splice(messageKey, 1, newMessageObj);\n      messageList.sort((a, b) => a.id - b.id);\n      this.setState({ messageList: messageList, scrollToBottom: true });\n    }\n  };\n\n  refreshingMessages = () => {\n    this.setState({\n      messageList: [],\n      messageToBeEdited: \"\",\n      replyPreview: null,\n      liveReaction: false,\n      messageToReact: null,\n    });\n    this.getContext().clearUnreadMessages();\n  };\n\n  messageRefreshed = (messages) => {\n    const messageList = [...messages];\n    this.setState({ messageList: messageList, scrollToBottom: true });\n  };\n\n  newMessagesArrived = (newMessage) => {\n    this.getContext().setUnreadMessages(newMessage);\n  };\n\n  markMessagesAsRead = (scrollToBottom) => {\n    if (this.getContext().unreadMessages.length === 0) {\n      return false;\n    }\n\n    let unreadMessages = [...this.getContext().unreadMessages];\n    let messageList = [...this.state.messageList];\n\n    unreadMessages.forEach((unreadMessage) => {\n      if (unreadMessage.getReceiverType() === CometChat.RECEIVER_TYPE.USER) {\n        if (this.messageListRef) {\n          messageList.push(unreadMessage);\n          this.messageListRef.markMessageAsRead(\n            unreadMessage,\n            CometChat.ACTION_TYPE.TYPE_USER\n          );\n        }\n      } else if (\n        unreadMessage.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP\n      ) {\n        if (this.messageListRef) {\n          messageList.push(unreadMessage);\n          this.messageListRef.markMessageAsRead(\n            unreadMessage,\n            CometChat.ACTION_TYPE.TYPE_GROUP\n          );\n        }\n      }\n    });\n\n    this.getContext().clearUnreadMessages();\n    //this.props.actionGenerated(\"unreadMessages\", []);\n\n    this.setState({ messageList: messageList, scrollToBottom: scrollToBottom });\n  };\n\n  jumpToMessages = () => {\n    if (this.getContext().unreadMessages.length === 0) {\n      return false;\n    }\n\n    let unreadMessages = [...this.getContext().unreadMessages];\n    let messageList = [...this.state.messageList];\n    messageList = messageList.concat(unreadMessages);\n\n    this.getContext().clearUnreadMessages();\n    this.getContext().setClearedUnreadMessages(true);\n\n    if (messageList.length > enums.CONSTANTS[\"MAX_MESSAGE_COUNT\"]) {\n      if (this.messageListRef) {\n        this.messageListRef.reInitializeMessageBuilder();\n      }\n    } else {\n      this.markMessagesAsRead(true);\n    }\n  };\n\n  //messages are deleted\n  removeMessages = (messages) => {\n    const deletedMessage = messages[0];\n    const messagelist = [...this.state.messageList];\n\n    let messageKey = messagelist.findIndex(\n      (message) => message.id === deletedMessage.id\n    );\n    if (messageKey > -1) {\n      if (this.state.enableHideDeletedMessages) {\n        messagelist.splice(messageKey, 1);\n      } else {\n        let messageObj = { ...messagelist[messageKey] };\n        let newMessageObj = Object.assign({}, messageObj, deletedMessage);\n\n        messagelist.splice(messageKey, 1, newMessageObj);\n      }\n\n      this.setState({ messageList: messagelist, scrollToBottom: false });\n    }\n  };\n\n  //messages are fetched from backend\n  prependMessages = (messages) => {\n    const messageList = [...messages, ...this.state.messageList];\n    this.setState({ messageList: messageList, scrollToBottom: false });\n  };\n\n  //message is received or composed & sent\n  appendMessage = (message) => {\n    let messages = [...this.state.messageList, ...message];\n    this.setState({ messageList: messages, scrollToBottom: true });\n  };\n\n  //message status is updated\n  updateMessages = (messages) => {\n    this.setState({ messageList: messages, scrollToBottom: false });\n  };\n\n  groupUpdated = (action, message, group, options) => {\n    //if group action messages are disabled\n    if (this.state.enableGroupActionMessages === true) {\n      this.appendMessage([message]);\n    }\n\n    this.props.actionGenerated(action, message, group, options);\n  };\n\n  appendCallMessage = (message) => {\n    //if call action messages are disabled\n    if (this.state.enableCallActionMessages === false) {\n      return false;\n    }\n\n    this.appendMessage([message]);\n  };\n\n  updateReplyCount = (messages) => {\n    const receivedMessage = messages[0];\n\n    let messageList = [...this.state.messageList];\n    let messageKey = messageList.findIndex(\n      (m) => m.id === receivedMessage.parentMessageId\n    );\n    if (messageKey > -1) {\n      const messageObj = messageList[messageKey];\n      let replyCount = messageObj.hasOwnProperty(\"replyCount\")\n        ? messageObj.replyCount\n        : 0;\n      replyCount = replyCount + 1;\n      const newMessageObj = Object.assign({}, messageObj, {\n        replyCount: replyCount,\n      });\n\n      messageList.splice(messageKey, 1, newMessageObj);\n      this.setState({ messageList: messageList, scrollToBottom: false });\n    }\n  };\n\n  smartReplyPreview = (messages) => {\n    const message = messages[0];\n    if (\n      message.sender.uid === this.loggedInUser.uid ||\n      message.category === CometChat.CATEGORY_CUSTOM\n    ) {\n      return false;\n    }\n\n    /**\n     * If smart-replies feature is enabled\n     */\n    this.getContext()\n      .FeatureRestriction.isSmartRepliesEnabled()\n      .then((response) => {\n        if (response === true) {\n          const smartReplyData = checkMessageForExtensionsData(\n            message,\n            \"smart-reply\"\n          );\n          if (\n            smartReplyData &&\n            smartReplyData.hasOwnProperty(\"error\") === false\n          ) {\n            this.setState({ replyPreview: message });\n          } else {\n            this.setState({ replyPreview: null });\n          }\n        }\n      });\n  };\n\n  clearEditPreview = () => {\n    this.setState({ messageToBeEdited: \"\" });\n  };\n\n  reactToMessage = (message) => {\n    this.setState({ messageToReact: message });\n\n    if (this.composerRef) {\n      this.composerRef.toggleEmojiPicker();\n    }\n  };\n\n  render() {\n    /**\n     * If used as standalone component\n     */\n    if (\n      this.props._parent.trim().length === 0 &&\n      this.props.chatWithUser.trim().length === 0 &&\n      this.props.chatWithGroup.trim().length === 0\n    ) {\n      return (\n        <CometChatContextProvider\n          ref={(el) => (this.contextProviderRef = el)}\n          _component={enums.CONSTANTS[\"MESSAGES_COMPONENT\"]}\n          user={this.props.chatWithUser}\n          group={this.props.chatWithGroup}\n        >\n          <div></div>\n        </CometChatContextProvider>\n      );\n    } else if (\n      this.props._parent.trim().length &&\n      Object.keys(this.getContext().item).length === 0\n    ) {\n      return null;\n    }\n\n    let messageComposer = (\n      <CometChatMessageComposer\n        ref={(el) => {\n          this.composerRef = el;\n        }}\n        theme={this.props.theme}\n        lang={this.state.lang}\n        widgetsettings={this.props.widgetsettings}\n        messageToBeEdited={this.state.messageToBeEdited}\n        replyPreview={this.state.replyPreview}\n        reaction={this.reactionName}\n        messageToReact={this.state.messageToReact}\n        actionGenerated={this.actionHandler}\n      />\n    );\n\n    let newMessageIndicator = null;\n    if (this.getContext()?.unreadMessages.length) {\n      const unreadMessageCount = this.getContext().unreadMessages.length;\n      const messageText =\n        unreadMessageCount > 1\n          ? `${unreadMessageCount} ${Translator.translate(\n              \"NEW_MESSAGES\",\n              this.state.lang\n            )}`\n          : `${unreadMessageCount} ${Translator.translate(\n              \"NEW_MESSAGE\",\n              this.state.lang\n            )}`;\n      newMessageIndicator = (\n        <div css={messagePaneTopStyle()} className=\"message_pane__top\">\n          <div\n            css={messagePaneBannerStyle(this.context)}\n            className=\"message_pane__banner\"\n          >\n            <div\n              css={messagePaneUnreadBannerStyle()}\n              className=\"message_pane__unread_banner__banner\"\n              title={Translator.translate(\"JUMP\", this.state.lang)}\n            >\n              <button\n                type=\"button\"\n                css={messagePaneUnreadBannerMessageStyle(this.context)}\n                className=\"message_pane__unread_banner__msg\"\n                onClick={this.jumpToMessages}\n              >\n                <span css={iconArrowDownStyle()} className=\"icon--arrow-down\">\n                  &#x2193;{\" \"}\n                </span>\n                {messageText}\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    //if sending messages are disabled for chat wigdet in dashboard\n    if (\n      (this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER &&\n        this.state.enableSendingOneOnOneMessage === false) ||\n      (this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP &&\n        this.state.enableSendingGroupMessage === false)\n    ) {\n      messageComposer = null;\n    }\n\n    let liveReactionView = null;\n    if (this.state.liveReaction) {\n      liveReactionView = (\n        <div css={reactionsWrapperStyle()}>\n          <CometChatLiveReactions\n            reaction={this.reactionName}\n            theme={this.props.theme}\n            lang={this.state.lang}\n          />\n        </div>\n      );\n    }\n\n    /*\n\t\tIf used as a standalone component\n\t\t*/\n    let incomingCallView = null;\n    let incomingDirectCallView = null;\n    if (this.props._parent.trim().length === 0) {\n      incomingCallView = (\n        <CometChatIncomingCall\n          theme={this.props.theme}\n          lang={this.state.lang}\n          actionGenerated={this.actionHandler}\n        />\n      );\n\n      incomingDirectCallView = (\n        <CometChatIncomingDirectCall\n          theme={this.props.theme}\n          lang={this.state.lang}\n          actionGenerated={this.actionHandler}\n        />\n      );\n    }\n\n    //don't include it when opened in chat widget\n    let outgoingDirectCallView = null;\n    let outgoingCallView = null;\n    if (Object.keys(this.props.widgetsettings).length === 0) {\n      outgoingCallView = (\n        <CometChatOutgoingCall\n          ref={(el) => (this.outgoingCallRef = el)}\n          theme={this.props.theme}\n          lang={this.state.lang}\n          actionGenerated={this.actionHandler}\n        />\n      );\n      outgoingDirectCallView = (\n        <CometChatOutgoingDirectCall\n          ref={(el) => (this.outgoingDirectCallRef = el)}\n          theme={this.props.theme}\n          lang={this.state.lang}\n          actionGenerated={this.actionHandler}\n        />\n      );\n    }\n\n    let detailScreen = null;\n    if (this.state.viewdetailscreen) {\n      if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_USER) {\n        detailScreen = (\n          <div\n            css={chatSecondaryStyle(this.props, this.context)}\n            className=\"chat__secondary-view\"\n          >\n            <CometChatUserDetails\n              theme={this.props.theme}\n              lang={this.state.lang}\n              actionGenerated={this.actionHandler}\n            />\n          </div>\n        );\n      } else if (this.getContext().type === CometChat.ACTION_TYPE.TYPE_GROUP) {\n        detailScreen = (\n          <div\n            css={chatSecondaryStyle(this.props, this.context)}\n            className=\"chat__secondary-view\"\n          >\n            <CometChatGroupDetails\n              theme={this.props.theme}\n              lang={this.state.lang}\n              actionGenerated={this.actionHandler}\n            />\n          </div>\n        );\n      }\n    }\n\n    let threadMessageView = null;\n    if (this.state.threadmessageview) {\n      threadMessageView = (\n        <div\n          css={chatSecondaryStyle(this.props, this.context)}\n          className=\"chat__secondary-view\"\n        >\n          <CometChatMessageThread\n            theme={this.props.theme}\n            activeTab={this.state.activeTab}\n            threadItem={this.state.threadmessageitem}\n            threadType={this.state.threadmessagetype}\n            parentMessage={this.state.threadmessageparent}\n            loggedInUser={this.loggedInUser}\n            lang={this.state.lang}\n            widgetsettings={this.props.widgetsettings}\n            actionGenerated={this.actionHandler}\n          />\n        </div>\n      );\n    }\n\n    let originalImageView = null;\n    if (this.state.viewOriginalImage) {\n      originalImageView = (\n        <CometChatImageViewer\n          close={() => this.toggleOriginalImageView(false)}\n          message={this.state.viewOriginalImage}\n          lang={this.state.lang}\n        />\n      );\n    }\n\n    let messageComponent = (\n      <React.Fragment>\n        <div\n          css={chatWrapperStyle(this.props, this.state, this.context)}\n          className=\"main__chat\"\n          dir={Translator.getDirection(this.state.lang)}\n        >\n          <CometChatMessageHeader\n            sidebar={this.props.sidebar}\n            theme={this.props.theme}\n            lang={this.state.lang}\n            viewdetail={this.props.viewdetail === false ? false : true}\n            widgetsettings={this.props.widgetsettings}\n            actionGenerated={this.actionHandler}\n          />\n          <CometChatMessageList\n            ref={(el) => {\n              this.messageListRef = el;\n            }}\n            theme={this.props.theme}\n            messages={this.state.messageList}\n            lang={this.state.lang}\n            scrollToBottom={this.state.scrollToBottom}\n            messageconfig={this.props.messageconfig}\n            widgetsettings={this.props.widgetsettings}\n            widgetconfig={this.props.widgetconfig}\n            actionGenerated={this.actionHandler}\n          />\n          {liveReactionView}\n          {messageComposer}\n          {newMessageIndicator}\n        </div>\n        <CometChatToastNotification ref={(el) => (this.toastRef = el)} />\n        {originalImageView}\n        {detailScreen}\n        {threadMessageView}\n        {incomingCallView}\n        {outgoingCallView}\n        {incomingDirectCallView}\n        {outgoingDirectCallView}\n      </React.Fragment>\n    );\n\n    let messageWrapper = messageComponent;\n    /*\n\t\tIf used as a standalone component\n\t\t**/\n    if (this.props._parent.trim().length === 0) {\n      messageWrapper = (\n        <CometChatContextProvider\n          ref={(el) => (this.contextProviderRef = el)}\n          user={this.props.chatWithUser}\n          group={this.props.chatWithGroup}\n        >\n          <div css={chatContainerStyle()}>{messageComponent}</div>\n        </CometChatContextProvider>\n      );\n    }\n\n    return messageWrapper;\n  }\n}\n\n// Specifies the default values for props:\nCometChatMessages.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n  _parent: \"\",\n  widgetsettings: {},\n  chatWithUser: \"\",\n  chatWithGroup: \"\",\n};\n\nCometChatMessages.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n  _parent: PropTypes.string,\n  widgetsettings: PropTypes.object,\n  chatWithUser: PropTypes.string,\n  chatWithGroup: PropTypes.string,\n};\n\nexport { CometChatMessages };\n"]},"metadata":{},"sourceType":"module"}