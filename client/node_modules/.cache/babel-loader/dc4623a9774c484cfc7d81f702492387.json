{"ast":null,"code":"import _extends from \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatReceiverPollMessageBubble/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatMessageActions, CometChatThreadedMessageReplyCount, CometChatReadReceipt } from \"../../\";\nimport { CometChatMessageReactions } from \"../\";\nimport { CometChatAvatar } from \"../../../Shared\";\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport { checkMessageForExtensionsData } from \"../../../../util/common\";\nimport * as enums from \"../../../../util/enums.js\";\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\nimport { messageContainerStyle, messageWrapperStyle, messageThumbnailStyle, messageDetailStyle, nameWrapperStyle, nameStyle, messageTxtContainerStyle, messageTxtWrapperStyle, pollQuestionStyle, pollAnswerStyle, pollPercentStyle, answerWrapperStyle, checkIconStyle, pollTotalStyle, messageInfoWrapperStyle, messageReactionsWrapperStyle } from \"./style\";\nimport checkImg from \"./resources/checkmark.svg\";\n\nclass CometChatReceiverPollMessageBubble extends React.Component {\n  constructor(props) {\n    super(props);\n    this.requestInProgress = null;\n    this.messageFrom = \"receiver\";\n\n    this.answerPollQuestion = (event, selectedOption) => {\n      CometChat.callExtension('polls', 'POST', 'v2/vote', {\n        vote: selectedOption,\n        id: this.pollId\n      }).then(response => {\n        if (response.hasOwnProperty(\"success\") === false || response.hasOwnProperty(\"success\") && response[\"success\"] === false) {\n          this.props.actionGenerated(enums.ACTIONS[\"ERROR\"], [], \"SOMETHING_WRONG\");\n        }\n      }).catch(error => this.props.actionGenerated(enums.ACTIONS[\"ERROR\"], [], \"SOMETHING_WRONG\"));\n    };\n\n    this.handleMouseHover = () => {\n      this.setState(this.toggleHoverState);\n    };\n\n    this.toggleHoverState = state => {\n      return {\n        isHovering: !state.isHovering\n      };\n    };\n\n    const message = Object.assign({}, props.message, {\n      messageFrom: this.messageFrom\n    });\n    this.state = {\n      message: message,\n      isHovering: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const previousMessageStr = JSON.stringify(prevProps.message);\n    const currentMessageStr = JSON.stringify(this.props.message);\n\n    if (previousMessageStr !== currentMessageStr) {\n      const message = Object.assign({}, this.props.message, {\n        messageFrom: this.messageFrom\n      });\n      this.setState({\n        message: message\n      });\n    }\n  }\n\n  render() {\n    if (!this.state.message.hasOwnProperty(\"metadata\")) {\n      return null;\n    }\n\n    if (!this.state.message.metadata.hasOwnProperty(\"@injected\")) {\n      return null;\n    }\n\n    if (!this.state.message.metadata[\"@injected\"].hasOwnProperty(\"extensions\")) {\n      return null;\n    }\n\n    if (!this.state.message.metadata[\"@injected\"][\"extensions\"].hasOwnProperty(\"polls\")) {\n      return null;\n    }\n\n    let avatar = null,\n        name = null;\n\n    if (this.state.message.receiverType === CometChat.RECEIVER_TYPE.GROUP) {\n      avatar = jsx(\"div\", {\n        css: messageThumbnailStyle,\n        className: \"message__thumbnail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }\n      }, jsx(CometChatAvatar, {\n        user: this.state.message.sender,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }\n      }));\n      name = jsx(\"div\", {\n        css: nameWrapperStyle(avatar),\n        className: \"message__name__wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }\n      }, jsx(\"span\", {\n        css: nameStyle(this.context),\n        className: \"message__name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }\n      }, this.state.message.sender.name));\n    }\n\n    const pollOptions = [];\n    const pollExtensionData = this.state.message.metadata[\"@injected\"][\"extensions\"][\"polls\"];\n    this.pollId = pollExtensionData.id;\n    const total = pollExtensionData.results.total;\n    let totalText = Translator.translate(\"NO_VOTE\", this.props.lang);\n\n    if (total === 1) {\n      totalText = `${total} ${Translator.translate(\"VOTE\", this.props.lang)}`;\n    } else if (total > 1) {\n      totalText = `${total} ${Translator.translate(\"VOTES\", this.props.lang)}`;\n    }\n\n    for (const option in pollExtensionData.options) {\n      const optionData = pollExtensionData.results.options[option];\n      const vote = optionData[\"count\"];\n      let width = \"0%\";\n\n      if (total) {\n        const fraction = vote / total;\n        width = fraction.toLocaleString(\"en\", {\n          style: 'percent'\n        });\n      }\n\n      let checkIcon = null;\n\n      if (optionData.hasOwnProperty(\"voters\") && optionData.voters.hasOwnProperty(this.props.loggedInUser.uid)) {\n        checkIcon = jsx(\"i\", {\n          css: checkIconStyle(checkImg, this.context),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 29\n          }\n        });\n      }\n\n      const template = jsx(\"li\", {\n        key: option,\n        onClick: event => this.answerPollQuestion(event, option),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 17\n        }\n      }, jsx(\"div\", {\n        css: pollPercentStyle(this.context, width),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }\n      }, \" \"), jsx(\"div\", {\n        css: answerWrapperStyle(this.props, optionData, this.context),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }\n      }, checkIcon, jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }\n      }, width), jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }\n      }, optionData.text)));\n      pollOptions.push(template);\n    }\n\n    let messageReactions = null;\n    const reactionsData = checkMessageForExtensionsData(this.state.message, \"reactions\");\n\n    if (reactionsData) {\n      if (Object.keys(reactionsData).length) {\n        messageReactions = jsx(\"div\", {\n          css: messageReactionsWrapperStyle(),\n          className: \"message__reaction__wrapper\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 21\n          }\n        }, jsx(CometChatMessageReactions, _extends({}, this.props, {\n          message: this.state.message,\n          reaction: reactionsData,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }\n        })));\n      }\n    }\n\n    let toolTipView = null;\n\n    if (this.state.isHovering) {\n      toolTipView = jsx(CometChatMessageActions, _extends({}, this.props, {\n        message: this.state.message,\n        name: name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 28\n        }\n      }));\n    }\n\n    return jsx(\"div\", {\n      css: messageContainerStyle(),\n      className: \"receiver__message__container message__poll\",\n      onMouseEnter: this.handleMouseHover,\n      onMouseLeave: this.handleMouseHover,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }\n    }, jsx(\"div\", {\n      css: messageWrapperStyle(),\n      className: \"message__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }\n    }, avatar, jsx(\"div\", {\n      css: messageDetailStyle(),\n      className: \"message__details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    }, name, toolTipView, jsx(\"div\", {\n      css: messageTxtContainerStyle(),\n      className: \"message__poll__container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }\n    }, jsx(\"div\", {\n      css: messageTxtWrapperStyle(this.context),\n      className: \"message__poll__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 29\n      }\n    }, jsx(\"p\", {\n      css: pollQuestionStyle(),\n      className: \"poll__question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 33\n      }\n    }, pollExtensionData.question), jsx(\"ul\", {\n      css: pollAnswerStyle(this.context),\n      className: \"poll__options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 33\n      }\n    }, pollOptions), jsx(\"p\", {\n      css: pollTotalStyle(),\n      className: \"poll__votes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 33\n      }\n    }, totalText))), messageReactions, jsx(\"div\", {\n      css: messageInfoWrapperStyle(),\n      className: \"message__info__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 25\n      }\n    }, jsx(CometChatReadReceipt, _extends({}, this.props, {\n      message: this.state.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 29\n      }\n    })), jsx(CometChatThreadedMessageReplyCount, _extends({}, this.props, {\n      message: this.state.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 29\n      }\n    }))))));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatReceiverPollMessageBubble.contextType = CometChatContext;\nCometChatReceiverPollMessageBubble.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatReceiverPollMessageBubble.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatReceiverPollMessageBubble };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatReceiverPollMessageBubble/index.js"],"names":["React","jsx","PropTypes","CometChat","CometChatMessageActions","CometChatThreadedMessageReplyCount","CometChatReadReceipt","CometChatMessageReactions","CometChatAvatar","CometChatContext","checkMessageForExtensionsData","enums","theme","Translator","messageContainerStyle","messageWrapperStyle","messageThumbnailStyle","messageDetailStyle","nameWrapperStyle","nameStyle","messageTxtContainerStyle","messageTxtWrapperStyle","pollQuestionStyle","pollAnswerStyle","pollPercentStyle","answerWrapperStyle","checkIconStyle","pollTotalStyle","messageInfoWrapperStyle","messageReactionsWrapperStyle","CometChatReceiverPollMessageBubble","Component","constructor","props","requestInProgress","messageFrom","answerPollQuestion","event","selectedOption","callExtension","vote","id","pollId","then","response","hasOwnProperty","actionGenerated","ACTIONS","catch","error","handleMouseHover","setState","toggleHoverState","state","isHovering","message","Object","assign","componentDidUpdate","prevProps","previousMessageStr","JSON","stringify","currentMessageStr","render","metadata","avatar","name","receiverType","RECEIVER_TYPE","GROUP","sender","context","pollOptions","pollExtensionData","total","results","totalText","translate","lang","option","options","optionData","width","fraction","toLocaleString","style","checkIcon","voters","loggedInUser","uid","checkImg","template","text","push","messageReactions","reactionsData","keys","length","toolTipView","question","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CometChatMessageActions, CometChatThreadedMessageReplyCount, CometChatReadReceipt } from \"../../\";\nimport { CometChatMessageReactions } from \"../\";\nimport { CometChatAvatar } from \"../../../Shared\";\n\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport { checkMessageForExtensionsData } from \"../../../../util/common\";\nimport * as enums from \"../../../../util/enums.js\";\n\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\n\nimport {\n    messageContainerStyle,\n    messageWrapperStyle,\n    messageThumbnailStyle,\n    messageDetailStyle,\n    nameWrapperStyle,\n    nameStyle,\n    messageTxtContainerStyle,\n    messageTxtWrapperStyle,\n    pollQuestionStyle,\n    pollAnswerStyle,\n    pollPercentStyle,\n    answerWrapperStyle,\n    checkIconStyle,\n    pollTotalStyle,\n    messageInfoWrapperStyle,\n    messageReactionsWrapperStyle\n} from \"./style\";\n\n\nimport checkImg from \"./resources/checkmark.svg\";\n\nclass CometChatReceiverPollMessageBubble extends React.Component {\n\n    pollId;\n    requestInProgress = null;\n    messageFrom = \"receiver\";\n    static contextType = CometChatContext;\n\n    constructor(props) {\n        super(props);\n\n        const message = Object.assign({}, props.message, { messageFrom: this.messageFrom });\n        this.state = {\n            message: message,\n            isHovering: false\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n\n        const previousMessageStr = JSON.stringify(prevProps.message);\n        const currentMessageStr = JSON.stringify(this.props.message);\n\n        if (previousMessageStr !== currentMessageStr) {\n\n            const message = Object.assign({}, this.props.message, { messageFrom: this.messageFrom });\n            this.setState({ message: message });\n        }\n    }\n\n    answerPollQuestion = (event, selectedOption) => {\n\n        CometChat.callExtension('polls', 'POST', 'v2/vote', {\n            vote: selectedOption,\n            id: this.pollId,\n        })\n        .then(response => {\n\n            if (response.hasOwnProperty(\"success\") === false || (response.hasOwnProperty(\"success\") && response[\"success\"] === false)) {\n                this.props.actionGenerated(enums.ACTIONS[\"ERROR\"], [], \"SOMETHING_WRONG\");\n            }\n        })\n        .catch(error => this.props.actionGenerated(enums.ACTIONS[\"ERROR\"], [], \"SOMETHING_WRONG\"));\n    }\n\n    handleMouseHover = () => {\n        this.setState(this.toggleHoverState);\n    }\n\n    toggleHoverState = (state) => {\n\n        return {\n            isHovering: !state.isHovering,\n        };\n    }\n\n    render() {\n\n        if (!this.state.message.hasOwnProperty(\"metadata\")) {\n            return null;\n        }\n        \n        if (!this.state.message.metadata.hasOwnProperty(\"@injected\")) {\n            return null;\n        }\n\n        if (!this.state.message.metadata[\"@injected\"].hasOwnProperty(\"extensions\")) {\n            return null;\n        }\n\n        if (!this.state.message.metadata[\"@injected\"][\"extensions\"].hasOwnProperty(\"polls\")) {\n            return null;\n        }\n\n        let avatar = null, name = null;\n        if (this.state.message.receiverType === CometChat.RECEIVER_TYPE.GROUP) {\n\n            avatar = (\n                <div css={messageThumbnailStyle} className=\"message__thumbnail\">\n                    <CometChatAvatar user={this.state.message.sender} />\n                </div>\n            );\n\n            name = (<div css={nameWrapperStyle(avatar)} className=\"message__name__wrapper\">\n                <span css={nameStyle(this.context)} className=\"message__name\">{this.state.message.sender.name}</span>\n            </div>);\n        }\n\n        const pollOptions = [];\n        const pollExtensionData = this.state.message.metadata[\"@injected\"][\"extensions\"][\"polls\"];\n        \n        this.pollId = pollExtensionData.id;\n        const total = pollExtensionData.results.total;\n        let totalText = Translator.translate(\"NO_VOTE\", this.props.lang);\n        \n        if(total === 1) {\n            \n            totalText = `${total} ${Translator.translate(\"VOTE\", this.props.lang)}`;\n\n        } else if (total > 1) {\n\n            totalText = `${total} ${Translator.translate(\"VOTES\", this.props.lang)}`;\n        }\n                \n        for (const option in pollExtensionData.options) {\n\n            const optionData = pollExtensionData.results.options[option];\n            const vote = optionData[\"count\"];\n\n            let width = \"0%\";\n            if (total) {\n\n                const fraction = (vote / total);\n                width = fraction.toLocaleString(\"en\", { style: 'percent' });\n            }\n\n            let checkIcon = null;\n            if (optionData.hasOwnProperty(\"voters\") && optionData.voters.hasOwnProperty(this.props.loggedInUser.uid)) {\n                checkIcon = <i css={checkIconStyle(checkImg, this.context)}></i>; \n            }\n\n            const template = (\n                <li key={option} onClick={(event) => this.answerPollQuestion(event, option)}>\n                    <div css={pollPercentStyle(this.context, width)}> </div>\n                    <div css={answerWrapperStyle(this.props, optionData, this.context)}>\n                        {checkIcon}\n                        <span>{width}</span>\n                        <p>{optionData.text}</p>\n                    </div>\n                </li>\n            );\n            pollOptions.push(template);\n        }\n\n        let messageReactions = null;\n        const reactionsData = checkMessageForExtensionsData(this.state.message, \"reactions\");\n        if (reactionsData) {\n\n            if (Object.keys(reactionsData).length) {\n                messageReactions = (\n                    <div css={messageReactionsWrapperStyle()} className=\"message__reaction__wrapper\">\n                        <CometChatMessageReactions {...this.props} message={this.state.message} reaction={reactionsData} />\n                    </div>\n                );\n            }\n        }\n\n        let toolTipView = null;\n        if (this.state.isHovering) {\n            toolTipView = (<CometChatMessageActions {...this.props} message={this.state.message} name={name} />);\n        }\n\n        return (\n            <div \n            css={messageContainerStyle()} \n            className=\"receiver__message__container message__poll\"\n            onMouseEnter={this.handleMouseHover}\n            onMouseLeave={this.handleMouseHover}>\n\n                <div css={messageWrapperStyle()} className=\"message__wrapper\">\n                    {avatar}\n                    <div css={messageDetailStyle()} className=\"message__details\">\n                        {name}\n                        {toolTipView}\n                        <div css={messageTxtContainerStyle()} className=\"message__poll__container\">\n                            <div css={messageTxtWrapperStyle(this.context)} className=\"message__poll__wrapper\">\n                                <p css={pollQuestionStyle()} className=\"poll__question\">{pollExtensionData.question}</p>\n                                <ul css={pollAnswerStyle(this.context)} className=\"poll__options\">\n                                    {pollOptions}\n                                </ul>\n                                <p css={pollTotalStyle()} className=\"poll__votes\">{totalText}</p>\n                            </div>\n                        </div>\n\n                        {messageReactions}\n\n                        <div css={messageInfoWrapperStyle()} className=\"message__info__wrapper\">\n                            <CometChatReadReceipt {...this.props} message={this.state.message} />\n                            <CometChatThreadedMessageReplyCount {...this.props} message={this.state.message} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n// Specifies the default values for props:\nCometChatReceiverPollMessageBubble.defaultProps = {\n    lang: Translator.getDefaultLanguage(),\n    theme: theme\n};\n\nCometChatReceiverPollMessageBubble.propTypes = {\n    lang: PropTypes.string,\n    theme: PropTypes.object\n}\n\nexport { CometChatReceiverPollMessageBubble };"]},"metadata":{},"sourceType":"module"}