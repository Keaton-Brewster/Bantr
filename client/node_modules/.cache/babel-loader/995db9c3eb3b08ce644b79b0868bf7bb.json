{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatStickerKeyboard/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx, keyframes } from '@emotion/core';\nimport PropTypes from 'prop-types';\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport * as enums from \"../../../../util/enums.js\";\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\nimport { stickerWrapperStyle, stickerSectionListStyle, stickerListStyle, sectionListItemStyle, stickerItemStyle, stickerMsgStyle, stickerMsgTxtStyle, stickerCloseStyle } from \"./style\";\nimport closeIcon from \"./resources/close.svg\";\n\nclass CometChatStickerKeyboard extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.getStickers = () => {\n      CometChat.callExtension('stickers', 'GET', 'v1/fetch', null).then(stickers => {\n        // Stickers received\n        let activeStickerSet = null;\n        const customStickers = stickers.hasOwnProperty(\"customStickers\") ? stickers[\"customStickers\"] : [];\n        const defaultStickers = stickers.hasOwnProperty(\"defaultStickers\") ? stickers[\"defaultStickers\"] : [];\n        defaultStickers.sort(function (a, b) {\n          return a.stickerSetOrder - b.stickerSetOrder;\n        });\n        customStickers.sort(function (a, b) {\n          return a.stickerSetOrder - b.stickerSetOrder;\n        });\n        const stickerList = [...defaultStickers, ...customStickers];\n\n        if (stickerList.length === 0) {\n          this.decoratorMessage = Translator.translate(\"NO_STICKERS_FOUND\", this.props.lang);\n        }\n\n        const stickerSet = stickerList.reduce((r, sticker, index) => {\n          const {\n            stickerSetName\n          } = sticker;\n\n          if (index === 0) {\n            activeStickerSet = stickerSetName;\n          }\n\n          r[stickerSetName] = [...(r[stickerSetName] || []), { ...sticker\n          }];\n          return r;\n        }, {});\n        let activeStickerList = [];\n\n        if (Object.keys(stickerSet).length) {\n          Object.keys(stickerSet).forEach(key => {\n            stickerSet[key].sort(function (a, b) {\n              return a.stickerOrder - b.stickerOrder;\n            });\n          });\n          activeStickerList = stickerSet[activeStickerSet];\n        }\n\n        this.setState({\n          \"stickerlist\": stickerList,\n          \"stickerset\": stickerSet,\n          \"activestickerlist\": activeStickerList,\n          \"activestickerset\": activeStickerSet\n        });\n      }).catch(error => {\n        this.decoratorMessage = Translator.translate(\"SOMETHING_WRONG\", this.props.lang);\n        this.setState({\n          \"activestickerlist\": [],\n          \"stickerset\": {}\n        });\n      });\n    };\n\n    this.sendStickerMessage = stickerItem => {\n      this.props.actionGenerated(enums.ACTIONS[\"SEND_STICKER\"], stickerItem);\n    };\n\n    this.onStickerSetClicked = sectionItem => {\n      this.setState({\n        activestickerlist: []\n      }, () => {\n        const stickerSet = { ...this.state.stickerset\n        };\n        const activeStickerList = stickerSet[sectionItem];\n        this.setState({\n          \"activestickerset\": sectionItem,\n          \"activestickerlist\": activeStickerList\n        });\n      });\n    };\n\n    this.decoratorMessage = Translator.translate(\"LOADING\", props.lang);\n    this.state = {\n      stickerlist: [],\n      stickerset: {},\n      activestickerlist: [],\n      activestickerset: null\n    };\n  }\n\n  componentDidMount() {\n    this.getStickers();\n  }\n\n  render() {\n    let messageContainer = null;\n\n    if (this.state.activestickerlist.length === 0) {\n      messageContainer = jsx(\"div\", {\n        css: stickerMsgStyle(),\n        className: \"stickers__decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }\n      }, jsx(\"p\", {\n        css: stickerMsgTxtStyle(this.context),\n        className: \"decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }\n      }, this.decoratorMessage));\n    }\n\n    let stickers = null;\n\n    if (Object.keys(this.state.stickerset).length) {\n      const sectionItems = Object.keys(this.state.stickerset).map((sectionItem, key) => {\n        const stickerSetThumbnail = this.state.stickerset[sectionItem][0][\"stickerUrl\"];\n        return jsx(\"div\", {\n          key: key,\n          className: \"stickers__sectionitem\",\n          css: sectionListItemStyle(),\n          onClick: () => this.onStickerSetClicked(sectionItem),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }\n        }, jsx(\"img\", {\n          src: stickerSetThumbnail,\n          alt: sectionItem,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 21\n          }\n        }));\n      });\n      let activeStickerList = [];\n\n      if (this.state.activestickerlist.length) {\n        const stickerList = [...this.state.activestickerlist];\n        activeStickerList = stickerList.map((stickerItem, key) => {\n          return jsx(\"div\", {\n            key: key,\n            css: stickerItemStyle(this.context),\n            onClick: () => this.sendStickerMessage(stickerItem),\n            className: \"stickers__listitem\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 25\n            }\n          }, jsx(\"img\", {\n            src: stickerItem.stickerUrl,\n            alt: stickerItem.stickerName,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 29\n            }\n          }));\n        });\n      }\n\n      stickers = jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 17\n        }\n      }, jsx(\"div\", {\n        css: stickerCloseStyle(closeIcon, this.context),\n        className: \"stickers__close\",\n        onClick: () => this.props.actionGenerated(enums.ACTIONS[\"CLOSE_STICKER_KEYBOARD\"]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }\n      }), jsx(\"div\", {\n        css: stickerListStyle(this.props),\n        className: \"stickers__list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }\n      }, activeStickerList), jsx(\"div\", {\n        css: stickerSectionListStyle(this.context),\n        className: \"stickers__sections\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }\n      }, sectionItems));\n    }\n\n    return jsx(\"div\", {\n      css: stickerWrapperStyle(this.context, keyframes),\n      className: \"stickers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }, messageContainer, stickers);\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatStickerKeyboard.contextType = CometChatContext;\nCometChatStickerKeyboard.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatStickerKeyboard.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatStickerKeyboard };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatStickerKeyboard/index.js"],"names":["React","jsx","keyframes","PropTypes","CometChat","CometChatContext","enums","theme","Translator","stickerWrapperStyle","stickerSectionListStyle","stickerListStyle","sectionListItemStyle","stickerItemStyle","stickerMsgStyle","stickerMsgTxtStyle","stickerCloseStyle","CometChatStickerKeyboard","PureComponent","constructor","props","getStickers","callExtension","then","stickers","activeStickerSet","customStickers","hasOwnProperty","defaultStickers","sort","a","b","stickerSetOrder","stickerList","length","decoratorMessage","translate","lang","stickerSet","reduce","r","sticker","index","stickerSetName","activeStickerList","Object","keys","forEach","key","stickerOrder","setState","catch","error","sendStickerMessage","stickerItem","actionGenerated","ACTIONS","onStickerSetClicked","sectionItem","activestickerlist","state","stickerset","stickerlist","activestickerset","componentDidMount","render","messageContainer","context","sectionItems","map","stickerSetThumbnail","stickerUrl","stickerName","closeIcon","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, keyframes } from '@emotion/core';\nimport PropTypes from 'prop-types';\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport * as enums from \"../../../../util/enums.js\";\n\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\n\nimport { \n    stickerWrapperStyle, \n    stickerSectionListStyle, \n    stickerListStyle,\n    sectionListItemStyle,\n    stickerItemStyle,\n    stickerMsgStyle,\n    stickerMsgTxtStyle,\n    stickerCloseStyle\n} from \"./style\";\n\nimport closeIcon from \"./resources/close.svg\";\n\nclass CometChatStickerKeyboard extends React.PureComponent {\n\n    static contextType = CometChatContext;\n\n    constructor(props) {\n\n        super(props);\n\n        this.decoratorMessage = Translator.translate(\"LOADING\", props.lang);\n\n        this.state = {\n            stickerlist: [],\n            stickerset: {},\n            activestickerlist: [],\n            activestickerset: null\n        }\n    }\n\n    componentDidMount() {\n        this.getStickers();\n    }\n\n    getStickers = () => {\n\n        CometChat.callExtension('stickers', 'GET', 'v1/fetch', null).then(stickers => {\n\n            // Stickers received\n            let activeStickerSet = null; \n            const customStickers = (stickers.hasOwnProperty(\"customStickers\")) ? stickers[\"customStickers\"] : [];\n            const defaultStickers = (stickers.hasOwnProperty(\"defaultStickers\")) ? stickers[\"defaultStickers\"] : [];\n\n            defaultStickers.sort(function (a, b) {\n                return a.stickerSetOrder - b.stickerSetOrder;\n            });\n\n            customStickers.sort(function (a, b) {\n                return a.stickerSetOrder - b.stickerSetOrder;\n            });\n\n            const stickerList = [...defaultStickers, ...customStickers];\n            \n            if (stickerList.length === 0) {\n                this.decoratorMessage = Translator.translate(\"NO_STICKERS_FOUND\", this.props.lang);\n            }\n\n            const stickerSet = stickerList.reduce((r, sticker, index) => {\n\n                const { stickerSetName } = sticker;\n                if (index === 0) {\n                    activeStickerSet = stickerSetName;\n                }\n\n                r[stickerSetName] = [...r[stickerSetName] || [], { ...sticker}];\n\n                return r;\n            }, {});\n\n            let activeStickerList = [];\n            if (Object.keys(stickerSet).length) {\n\n                Object.keys(stickerSet).forEach(key => {\n                    stickerSet[key].sort(function (a, b) {\n                        return a.stickerOrder - b.stickerOrder;\n                    });\n                });\n\n                activeStickerList = stickerSet[activeStickerSet];\n            }\n            \n            this.setState({ \n                \"stickerlist\": stickerList, \n                \"stickerset\": stickerSet, \n                \"activestickerlist\": activeStickerList, \n                \"activestickerset\": activeStickerSet \n            });\n\n        }).catch(error => {\n            \n            this.decoratorMessage = Translator.translate(\"SOMETHING_WRONG\", this.props.lang);\n            this.setState({ \"activestickerlist\": [], \"stickerset\": {} });\n        });\n    }\n\n    sendStickerMessage = (stickerItem) => {\n        this.props.actionGenerated(enums.ACTIONS[\"SEND_STICKER\"], stickerItem);\n    }\n\n    onStickerSetClicked = (sectionItem) => {\n\n        this.setState({ activestickerlist: [] }, () => {\n\n            const stickerSet = { ...this.state.stickerset };\n            const activeStickerList = stickerSet[sectionItem];\n            this.setState({ \"activestickerset\": sectionItem, \"activestickerlist\": activeStickerList });\n        });\n    }\n\n    render() {\n\n        let messageContainer = null;\n        if (this.state.activestickerlist.length === 0) {\n            messageContainer = (\n                <div css={stickerMsgStyle()} className=\"stickers__decorator-message\">\n                    <p css={stickerMsgTxtStyle(this.context)} className=\"decorator-message\">{this.decoratorMessage}</p>\n                </div>\n            );\n        }\n\n        let stickers = null;\n        if (Object.keys(this.state.stickerset).length) {\n\n            const sectionItems = Object.keys(this.state.stickerset).map((sectionItem, key) => {\n\n                const stickerSetThumbnail = this.state.stickerset[sectionItem][0][\"stickerUrl\"];\n                return( <div  key={key}  className=\"stickers__sectionitem\" css={sectionListItemStyle()}  onClick={() => this.onStickerSetClicked(sectionItem)}>\n                    <img src={stickerSetThumbnail} alt={sectionItem} />\n                </div>\n                );\n            });\n\n            let activeStickerList = [];\n            if (this.state.activestickerlist.length) {\n\n                const stickerList = [...this.state.activestickerlist];\n                activeStickerList = stickerList.map((stickerItem, key) => {\n\n                    return (\n                        <div key={key} css={stickerItemStyle(this.context)} onClick={() => this.sendStickerMessage(stickerItem)} className=\"stickers__listitem\">\n                            <img src={stickerItem.stickerUrl} alt={stickerItem.stickerName} />\n                        </div>\n                    );\n                });\n            }\n\n            stickers = (\n                <React.Fragment>\n                    <div css={stickerCloseStyle(closeIcon, this.context)} className=\"stickers__close\" onClick={() => this.props.actionGenerated(enums.ACTIONS[\"CLOSE_STICKER_KEYBOARD\"])}></div>\n                    <div css={stickerListStyle(this.props)} className=\"stickers__list\">\n                        {activeStickerList}\n                    </div>\n                    <div css={stickerSectionListStyle(this.context)} className=\"stickers__sections\">\n                        {sectionItems}\n                    </div>\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <div css={stickerWrapperStyle(this.context, keyframes)} className=\"stickers\">\n                {messageContainer}\n                {stickers}\n            </div>\n        );\n    }\n}\n\n// Specifies the default values for props:\nCometChatStickerKeyboard.defaultProps = {\n    lang: Translator.getDefaultLanguage(),\n    theme: theme\n};\n\nCometChatStickerKeyboard.propTypes = {\n    lang: PropTypes.string,\n    theme: PropTypes.object\n}\n\nexport { CometChatStickerKeyboard };"]},"metadata":{},"sourceType":"module"}