{"ast":null,"code":"var _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Groups/CometChatAddGroupMemberList/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { AddMembersManager } from \"./controller\";\nimport { CometChatAddGroupMemberListItem } from \"../\";\nimport { CometChatBackdrop } from \"../../Shared\";\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\nimport { modalWrapperStyle, modalCloseStyle, modalBodyStyle, modalCaptionStyle, modalSearchStyle, searchButtonStyle, searchInputStyle, modalListStyle, modalFootStyle, contactMsgStyle, contactMsgTxtStyle, modalErrorStyle } from \"./style\";\nimport addingIcon from \"./resources/adding.svg\";\nimport searchIcon from \"./resources/search.svg\";\nimport clearIcon from \"./resources/close.svg\";\n\nclass CometChatAddGroupMemberList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.userUpdated = user => {\n      let userlist = [...this.state.userlist]; //search for user\n\n      let userKey = userlist.findIndex((u, k) => u.uid === user.uid); //if found in the list, update user object\n\n      if (userKey > -1) {\n        let userObj = userlist[userKey];\n        let newUserObj = Object.assign({}, userObj, user);\n        userlist.splice(userKey, 1, newUserObj);\n        this.setState({\n          userlist: userlist\n        });\n      }\n    };\n\n    this.handleScroll = e => {\n      const bottom = Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) === Math.round(e.currentTarget.clientHeight);\n      if (bottom) this.getUsers();\n    };\n\n    this.searchUsers = e => {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      let val = e.target.value;\n      this.AddMembersManager = new AddMembersManager(this.context, val);\n      this.AddMembersManager.initializeMembersRequest().then(() => {\n        this.timeout = setTimeout(() => {\n          this.setState({\n            userlist: [],\n            membersToAdd: [],\n            membersToRemove: [],\n            filteredlist: [],\n            decoratorMessage: Translator.translate(\"LOADING\", this.props.lang)\n          }, () => this.getUsers());\n        }, 500);\n      });\n    };\n\n    this.getUsers = () => {\n      this.AddMembersManager.fetchNextUsers().then(userList => {\n        const filteredUserList = userList.filter(user => {\n          const found = this.context.groupMembers.find(member => user.uid === member.uid);\n          const foundbanned = this.context.bannedGroupMembers.find(member => user.uid === member.uid);\n\n          if (found || foundbanned) {\n            return false;\n          }\n\n          return true;\n        });\n\n        if (filteredUserList.length === 0) {\n          this.setState({\n            decoratorMessage: Translator.translate(\"NO_USERS_FOUND\", this.props.lang)\n          });\n        }\n\n        this.setState({\n          userlist: [...this.state.userlist, ...userList],\n          filteredlist: [...this.state.filteredlist, ...filteredUserList]\n        });\n      }).catch(error => this.setState({\n        decoratorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n      }));\n    };\n\n    this.membersUpdated = (user, userState) => {\n      if (userState) {\n        const members = [...this.state.membersToAdd];\n        members.push(user);\n        this.setState({\n          membersToAdd: [...members]\n        });\n      } else {\n        const membersToAdd = [...this.state.membersToAdd];\n        const IndexFound = membersToAdd.findIndex(member => member.uid === user.uid);\n\n        if (IndexFound > -1) {\n          membersToAdd.splice(IndexFound, 1);\n          this.setState({\n            membersToAdd: [...membersToAdd]\n          });\n        }\n      }\n    };\n\n    this.updateMembers = () => {\n      const guid = this.context.item.guid;\n      const membersList = [];\n      this.state.membersToAdd.forEach(newmember => {\n        //if a selected member is already part of the member list, don't add\n        const IndexFound = this.context.groupMembers.findIndex(member => member.uid === newmember.uid);\n\n        if (IndexFound === -1) {\n          const newMember = new CometChat.GroupMember(newmember.uid, CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT);\n          membersList.push(newMember);\n          newmember[\"type\"] = \"add\";\n        }\n      });\n\n      if (membersList.length) {\n        this.setState({\n          addingMembers: true\n        });\n        const membersToAdd = [];\n        CometChat.addMembersToGroup(guid, membersList, []).then(response => {\n          if (Object.keys(response).length) {\n            for (const member in response) {\n              if (response[member] === \"success\") {\n                const found = this.state.userlist.find(user => user.uid === member);\n                found[\"scope\"] = CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT;\n                membersToAdd.push(found);\n              }\n            }\n\n            this.props.actionGenerated(enums.ACTIONS[\"ADD_GROUP_MEMBER_SUCCESS\"], membersToAdd);\n          }\n\n          this.setState({\n            addingMembers: false\n          });\n          this.props.close();\n        }).catch(error => {\n          this.setState({\n            addingMembers: false,\n            errorMessage: Translator.translate(\"SOMETHING_WRONG\", this.props.lang)\n          });\n        });\n      }\n    };\n\n    this.state = {\n      userlist: [],\n      membersToAdd: [],\n      filteredlist: [],\n      addingMembers: false,\n      decoratorMessage: Translator.translate(\"LOADING\", Translator.getDefaultLanguage()),\n      errorMessage: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.AddMembersManager = new AddMembersManager(this.context);\n    this.AddMembersManager.initializeMembersRequest().then(() => {\n      this.getUsers();\n      this.AddMembersManager.attachListeners(this.userUpdated);\n    });\n  }\n\n  componentWillUnmount() {\n    this.AddMembersManager.removeListeners();\n    this.AddMembersManager = null;\n  }\n\n  render() {\n    const createText = this.state.addingMembers ? Translator.translate(\"ADDING\", this.props.lang) : Translator.translate(\"ADD\", this.props.lang);\n    let addGroupMemberBtn = jsx(\"div\", {\n      css: modalFootStyle(this.props, this.state, addingIcon, this.context),\n      className: \"modal__addmembers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 7\n      }\n    }, jsx(\"button\", {\n      type: \"button\",\n      onClick: this.updateMembers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }\n    }, jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }\n    }, createText)));\n    let messageContainer = null;\n\n    if (this.state.filteredlist.length === 0) {\n      messageContainer = jsx(\"div\", {\n        css: contactMsgStyle(),\n        className: \"members__decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 9\n        }\n      }, jsx(\"p\", {\n        css: contactMsgTxtStyle(this.context),\n        className: \"decorator-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }\n      }, this.state.decoratorMessage));\n      addGroupMemberBtn = null;\n    }\n\n    let currentLetter = \"\";\n    const filteredUserList = [...this.state.filteredlist];\n    const users = filteredUserList.map(user => {\n      const chr = user.name[0].toUpperCase();\n      let firstLetter = null;\n\n      if (chr !== currentLetter) {\n        currentLetter = chr;\n        firstLetter = currentLetter;\n      }\n\n      return jsx(React.Fragment, {\n        key: user.uid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 9\n        }\n      }, jsx(CometChatAddGroupMemberListItem, {\n        theme: this.props.theme,\n        lang: this.props.lang,\n        firstLetter: firstLetter,\n        user: user,\n        changed: this.membersUpdated,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }\n      }));\n    });\n    return jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 7\n      }\n    }, jsx(CometChatBackdrop, {\n      show: true,\n      clicked: this.props.close,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }\n    }), jsx(\"div\", {\n      css: modalWrapperStyle(this.context),\n      className: \"modal__addmembers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }\n    }, jsx(\"span\", {\n      css: modalCloseStyle(clearIcon, this.context),\n      className: \"modal__close\",\n      onClick: this.props.close,\n      title: Translator.translate(\"CLOSE\", this.props.lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }\n    }), jsx(\"div\", {\n      css: modalBodyStyle(),\n      className: \"modal__body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }\n    }, jsx(\"div\", {\n      css: modalCaptionStyle(Translator.getDirection(this.props.lang)),\n      className: \"modal__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 13\n      }\n    }, Translator.translate(\"USERS\", this.props.lang)), jsx(\"div\", {\n      css: modalErrorStyle(this.context),\n      className: \"modal__error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 13\n      }\n    }, this.state.errorMessage), jsx(\"div\", {\n      css: modalSearchStyle(),\n      className: \"modal__search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 13\n      }\n    }, jsx(\"button\", {\n      type: \"button\",\n      className: \"search__button\",\n      css: searchButtonStyle(searchIcon, this.context),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 15\n      }\n    }), jsx(\"input\", {\n      type: \"text\",\n      autoComplete: \"off\",\n      css: searchInputStyle(),\n      className: \"search__input\",\n      placeholder: Translator.translate(\"SEARCH\", this.props.lang),\n      onChange: this.searchUsers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 15\n      }\n    })), messageContainer, jsx(\"div\", {\n      css: modalListStyle(this.context),\n      onScroll: this.handleScroll,\n      className: \"modal__content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 13\n      }\n    }, users), addGroupMemberBtn)));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatAddGroupMemberList.contextType = CometChatContext;\nCometChatAddGroupMemberList.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatAddGroupMemberList.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatAddGroupMemberList };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Groups/CometChatAddGroupMemberList/index.js"],"names":["React","jsx","PropTypes","CometChat","AddMembersManager","CometChatAddGroupMemberListItem","CometChatBackdrop","CometChatContext","enums","Translator","theme","modalWrapperStyle","modalCloseStyle","modalBodyStyle","modalCaptionStyle","modalSearchStyle","searchButtonStyle","searchInputStyle","modalListStyle","modalFootStyle","contactMsgStyle","contactMsgTxtStyle","modalErrorStyle","CometChatAddGroupMemberList","Component","constructor","props","userUpdated","user","userlist","state","userKey","findIndex","u","k","uid","userObj","newUserObj","Object","assign","splice","setState","handleScroll","e","bottom","Math","round","currentTarget","scrollHeight","scrollTop","clientHeight","getUsers","searchUsers","timeout","clearTimeout","val","target","value","context","initializeMembersRequest","then","setTimeout","membersToAdd","membersToRemove","filteredlist","decoratorMessage","translate","lang","fetchNextUsers","userList","filteredUserList","filter","found","groupMembers","find","member","foundbanned","bannedGroupMembers","length","catch","error","membersUpdated","userState","members","push","IndexFound","updateMembers","guid","item","membersList","forEach","newmember","newMember","GroupMember","GROUP_MEMBER_SCOPE","PARTICIPANT","addingMembers","addMembersToGroup","response","keys","actionGenerated","ACTIONS","close","errorMessage","getDefaultLanguage","componentDidMount","attachListeners","componentWillUnmount","removeListeners","render","createText","addGroupMemberBtn","addingIcon","messageContainer","currentLetter","users","map","chr","name","toUpperCase","firstLetter","clearIcon","getDirection","searchIcon","contextType","defaultProps","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { AddMembersManager } from \"./controller\";\n\nimport { CometChatAddGroupMemberListItem } from \"../\";\nimport { CometChatBackdrop } from \"../../Shared\";\n\nimport { CometChatContext } from \"../../../util/CometChatContext\";\nimport * as enums from \"../../../util/enums.js\";\n\nimport Translator from \"../../../resources/localization/translator\";\nimport { theme } from \"../../../resources/theme\";\n\nimport {\n  modalWrapperStyle,\n  modalCloseStyle,\n  modalBodyStyle,\n  modalCaptionStyle,\n  modalSearchStyle,\n  searchButtonStyle,\n  searchInputStyle,\n  modalListStyle,\n  modalFootStyle,\n  contactMsgStyle,\n  contactMsgTxtStyle,\n  modalErrorStyle,\n} from \"./style\";\n\nimport addingIcon from \"./resources/adding.svg\";\nimport searchIcon from \"./resources/search.svg\";\nimport clearIcon from \"./resources/close.svg\";\n\nclass CometChatAddGroupMemberList extends React.Component {\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      userlist: [],\n      membersToAdd: [],\n      filteredlist: [],\n      addingMembers: false,\n      decoratorMessage: Translator.translate(\n        \"LOADING\",\n        Translator.getDefaultLanguage()\n      ),\n      errorMessage: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.AddMembersManager = new AddMembersManager(this.context);\n    this.AddMembersManager.initializeMembersRequest().then(() => {\n      this.getUsers();\n      this.AddMembersManager.attachListeners(this.userUpdated);\n    });\n  }\n\n  componentWillUnmount() {\n    this.AddMembersManager.removeListeners();\n    this.AddMembersManager = null;\n  }\n\n  userUpdated = (user) => {\n    let userlist = [...this.state.userlist];\n\n    //search for user\n    let userKey = userlist.findIndex((u, k) => u.uid === user.uid);\n\n    //if found in the list, update user object\n    if (userKey > -1) {\n      let userObj = userlist[userKey];\n      let newUserObj = Object.assign({}, userObj, user);\n      userlist.splice(userKey, 1, newUserObj);\n\n      this.setState({ userlist: userlist });\n    }\n  };\n\n  handleScroll = (e) => {\n    const bottom =\n      Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) ===\n      Math.round(e.currentTarget.clientHeight);\n    if (bottom) this.getUsers();\n  };\n\n  searchUsers = (e) => {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n\n    let val = e.target.value;\n\n    this.AddMembersManager = new AddMembersManager(this.context, val);\n    this.AddMembersManager.initializeMembersRequest().then(() => {\n      this.timeout = setTimeout(() => {\n        this.setState(\n          {\n            userlist: [],\n            membersToAdd: [],\n            membersToRemove: [],\n            filteredlist: [],\n            decoratorMessage: Translator.translate(\"LOADING\", this.props.lang),\n          },\n          () => this.getUsers()\n        );\n      }, 500);\n    });\n  };\n\n  getUsers = () => {\n    this.AddMembersManager.fetchNextUsers()\n      .then((userList) => {\n        const filteredUserList = userList.filter((user) => {\n          const found = this.context.groupMembers.find(\n            (member) => user.uid === member.uid\n          );\n          const foundbanned = this.context.bannedGroupMembers.find(\n            (member) => user.uid === member.uid\n          );\n          if (found || foundbanned) {\n            return false;\n          }\n          return true;\n        });\n\n        if (filteredUserList.length === 0) {\n          this.setState({\n            decoratorMessage: Translator.translate(\n              \"NO_USERS_FOUND\",\n              this.props.lang\n            ),\n          });\n        }\n\n        this.setState({\n          userlist: [...this.state.userlist, ...userList],\n          filteredlist: [...this.state.filteredlist, ...filteredUserList],\n        });\n      })\n      .catch((error) =>\n        this.setState({\n          decoratorMessage: Translator.translate(\n            \"SOMETHING_WRONG\",\n            this.props.lang\n          ),\n        })\n      );\n  };\n\n  membersUpdated = (user, userState) => {\n    if (userState) {\n      const members = [...this.state.membersToAdd];\n      members.push(user);\n      this.setState({ membersToAdd: [...members] });\n    } else {\n      const membersToAdd = [...this.state.membersToAdd];\n      const IndexFound = membersToAdd.findIndex(\n        (member) => member.uid === user.uid\n      );\n      if (IndexFound > -1) {\n        membersToAdd.splice(IndexFound, 1);\n        this.setState({ membersToAdd: [...membersToAdd] });\n      }\n    }\n  };\n\n  updateMembers = () => {\n    const guid = this.context.item.guid;\n    const membersList = [];\n\n    this.state.membersToAdd.forEach((newmember) => {\n      //if a selected member is already part of the member list, don't add\n      const IndexFound = this.context.groupMembers.findIndex(\n        (member) => member.uid === newmember.uid\n      );\n      if (IndexFound === -1) {\n        const newMember = new CometChat.GroupMember(\n          newmember.uid,\n          CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT\n        );\n        membersList.push(newMember);\n\n        newmember[\"type\"] = \"add\";\n      }\n    });\n\n    if (membersList.length) {\n      this.setState({ addingMembers: true });\n\n      const membersToAdd = [];\n      CometChat.addMembersToGroup(guid, membersList, [])\n        .then((response) => {\n          if (Object.keys(response).length) {\n            for (const member in response) {\n              if (response[member] === \"success\") {\n                const found = this.state.userlist.find(\n                  (user) => user.uid === member\n                );\n                found[\"scope\"] = CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT;\n                membersToAdd.push(found);\n              }\n            }\n\n            this.props.actionGenerated(\n              enums.ACTIONS[\"ADD_GROUP_MEMBER_SUCCESS\"],\n              membersToAdd\n            );\n          }\n          this.setState({ addingMembers: false });\n          this.props.close();\n        })\n        .catch((error) => {\n          this.setState({\n            addingMembers: false,\n            errorMessage: Translator.translate(\n              \"SOMETHING_WRONG\",\n              this.props.lang\n            ),\n          });\n        });\n    }\n  };\n\n  render() {\n    const createText = this.state.addingMembers\n      ? Translator.translate(\"ADDING\", this.props.lang)\n      : Translator.translate(\"ADD\", this.props.lang);\n    let addGroupMemberBtn = (\n      <div\n        css={modalFootStyle(this.props, this.state, addingIcon, this.context)}\n        className=\"modal__addmembers\"\n      >\n        <button type=\"button\" onClick={this.updateMembers}>\n          <span>{createText}</span>\n        </button>\n      </div>\n    );\n\n    let messageContainer = null;\n    if (this.state.filteredlist.length === 0) {\n      messageContainer = (\n        <div css={contactMsgStyle()} className=\"members__decorator-message\">\n          <p\n            css={contactMsgTxtStyle(this.context)}\n            className=\"decorator-message\"\n          >\n            {this.state.decoratorMessage}\n          </p>\n        </div>\n      );\n      addGroupMemberBtn = null;\n    }\n\n    let currentLetter = \"\";\n    const filteredUserList = [...this.state.filteredlist];\n    const users = filteredUserList.map((user) => {\n      const chr = user.name[0].toUpperCase();\n      let firstLetter = null;\n      if (chr !== currentLetter) {\n        currentLetter = chr;\n        firstLetter = currentLetter;\n      }\n\n      return (\n        <React.Fragment key={user.uid}>\n          <CometChatAddGroupMemberListItem\n            theme={this.props.theme}\n            lang={this.props.lang}\n            firstLetter={firstLetter}\n            user={user}\n            changed={this.membersUpdated}\n          />\n        </React.Fragment>\n      );\n    });\n\n    return (\n      <React.Fragment>\n        <CometChatBackdrop show={true} clicked={this.props.close} />\n        <div\n          css={modalWrapperStyle(this.context)}\n          className=\"modal__addmembers\"\n        >\n          <span\n            css={modalCloseStyle(clearIcon, this.context)}\n            className=\"modal__close\"\n            onClick={this.props.close}\n            title={Translator.translate(\"CLOSE\", this.props.lang)}\n          ></span>\n          <div css={modalBodyStyle()} className=\"modal__body\">\n            <div\n              css={modalCaptionStyle(Translator.getDirection(this.props.lang))}\n              className=\"modal__title\"\n            >\n              {Translator.translate(\"USERS\", this.props.lang)}\n            </div>\n            <div css={modalErrorStyle(this.context)} className=\"modal__error\">\n              {this.state.errorMessage}\n            </div>\n            <div css={modalSearchStyle()} className=\"modal__search\">\n              <button\n                type=\"button\"\n                className=\"search__button\"\n                css={searchButtonStyle(searchIcon, this.context)}\n              />\n              <input\n                type=\"text\"\n                autoComplete=\"off\"\n                css={searchInputStyle()}\n                className=\"search__input\"\n                placeholder={Translator.translate(\"SEARCH\", this.props.lang)}\n                onChange={this.searchUsers}\n              />\n            </div>\n            {messageContainer}\n            <div\n              css={modalListStyle(this.context)}\n              onScroll={this.handleScroll}\n              className=\"modal__content\"\n            >\n              {users}\n            </div>\n            {addGroupMemberBtn}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n// Specifies the default values for props:\nCometChatAddGroupMemberList.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n};\n\nCometChatAddGroupMemberList.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport { CometChatAddGroupMemberList };\n"]},"metadata":{},"sourceType":"module"}