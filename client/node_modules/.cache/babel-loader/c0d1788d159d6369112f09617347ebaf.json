{"ast":null,"code":"import _extends from \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatReceiverPollMessageBubble/index.js\";\nimport React from \"react\";\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatMessageActions, CometChatThreadedMessageReplyCount, CometChatReadReceipt } from \"../../\";\nimport { CometChatMessageReactions } from \"../\";\nimport { CometChatAvatar } from \"../../../Shared\";\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport { checkMessageForExtensionsData } from \"../../../../util/common\";\nimport * as enums from \"../../../../util/enums.js\";\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\nimport { messageContainerStyle, messageWrapperStyle, messageThumbnailStyle, messageDetailStyle, nameWrapperStyle, nameStyle, messageTxtContainerStyle, messageTxtWrapperStyle, pollQuestionStyle, pollAnswerStyle, pollPercentStyle, answerWrapperStyle, checkIconStyle, pollTotalStyle, messageInfoWrapperStyle, messageReactionsWrapperStyle } from \"./style\";\nimport checkImg from \"./resources/checkmark.svg\";\n\nclass CometChatReceiverPollMessageBubble extends React.Component {\n  constructor(props) {\n    super(props);\n    this.requestInProgress = null;\n    this.messageFrom = \"receiver\";\n\n    this.answerPollQuestion = (event, selectedOption) => {\n      CometChat.callExtension(\"polls\", \"POST\", \"v2/vote\", {\n        vote: selectedOption,\n        id: this.pollId\n      }).then(response => {\n        if (response.hasOwnProperty(\"success\") === false || response.hasOwnProperty(\"success\") && response[\"success\"] === false) {\n          this.props.actionGenerated(enums.ACTIONS[\"ERROR\"], [], \"SOMETHING_WRONG\");\n        }\n      }).catch(error => this.props.actionGenerated(enums.ACTIONS[\"ERROR\"], [], \"SOMETHING_WRONG\"));\n    };\n\n    this.handleMouseHover = () => {\n      this.setState(this.toggleHoverState);\n    };\n\n    this.toggleHoverState = state => {\n      return {\n        isHovering: !state.isHovering\n      };\n    };\n\n    const message = Object.assign({}, props.message, {\n      messageFrom: this.messageFrom\n    });\n    this.state = {\n      message: message,\n      isHovering: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const previousMessageStr = JSON.stringify(prevProps.message);\n    const currentMessageStr = JSON.stringify(this.props.message);\n\n    if (previousMessageStr !== currentMessageStr) {\n      const message = Object.assign({}, this.props.message, {\n        messageFrom: this.messageFrom\n      });\n      this.setState({\n        message: message\n      });\n    }\n  }\n\n  render() {\n    if (!this.state.message.hasOwnProperty(\"metadata\")) {\n      return null;\n    }\n\n    if (!this.state.message.metadata.hasOwnProperty(\"@injected\")) {\n      return null;\n    }\n\n    if (!this.state.message.metadata[\"@injected\"].hasOwnProperty(\"extensions\")) {\n      return null;\n    }\n\n    if (!this.state.message.metadata[\"@injected\"][\"extensions\"].hasOwnProperty(\"polls\")) {\n      return null;\n    }\n\n    let avatar = null,\n        name = null;\n\n    if (this.state.message.receiverType === CometChat.RECEIVER_TYPE.GROUP) {\n      avatar = jsx(\"div\", {\n        css: messageThumbnailStyle,\n        className: \"message__thumbnail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }\n      }, jsx(CometChatAvatar, {\n        user: this.state.message.sender,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }\n      }));\n      name = jsx(\"div\", {\n        css: nameWrapperStyle(avatar),\n        className: \"message__name__wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }\n      }, jsx(\"span\", {\n        css: nameStyle(this.context),\n        className: \"message__name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }\n      }, this.state.message.sender.name));\n    }\n\n    const pollOptions = [];\n    const pollExtensionData = this.state.message.metadata[\"@injected\"][\"extensions\"][\"polls\"];\n    this.pollId = pollExtensionData.id;\n    const total = pollExtensionData.results.total;\n    let totalText = Translator.translate(\"NO_VOTE\", this.props.lang);\n\n    if (total === 1) {\n      totalText = `${total} ${Translator.translate(\"VOTE\", this.props.lang)}`;\n    } else if (total > 1) {\n      totalText = `${total} ${Translator.translate(\"VOTES\", this.props.lang)}`;\n    }\n\n    for (const option in pollExtensionData.options) {\n      const optionData = pollExtensionData.results.options[option];\n      const vote = optionData[\"count\"];\n      let width = \"0%\";\n\n      if (total) {\n        const fraction = vote / total;\n        width = fraction.toLocaleString(\"en\", {\n          style: \"percent\"\n        });\n      }\n\n      let checkIcon = null;\n\n      if (optionData.hasOwnProperty(\"voters\") && optionData.voters.hasOwnProperty(this.props.loggedInUser.uid)) {\n        checkIcon = jsx(\"i\", {\n          css: checkIconStyle(checkImg, this.context),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 21\n          }\n        });\n      }\n\n      const template = jsx(\"li\", {\n        key: option,\n        onClick: event => this.answerPollQuestion(event, option),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 9\n        }\n      }, jsx(\"div\", {\n        css: pollPercentStyle(this.context, width),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }\n      }, \" \"), jsx(\"div\", {\n        css: answerWrapperStyle(this.props, optionData, this.context),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }\n      }, checkIcon, jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }\n      }, width), jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }\n      }, optionData.text)));\n      pollOptions.push(template);\n    }\n\n    let messageReactions = null;\n    const reactionsData = checkMessageForExtensionsData(this.state.message, \"reactions\");\n\n    if (reactionsData) {\n      if (Object.keys(reactionsData).length) {\n        messageReactions = jsx(\"div\", {\n          css: messageReactionsWrapperStyle(),\n          className: \"message__reaction__wrapper\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 11\n          }\n        }, jsx(CometChatMessageReactions, _extends({}, this.props, {\n          message: this.state.message,\n          reaction: reactionsData,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }\n        })));\n      }\n    }\n\n    let toolTipView = null;\n\n    if (this.state.isHovering) {\n      toolTipView = jsx(CometChatMessageActions, _extends({}, this.props, {\n        message: this.state.message,\n        name: name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    return jsx(\"div\", {\n      css: messageContainerStyle(),\n      className: \"receiver__message__container message__poll\",\n      onMouseEnter: this.handleMouseHover,\n      onMouseLeave: this.handleMouseHover,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 7\n      }\n    }, jsx(\"div\", {\n      css: messageWrapperStyle(),\n      className: \"message__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }\n    }, avatar, jsx(\"div\", {\n      css: messageDetailStyle(),\n      className: \"message__details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }\n    }, name, toolTipView, jsx(\"div\", {\n      css: messageTxtContainerStyle(),\n      className: \"message__poll__container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 13\n      }\n    }, jsx(\"div\", {\n      css: messageTxtWrapperStyle(this.context),\n      className: \"message__poll__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 15\n      }\n    }, jsx(\"p\", {\n      css: pollQuestionStyle(),\n      className: \"poll__question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }\n    }, pollExtensionData.question), jsx(\"ul\", {\n      css: pollAnswerStyle(this.context),\n      className: \"poll__options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }\n    }, pollOptions), jsx(\"p\", {\n      css: pollTotalStyle(),\n      className: \"poll__votes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }\n    }, totalText))), messageReactions, jsx(\"div\", {\n      css: messageInfoWrapperStyle(),\n      className: \"message__info__wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 13\n      }\n    }, jsx(CometChatReadReceipt, _extends({}, this.props, {\n      message: this.state.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 15\n      }\n    })), jsx(CometChatThreadedMessageReplyCount, _extends({}, this.props, {\n      message: this.state.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 15\n      }\n    }))))));\n  }\n\n} // Specifies the default values for props:\n\n\nCometChatReceiverPollMessageBubble.contextType = CometChatContext;\nCometChatReceiverPollMessageBubble.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme\n};\nCometChatReceiverPollMessageBubble.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object\n};\nexport { CometChatReceiverPollMessageBubble };","map":{"version":3,"sources":["/Users/timmereeestes/Desktop/Keaton/family_messaging/client/src/CometChatWorkspace/src/components/Messages/Extensions/CometChatReceiverPollMessageBubble/index.js"],"names":["React","jsx","PropTypes","CometChat","CometChatMessageActions","CometChatThreadedMessageReplyCount","CometChatReadReceipt","CometChatMessageReactions","CometChatAvatar","CometChatContext","checkMessageForExtensionsData","enums","theme","Translator","messageContainerStyle","messageWrapperStyle","messageThumbnailStyle","messageDetailStyle","nameWrapperStyle","nameStyle","messageTxtContainerStyle","messageTxtWrapperStyle","pollQuestionStyle","pollAnswerStyle","pollPercentStyle","answerWrapperStyle","checkIconStyle","pollTotalStyle","messageInfoWrapperStyle","messageReactionsWrapperStyle","CometChatReceiverPollMessageBubble","Component","constructor","props","requestInProgress","messageFrom","answerPollQuestion","event","selectedOption","callExtension","vote","id","pollId","then","response","hasOwnProperty","actionGenerated","ACTIONS","catch","error","handleMouseHover","setState","toggleHoverState","state","isHovering","message","Object","assign","componentDidUpdate","prevProps","previousMessageStr","JSON","stringify","currentMessageStr","render","metadata","avatar","name","receiverType","RECEIVER_TYPE","GROUP","sender","context","pollOptions","pollExtensionData","total","results","totalText","translate","lang","option","options","optionData","width","fraction","toLocaleString","style","checkIcon","voters","loggedInUser","uid","checkImg","template","text","push","messageReactions","reactionsData","keys","length","toolTipView","question","contextType","defaultProps","getDefaultLanguage","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"@emotion/react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport {\n  CometChatMessageActions,\n  CometChatThreadedMessageReplyCount,\n  CometChatReadReceipt,\n} from \"../../\";\nimport { CometChatMessageReactions } from \"../\";\nimport { CometChatAvatar } from \"../../../Shared\";\n\nimport { CometChatContext } from \"../../../../util/CometChatContext\";\nimport { checkMessageForExtensionsData } from \"../../../../util/common\";\nimport * as enums from \"../../../../util/enums.js\";\n\nimport { theme } from \"../../../../resources/theme\";\nimport Translator from \"../../../../resources/localization/translator\";\n\nimport {\n  messageContainerStyle,\n  messageWrapperStyle,\n  messageThumbnailStyle,\n  messageDetailStyle,\n  nameWrapperStyle,\n  nameStyle,\n  messageTxtContainerStyle,\n  messageTxtWrapperStyle,\n  pollQuestionStyle,\n  pollAnswerStyle,\n  pollPercentStyle,\n  answerWrapperStyle,\n  checkIconStyle,\n  pollTotalStyle,\n  messageInfoWrapperStyle,\n  messageReactionsWrapperStyle,\n} from \"./style\";\n\nimport checkImg from \"./resources/checkmark.svg\";\n\nclass CometChatReceiverPollMessageBubble extends React.Component {\n  pollId;\n  requestInProgress = null;\n  messageFrom = \"receiver\";\n  static contextType = CometChatContext;\n\n  constructor(props) {\n    super(props);\n\n    const message = Object.assign({}, props.message, {\n      messageFrom: this.messageFrom,\n    });\n    this.state = {\n      message: message,\n      isHovering: false,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const previousMessageStr = JSON.stringify(prevProps.message);\n    const currentMessageStr = JSON.stringify(this.props.message);\n\n    if (previousMessageStr !== currentMessageStr) {\n      const message = Object.assign({}, this.props.message, {\n        messageFrom: this.messageFrom,\n      });\n      this.setState({ message: message });\n    }\n  }\n\n  answerPollQuestion = (event, selectedOption) => {\n    CometChat.callExtension(\"polls\", \"POST\", \"v2/vote\", {\n      vote: selectedOption,\n      id: this.pollId,\n    })\n      .then((response) => {\n        if (\n          response.hasOwnProperty(\"success\") === false ||\n          (response.hasOwnProperty(\"success\") && response[\"success\"] === false)\n        ) {\n          this.props.actionGenerated(\n            enums.ACTIONS[\"ERROR\"],\n            [],\n            \"SOMETHING_WRONG\"\n          );\n        }\n      })\n      .catch((error) =>\n        this.props.actionGenerated(\n          enums.ACTIONS[\"ERROR\"],\n          [],\n          \"SOMETHING_WRONG\"\n        )\n      );\n  };\n\n  handleMouseHover = () => {\n    this.setState(this.toggleHoverState);\n  };\n\n  toggleHoverState = (state) => {\n    return {\n      isHovering: !state.isHovering,\n    };\n  };\n\n  render() {\n    if (!this.state.message.hasOwnProperty(\"metadata\")) {\n      return null;\n    }\n\n    if (!this.state.message.metadata.hasOwnProperty(\"@injected\")) {\n      return null;\n    }\n\n    if (\n      !this.state.message.metadata[\"@injected\"].hasOwnProperty(\"extensions\")\n    ) {\n      return null;\n    }\n\n    if (\n      !this.state.message.metadata[\"@injected\"][\"extensions\"].hasOwnProperty(\n        \"polls\"\n      )\n    ) {\n      return null;\n    }\n\n    let avatar = null,\n      name = null;\n    if (this.state.message.receiverType === CometChat.RECEIVER_TYPE.GROUP) {\n      avatar = (\n        <div css={messageThumbnailStyle} className=\"message__thumbnail\">\n          <CometChatAvatar user={this.state.message.sender} />\n        </div>\n      );\n\n      name = (\n        <div css={nameWrapperStyle(avatar)} className=\"message__name__wrapper\">\n          <span css={nameStyle(this.context)} className=\"message__name\">\n            {this.state.message.sender.name}\n          </span>\n        </div>\n      );\n    }\n\n    const pollOptions = [];\n    const pollExtensionData =\n      this.state.message.metadata[\"@injected\"][\"extensions\"][\"polls\"];\n\n    this.pollId = pollExtensionData.id;\n    const total = pollExtensionData.results.total;\n    let totalText = Translator.translate(\"NO_VOTE\", this.props.lang);\n\n    if (total === 1) {\n      totalText = `${total} ${Translator.translate(\"VOTE\", this.props.lang)}`;\n    } else if (total > 1) {\n      totalText = `${total} ${Translator.translate(\"VOTES\", this.props.lang)}`;\n    }\n\n    for (const option in pollExtensionData.options) {\n      const optionData = pollExtensionData.results.options[option];\n      const vote = optionData[\"count\"];\n\n      let width = \"0%\";\n      if (total) {\n        const fraction = vote / total;\n        width = fraction.toLocaleString(\"en\", { style: \"percent\" });\n      }\n\n      let checkIcon = null;\n      if (\n        optionData.hasOwnProperty(\"voters\") &&\n        optionData.voters.hasOwnProperty(this.props.loggedInUser.uid)\n      ) {\n        checkIcon = <i css={checkIconStyle(checkImg, this.context)}></i>;\n      }\n\n      const template = (\n        <li\n          key={option}\n          onClick={(event) => this.answerPollQuestion(event, option)}\n        >\n          <div css={pollPercentStyle(this.context, width)}> </div>\n          <div css={answerWrapperStyle(this.props, optionData, this.context)}>\n            {checkIcon}\n            <span>{width}</span>\n            <p>{optionData.text}</p>\n          </div>\n        </li>\n      );\n      pollOptions.push(template);\n    }\n\n    let messageReactions = null;\n    const reactionsData = checkMessageForExtensionsData(\n      this.state.message,\n      \"reactions\"\n    );\n    if (reactionsData) {\n      if (Object.keys(reactionsData).length) {\n        messageReactions = (\n          <div\n            css={messageReactionsWrapperStyle()}\n            className=\"message__reaction__wrapper\"\n          >\n            <CometChatMessageReactions\n              {...this.props}\n              message={this.state.message}\n              reaction={reactionsData}\n            />\n          </div>\n        );\n      }\n    }\n\n    let toolTipView = null;\n    if (this.state.isHovering) {\n      toolTipView = (\n        <CometChatMessageActions\n          {...this.props}\n          message={this.state.message}\n          name={name}\n        />\n      );\n    }\n\n    return (\n      <div\n        css={messageContainerStyle()}\n        className=\"receiver__message__container message__poll\"\n        onMouseEnter={this.handleMouseHover}\n        onMouseLeave={this.handleMouseHover}\n      >\n        <div css={messageWrapperStyle()} className=\"message__wrapper\">\n          {avatar}\n          <div css={messageDetailStyle()} className=\"message__details\">\n            {name}\n            {toolTipView}\n            <div\n              css={messageTxtContainerStyle()}\n              className=\"message__poll__container\"\n            >\n              <div\n                css={messageTxtWrapperStyle(this.context)}\n                className=\"message__poll__wrapper\"\n              >\n                <p css={pollQuestionStyle()} className=\"poll__question\">\n                  {pollExtensionData.question}\n                </p>\n                <ul\n                  css={pollAnswerStyle(this.context)}\n                  className=\"poll__options\"\n                >\n                  {pollOptions}\n                </ul>\n                <p css={pollTotalStyle()} className=\"poll__votes\">\n                  {totalText}\n                </p>\n              </div>\n            </div>\n\n            {messageReactions}\n\n            <div\n              css={messageInfoWrapperStyle()}\n              className=\"message__info__wrapper\"\n            >\n              <CometChatReadReceipt\n                {...this.props}\n                message={this.state.message}\n              />\n              <CometChatThreadedMessageReplyCount\n                {...this.props}\n                message={this.state.message}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// Specifies the default values for props:\nCometChatReceiverPollMessageBubble.defaultProps = {\n  lang: Translator.getDefaultLanguage(),\n  theme: theme,\n};\n\nCometChatReceiverPollMessageBubble.propTypes = {\n  lang: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport { CometChatReceiverPollMessageBubble };\n"]},"metadata":{},"sourceType":"module"}